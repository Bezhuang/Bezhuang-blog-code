<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式</title>
      <link href="/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp JavaScript 算法和数据结构第三章。正则表达式，常常缩写为 “regex” 或 “regexp”，是帮助程序员匹配、搜索和替换文本的模式。正则表达式非常强大，但可能难以阅读，因为它们使用特殊字符来做更复杂更灵活的匹配。在正则表达式的课程中，学习如何使用特殊字符、捕获组、正向或负向先行断言以及其他技巧来匹配你想要的文本。</p></blockquote><span id="more"></span><h3 id="一、文字匹配"><a href="#一、文字匹配" class="headerlink" title="一、文字匹配"></a>一、文字匹配</h3><p>在编程语言中，正则表达式用于匹配指定的字符串。 通过正则表达式创建匹配模式（规则）可以帮你完成指定匹配。</p><p>正则表达式中不需要引号。如果想要在字符串 <code>The dog chased the cat</code> 中匹配到 <code>the</code> 这个单词，可以使用如下正则表达式：<code>/the/</code>。 </p><p> 测试正则表达式的一种方法是使用 <code>.test()</code> 方法。 <code>.test()</code> 方法会把编写的正则表达式和字符串（即括号内的内容）匹配，如果成功匹配到字符，则返回 <code>true</code>，反之，返回 <code>false</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testStr = <span class="string">&quot;freeCodeCamp&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> testRegex = <span class="regexp">/Code/</span>;</span><br><span class="line">testRegex.<span class="title function_">test</span>(testStr);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以使用 <code>alternation</code> 或 <code>OR</code> 操作符搜索多个模式：使用 <code>|</code> 操作符匹配操作符前面或后面的字符。 例如，如果你想匹配 <code>yes</code> 或 <code>no</code>，你需要的正则表达式是 <code>/yes|no/</code>。</p><p>你还可以匹配多个规则，这可以通过添加更多的匹配模式来实现。 这些匹配模式将包含更多的 <code>OR</code> 操作符来分隔它们，比如<code>/yes|no|maybe/</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> petString = <span class="string">&quot;James has a pet cat.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> petRegex = <span class="regexp">/dog|cat|bird|fish/</span>;  <span class="comment">// 使用正则表达式 petRegex 以匹配 dog、cat、bird 或者 fish</span></span><br><span class="line"><span class="keyword">let</span> result = petRegex.<span class="title function_">test</span>(petString);</span><br></pre></td></tr></table></figure><p>可以使用标志（flag）来匹配字母大小写两种情况。 可以通过将忽略大小写的标志 <code>i</code> 附加到正则表达式之后来使用它。 这里给出使用该标志的一个实例 <code>/ignorecase/i</code>， 这个字符串可以匹配字符串 <code>ignorecase</code>、<code>igNoreCase</code> 和 <code>IgnoreCase</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myString = <span class="string">&quot;freeCodeCamp&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> fccRegex = <span class="regexp">/freecodecamp/i</span>;  <span class="comment">// 忽略大小写</span></span><br><span class="line"><span class="keyword">let</span> result = fccRegex.<span class="title function_">test</span>(myString);</span><br></pre></td></tr></table></figure><p>可以使用 <code>.match()</code> 方法来提取找到的实际匹配项。可以使用字符串来调用 <code>.match()</code> 方法，并在括号内传入正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Hello, World!&quot;</span>.<span class="title function_">match</span>(<span class="regexp">/Hello/</span>);  <span class="comment">// 返回 [&quot;Hello&quot;]</span></span><br><span class="line"><span class="keyword">let</span> ourStr = <span class="string">&quot;Regular expressions&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> ourRegex = <span class="regexp">/expressions/</span>;</span><br><span class="line">ourStr.<span class="title function_">match</span>(ourRegex);    <span class="comment">// 返回 [&quot;expressions&quot;]</span></span><br></pre></td></tr></table></figure><p>全局匹配：若要多次搜寻或提取模式匹配，可以使用 <code>g</code> 标志。在正则表达式上可以有多个标志，比如 <code>/search/gi</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testStr = <span class="string">&quot;Repeat, Repeat, Repeat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> repeatRegex = <span class="regexp">/Repeat/g</span>;</span><br><span class="line">testStr.<span class="title function_">match</span>(repeatRegex);  <span class="comment">// 返回值 [&quot;Repeat&quot;, &quot;Repeat&quot;, &quot;Repeat&quot;]</span></span><br></pre></td></tr></table></figure><p>通配符 <code>.</code> 将匹配任何一个字符。 通配符也叫 <code>dot</code> 或 <code>period</code>。 可以像使用正则表达式中任何其他字符一样使用通配符。 例如，如果想匹配 <code>hug</code>、<code>huh</code>、<code>hut</code> 和 <code>hum</code>，可以使用正则表达式 <code>/hu./</code> 匹配以上四个单词。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> humStr = <span class="string">&quot;I&#x27;ll hum a song&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> hugStr = <span class="string">&quot;Bear hug&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> huRegex = <span class="regexp">/hu./</span>;</span><br><span class="line">huRegex.<span class="title function_">test</span>(humStr);    <span class="comment">// true</span></span><br><span class="line">huRegex.<span class="title function_">test</span>(hugStr);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="二、字符集匹配"><a href="#二、字符集匹配" class="headerlink" title="二、字符集匹配"></a>二、字符集匹配</h3><p>文字匹配模式（<code>/literal/</code>）和通配符（<code>/./</code>）是正则表达式的两种极端情况，一种是精确匹配，而另一种则是匹配所有。 在这两种极端情况之间有一个平衡选项。</p><p>可以使用字符集 （character classes）更灵活的匹配字符。 可以把字符集放在方括号（<code>[</code> 和 <code>]</code>）之间来定义一组需要匹配的字符串。例如，如果想要匹配 <code>bag</code>、<code>big</code> 和 <code>bug</code>，但是不想匹配 <code>bog</code>。 可以创建正则表达式 <code>/b[aiu]g/</code> 来执行此操作。 <code>[aiu]</code> 是只匹配字符 <code>a</code>、<code>i</code> 或者 <code>u</code> 的字符集。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quoteSample = <span class="string">&quot;Beware of bugs in the above code; I have only proved it correct, not tried it.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> vowelRegex = <span class="regexp">/[aeiou]/ig</span>;  <span class="comment">// 使用元音字符集（a、e、i、o、u）在正则表达式 vowelRegex 中匹配到字符串 quoteSample 中的所有元音。</span></span><br><span class="line"><span class="keyword">let</span> result = quoteSample.<span class="title function_">match</span>(vowelRegex); </span><br></pre></td></tr></table></figure><p>在字符集中，可以使用连字符（<code>-</code>）来定义要匹配的字符范围。例如，要匹配小写字母 <code>a</code> 到 <code>e</code>，你可以使用 <code>[a-e]</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quoteSample = <span class="string">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> alphabetRegex = <span class="regexp">/[a-z]/ig</span>; <span class="comment">// 匹配字符串 quoteSample 中的所有字母。 </span></span><br><span class="line"><span class="keyword">let</span> result = quoteSample.<span class="title function_">match</span>(alphabetRegex); </span><br></pre></td></tr></table></figure><p>使用连字符（<code>-</code>）匹配字符范围并不仅限于字母。 它还可以匹配一系列数字。例如，<code>/[0-5]/</code> 匹配 <code>0</code> 和 <code>5</code> 之间的任意数字，包含 <code>0</code> 和 <code>5</code>。此外，还可以在单个字符集中组合一系列字母和数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jennyStr = <span class="string">&quot;Jenny8675309&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myRegex = <span class="regexp">/[a-z0-9]/ig</span>;</span><br><span class="line">jennyStr.<span class="title function_">match</span>(myRegex);</span><br></pre></td></tr></table></figure><p>也可以创建一个不想匹配的字符集合。 这些类型的字符集称为否定字符集（ negated character sets）。</p><p>要创建否定字符集，需要在开始括号后面和不想匹配的字符前面放置脱字符（即<code>^</code>）。例如，<code>/[^aeiou]/gi</code> 匹配所有非元音字符。 注意，字符 <code>.</code>、<code>!</code>、<code>[</code>、<code>@</code>、<code>/</code> 和空白字符等也会被匹配，该否定字符集仅排除元音字符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quoteSample = <span class="string">&quot;3 blind mice.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myRegex = <span class="regexp">/[^aeiou0-9]/ig</span>;   <span class="comment">// 创建一个匹配所有非数字或元音字符的正则表达式。 </span></span><br><span class="line"><span class="keyword">let</span> result = quoteSample.<span class="title function_">match</span>(myRegex); </span><br></pre></td></tr></table></figure><p>有时，需要匹配出现一次或者连续多次的的字符（或字符组）。 这意味着它至少出现一次，并且可能重复出现。</p><p>可以使用 <code>+</code> 符号来检查情况是否如此。 记住，字符或匹配模式必须一个接一个地连续出现。 这就是说，字符必须一个接一个地重复。</p><p>例如，<code>/a+/g</code> 会在 <code>abc</code> 中匹配到一个匹配项，并且返回 <code>[&quot;a&quot;]</code>。 因为 <code>+</code> 的存在，它也会在 <code>aabc</code> 中匹配到一个匹配项，然后返回 <code>[&quot;aa&quot;]</code>。如果它是检查字符串 <code>abab</code>，它将匹配到两个匹配项并且返回<code>[&quot;a&quot;, &quot;a&quot;]</code>，因为<code>a</code>字符不连续，在它们之间有一个<code>b</code>字符。 最后，因为在字符串 <code>bcd</code> 中没有 <code>a</code>，因此找不到匹配项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> difficultSpelling = <span class="string">&quot;Mississippi&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myRegex = <span class="regexp">/s+/g</span>;    <span class="comment">// 在字符串 Mississippi 中匹配到出现一次或多次的字母 s 的匹配项。  </span></span><br><span class="line"><span class="keyword">let</span> result = difficultSpelling.<span class="title function_">match</span>(myRegex);</span><br></pre></td></tr></table></figure><p>有一个选项可以匹配出现零次或多次的字符。执行该操作的字符叫做星号，即<code>*</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chewieQuote 已经被初始化为 Aaaaaaaaaaaaaaaarrrgh!</span></span><br><span class="line"><span class="keyword">let</span> chewieRegex = <span class="regexp">/Aa*/</span>; <span class="comment">// 使用 * 在 chewieQuote 中匹配 A 及其之后出现的零个或多个a。</span></span><br><span class="line"><span class="keyword">let</span> result = chewieQuote.<span class="title function_">match</span>(chewieRegex);</span><br></pre></td></tr></table></figure><p>贪婪（greedy）匹配会匹配到符合正则表达式匹配模式的字符串的最长可能部分，并将其作为匹配项返回。 另一种方案称为懒惰（lazy）匹配，它会匹配到满足正则表达式的字符串的最小可能部分。</p><p>可以将正则表达式 <code>/t[a-z]*i/</code> 应用于字符串 <code>&quot;titanic&quot;</code>。 这个正则表达式是一个以 <code>t</code> 开始，以 <code>i</code> 结束，并且中间有一些字母的匹配模式。正则表达式默认是贪婪匹配，因此匹配返回为 <code>[&quot;titani&quot;]</code>。 它会匹配到适合该匹配模式的最大子字符串。</p><p>但是，你可以使用 <code>?</code> 字符来将其变成懒惰匹配。 调整后的正则表达式 <code>/t[a-z]*?i/</code> 匹配字符串 <code>&quot;titanic&quot;</code> 返回 <code>[&quot;ti&quot;]</code>。</p><p>应该避免使用正则表达式解析 HTML，但是可以用正则表达式匹配 HTML 字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;&lt;h1&gt;Winter is coming&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myRegex = <span class="regexp">/&lt;h.*?1&gt;/</span>;  <span class="comment">// 让正则表达式返回 HTML 标签 &lt;h1&gt;，而不是文本 &quot;&lt;h1&gt;Winter is coming&lt;/h1&gt;&quot;。</span></span><br><span class="line"><span class="keyword">let</span> result = text.<span class="title function_">match</span>(myRegex);</span><br></pre></td></tr></table></figure><h3 id="三、字符串匹配"><a href="#三、字符串匹配" class="headerlink" title="三、字符串匹配"></a>三、字符串匹配</h3><p> 除了在字符集中使用之外，插入符号（^）用于匹配文本是否在字符串的开始位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstString = <span class="string">&quot;Ricky is first and can be found.&quot;</span>; </span><br><span class="line"><span class="keyword">let</span> firstRegex = <span class="regexp">/^Ricky/</span>;    <span class="comment">// true</span></span><br><span class="line">firstRegex.<span class="title function_">test</span>(firstString);</span><br><span class="line"><span class="keyword">let</span> notFirst = <span class="string">&quot;You can&#x27;t find Ricky now.&quot;</span>;</span><br><span class="line">firstRegex.<span class="title function_">test</span>(notFirst);    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>可以使用正则表达式的美元符号 <code>$</code> 来搜寻字符串的结尾。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> theEnding = <span class="string">&quot;This is a never ending story&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> storyRegex = <span class="regexp">/story$/</span>;</span><br><span class="line">storyRegex.<span class="title function_">test</span>(theEnding);    <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> noEnding = <span class="string">&quot;Sometimes a story will have to end&quot;</span>;</span><br><span class="line">storyRegex.<span class="title function_">test</span>(noEnding);    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>使用元字符，可以使用 <code>[a-z]</code> 搜寻字母表中的所有字母。 这种元字符是很常见的，它有一个缩写，但这个缩写也包含额外的字符。这些元字符缩写也被称为短语元字符 shorthand character classes。</p><p>JavaScript 中与字母表匹配的最接近的元字符是<code>\w</code>。 这个缩写等同于<code>[A-Za-z0-9_]</code>。 此字符类匹配大写字母和小写字母以及数字。 注意，这个字符类也包含下划线字符 (<code>_</code>)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> longHand = <span class="regexp">/[A-Za-z0-9_]+/</span>;</span><br><span class="line"><span class="keyword">let</span> shortHand = <span class="regexp">/\w+/</span>;</span><br><span class="line"><span class="keyword">let</span> numbers = <span class="string">&quot;42&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> varNames = <span class="string">&quot;important_var&quot;</span>;</span><br><span class="line">longHand.<span class="title function_">test</span>(numbers);    <span class="comment">// true</span></span><br><span class="line">shortHand.<span class="title function_">test</span>(numbers);    <span class="comment">// true</span></span><br><span class="line">longHand.<span class="title function_">test</span>(varNames);    <span class="comment">// true</span></span><br><span class="line">shortHand.<span class="title function_">test</span>(varNames);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>匹配除了字母和数字的所有符号可以使用 <code>\W</code> 搜寻和 <code>\w</code> 相反的匹配模式。 注意，相反匹配模式使用大写字母。 此缩写与 <code>[^A-Za-z0-9_]</code> 是一样的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shortHand = <span class="regexp">/\W/</span>;</span><br><span class="line"><span class="keyword">let</span> numbers = <span class="string">&quot;42%&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> sentence = <span class="string">&quot;Coding!&quot;</span>;</span><br><span class="line">numbers.<span class="title function_">match</span>(shortHand);    <span class="comment">// [&quot;%&quot;]</span></span><br><span class="line">sentence.<span class="title function_">match</span>(shortHand);    <span class="comment">// [&quot;!&quot;]</span></span><br></pre></td></tr></table></figure><p>另一个常见的匹配模式是只寻找数字。查找数字字符的缩写是 <code>\d</code>，注意是小写的 <code>d</code>。 这等同于元字符 <code>[0-9]</code>，它查找 0 到 9 之间任意数字的单个字符。</p><p>也可以使用类似的缩写来搜寻非数字，该缩写使用大写的 <code>D</code>。查找非数字字符的缩写是 <code>\D</code>。 这等同于字符串 <code>[^0-9]</code>，它查找不是 0 - 9 之间数字的单个字符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> movieName = <span class="string">&quot;2001: A Space Odyssey&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> noNumRegex = <span class="regexp">/\D/g</span>;    <span class="comment">// 使用非数字缩写 \D 来计算电影标题中有多少非数字。</span></span><br><span class="line"><span class="keyword">let</span> result = movieName.<span class="title function_">match</span>(noNumRegex).<span class="property">length</span>;</span><br></pre></td></tr></table></figure><p>可以使用 <code>\s</code> 搜寻空格，其中 <code>s</code> 是小写。 此匹配模式将匹配空格、回车符、制表符、换页符和换行符。 可以认为这类似于元字符 <code>[ \r\t\f\n\v]</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> whiteSpace = <span class="string">&quot;Whitespace. Whitespace everywhere!&quot;</span></span><br><span class="line"><span class="keyword">let</span> spaceRegex = <span class="regexp">/\s/g</span>;    </span><br><span class="line">whiteSpace.<span class="title function_">match</span>(spaceRegex);    <span class="comment">// 返回 [&quot; &quot;, &quot; &quot;]</span></span><br></pre></td></tr></table></figure><p>使用 <code>\S</code> 搜寻非空白字符，其中 <code>s</code> 是大写。 此匹配模式将不匹配空格、回车符、制表符、换页符和换行符。 可以认为这类似于元字符 <code>[^ \r\t\f\n\v]</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> whiteSpace = <span class="string">&quot;Whitespace. Whitespace everywhere!&quot;</span></span><br><span class="line"><span class="keyword">let</span> nonSpaceRegex = <span class="regexp">/\S/g</span>;</span><br><span class="line">whiteSpace.<span class="title function_">match</span>(nonSpaceRegex).<span class="property">length</span>;    <span class="comment">// 32</span></span><br></pre></td></tr></table></figure><p>使用数量说明符（quantity specifiers）指定匹配模式的上下限。 数量说明符与花括号（<code>&#123;</code> 和 <code>&#125;</code>）一起使用。 可以在花括号之间放两个数字，这两个数字代表匹配模式的上限和下限。例如，要匹配出现 <code>3</code> 到 <code>5</code> 次字母 <code>a</code> 的在字符串 <code>ah</code>，正则表达式应为<code>/a&#123;3,5&#125;h/</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable constant_">A4</span> = <span class="string">&quot;aaaah&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">A2</span> = <span class="string">&quot;aah&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> multipleA = <span class="regexp">/a&#123;3,5&#125;h/</span>;</span><br><span class="line">multipleA.<span class="title function_">test</span>(<span class="variable constant_">A4</span>);    <span class="comment">// true</span></span><br><span class="line">multipleA.<span class="title function_">test</span>(<span class="variable constant_">A2</span>);    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>但有时候只想指定匹配模式的下限而不需要指定上限，在第一个数字后面跟一个逗号即可。</p><p>要指定一定数量的匹配模式，只需在大括号之间放置一个数字。例如，要只匹配字母 <code>a</code> 出现 <code>3</code> 次的单词<code>hah</code>，正则表达式应为<code>/ha&#123;3&#125;h/</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable constant_">A4</span> = <span class="string">&quot;haaaah&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">A3</span> = <span class="string">&quot;haaah&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">A100</span> = <span class="string">&quot;h&quot;</span> + <span class="string">&quot;a&quot;</span>.<span class="title function_">repeat</span>(<span class="number">100</span>) + <span class="string">&quot;h&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> multipleHA = <span class="regexp">/ha&#123;3&#125;h/</span>;</span><br><span class="line">multipleHA.<span class="title function_">test</span>(<span class="variable constant_">A4</span>);    <span class="comment">// true</span></span><br><span class="line">multipleHA.<span class="title function_">test</span>(<span class="variable constant_">A3</span>);    <span class="comment">// false</span></span><br><span class="line">multipleHA.<span class="title function_">test</span>(<span class="variable constant_">A100</span>);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以使用问号 <code>?</code> 指定可能存在的元素。 这将检查前面的零个或一个元素。 可以将此符号视为前面的元素是可选的。</p><p>例如，美式英语和英式英语略有不同，可以使用问号来匹配两种拼写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> american = <span class="string">&quot;color&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> british = <span class="string">&quot;colour&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> rainbowRegex= <span class="regexp">/colou?r/</span>;</span><br><span class="line">rainbowRegex.<span class="title function_">test</span>(american);    <span class="comment">// true</span></span><br><span class="line">rainbowRegex.<span class="title function_">test</span>(british);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>先行断言 （Lookaheads）是告诉 JavaScript 在字符串中向前查找的匹配模式。 当想要在同一个字符串上搜寻多个匹配模式时，这可能非常有用。</p><p>有两种先行断言：正向先行断言（positive lookahead）和负向先行断言（negative lookahead）。</p><p>正向先行断言会查看并确保搜索匹配模式中的元素存在，但实际上并不匹配。 正向先行断言的用法是 <code>(?=...)</code>，其中 <code>...</code> 就是需要存在但不会被匹配的部分。</p><p>另一方面，负向先行断言会查看并确保搜索匹配模式中的元素不存在。 负向先行断言的用法是 <code>(?!...)</code>，其中 <code>...</code> 是希望不存在的匹配模式。 如果负向先行断言部分不存在，将返回匹配模式的其余部分。</p><p>先行断言的更实际用途是检查一个字符串中的两个或更多匹配模式。 这里有一个简单的密码检查器，密码规则是 3 到 6 个字符且至少包含一个数字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> password = <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> checkPass = <span class="regexp">/(?=\w&#123;3,6&#125;)(?=\D*\d)/</span>;</span><br><span class="line">checkPass.<span class="title function_">test</span>(password);</span><br></pre></td></tr></table></figure><p>有时候我们想使用正则表达式里的括号 <code>()</code> 来检查字符组。</p><p>如果想在字符串找到 <code>Penguin</code> 或 <code>Pumpkin</code>，可以用这个正则表达式：<code>/P(engu|umpk)in/g</code>。然后使用 <code>test()</code> 方法检查 test 字符串里面是否包含字符组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testStr = <span class="string">&quot;Pumpkin&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> testRegex = <span class="regexp">/P(engu|umpk)in/</span>;    </span><br><span class="line">testRegex.<span class="title function_">test</span>(testStr);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>捕获组可以用于找到重复的子字符串。捕获组是通过把要捕获的正则表达式放在括号中来构建的。</p><p>例子：捕获一个包含字母数字字符的词，所以捕获组是将 <code>\w+</code> 放在括号中：<code>/(\w+)/</code>。</p><p>分组匹配的子字符串被保存到一个临时的“变量”， 可以使用同一正则表达式和反斜线及捕获组的编号来访问它（例如：<code>\1</code>）。 捕获组按其开头括号的位置自动编号（从左到右），从 1 开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配被空格隔开的两个相同单词</span></span><br><span class="line"><span class="keyword">let</span> repeatRegex = <span class="regexp">/(\w+) \1 \1/</span>;</span><br><span class="line">repeatRegex.<span class="title function_">test</span>(repeatStr); <span class="comment">// Returns true</span></span><br><span class="line">repeatStr.<span class="title function_">match</span>(repeatRegex); <span class="comment">// Returns [&quot;row row row&quot;, &quot;row&quot;]</span></span><br></pre></td></tr></table></figure><p>搜索功能是很有用的。 但是，当搜索同时也执行更改（或替换）匹配文本的操作时，搜索功能就会显得更加强大。</p><p>可以在字符串上使用 <code>.replace()</code> 方法来搜索并替换字符串中的文本。 <code>.replace()</code> 的输入首先是想要搜索的正则表达式匹配模式。 第二个参数是用于替换匹配的字符串或用于执行某些操作的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wrongText = <span class="string">&quot;The sky is silver.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> silverRegex = <span class="regexp">/silver/</span>;</span><br><span class="line">wrongText.<span class="title function_">replace</span>(silverRegex, <span class="string">&quot;blue&quot;</span>);  <span class="comment">// 返回 The sky is blue.</span></span><br></pre></td></tr></table></figure><p>还可以使用美元符号（<code>$</code>）访问替换字符串中的捕获组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Code Camp&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/(\w+)\s(\w+)/</span>, <span class="string">&#x27;$2 $1&#x27;</span>);  <span class="comment">// 返回字符串 Camp Code</span></span><br></pre></td></tr></table></figure><p>有时字符串周围存在的空白字符并不是必需的。 字符串的典型处理是删除字符串开头和结尾处的空格。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="string">&quot;   Hello, World!  &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> wsRegex = <span class="regexp">/^\s+|\s+$/g</span>; </span><br><span class="line"><span class="keyword">let</span> result = hello.<span class="title function_">replace</span>(wsRegex, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>在 JavaScript 中 <code>String.prototype.trim()</code> 方法也可以实现同样的效果。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 调试</title>
      <link href="/JS%E8%B0%83%E8%AF%95/"/>
      <url>/JS%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp JavaScript 算法和数据结构第四章。调试是检查代码、发现并修复问题的过程。代码中的问题通常有三种形式：1）语法错误导致程序停止运行， 2）代码无法执行或具有意外行为导致运行时错误，3）代码有语义（逻辑）错误，没有实现原来的意图。在 JavaScript 调试的课程中，学习如何使用 JavaScript 控制台来调试程序，防止出现常见问题。</p></blockquote><span id="more"></span><h3 id="一、检查变量"><a href="#一、检查变量" class="headerlink" title="一、检查变量"></a>一、检查变量</h3><p>Chrome 和 Safari 都有出色的 JavaScript 控制台（也称为 DevTools），可以用来调试 JavaScript 代码。</p><p><code>console.log()</code> 方法可能是最有用的调试工具，它可以将括号中的内容输出到控制台。 将它放在代码中的关键点可以显示变量在当时的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">a++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">let</span> sumAB = a + b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sumAB);</span><br></pre></td></tr></table></figure><p>有许多方法可以与 <code>console</code> 一起使用来输出消息，<code>log</code>、<code>warn</code> 和 <code>clear</code> 就是几个例子。 使用 <code>console.log</code> 记录变量，使用 <code>console.clear()</code> 来清除浏览器控制台：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = <span class="string">&quot;Get this to show once in the freeCodeCamp console and not at all in the browser console&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(output);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><p>可以使用 <code>typeof</code> 检查变量的数据结构或类型。 在处理多种数据类型时，这会对调试很有帮助。</p><p> 类型错误可能隐藏在计算或函数调用中。 如果想计算两数之和，但实际传入了一个字符串参数，则结果可能是错误的。当你以 JavaScript 对象（JSON）的形式访问和使用外部数据时尤其要小心。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;&quot;</span>);  <span class="comment">//string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">0</span>);  <span class="comment">//number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []);  <span class="comment">//object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;);  <span class="comment">//object</span></span><br></pre></td></tr></table></figure><p>JavaScript 有七种原始（不可变）数据类型： <code>Boolean</code>，<code>Null</code>，<code>Undefined</code>，<code>Number</code>，<code>String</code>，<code>Symbol</code> （new with ES6），<code>BigInt</code> （new with ES2020）和一种可变数据类型：<code>Object</code>。 注意：在 JavaScript 中，数组在本质上是一种对象。</p><h3 id="二、捕获错误"><a href="#二、捕获错误" class="headerlink" title="二、捕获错误"></a>二、捕获错误</h3><p>JavaScript 变量和函数名称区分大小写。变量或函数名的错写、漏写或大小写弄混都会让浏览器尝试查找并不存在的东西，并报出“引用错误”。</p><p>要注意的另一个语法错误是所有的小括号、方括号、花括号和引号都必须配对。 当你编辑代码并插入新代码其中带有括号时，很容易忘记括号闭合。 此外，在将代码块嵌套到其他代码块时要小心，例如将回调函数作为参数添加到方法中。避免这种错误的一种方法是，一次性输入完这些符号，然后将光标移回它们之间继续编写。 好在现在大部分编辑器都会帮你自动补全。</p><p>JavaScript 允许使用单引号（<code>&#39;</code>）和双引号（<code>&quot;</code>）声明字符串。 但如果字符串中有缩写或存在一段带引号的文本，可以使用反斜杠（<code>\</code>）来转义字符串内的引号：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> allSameQuotes = <span class="string">&#x27;I\&#x27;ve had a perfectly wonderful evening, but this wasn\&#x27;t it.&#x27;</span>;</span><br></pre></td></tr></table></figure><p>JavaScript 中的赋值运算符 (<code>=</code>) 是用来为变量名赋值的。 并且 <code>==</code> 和 <code>===</code> 运算符检查相等性（三等号 <code>===</code> 是用来测试是否严格相等的，严格相等的意思是值和类型都必须相同）。</p><p>JavaScript 会把大部分的值都视为 <code>true</code>，除了所谓的 falsy 值，即：<code>false</code>、<code>0</code>、<code>&quot;&quot;</code>（空字符串）、<code>NaN</code>、<code>undefined</code> 和 <code>null</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (x = y) &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&#125;  <span class="comment">//在这个示例中，除非 y 值是假值，否则当 y 为任何值时，if 语句中的代码块都会运行。 </span></span><br></pre></td></tr></table></figure><p>当函数或方法不接受任何参数时，你可能忘记在调用它时加上空的左括号和右括号。 通常，函数调用的结果会保存在变量中，供其他代码使用。 可以通过将变量值（或其类型）打印到控制台，查看输出究竟是一个函数引用还是函数调用的返回值来检测这类错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;You rock!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> varOne = myFunction;  <span class="comment">//myFunction</span></span><br><span class="line"><span class="keyword">let</span> varTwo = <span class="title function_">myFunction</span>();  <span class="comment">//You rock!</span></span><br></pre></td></tr></table></figure><p>需要注意的下一个 bug 是函数的参数传递顺序错误。 如果参数分别是不同的类型，例如接受数组和整数两个参数的函数，参数顺序传错就可能会引发运行时错误。 对于接受相同类型参数的函数，传错参数也会导致逻辑错误或运行结果错误。 确保以正确的顺序提供所有必需的参数以避免这些问题。</p><p>当试图访问字符串或数组的特定索引（分割或访问一个片段）或循环索引时，有时会出现 Off by one errors 错误（有时称为 OBOE）。 </p><p>JavaScript 索引从 0 开始，而不是 1，这意味着最后一个索引总会比字符串或数组的长度少 1。 如果尝试访问等于长度的索引，程序可能会抛出“索引超出范围”引用错误或打印出 <code>undefined</code>。当使用将索引范围作为参数的字符串或数组方法时，阅读相关的文档并了解参数中的索引的包含性（即是否考虑进返回值中）很重要。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> alphabet = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> len = alphabet.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= len; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet[i]);</span><br><span class="line">&#125;  <span class="comment">//多了一次循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet[j]);</span><br><span class="line">&#125;  <span class="comment">//少了一次循环（漏掉了索引 0 处的字符）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; len; k++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet[k]);</span><br><span class="line">&#125;  <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><h3 id="三、循环错误"><a href="#三、循环错误" class="headerlink" title="三、循环错误"></a>三、循环错误</h3><p>有时需要在循环中保存信息以增加计数器或重置变量。 一个潜在的问题是变量什么时候该重新初始化，什么时候不该重新初始化，反之亦然。 如果你不小心重置了用于终止条件的变量，导致无限循环，这将特别危险。</p><p>使用<code>console.log()</code>在每个循环中打印变量值可以发现与重置相关的错误或者重置变量失败。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">zeroArray</span>(<span class="params">m, n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newArray = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> row = []; <span class="comment">/* &lt;-----  row has been declared inside the outer loop. </span></span><br><span class="line"><span class="comment">         Now a new row will be initialised during each iteration of the outer loop allowing </span></span><br><span class="line"><span class="comment">         for the desired matrix. */</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        row.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        newArray.<span class="title function_">push</span>(row);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> matrix = <span class="title function_">zeroArray</span>(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matrix);</span><br></pre></td></tr></table></figure><p>当需要程序运行代码块一定次数或满足条件时，循环是很好的工具，但是它们需要终止条件来结束循环。 无限循环可能会使浏览器冻结或崩溃，并导致程序执行混乱，没有人想要这样的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loopy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">//没有终止条件来摆脱loopy()内的while循环。 不要调用这个函数！</span></span><br></pre></td></tr></table></figure><p>程序员的工作是确保最终达到终止条件，该条件告诉程序何时跳出循环。 </p><p>有一种错误是从终端条件向错误方向递增或递减计数器变量。 另一种是在循环代码中意外重置计数器或索引变量，而不是递增或递减它。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表的顺序存储原理及实现</title>
      <link href="/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/"/>
      <url>/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>线性表是由 n<script type="math/tex">（n \geq 0）</script>个相同类型的元素组成的有序集合<script type="math/tex">L =\left( a_{1},a_{2},\ldots ,a_{i-1},a_{i},a_{i+1},\ldots ,a_{n}\right)</script>。线性表中元素个数 n 称为线性表的长度，当<script type="math/tex">n = 0</script>时为空表。<script type="math/tex">a_{1}</script>是第一个数据元素，<script type="math/tex">a_{n}</script>是最后一个数据元素，<script type="math/tex">a_{i-1}</script>是<script type="math/tex">a_{i}</script>的直接前驱，<script type="math/tex">a_{i+1}</script>是<script type="math/tex">a_{i}</script>的直接后驱。</p></blockquote><span id="more"></span><h3 id="一、线性表的特点"><a href="#一、线性表的特点" class="headerlink" title="一、线性表的特点"></a>一、线性表的特点</h3><ol><li>表中元素的个数是有限的。</li><li>表中元素的数据类型都相同，意味着每一个元素占用相同大小的空间。</li><li>表中元素具有逻辑上的顺序性，在序列中各元素排序有其先后顺序。</li></ol><h3 id="二、线性表的顺序表示"><a href="#二、线性表的顺序表示" class="headerlink" title="二、线性表的顺序表示"></a>二、线性表的顺序表示</h3><p>逻辑上相邻的两个元素在物理位置上也相邻。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 50;    <span class="comment">//定义线性表的长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;    <span class="comment">//顺序表中元素的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">  ElemType data[MaxSize];  <span class="comment">//顺序表的元素</span></span><br><span class="line">  <span class="type">int</span> length;      <span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;      <span class="comment">//顺序表的类型定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  SqList L;    <span class="comment">//顺序表的名称</span></span><br><span class="line">  <span class="type">bool</span> ret;    <span class="comment">//查看返回值</span></span><br><span class="line">  ElemType del;    <span class="comment">//用来存要删除的元素</span></span><br><span class="line">  L.data[<span class="number">0</span>] = <span class="number">1</span>; L.data[<span class="number">1</span>] = <span class="number">2</span>; L.data[<span class="number">2</span>] = <span class="number">3</span>;  <span class="comment">//手动赋值</span></span><br><span class="line">  L.len = <span class="number">3</span>;    <span class="comment">//总共 3 个元素</span></span><br><span class="line">  ret = <span class="built_in">ListInsert</span>(L, <span class="number">2</span>, <span class="number">60</span>);    <span class="comment">//在 L 的第 2 个位置插入元素 60</span></span><br><span class="line">  <span class="keyword">if</span>(ret)</span><br><span class="line">      <span class="built_in">PrintList</span>(L);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;插入失败\n&quot;</span>);</span><br><span class="line">  ret = <span class="built_in">ListDelete</span>(L, <span class="number">1</span>, del);    <span class="comment">//删除 L 第 1 个位置元素</span></span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">          <span class="built_in">PrintList</span>(L);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;删除失败\n&quot;</span>);</span><br><span class="line">  <span class="type">int</span> pos;</span><br><span class="line">  pos = <span class="built_in">LocateElem</span>(L, <span class="number">60</span>);    <span class="comment">//查找值为 60 的元素位置</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%4d\n&quot;</span>, pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i ++)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, L.data[i]);  <span class="comment">//所有元素打印到一排，一个元素占4个空间</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>可以随机存取（根据表头元素地址和元素序号）表中任意一个元素。</li><li>存储密度高，每个结点只存储数据元素。</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>插入和删除操作需要移动大量元素。</li><li>线性表变化较大时，难以确定存储空间的容量。</li><li>存储分配需要一整段连续的存储空间，不够灵活。</li></ol><h3 id="三、插入操作"><a href="#三、插入操作" class="headerlink" title="三、插入操作"></a>三、插入操作</h3><ol><li>最好情况：在表尾插入元素，不需要移动元素，时间复杂度为<script type="math/tex">O(1)</script>。</li><li>最坏情况：在表头插入元素，所有元素依次后移，时间复杂度为<script type="math/tex">O(n)</script>。</li><li>平均情况：在插入位置概率均等的情况下，平均移动元素的次数为<script type="math/tex">n/2</script>，复杂度为<script type="math/tex">O(n)</script>。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="type">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt; L.length+<span class="number">1</span>)  <span class="comment">//判断插入位置 i 是否合法（满足 1 &lt;= i &lt;= len+1）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(L.length &gt;= MaxSize)  <span class="comment">//判断存储空间是否已满（插入 x 后是否会超出数组长度）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--)  <span class="comment">//将最后一个元素到第 i 个元素依次后移一位</span></span><br><span class="line">        L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    L.data[i - <span class="number">1</span>] = e;    <span class="comment">//空出位置 i 放入元素 x</span></span><br><span class="line">    L.length++;    <span class="comment">//线性表长度 + 1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、删除操作"><a href="#四、删除操作" class="headerlink" title="四、删除操作"></a>四、删除操作</h3><ol><li>最好情况：删除表尾元素，不需要移动元素，时间复杂度为<script type="math/tex">O(1)</script>。</li><li>最坏情况：删除表头元素，之后的所有元素依次前移，时间复杂度为<script type="math/tex">O(n)</script>。</li><li>平均情况：在删除位置概率均等的情况下，平均移动元素的次数为<script type="math/tex">(n-1)/2</script>，时间复杂度为<script type="math/tex">O(n)</script>。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(SqList &amp;L, <span class="type">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=<span class="number">1</span> || i&gt; L.length || L.length == <span class="number">0</span>)  <span class="comment">//判断删除位置 i 是否合法（满足 1 &lt;= i &lt;= len），且顺序表不能为0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">//插入和删除时，i 的合法范围是不一样的</span></span><br><span class="line">    e = L.data[i - <span class="number">1</span>];    <span class="comment">//将被删除的元素赋值给 e</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; L.length; j++)</span><br><span class="line">        L.data[j - <span class="number">1</span>] = L.data[j];  <span class="comment">//将删除后的元素依次前移</span></span><br><span class="line">    L.length--;    <span class="comment">//线性表长度 - 1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、查找元素"><a href="#五、查找元素" class="headerlink" title="五、查找元素"></a>五、查找元素</h3><p>查找成功，返回位置。位置从 1 开始，查找失败，返回 0：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(SqList L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i ++)  <span class="comment">//遍历顺序表</span></span><br><span class="line">      <span class="keyword">if</span>(L.data[i] == e)</span><br><span class="line">          <span class="keyword">return</span> i + <span class="number">1</span>;  <span class="comment">//i + 1 是元素在顺序表中的位置</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、动态分配"><a href="#六、动态分配" class="headerlink" title="六、动态分配"></a>六、动态分配</h3><p>C 语言的初始动态分配语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.data = (ElemType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType) * InitSize);</span><br></pre></td></tr></table></figure><p>C++ 的初始动态分配语句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.data = <span class="keyword">new</span> ElemType[InitSize];</span><br></pre></td></tr></table></figure><p>动态分配数组的类型定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100;    <span class="comment">//定义线性表的长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">  ElemType *data;  <span class="comment">//指示动态分配数组的指针</span></span><br><span class="line">  <span class="type">int</span> MaxSize, length;      <span class="comment">//数组的当前容量和最大个数</span></span><br><span class="line">&#125;SeqList;     </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript 6</title>
      <link href="/ES6/"/>
      <url>/ES6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp JavaScript 算法和数据结构第二章。ECMAScript（ES）是 JavaScript 的标准。因为所有主流浏览器都遵循此规范，所以 ECMAScript 和 JavaScript 是可以互换的。JavaScript 在不断迭代，每年都会发布新功能。2015 年发布的 ES6（ECMAScript6）为该语言添加了许多强大的新功能，在 ES6 点课程中，学习这些新特性，包括箭头函数、解构、类、promise 和模块。</p></blockquote><span id="more"></span><h3 id="一、var、let-和-const-关键字"><a href="#一、var、let-和-const-关键字" class="headerlink" title="一、var、let 和 const 关键字"></a>一、var、let 和 const 关键字</h3><p>使用 <code>var</code> 关键字声明变量时，它是全局声明的，如果在函数内部声明则是局部声明的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numArray = [];</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  numArray.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArray);  <span class="comment">// [0, 1, 2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><code>let</code> 关键字的行为类似，但有一些额外的功能。 在代码块、语句或表达式中使用 <code>let</code> 关键字声明变量时，其作用域仅限于该代码块、语句或表达式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> printNumTwo;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">2</span>) &#123;</span><br><span class="line">    printNumTwo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">printNumTwo</span>());  <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);  <span class="comment">// error: i is not defined</span></span><br></pre></td></tr></table></figure><p>默认情况下，一些开发人员更喜欢使用 <code>const</code> 分配所有变量，除非他们知道需要重新分配值，他们才使用 <code>let</code>。</p><p>但是，重要的是要了解使用 <code>const</code> 分配给变量的对象（包括数组和函数）仍然是可变的。 使用 <code>const</code> 声明只能防止变量标识符的重新分配：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line">s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];  <span class="comment">//error: 不能分配</span></span><br><span class="line">s[<span class="number">2</span>] = <span class="number">45</span>;  <span class="comment">// [5, 6, 45]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// [5, 6, 45]</span></span><br></pre></td></tr></table></figure><p><code>const</code> 声明并不会真的保护数据不被改变。 为了确保数据不被改变，JavaScript 提供了一个函数 <code>Object.freeze</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;FreeCodeCamp&quot;</span>,</span><br><span class="line">  <span class="attr">review</span>:<span class="string">&quot;Awesome&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj);</span><br><span class="line">obj.<span class="property">review</span> = <span class="string">&quot;bad&quot;</span>;  <span class="comment">//赋值错误</span></span><br><span class="line">obj.<span class="property">newProp</span> = <span class="string">&quot;Test&quot;</span>;  <span class="comment">//赋值错误</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); </span><br></pre></td></tr></table></figure><h3 id="二、函数和操作符"><a href="#二、函数和操作符" class="headerlink" title="二、函数和操作符"></a>二、函数和操作符</h3><p>在 JavaScript 里，我们会经常遇到不需要给函数命名的情况，尤其是在需要将一个函数作为参数传给另外一个函数的时候。 这时，我们会创建匿名函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> myVar = <span class="string">&quot;value&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> myVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 提供了其他写匿名函数的方式的语法糖。 你可以使用<strong>箭头函数</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> myVar = <span class="string">&quot;value&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> myVar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当不需要函数体，只返回一个值的时候，箭头函数允许你省略 return 关键字和外面的大括号</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;value&quot;</span>;</span><br><span class="line"><span class="comment">// 这段代码默认会返回字符串 value</span></span><br></pre></td></tr></table></figure><p>和一般的函数一样，你也可以给箭头函数传递参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">doubler</span> = (<span class="params">item</span>) =&gt; item * <span class="number">2</span>;</span><br><span class="line"><span class="title function_">doubler</span>(<span class="number">4</span>);  <span class="comment">//8</span></span><br></pre></td></tr></table></figure><p>如果箭头函数只有一个参数，则可以省略参数外面的括号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">doubler</span> = item =&gt; item * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>可以给箭头函数传递多个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">multiplier</span> = (<span class="params">item, multi</span>) =&gt; item * multi;</span><br><span class="line"><span class="title function_">multiplier</span>(<span class="number">4</span>, <span class="number">2</span>);  <span class="comment">//8</span></span><br></pre></td></tr></table></figure><p>ES6 里允许给函数传入默认参数，来构建更加灵活的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">greeting</span> = (<span class="params">name = <span class="string">&quot;Anonymous&quot;</span></span>) =&gt; <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greeting</span>(<span class="string">&quot;John&quot;</span>));  <span class="comment">// Hello John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greeting</span>()); <span class="comment">// Hello Anonymous</span></span><br></pre></td></tr></table></figure><p>ES6 推出了用于函数参数的 rest 操作符帮助我们创建更加灵活的函数。 rest 操作符可以用于创建有一个变量来接受多个参数的函数。 这些参数被储存在一个可以在函数内部读取的数组中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">howMany</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;You have passed &quot;</span> + args.<span class="property">length</span> + <span class="string">&quot; arguments.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">howMany</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//You have passed 3 arguments.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">howMany</span>(<span class="string">&quot;string&quot;</span>, <span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], &#123; &#125;)); <span class="comment">//You have passed 4 arguments.</span></span><br><span class="line"><span class="comment">// 使用 rest 参数，就不需要查看 args 数组，并且允许我们在参数数组上使用 map()、filter() 和 reduce()</span></span><br></pre></td></tr></table></figure><p>ES6 引入了展开操作符，可以展开数组以及需要多个参数或元素的表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">6</span>, <span class="number">89</span>, <span class="number">3</span>, <span class="number">45</span>];</span><br><span class="line"><span class="keyword">const</span> maximus = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr);  <span class="comment">//89</span></span><br></pre></td></tr></table></figure><p><code>...arr</code> 返回一个解压的数组。 也就是说，它展开数组。 然而，展开操作符只能够在函数的参数中或者数组中使用。</p><p>用 ES6 的语法在对象中定义函数的时候，可以删除 <code>function</code> 关键词和冒号，用 ES6 编写简洁的函数声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Taylor&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello! My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="三、解构赋值"><a href="#三、解构赋值" class="headerlink" title="三、解构赋值"></a>三、解构赋值</h3><p>解构赋值是 ES6 引入的新语法，用来从数组和对象中提取值，并优雅地对变量进行赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 代码</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> name = user.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">const</span> age = user.<span class="property">age</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 代码</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = user;</span><br><span class="line"><span class="comment">//在这里，自动创建 name 和 age 变量，并将 user 对象相应属性的值赋值给它们。 这个方法简洁多了。</span></span><br></pre></td></tr></table></figure><p>可以给解构的值赋予一个新的变量名， 通过在赋值的时候将新的变量名放在冒号后面来实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: userName, <span class="attr">age</span>: userAge &#125; = user;</span><br><span class="line"><span class="comment">// 获取 user.name 的值，将它赋给一个新的变量 userName，等等。</span></span><br></pre></td></tr></table></figure><p>将对象的属性值赋值给具有不同名字的变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">johnDoe</span>: &#123; </span><br><span class="line">    <span class="attr">age</span>: <span class="number">34</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;johnDoe@freeCodeCamp.com&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">johnDoe</span>: &#123; <span class="attr">age</span>: userAge, <span class="attr">email</span>: userEmail &#125;&#125; = user;</span><br></pre></td></tr></table></figure><p>在 ES6 里面，解构数组可以如同解构对象一样简单。与数组解构不同，数组的扩展运算会将数组里的所有内容分解成一个由逗号分隔的列表。 所以，你不能选择哪个元素来给变量赋值，而对数组进行解构却可以让我们做到这一点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b,,, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);  <span class="comment">// a = 1, b = 2, c = 5</span></span><br></pre></td></tr></table></figure><p>使用解构赋值交换两数的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">8</span>, b = <span class="number">6</span>;</span><br><span class="line">[a, b] = [b, a];</span><br></pre></td></tr></table></figure><p>在解构数组的某些情况下，我们可能希望将剩下的元素放进另一个数组里面。以下代码的结果与使用 <code>Array.prototype.slice()</code> 类似：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, ...arr] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);  <span class="comment">// 1, 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);  <span class="comment">// [3,4,5,7]</span></span><br></pre></td></tr></table></figure><p>在某些情况下，你可以在函数的参数里直接解构对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">profileUpdate</span> = (<span class="params">profileData</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, age, nationality, location &#125; = profileData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面的操作解构了传给函数的对象。 这样的操作也可以直接在参数里完成：</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">profileUpdate</span> = (<span class="params">&#123; name, age, nationality, location &#125;</span>) =&gt; &#123;</span><br><span class="line">&#125; <span class="comment">// 当 profileData 被传递到上面的函数时，从函数参数中解构出值以在函数内使用</span></span><br></pre></td></tr></table></figure><h3 id="三、模板字符串"><a href="#三、模板字符串" class="headerlink" title="三、模板字符串"></a>三、模板字符串</h3><p>模板字符串是 ES6 的另外一项新的功能。 这是一种可以轻松构建复杂字符串的方法，模板字符串可以使用多行字符串和字符串插值功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onst person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Zodiac Hasbro&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">56</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> greeting = <span class="string">`Hello, my name is <span class="subst">$&#123;person.name&#125;</span>!</span></span><br><span class="line"><span class="string">I am <span class="subst">$&#123;person.age&#125;</span> years old.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br></pre></td></tr></table></figure><p>这里发生了许多事情。 首先，使用反引号，而不是引号（<code>&#39;</code> 或者 <code>&quot;</code>）将字符串括起来。</p><p>其次，注意代码和输出中的字符串都是多行的。 不需要在字符串中插入 <code>\n</code>。</p><p>上面使用的 <code>$&#123;variable&#125;</code> 语法是一个占位符。 这样一来，你将不再需要使用 <code>+</code> 运算符来连接字符串。 当需要在字符串里增加变量的时候，你只需要在变量的外面括上 <code>$&#123;</code> 和 <code>&#125;</code>，并将其放在模板字符串里就可以了。 同样，你可以在字符串中包含其他表达式，例如 <code>$&#123;a + b&#125;</code>。 这个新的方式使你可以更灵活地创建复杂的字符串。</p><h3 id="四、构造函数"><a href="#四、构造函数" class="headerlink" title="四、构造函数"></a>四、构造函数</h3><p>ES6 提供了一个新的创建对象的语法，使用关键字 class。值得注意的是，<code>class</code> 只是一个语法糖，它并不像 Java、Python 或者 Ruby 这一类的语言一样，严格履行了面向对象的开发规范。</p><p>在 ES5 里面，我们通常会定义一个构造函数 <code>constructor</code>，然后使用 <code>new</code> 关键字来实例化一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">SpaceShuttle</span> = <span class="keyword">function</span>(<span class="params">targetPlanet</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">targetPlanet</span> = targetPlanet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zeus = <span class="keyword">new</span> <span class="title class_">SpaceShuttle</span>(<span class="string">&#x27;Jupiter&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>class</code> 语法只是简单地替换了构造函数 <code>constructor</code> 的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SpaceShuttle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">targetPlanet</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">targetPlanet</span> = targetPlanet;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> zeus = <span class="keyword">new</span> <span class="title class_">SpaceShuttle</span>(<span class="string">&#x27;Jupiter&#x27;</span>);</span><br></pre></td></tr></table></figure><p>应该注意 <code>class</code> 关键字声明了一个新的函数，里面添加了一个构造函数。 当用 <code>new</code> 创建一个新的对象时，构造函数会被调用。</p><p>你可以从对象中获得一个值，也可以给对象的属性赋值。这些操作通常被称为 getters 以及 setters。</p><p>Getter 函数的作用是可以让对象返回一个私有变量，而不需要直接去访问私有变量。Setter 函数的作用是可以基于传进的参数来修改对象中私有变量。 这些修改可以是计算，或者是直接替换之前的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">author</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_author</span> = author;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// getter</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">writer</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_author</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// setter</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">writer</span>(<span class="params">updatedAuthor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_author</span> = updatedAuthor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> novel = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&#x27;anonymous&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(novel.<span class="property">writer</span>);</span><br><span class="line">novel.<span class="property">writer</span> = <span class="string">&#x27;newAuthor&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(novel.<span class="property">writer</span>);</span><br><span class="line"><span class="comment">// 通常会在私有变量前添加下划线（_）。 然而，这种做法本身并不是将变量变成私有的。</span></span><br></pre></td></tr></table></figure><h3 id="五、模块脚本"><a href="#五、模块脚本" class="headerlink" title="五、模块脚本"></a>五、模块脚本</h3><p>起初，JavaScript 几乎只在 HTML web 扮演一个很小的角色。 今天，一切不同了，很多网站几乎全是用 JavaScript 所写。</p><p> 为了让 JavaScript 更模块化、更整洁以及更易于维护，ES6 引入了在多个 JavaScript 文件之间共享代码的机制。 它可以导出文件的一部分供其它文件使用，然后在需要它的地方按需导入。</p><p>如需要在 HTML 文档里创建一个 <code>type</code> 为 <code>module</code> 的脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span> src=<span class="string">&quot;filename.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>假设有一个文件 <code>math_functions.js</code>，该文件包含了数学运算相关的一些函数。 其中一个存储在变量 <code>add</code> 里，该函数接受两个数字作为参数返回它们的和。 你想在几个不同的 JavaScript 文件中使用这个函数。 要实现这个目的，就需要 <code>export</code> 它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">x, y</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导出变量和函数后，就可以在其它文件里导入使用从而避免了代码冗余。 当然还可以这样导出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">x, y</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; add &#125;;</span><br></pre></td></tr></table></figure><p>导出语句中添加更多值也可以导出多项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; add, subtract &#125;;</span><br></pre></td></tr></table></figure><p><code>import</code> 可以导入文件或模块的一部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 math_functions.js 文件里导入多个项目</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, subtract &#125; <span class="keyword">from</span> <span class="string">&#x27;./math_functions.js&#x27;</span>;</span><br></pre></td></tr></table></figure><p>假设你有一个文件，你希望将其所有内容导入到当前文件中，可以用 <code>import * as</code> 语法来实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myMathModule <span class="keyword">from</span> <span class="string">&quot;./math_functions.js&quot;</span>;</span><br><span class="line"><span class="comment">// 然后可以像访问对象的属性那样访问里面的函数。</span></span><br><span class="line">myMathModule.<span class="title function_">add</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">myMathModule.<span class="title function_">subtract</span>(<span class="number">5</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p> 在文件中只有一个值需要导出的时候，通常会使用默认导出的 <code>export</code> 的语法。 它也常常用于给文件或者模块创建返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>export default</code> 用于为模块或文件声明一个返回值，在每个文件或者模块中应当只默认导出一个值。 此外，你不能将 <code>export default</code> 与 <code>var</code>、<code>let</code> 或 <code>const</code> 同时使用。</p><p><code>export default</code> 需要一种 <code>import</code> 的语法来导入默认的导出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import add from &quot;./math_functions.js&quot;;</span><br></pre></td></tr></table></figure><h3 id="六、JavaScript-Promise"><a href="#六、JavaScript-Promise" class="headerlink" title="六、JavaScript Promise"></a>六、JavaScript Promise</h3><p>Promise 是异步编程的一种解决方案 - 它在未来的某时会生成一个值。 任务完成，分执行成功和执行失败两种情况。 </p><p><code>Promise</code> 是构造器函数，需要通过 <code>new</code> 关键字来创建。 </p><p>构造器参数是一个函数，该函数有两个参数 - <code>resolve</code> 和 <code>reject</code>。 通过它们来判断 promise 的执行结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 有三个状态：<code>pending</code>、<code>fulfilled</code> 和 <code>rejected</code>。 </p><p>没有调用 promise 的完成方法，promise 会一直阻塞在 <code>pending</code> 状态里，Promise 提供的 <code>resolve</code> 和 <code>reject</code> 参数就是用来结束 promise 的。 Promise 成功时调用 <code>resolve</code>，promise 执行失败时调用 <code>reject</code>， 如下文所述，这些方法需要有一个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(condition here) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;Promise was fulfilled&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;Promise was rejected&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 上面的示例使用字符串作为这些函数的参数，但参数实际上可以是任何格式。 通常，它可能是一个包含数据的对象，你可以将它放在网站或其他地方。</span></span><br></pre></td></tr></table></figure><p>当程序需要花费未知的时间才能完成时（比如一些异步操作），一般是服务器请求，promise 很有用。 </p><p>服务器请求会花费一些时间，当结束时，需要根据服务器的响应执行一些操作。 这可以用 <code>then</code> 方法来实现， 当 promise 完成 <code>resolve</code> 时会触发 <code>then</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myPromise.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// result 即传入 resolve 方法的参数</span></span><br></pre></td></tr></table></figure><p>当 promise 失败时会调用 <code>catch</code> 方法。 当 promise 的 <code>reject</code> 方法执行时会直接调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myPromise.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过构建摩天轮学习 CSS 动画</title>
      <link href="/CSS%E6%9E%84%E5%BB%BA%E6%91%A9%E5%A4%A9%E8%BD%AE/"/>
      <url>/CSS%E6%9E%84%E5%BB%BA%E6%91%A9%E5%A4%A9%E8%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第十五章。你可以使用 CSS 动画将注意力吸引到网页的特定部分并使其更具吸引力。在通过构建摩天轮学习 CSS 动画的课程中，建造一个摩天轮，学习如何使用 CSS 为元素设置动画、转换它们并调整它们的速度。</p></blockquote><span id="more"></span><h3 id="一、重点-CSS-代码"><a href="#一、重点-CSS-代码" class="headerlink" title="一、重点 CSS 代码"></a>一、重点 CSS 代码</h3><p>Draw a wheel：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wheel</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">55vw</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">55vw</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>transform-origin</code> property is used to set the point around which a CSS transformation is applied：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.line</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0%</span> <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> The <code>transform</code> property allows you to manipulate the shape of an element：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">60deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">120deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">5</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">240deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">6</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">300deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set the origin point to be offset <code>50%</code> from the left and <code>0%</code> from the top, placing it in the middle of the top edge of the element：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cabin</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>@keyframes</code> at-rule is used to define the flow of a CSS animation. Within the <code>@keyframes</code> rule, you can create selectors for specific points in the animation sequence, such as <code>0%</code> or <code>25%</code>, or use <code>from</code> and <code>to</code> to define the start and end of the sequence；</p><p><code>@keyframes</code> rules require a name to be assigned to them, which you use in other rules to reference. For example, the <code>@keyframes freeCodeCamp &#123; &#125;</code> rule would be named <code>freeCodeCamp</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> wheel &#123;</span><br><span class="line">   <span class="number">0%</span> &#123;</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="number">100%</span> &#123;</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>animation-name</code> property is used to link a <code>@keyframes</code> rule to a CSS selector；</p><p>The <code>animation-duration</code> property is used to set how long the animation should sequence to complete；</p><p>The <code>animation-iteration-count</code> property sets how many times your animation should repeat；</p><p>The <code>animation-timing-function</code> property sets how the animation should progress over time：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wheel</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">55vw</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">55vw</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">animation-name</span>: wheel;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use the <code>animation</code> property to set these all at once：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cabin</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: cabins <span class="number">10s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@keyframes</code> cabins：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> cabins &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">25%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: purple;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、页面展示"><a href="#二、页面展示" class="headerlink" title="二、页面展示"></a>二、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过构建摩天轮学习CSS动画/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过构建企鹅来学习 CSS 变换</title>
      <link href="/CSS%E6%9E%84%E5%BB%BA%E4%BC%81%E9%B9%85/"/>
      <url>/CSS%E6%9E%84%E5%BB%BA%E4%BC%81%E9%B9%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第十四章。你可以转换 HTML 元素以创建吸引读者眼球的吸引人的设计，使用变换来旋转元素、缩放它们等等。在通过构建企鹅来学习 CSS 变换的课程中，构建一只企鹅，使用 CSS 变换来定位企鹅的各个部分并调整其大小、创建背景并为你的作品设置动画。</p></blockquote><span id="more"></span><h3 id="一、重点-CSS-代码"><a href="#一、重点-CSS-代码" class="headerlink" title="一、重点 CSS 代码"></a>一、重点 CSS 代码</h3><p>Normalize the page, add background：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">201</span>, <span class="number">255</span>), <span class="built_in">rgb</span>(<span class="number">247</span>, <span class="number">255</span>, <span class="number">222</span>));</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: clip;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ground</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">300px</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="built_in">rgb</span>(<span class="number">88</span>, <span class="number">175</span>, <span class="number">236</span>), <span class="built_in">rgb</span>(<span class="number">182</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">58px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use the <code>transform</code> property to skew the mountain by <code>0deg</code> in the x-axis and <code>44deg</code> in the y-axis：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left-mountain</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">rgb</span>(<span class="number">203</span>, <span class="number">241</span>, <span class="number">228</span>), <span class="built_in">rgb</span>(<span class="number">80</span>, <span class="number">183</span>, <span class="number">255</span>));</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">0deg</span>, <span class="number">44deg</span>);</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.back-mountain</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">rgb</span>(<span class="number">203</span>, <span class="number">241</span>, <span class="number">228</span>), <span class="built_in">rgb</span>(<span class="number">47</span>, <span class="number">170</span>, <span class="number">255</span>));</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">110px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">225px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Draw the sun：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sun</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">75px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Draw the penguin：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.penguin</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.penguin</span> * &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.penguin-head</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">45%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">45deg</span>,</span><br><span class="line"><span class="built_in">var</span>(--penguin-skin),</span><br><span class="line"><span class="built_in">rgb</span>(<span class="number">239</span>, <span class="number">240</span>, <span class="number">228</span>)</span><br><span class="line">);</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">70%</span> <span class="number">70%</span> <span class="number">65%</span> <span class="number">65%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.face</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--penguin-face);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">70%</span> <span class="number">70%</span> <span class="number">60%</span> <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">15%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.face</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.face</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chin</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--penguin-face);</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">70%</span> <span class="number">70%</span> <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.eye</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">17%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">45%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.eye</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.eye</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.eye-lid</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--penguin-face);</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">23%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blush</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">65%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blush</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">15%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blush</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.beak</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--penguin-picorna);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.beak</span><span class="selector-class">.top</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">60%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.beak</span><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">65%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">42%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shirt</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: bold <span class="number">25px</span> Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">165px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">127.5px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#6a6969</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shirt</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>:  initial;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">22.5px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.penguin-body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">53%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">45%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">45deg</span>,</span><br><span class="line"><span class="built_in">rgb</span>(<span class="number">134</span>, <span class="number">133</span>, <span class="number">133</span>) <span class="number">0%</span>,</span><br><span class="line"><span class="built_in">rgb</span>(<span class="number">234</span>, <span class="number">231</span>, <span class="number">231</span>) <span class="number">25%</span>,</span><br><span class="line">white <span class="number">67%</span></span><br><span class="line">);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80%</span> <span class="number">80%</span> <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">23.5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.penguin-body</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">45%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--penguin-skin);</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0%</span> <span class="number">0%</span> <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">70%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.arm</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">90deg</span>,</span><br><span class="line">    <span class="built_in">var</span>(--penguin-skin),</span><br><span class="line">    <span class="built_in">rgb</span>(<span class="number">209</span>, <span class="number">210</span>, <span class="number">199</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">30%</span> <span class="number">30%</span> <span class="number">30%</span> <span class="number">120%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.arm</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">35%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: top left; </span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">130deg</span>) <span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.arm</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0%</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.foot</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:  <span class="number">15%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--penguin-picorna);</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.foot</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">80deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.foot</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">80deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS animations make the penguin wave：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> wave &#123;</span><br><span class="line">  <span class="number">10%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">110deg</span>) <span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">20%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">130deg</span>) <span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">30%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">110deg</span>) <span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">40%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">130deg</span>) <span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Apply animations：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.arm</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">35%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: top left; </span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">130deg</span>) <span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">animation-name</span>: wave;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">3s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Target the <code>.penguin</code> element when it is active, and increase its size by <code>50%</code> in both dimensions：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.penguin</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">  <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.penguin</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: ease-in-out;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">0ms</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、页面展示"><a href="#二、页面展示" class="headerlink" title="二、页面展示"></a>二、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过构建企鹅来学习CSS变换/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过创建杂志学习 CSS 网格布局</title>
      <link href="/CSS%E5%88%9B%E5%BB%BA%E6%9D%82%E5%BF%97/"/>
      <url>/CSS%E5%88%9B%E5%BB%BA%E6%9D%82%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第十三章。在网页设计时，CSS 网格布局使你能够控制网页的行、列。在通过创建杂志学习 CSS 网格布局的课程中，编写一篇杂志文章。你将学习如何使用 CSS Grid，其中包括了像网格行和网格列这样的概念。</p></blockquote><span id="more"></span><h3 id="一、重点-HTML-代码"><a href="#一、重点-HTML-代码" class="headerlink" title="一、重点 HTML 代码"></a>一、重点 HTML 代码</h3><p>Image lazyload：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">     <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/platform/universal/fcc_meta_1920X1080-indigo.png&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">alt</span>=<span class="string">&quot;freecodecamp logo&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">class</span>=<span class="string">&quot;hero-img&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">width</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">     /&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>Referer</code> HTTP header contains information about the address or URL of a page that a user might be visiting from. This information can be used in analytics to track how many users from your page visit freecodecamp.org;</p><p>For example. Setting the <code>rel</code> attribute to <code>noreferrer</code> omits this information from the HTTP request：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://freecodecamp.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>freeCodeCamp<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、重点-CSS-代码"><a href="#二、重点-CSS-代码" class="headerlink" title="二、重点 CSS 代码"></a>二、重点 CSS 代码</h3><p>Text decoration：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">62.5%</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: linen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally and vertically while still retaining control to do things like overlap elements；</p><p>Use the <code>minmax</code> function to make your columns responsive on any device：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">minmax</span>(<span class="number">2rem</span>, <span class="number">1</span>fr) <span class="built_in">minmax</span>(min-content, <span class="number">94rem</span>) <span class="built_in">minmax</span>(<span class="number">2rem</span>, <span class="number">1</span>fr); <span class="comment">/* fr = fraction*/</span></span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">3rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Use the <code>grid-column</code> property to tell the <code>.heading</code> element to start at grid line 2 and end at grid line 3；</p><p>The CSS <code>repeat()</code> function is used to repeat a value, setting the <code>grid-template-columns</code> property to <code>repeat(20, 200px)</code> would create 20 columns each <code>200px</code> wide：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.heading</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">1.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use <code>-1</code> for the end column.：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hero</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>object-fit</code> property tells the browser how to position the element within its container. In this case, <code>cover</code> will set the image to fill the container, cropping as needed to avoid changing the aspect ratio：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The default settings for CSS Grid will create additional rows as needed, unlike Flexbox；Give the <code>.social-icons</code> selector a <code>grid-template-columns</code> property set to <code>repeat(5, 1fr)</code> to arrange the icons in a single row：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.social-icons</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3rem</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>grid-auto-flow</code> property takes either <code>row</code> or <code>column</code> as the first value, with an optional second value of <code>dense</code>；The <code>dense</code> value allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result in items appearing out of order；</p><p><code>align-items</code> will align child elements along the column axis, and <code>justify-items</code> will align child elements along the row axis：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.social-icons</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3rem</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create columns within an element without using Grid by using the <code>column-width</code> property：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.8rem</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">0.6px</span>;</span><br><span class="line">  <span class="attribute">column-width</span>: <span class="number">25rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: justify;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>::first-letter</code> pseudo-selector allows you to target the first letter in the text content of an element：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.first-paragraph</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">6rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: orangered;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Use <code>list-style-type</code> to get rid of the bullet points on the list items：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.lists</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> The <code>gap</code> property is a shorthand way to set the value of  <code>row-gap</code> and<code>column-gap</code> at the same time；</p><p>The <code>place-items</code> property can be used to set the <code>align-items</code> and <code>justify-items</code> values at the same time：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.image-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">2</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, min-content);</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、页面展示"><a href="#三、页面展示" class="headerlink" title="三、页面展示"></a>三、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过创建杂志学习CSS网格布局/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过建立城市轮廓学习 CSS 变量</title>
      <link href="/CSS%E5%BB%BA%E7%AB%8B%E5%9F%8E%E5%B8%82%E8%BD%AE%E5%BB%93/"/>
      <url>/CSS%E5%BB%BA%E7%AB%8B%E5%9F%8E%E5%B8%82%E8%BD%AE%E5%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第十二章。CSS 变量负责帮助组织你的样式和重复使用它们。在通过建立城市轮廓学习 CSS 变量的课程中，建立一座城市的轮廓，学习如何配置 CSS 变量，以便可以随时重复使用它们。</p></blockquote><span id="more"></span><h3 id="一、重点-CSS-代码"><a href="#一、重点-CSS-代码" class="headerlink" title="一、重点 CSS 代码"></a>一、重点 CSS 代码</h3><p>In CSS, you can target everything with an asterisk：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Center the parts of the building using “flex” or “flexbox”;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bb1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Variable declarations begin with two dashes (<code>-</code>) and are given a name and a value like this: <code>--variable-name: value;</code>, variables are often declared in the <code>:root</code> selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--building-color1</span>: <span class="number">#aa80ff</span>;</span><br><span class="line">  <span class="attr">--building-color2</span>: <span class="number">#66cc99</span>;</span><br><span class="line">  <span class="attr">--building-color3</span>: <span class="number">#cc6699</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To use a variable, put the variable name in parentheses with <code>var</code> in front of them like this: <code>var(--variable-name)</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bb1a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--building-color1, purple); <span class="comment">/* purple is the fallback value */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use flexbox again to evenly space the buildings across the bottom of the element：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.background-buildings</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gradients in CSS are a way to transition between colors across the distance of an element, they are applied to the <code>background</code> property：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bb1d</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">      orange,</span><br><span class="line">      <span class="built_in">var</span>(--building-color1) <span class="number">80%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color1)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Make the four colors of your gradient repeat until it gets to the bottom of the element; giving you some stripes：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bb2b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      <span class="built_in">var</span>(--building-color2),</span><br><span class="line">      <span class="built_in">var</span>(--building-color2) <span class="number">6%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color2) <span class="number">6%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color2) <span class="number">9%</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can add multiple gradients to an element by separating them with a comma (<code>,</code>)：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fb6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">9%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">38%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      <span class="number">90deg</span>,</span><br><span class="line">      <span class="built_in">var</span>(--building-color3),</span><br><span class="line">      <span class="built_in">var</span>(--building-color3) <span class="number">10%</span>,</span><br><span class="line">      transparent <span class="number">10%</span>,</span><br><span class="line">      transparent <span class="number">30%</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      <span class="built_in">var</span>(--building-color3),</span><br><span class="line">      <span class="built_in">var</span>(--building-color3) <span class="number">10%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color3) <span class="number">10%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color3) <span class="number">30%</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sky background：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sky</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(</span><br><span class="line">    circle closest-corner at <span class="number">15%</span> <span class="number">15%</span>,</span><br><span class="line">      <span class="number">#ffcf33</span>,</span><br><span class="line">      <span class="number">#ffcf33</span> <span class="number">20%</span>,</span><br><span class="line">      <span class="number">#ffff66</span> <span class="number">21%</span>,</span><br><span class="line">      <span class="number">#bbeeff</span> <span class="number">100%</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> A media query can be used to change styles based on certain conditions：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">1000px</span>) &#123;</span><br><span class="line">  <span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--building-color1</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--building-color2</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--building-color3</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--building-color4</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--window-color1</span>: <span class="number">#777</span>;</span><br><span class="line">    <span class="attr">--window-color2</span>: <span class="number">#777</span>;</span><br><span class="line">    <span class="attr">--window-color3</span>: <span class="number">#777</span>;</span><br><span class="line">    <span class="attr">--window-color4</span>: <span class="number">#777</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="selector-class">.sky</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(</span><br><span class="line">        closest-corner circle at <span class="number">15%</span> <span class="number">15%</span>,</span><br><span class="line">        <span class="number">#ccc</span>,</span><br><span class="line">        <span class="number">#ccc</span> <span class="number">20%</span>,</span><br><span class="line">        <span class="number">#445</span> <span class="number">21%</span>,</span><br><span class="line">        <span class="number">#223</span> <span class="number">100%</span></span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、页面展示"><a href="#二、页面展示" class="headerlink" title="二、页面展示"></a>二、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过建立城市轮廓学习CSS变量/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过创建一架钢琴来学习响应式网页设计</title>
      <link href="/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E5%88%9B%E5%BB%BA%E4%B8%80%E6%9E%B6%E9%92%A2%E7%90%B4/"/>
      <url>/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E5%88%9B%E5%BB%BA%E4%B8%80%E6%9E%B6%E9%92%A2%E7%90%B4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第十一章。响应式设计使得你的网页适应不同屏幕尺寸的显示。在通过创建一架钢琴来学习响应式网页设计的课程中，围绕一架钢琴编写代码学习 CSS 响应式设计，同时学会媒体条件和伪选择器的知识。</p></blockquote><span id="more"></span><h3 id="一、重点-CSS-代码"><a href="#一、重点-CSS-代码" class="headerlink" title="一、重点 CSS 代码"></a>一、重点 CSS 代码</h3><p>Browsers can apply default margin and padding values to specific elements. To make sure your piano looks correct, you need to reset the box model：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You have reset the <code>html</code> box model, you need to pass that on to the elements within as well.</p><p>The <code>::before</code> selector creates a pseudo-element which is the first child of the selected element, while the <code>::after</code> selector creates a pseudo-element which is the last child of the selected element：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*, <span class="selector-pseudo">::before</span>, <span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>钢琴、琴键轮廓 🎹：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#piano</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#00471b</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">992px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">290px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">80px</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">90px</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.keys</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#040404</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">949px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden; <span class="comment">/* hide any element that is pushed outside the set width value of .keys */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.key</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">41px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">175px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To create the black keys, add a new <code>.key.black--key::after</code> selector. This will target the elements with the class <code>key black--key</code>, and select the pseudo-element after these elements in the HTML.</p><p>The <code>content</code> property is used to set or override the content of the element. By default, the pseudo-elements created by the <code>::before</code> and <code>::after</code> pseudo-selectors are empty, and the elements will not be rendered to the page：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.key</span><span class="selector-class">.black--key</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1d1e22</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;    <span class="comment">/* make the pseudo-elements empty */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Styling the logo：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">23px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@media 属性 Make it responsive：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#piano</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">358px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.keys</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">318px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.logo</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">1199px</span>) <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">769px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#piano</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">675px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.keys</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">633px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、页面展示"><a href="#二、页面展示" class="headerlink" title="二、页面展示"></a>二、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过创建一架钢琴来学习响应式网页设计/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建一副毕加索绘画来学习中级 CSS</title>
      <link href="/CSS%E5%88%9B%E5%BB%BA%E4%B8%80%E5%B9%85%E6%AF%95%E5%8A%A0%E7%B4%A2%E7%94%BB/"/>
      <url>/CSS%E5%88%9B%E5%BB%BA%E4%B8%80%E5%B9%85%E6%AF%95%E5%8A%A0%E7%B4%A2%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第十章。在创建一副毕加索绘画来学习中级 CSS 的课程中，通过代码创建一幅自己的毕加索绘画网页来掌握中级 CSS 技术。课程涉及 SVG 图标、CSS 定位和对已学 CSS 知识的回顾。</p></blockquote><span id="more"></span><h3 id="一、重点-HTML-代码"><a href="#一、重点-HTML-代码" class="headerlink" title="一、重点 HTML 代码"></a>一、重点 HTML 代码</h3><p>FontAwesome is a library of SVG-powered icons, many of which are freely available to use：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Picasso Painting<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://use.fontawesome.com/releases/v5.8.2/css/all.css&quot;</span>&gt;</span> <span class="comment">&lt;!--FontAwesome--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>i</code> element is used for idiomatic text, or text that is separate from the “normal” text content. This could be for <em>italic</em> text, such as scientific terms, or for icons like those provided by FontAwesome：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;guitar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;guitar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;guitar-left&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;guitar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;guitar-right&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;guitar-neck&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、重点-CSS-代码"><a href="#二、重点-CSS-代码" class="headerlink" title="二、重点 CSS 代码"></a>二、重点 CSS 代码</h3><p>An <code>absolute</code> position takes the element out of that top-down document flow and allows you to adjust it relative to its container. When an element is manually positioned, you can shift its layout with <code>top</code>, <code>left</code>, <code>right</code>, and <code>bottom</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#offwhite-character</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">550px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: GhostWhite;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">17.5%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>z-index</code> property is used to create “layers” for your HTML elements. Elements with a higher <code>z-index</code> value will appear to be layered on top of elements with a lower <code>z-index</code> value：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#back-wall</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#8B4513</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>border-style、border-width 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#white-hat</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">120px</span> <span class="number">140px</span> <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border-right-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: GhostWhite;</span><br><span class="line">    <span class="attribute">border-left-color</span>: transparent;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>display: block 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.black-dot</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">45</span>, <span class="number">31</span>, <span class="number">19</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">65%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>display: inline-block 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fa-music</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">8%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">13%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>border-radius 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#black-round-hat</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">45</span>, <span class="number">31</span>, <span class="number">19</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改 FontAwesome 大小：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fas</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、页面展示"><a href="#三、页面展示" class="headerlink" title="三、页面展示"></a>三、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/创建一副毕加索绘画来学习中级CSS/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 的引用</title>
      <link href="/Cpp%E5%BC%95%E7%94%A8/"/>
      <url>/Cpp%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>严老师的数据结构和王道数据结构都是用的 C 语言语法，但是额外使用了 C++的引用。引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。相对于 C 指针来说，C++ 引用会便捷许多。</p></blockquote><span id="more"></span><h3 id="一、引用的使用"><a href="#一、引用的使用" class="headerlink" title="一、引用的使用"></a>一、引用的使用</h3><p>通过原始变量名称或引用来访问变量的内容。我们在修改函数外的某一变量时，使用了引用后，在子函数内的操作和函数外操作手法一致，这样编程效率较高，对于初学者理解也非常方便。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 声明简单的变量</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">    <span class="comment">// 声明引用变量</span></span><br><span class="line">    <span class="type">int</span> &amp;r = i;</span><br><span class="line">    <span class="type">double</span> &amp;s = d;</span><br><span class="line">    i = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value of i : &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value of i reference : &quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">    d = <span class="number">11.7</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value of d : &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value of d reference : &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、C-指针-vs-C-引用"><a href="#二、C-指针-vs-C-引用" class="headerlink" title="二、C 指针 vs C++ 引用"></a>二、C 指针 vs C++ 引用</h3><p>引用必须连接到一块合法的内存，不存在空引用；一旦引用被初始化为一个对象，就不能被指向到另一个对象，指针可以在任何时候指向到另一个对象；引用必须在创建时被初始化，指针可以在任何时间被初始化。</p><h4 id="在子函数内修改主函数的普通变量"><a href="#在子函数内修改主函数的普通变量" class="headerlink" title="在子函数内修改主函数的普通变量"></a>在子函数内修改主函数的普通变量</h4><p>C 指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">modify_num</span><span class="params">(<span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">  ++(*b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">  modify_num(&amp;a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C ++ 引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_num</span><span class="params">(<span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ++b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">modify_num</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在子函数内修改主函数的一级指针"><a href="#在子函数内修改主函数的一级指针" class="headerlink" title="在子函数内修改主函数的一级指针"></a>在子函数内修改主函数的一级指针</h4><p>C 指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">modify_pointer</span><span class="params">(<span class="type">int</span> **p)</span></span><br><span class="line">&#123;</span><br><span class="line">  *p = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">  modify_pointer(&amp;p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C ++ 引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_pointer</span><span class="params">(<span class="type">int</span> *&amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  p = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">modify_pointer</span>(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何说话 - How to Speak</title>
      <link href="/%E5%A6%82%E4%BD%95%E8%AF%B4%E8%AF%9D/"/>
      <url>/%E5%A6%82%E4%BD%95%E8%AF%B4%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>大约40年前，Patrick Henry Winston 教授发表了他的第一次“如何说话”的演讲。正如他在<a href="https://alum.mit.edu/slice/how-speak"> 2010 年的这篇文章中</a>所写的那样：“Robert Sjoberg 让我这样做，我们坐在办公室里，抱怨某人的可怕讲座，当他说：‘你应该做一个关于如何说话的IAP课程。’‘不，’我说，‘我从来没有讲过比 B+ 更好的演讲，之后我会抑郁一个月，需要一个星期的时间来准备，而且，没有人会来。’‘我会来的，’他说。” 如今，How to Speak 已经成为 MIT 深受欢迎的热门课，听完<a href="https://ia802807.us.archive.org/28/items/mithowtospeak/MIT_How_To_Speak_IAP_2018_300k.mp4">这门课</a>也是让我受益匪浅。</p></blockquote><span id="more"></span><h3 id="一、How-to-Speak-公开课"><a href="#一、How-to-Speak-公开课" class="headerlink" title="一、How to Speak 公开课"></a>一、How to Speak 公开课</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?bvid=BV1mf4y157ZU" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><h3 id="二、开场白"><a href="#二、开场白" class="headerlink" title="二、开场白"></a>二、开场白</h3><p>《军法法典》规定任何军官在没有武器的情况下派遣士兵参加战斗，都要接受军事法庭的审判。同理学生不应该没有交流能力就走进生活。因为你的人生的成功，在很大程度上取决于你说话的能力、写作能力和思想的质量。在 Winston 教授看来，表达能力的好坏可以用一个公式表示出来：</p><script type="math/tex; mode=display">Quality=\int \left( K,P,t\right)</script><p>其中，知识（Knowledge）的权重大于练习（Practice）的权重更远大于天赋（Talent）的权重。我们或许不具有超乎常人的表达天赋，但是了解表达的技巧知识，加上反复的练习，也能具有优秀的表达能力。</p><p>最有效的开场，是从承诺（Empowerment promise）开始。尽管许多人建议用笑话来作为开场白，但其实这是不合理的。因为这个时候听众都还在尝试去适应你的声音，音量，说话节奏等等，他们还没有做好听一个笑话的准备。当然，也可以提一个问题，如“宇宙中有多少行星是可以居住的？” 或者可以阐述一个带点震撼力的事实或数据，如“宇宙中有一百万亿颗可居住的行星。” 给观众一个预期，可以了解接下来要听什么，那些地方可能是重点，哪些地方可以少许放松。</p><h3 id="三、演讲的过程"><a href="#三、演讲的过程" class="headerlink" title="三、演讲的过程"></a>三、演讲的过程</h3><p>首先，我们常说：重要的事情说三遍，演讲也是如此，对每一个重要的标题要重复至少三次（Cycle on subject）。因为听众很有可能会走神，如果重点只说一遍的话，听众会没有注意到，容易忘记。新近的研究发现，当代人们的注意力时长大概只有 5 分钟，因为听众的注意力有限，如果一口气吧内容全讲下去的话，听众很容易逐渐丢失你所要表达的重点，需要利用一些表达上的技巧帮助听众回到你的话题和内容上来，你可以每五分钟停顿片刻，插入一个小故事，说个笑话，总结一下你刚说的。</p><p>其次需要把自己的观点和他人的观点之间建立边界（Build a fence）阐明自己的观点和别人的观点在哪里不同。观点相似，听众没必要听你，只有把你的观点跟别人的观点区分开来，就像扎一道篱笆，才不会让人混淆，同样一个问题，你换个角度来看，别人才会有兴趣听。</p><p>最后，Winston教授认为，善于提问对演讲者来说也是一个需要学习的技巧。提问有许多作用：引起听众注意，引进新话题，温习讲过的内容。你需要掌控局面，就必须避免泛泛的、无方向和无重点的问题。提出的问题不能太难，不然没人能回答，也不能太简单，不然大家会因为过于简单而羞于作答。在提出问题之后，等待一会儿（7 seconds）再公布答案。</p><h3 id="四、演讲的环境"><a href="#四、演讲的环境" class="headerlink" title="四、演讲的环境"></a>四、演讲的环境</h3><p>关于演讲的时间和地点，不同听众数量的演讲应该选择的不同的演讲地点，一个小型演讲就不应该选择一个过大的演讲场地，低上座率会影响到你的心情，从而影响你的演讲效果。场地一定要光线充足，因为光线不好，人们的潜意识充满困意。曾有演讲地点准备的工作人员跟 Winston 教授讲过如果房间太亮堂的话听众会没办法看幻灯片，Winston 教授则说：“听众在睡着的时候也没办法看幻灯片。”而时间上最好是上午11点，这个时候大家都是醒着的。</p><p>多一点板书，少一点幻灯片。Winston 教授认为演讲者通过黑板和小道具，可以让听众进行同理性镜像模拟（Empathetic mirroring），即听众会形成自己也做了跟演讲者相同的事情的感觉，这样会让听众留下更加深刻的印象，当你坐在那里看着我在黑板上写字的时候，你头脑中所有那些小小的镜像神经元都被激活了，你可以感觉到是自己在黑板上写字，但是幻灯片无法做到这一点。</p><p>幻灯片上字不要太多了，也不要太小。谨记幻灯片只是锦上添花，而不是主角。保持幻灯片的整洁和整齐，呈现的图片也要尽可能地简单直观，不用写标题，因为标题应该是由演讲者讲出来的。演讲的时候不要用激光笔，不要双手插兜，也不要去读幻灯片。</p><h3 id="五、如何准备演讲"><a href="#五、如何准备演讲" class="headerlink" title="五、如何准备演讲"></a>五、如何准备演讲</h3><p>多讲故事，打动听众的心，人类是讲故事（Storytelling）的动物，我们从小就通过各种童话故事来理解世界，借助这故事我们逐渐建构自己的知识体系，学习更加专业的知识，因此我们应该以讲故事的方式去构建我们的演讲，不仅要捕捉住听众的思想，还要在情感上打动他们，捕捉住他们的心。</p><p>演讲的技巧很重要，用 5S（⭐️）代表五角星的五个点。用一个独特的符号来代表你的想法（Symbol）；用一句口号，把要说的内容全都塞进去（Slogan）；用一个令人惊讶的例子提起听众的兴趣（Surprise）；用一个众多好的想法中脱颖而出（stick out）的想法强调你跟他人的不一样（Salient ideas）；讲一个故事（How you did it，How it work，Why it’s important）（Story）。</p><p>在口语考试（Oral test）中，要思考如何让没有背景知识的听众听懂，明白你在做什么，你想要表达什么。事先最好找一个不太了解你演讲内容的朋友帮你预先模拟练习是否能让他听懂。在工作面试（Job Interview）中，快速（in 5 minute）表明你的远见（Vision）和你所做过的事情（Done Something）。远见中包括可能遇到的问题（Problem）和你的方法中新颖的部分（Approach）。做过的事情可以分步描述为了解决某个问题所需要的步骤，你不需要把所有步骤都做掉，没做过的地方就可以说是接下来需要做的。</p><h3 id="六、最后的结尾"><a href="#六、最后的结尾" class="headerlink" title="六、最后的结尾"></a>六、最后的结尾</h3><p>最后一张幻灯片是一个你向别人介绍自己是谁的机会。把你合作的人放到第一张幻灯片去，在最后一张幻灯片上应该放的是你在其中做的贡献（Contributions），省略具体细节，没人会真的记录下来。</p><p>About final words，用笑话来结束一场演讲是不错的选择，也可以简单总结你的核心观点，简单表现你的心情（It’s being great fun being here），不用在结尾太过谦卑，“谢谢”、“对不起”、“还有问题吗”这些结束语并不好，白白浪费了讲话的最后几分钟。</p><p>“By the end of the next 60 minutes you will have been exposed to a lot of ideas, some of which you will incorporate into your own repertoire, and they will ensure that you get the maximum opportunity to have your ideas valued and accepted by the people you speak with.”，这是  Patrick Winston 教授写在课程前的话，这门课程也真的让我受益很多，其中有许多细节正是我们自己在 Presentation 或者 Interview 中所没注意到的，在 Medium 上也有人总结了更多细节要点：<a href="https://ratipuysal.medium.com/what-i-learned-from-how-to-speak-by-patrick-winston-mit-7f1061b0cda9">What I learned from “How To Speak” by Patrick Winston (MIT)</a>，这篇演讲也值得一看再看。</p>]]></content>
      
      
      <categories>
          
          <category> 观点与感想 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通过构建资产负债表了解有关 CSS 伪选择器的更多信息</title>
      <link href="/CSS%E6%9E%84%E5%BB%BA%E8%B5%84%E4%BA%A7%E8%B4%9F%E5%80%BA%E8%A1%A8/"/>
      <url>/CSS%E6%9E%84%E5%BB%BA%E8%B5%84%E4%BA%A7%E8%B4%9F%E5%80%BA%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第九章。可以使用 CSS 伪选择器来更改特定的 HTML 元素。在通过构建资产负债表了解有关 CSS 伪选择器的更多信息的课程中，使用伪选择器构建资产负债表，学习如何在将鼠标悬停在元素上时更改其样式，并触发网页上的其他事件。</p></blockquote><span id="more"></span><h3 id="一、重点-HTML-代码"><a href="#一、重点-HTML-代码" class="headerlink" title="一、重点 HTML 代码"></a>一、重点 HTML 代码</h3><p>flex class：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;flex&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>AcmeWidgetCorp<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Balance Sheet<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>aria-hidden 属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;years&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;year&quot;</span>&gt;</span>2019<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;year&quot;</span>&gt;</span>2020<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;year&quot;</span>&gt;</span>2021<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML table 标签:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>Assets<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only year&quot;</span>&gt;</span>2019<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only year&quot;</span>&gt;</span>2020<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only year&quot;</span>&gt;</span>2021<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Cash <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span>This is the cash we currently have on hand.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Checking <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span>Our primary transactional account.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$54<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$56<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$53<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Savings <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span>Funds set aside for emergencies.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$650<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$728<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;total&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Total <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Assets<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$579<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$736<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$809<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--同理多个&lt;table&gt;&lt;/table&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、重点-CSS-代码"><a href="#二、重点-CSS-代码" class="headerlink" title="二、重点 CSS 代码"></a>二、重点 CSS 代码</h3><p>box-sizing 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0a0a23</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>span[class~=&quot;sr-only&quot;]</code> selector will select any <code>span</code> element whose <code>class</code> <em>includes</em> <code>sr-only</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[class~=<span class="string">&quot;sr-only&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">1px</span>, <span class="number">1px</span>, <span class="number">1px</span>, <span class="number">1px</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">inset</span>(<span class="number">50%</span>) <span class="meta">!important</span>;</span><br><span class="line">  -webkit-<span class="attribute">clip-path</span>: <span class="built_in">inset</span>(<span class="number">50%</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span> <span class="meta">!important</span> ;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">1px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The CSS clip property is used to define the visible portions of an element.</span></span><br><span class="line"><span class="comment">The clip-path property determines the shape the clip property should take.</span></span><br><span class="line"><span class="comment">use the !important keyword to ensure these properties are always applied, regardless of order or specificity.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>flex-direction 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">37.25rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1.5rem</span> <span class="number">1.25rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-class">.flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>:first-of-type</code> pseudo-selector is used to target the first element that matches the selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> <span class="selector-class">.flex</span> <span class="selector-tag">span</span><span class="selector-pseudo">:first</span>-of-type &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.7em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* The :last-of-type pseudo-selector does the exact opposite - it targets the last element that matches the selector. */</span></span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-class">.flex</span> <span class="selector-tag">span</span><span class="selector-pseudo">:last-of-type</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>section、.table-wrap selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">40rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#d0d0d5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.75rem</span> <span class="number">1.5rem</span> <span class="number">0.75rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>calc()</code> function is a CSS function that allows you to calculate a value based on other values：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#years</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#0a0a23</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="built_in">calc</span>(<span class="number">1.25rem</span> + <span class="number">2px</span>) <span class="number">0.5rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>span[class]</code> syntax will target any <code>span</code>element that has a <code>class</code> attribute set, regardless of the attribute’s value：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#years</span> <span class="selector-tag">span</span><span class="selector-attr">[class]</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4.5rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>:not()</code> pseudo-selector is used to target all elements that do not match the selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.sr-only</span>) &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>table selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse; <span class="comment">/* allow cell borders to collapse into a single border */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">3rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>caption selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">caption</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#356eaf</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.3em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">2.25rem</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tbody selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tbody</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>; <span class="comment">/* fill the viewport */</span></span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">tbody</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">12rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>[attribute=&quot;value&quot;]</code> selector targets any element that has an attribute with a specific value：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tr</span><span class="selector-attr">[class=<span class="string">&quot;total&quot;</span>]</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">0</span> <span class="number">0.25rem</span> <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The key difference between <code>tr[class=&quot;total&quot;]</code> and <code>tr.total</code> is that the first will select <code>tr</code> elements where the <em>only</em> class is <code>total</code>. The second will select <code>tr</code> elements where the class <em>includes</em> total：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.total</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.25rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>:nth-of-type()</code> pseudo-selector is used to target specific elements based on their order among siblings of the same type：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.total</span> <span class="selector-tag">td</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他 table 行/列属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.total</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#99c9ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">td</span><span class="selector-class">.current</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.data</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#dfdfe2</span> <span class="number">1.845rem</span>, white <span class="number">1.845rem</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.data</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">0.3rem</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tr.data th .description</code> selector target the elements with the <code>class</code> set to <code>description</code> that are within your <code>th</code> elements in your <code>.data</code> table rows：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.total</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#99c9ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>block display：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.data</span> <span class="selector-tag">th</span> <span class="selector-class">.description</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span> <span class="number">0</span> <span class="number">0.75rem</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">13.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vertically align the text to the top, horizontally align the text to the right：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.data</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.3rem</span> <span class="number">0.25rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.data</span> <span class="selector-tag">td</span><span class="selector-pseudo">:last-of-type</span> &#123;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、页面展示"><a href="#三、页面展示" class="headerlink" title="三、页面展示"></a>三、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过构建资产负债表了解有关CSS伪选择器的更多信息/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过编写小测验学习无障碍</title>
      <link href="/%E7%BC%96%E5%86%99%E5%B0%8F%E6%B5%8B%E9%AA%8C%E5%AD%A6%E4%B9%A0%E6%97%A0%E9%9A%9C%E7%A2%8D/"/>
      <url>/%E7%BC%96%E5%86%99%E5%B0%8F%E6%B5%8B%E9%AA%8C%E5%AD%A6%E4%B9%A0%E6%97%A0%E9%9A%9C%E7%A2%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第八章。无障碍环境使你的网页便于所有人使用，甚至是残疾人。在通过编写小测验学习无障碍的课程中，建立一个测验网页，学习诸如键盘快捷键、ARIA 属性和设计最佳实践等无障碍工具。</p></blockquote><span id="more"></span><h3 id="一、重点-HTML-代码"><a href="#一、重点-HTML-代码" class="headerlink" title="一、重点 HTML 代码"></a>一、重点 HTML 代码</h3><p>head：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;freeCodeCamp Accessibility Quiz practice project&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Accessibility Quiz<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>header：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML/CSS Quiz<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#student-info&quot;</span> <span class="attr">accesskey</span>=<span class="string">&quot;i&quot;</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#html-questions&quot;</span> <span class="attr">accesskey</span>=<span class="string">&quot;h&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#css-questions&quot;</span> <span class="attr">accesskey</span>=<span class="string">&quot;c&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>student-info:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">role</span>=<span class="string">&quot;region&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;student-info&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;student-info&quot;</span>&gt;</span>Student Info<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;student-name&quot;</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student-name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;student-name&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;student-email&quot;</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student-email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;student-email&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;birth-date&quot;</span>&gt;</span>D.O.B.<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(Date of Birth)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birth-date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;birth-date&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>html-questions：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">role</span>=<span class="string">&quot;region&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;html-questions&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;html-questions&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;question-block&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">class</span>=<span class="string">&quot;question&quot;</span> <span class="attr">name</span>=<span class="string">&quot;html-question-one&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">legend</span>&gt;</span></span><br><span class="line">        The legend element represents a caption for the content of its</span><br><span class="line">        parent fieldset element</span><br><span class="line">      <span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;answers-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;q1-a1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;q1-a1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            True</span><br><span class="line">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;q1-a2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;q1-a2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            False</span><br><span class="line">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;question-block&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">class</span>=<span class="string">&quot;question&quot;</span> <span class="attr">name</span>=<span class="string">&quot;html-question-two&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">legend</span>&gt;</span></span><br><span class="line">        A label element nesting an input element is required to have a</span><br><span class="line">        for attribute with the same value as the input&#x27;s id</span><br><span class="line">      <span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;answers-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;q2-a1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;q2-a1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            True</span><br><span class="line">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;q2-a2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;q2-a2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            False</span><br><span class="line">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css-questions：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">role</span>=<span class="string">&quot;region&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;css-questions&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;css-questions&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;formrow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;question-block&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;customer&quot;</span>&gt;</span>Are you a frontend developer?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;answer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">id</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>Select an option<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;no&quot;</span>&gt;</span>No<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;question-block&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;css-questions&quot;</span>&gt;</span>Do you have any questions:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;answer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;css-questions&quot;</span> <span class="attr">name</span>=<span class="string">&quot;css-questions&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;24&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">placeholder</span>=<span class="string">&quot;Who is flexbox...&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>footer：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://freecodecamp.org&quot;</span>&gt;</span>freeCodeCamp<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    San Francisco<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    California<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    USA</span><br><span class="line">  <span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、重点-CSS-代码"><a href="#二、重点-CSS-代码" class="headerlink" title="二、重点 CSS 代码"></a>二、重点 CSS 代码</h3><p>@media 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-reduced-motion</span>: no-preference) &#123;</span><br><span class="line">    * &#123;</span><br><span class="line">        scroll-behavior: smooth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>body，header：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f5f6f7</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#1b1b32</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Helvetica;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1b1b32</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>logo，nav：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">100px</span>, <span class="number">18vw</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0a0a23</span>;</span><br><span class="line">    aspect-ratio: <span class="number">35</span> / <span class="number">4</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f1be32</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">min</span>(<span class="number">5vw</span>, <span class="number">1.2em</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span>&gt;<span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">padding-inline-start</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-block</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span>&gt;<span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#dfdfe2</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0.2rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.2rem</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span>&gt;<span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#dfdfe2</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#1b1b32</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表单 1：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">10px</span> auto;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Verdana, Tahoma;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">4px</span> solid <span class="number">#dfdfe2</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.formrow</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-tag">label</span>,</span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">55px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表单 2、3：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.question-block</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;Question #&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.question</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.answers-list</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">23px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#d0d0d5</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#3b3b4f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.sr-only selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sr-only</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、页面展示"><a href="#三、页面展示" class="headerlink" title="三、页面展示"></a>三、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过编写小测验学习无障碍/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过建立营养标签来学习排版</title>
      <link href="/%E5%BB%BA%E7%AB%8B%E8%90%A5%E5%85%BB%E6%A0%87%E7%AD%BE%E6%9D%A5%E5%AD%A6%E4%B9%A0%E6%8E%92%E7%89%88/"/>
      <url>/%E5%BB%BA%E7%AB%8B%E8%90%A5%E5%85%BB%E6%A0%87%E7%AD%BE%E6%9D%A5%E5%AD%A6%E4%B9%A0%E6%8E%92%E7%89%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第七章。排版是将文本样式设置为易于阅读并适合其目的的艺术。在通过建立营养标签来学习排版的课程中，你将使用排版来构建营养标签网页。你将学习如何使用 CSS 设置文本样式、调整行高和定位文本。</p></blockquote><span id="more"></span><h3 id="一、重点-HTML-代码"><a href="#一、重点-HTML-代码" class="headerlink" title="一、重点 HTML 代码"></a>一、重点 HTML 代码</h3><p>head：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Nutrition Label<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Open+Sans:400,700,800&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>body：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Nutrition Facts<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>8 servings per container<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Serving size <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>2/3 cup (55g)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;calories-info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bold sm-text&quot;</span>&gt;</span>Amount per serving<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Calories <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>230<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider md&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;daily-value sm-text&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;right bold no-divider&quot;</span>&gt;</span>% Daily Value *<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Total Fat<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 8g <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold right&quot;</span>&gt;</span>10%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;indent no-divider&quot;</span>&gt;</span>Saturated Fat 1g <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold right&quot;</span>&gt;</span>5%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;indent no-divider&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>Trans<span class="tag">&lt;/<span class="name">i</span>&gt;</span> Fat 0g<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Cholesterol<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 0mg <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;right bold&quot;</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Sodium<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 160mg <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;right bold&quot;</span>&gt;</span>7%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Total Carbohydrate<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 37g <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;right bold&quot;</span>&gt;</span>13%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;indent no-divider&quot;</span>&gt;</span>Dietary Fiber 4g<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;indent no-divider&quot;</span>&gt;</span>Total Sugars 12g<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider dbl-indent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;dbl-indent no-divider&quot;</span>&gt;</span>Includes 10g Added Sugars <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;right bold&quot;</span>&gt;</span>20%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;no-divider&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Protein<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 3g<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Vitamin D 2mcg <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>10%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Calcium 260mg <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>20%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Iron 8mg <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;no-divider&quot;</span>&gt;</span>Potassium 235mg <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>6%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider md&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;note&quot;</span>&gt;</span>* The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a</span><br><span class="line">            daily diet. 2,000 calories a day is used for general nutrition advice.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、重点-CSS-代码"><a href="#二、重点-CSS-代码" class="headerlink" title="二、重点 CSS 代码"></a>二、重点 CSS 代码</h3><p>box-sizing 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Open Sans&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>letter-spacing 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.label</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">270px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">4px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">0.15px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>divider 分隔栏：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.divider</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#888989</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bold</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">800</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.lg</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.lg</span>,</span><br><span class="line"><span class="selector-class">.md</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.md</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>calories-info：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sm-text</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.85rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.calories-info</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">5px</span> -<span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.calories-info</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">7px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>indent 缩进：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.indent</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dbl-indent</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.note</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.6rem</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: -<span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>:not</code> pseudo-selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.daily-value</span> <span class="selector-tag">p</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.no-divider</span>) &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#888989</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、页面展示"><a href="#三、页面展示" class="headerlink" title="三、页面展示"></a>三、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过建立营养标签来学习排版/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过创建照片集来学习 CSS 弹性盒子</title>
      <link href="/CSS%E5%88%9B%E5%BB%BA%E7%85%A7%E7%89%87%E9%9B%86/"/>
      <url>/CSS%E5%88%9B%E5%BB%BA%E7%85%A7%E7%89%87%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第六章。通过弹性盒子你可以设计适应不同屏幕大小的网页。在通过创建照片集来学习 CSS 弹性盒子的课程中，使用弹性盒子创建一个响应式的照片集网页。</p></blockquote><span id="more"></span><h3 id="一、重点-CSS-代码"><a href="#一、重点-CSS-代码" class="headerlink" title="一、重点 CSS 代码"></a>一、重点 CSS 代码</h3><p><code>*</code> selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#EBE7E7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#E0DDDD</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>id selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#gallery</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS Flexbox：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#gallery</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>media query：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">800px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#gallery</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#gallery</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、页面展示"><a href="#二、页面展示" class="headerlink" title="二、页面展示"></a>二、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过创建照片集来学习CSS弹性盒子/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过创作罗斯科绘画学习 CSS 盒子模型</title>
      <link href="/CSS%E5%88%9B%E4%BD%9C%E7%BD%97%E6%96%AF%E7%A7%91%E7%BB%98%E7%94%BB/"/>
      <url>/CSS%E5%88%9B%E4%BD%9C%E7%BD%97%E6%96%AF%E7%A7%91%E7%BB%98%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第五章。每个 HTML 元素都是一个盒子，它拥有着自己的间距和边框，这叫作盒子模型。在通过创作罗斯科绘画学习 CSS 盒子模型的课程中，使用 CSS 和盒子模型，创作属于自己的罗斯科风格的矩形艺术作品。</p></blockquote><span id="more"></span><h3 id="一、CSS-box-model"><a href="#一、CSS-box-model" class="headerlink" title="一、CSS box model"></a>一、CSS box model</h3><p><img src="https://blog.zhuangzhihao.top/img/diagram-3.png" alt></p><h3 id="二、重点-CSS-代码"><a href="#二、重点-CSS-代码" class="headerlink" title="二、重点 CSS 代码"></a>二、重点 CSS 代码</h3><p>Use padding to adjust the spacing within an element：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.frame</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid black;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use margins to adjust the spacing outside of an element：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">425px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#efb762</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">#efb762</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">9px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">0.6deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>overflow:hidden 溢出隐藏、清除浮动、解决外边距塌陷：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.canvas</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#4d0f00</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>filter 属性；box-shadow 属性；border-radius 属性；transform 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">475px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#8f0401</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">#8f0401</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0.4deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span>,</span><br><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.three</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">91%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">28%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#b20403</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#b20403</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">30px</span> <span class="number">25px</span> <span class="number">60px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">0.2deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、页面展示"><a href="#三、页面展示" class="headerlink" title="三、页面展示"></a>三、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过创作罗斯科绘画学习CSS盒子模型/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过编写注册表单学习 HTML 表单</title>
      <link href="/HTML%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%8D%95/"/>
      <url>/HTML%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第四章。你可以使用 HTML 表单收集访问网页的用户的信息。在通过编写注册表单学习 HTML 表单的课程中，通过编写一个注册页学习 HTML 表单，学习如何控制人们在表单中可以输入的数据类型，以及使用一些新的 CSS 工具装饰你的页面。</p></blockquote><span id="more"></span><h3 id="一、重点-HTML-代码"><a href="#一、重点-HTML-代码" class="headerlink" title="一、重点 HTML 代码"></a>一、重点 HTML 代码</h3><p>表格页面格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Registration Form<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Please fill out this form with the required information<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#x27;https://register-demo.freecodecamp.org&#x27;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--表格内容--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输入框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Enter Your First Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;first-name&quot;</span> <span class="attr">required</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Enter Your Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;last-name&quot;</span> <span class="attr">required</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Enter Your Email: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Create a New Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">minlen</span>=<span class="string">&quot;8&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;[a-z0-5]&#123;8,&#125;&quot;</span> <span class="attr">required</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单选&amp;复选框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account-type&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span> /&gt;</span> Personal Account<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account-type&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span> /&gt;</span> Business Account<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;terms&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span> <span class="attr">required</span> /&gt;</span> I accept the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.freecodecamp.org/news/terms-of-service/&quot;</span>&gt;</span>terms and conditions<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件、数字、下拉栏、文本框输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Upload a profile picture: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Input your age (years): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">min</span>=<span class="string">&quot;13&quot;</span> <span class="attr">max</span>=<span class="string">&quot;120&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>How did you hear about us?</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>(select one)<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>freeCodeCamp News<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>freeCodeCamp YouTube Channel<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>freeCodeCamp Forum<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>Other<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Provide a bio:</span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;bio&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;I like coding on the beach...&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、重点-CSS-代码"><a href="#二、重点-CSS-代码" class="headerlink" title="二、重点 CSS 代码"></a>二、重点 CSS 代码</h3><p>pseudo-class（<code>:not(:last-of-type)</code>）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">fieldset</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">2rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">fieldset</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-of-type</span>) &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid <span class="number">#3b3b4f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unset 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.inline</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: unset;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0.5em</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS attribute selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3b3b4f</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: white;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;file&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他表单设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1b1b32</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#f5f6f7</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Tahoma;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> auto;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60vw</span>;</span><br><span class="line"><span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">min-width</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0.5rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line">select &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0a0a23</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#0a0a23</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#dfdfe2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、页面展示"><a href="#三、页面展示" class="headerlink" title="三、页面展示"></a>三、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过编写注册表单学习HTML表单/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过构建一组彩色标记来学习 CSS 颜色</title>
      <link href="/CSS%E6%9E%84%E5%BB%BA%E4%B8%80%E7%BB%84%E5%BD%A9%E8%89%B2%E6%A0%87%E8%AE%B0/"/>
      <url>/CSS%E6%9E%84%E5%BB%BA%E4%B8%80%E7%BB%84%E5%BD%A9%E8%89%B2%E6%A0%87%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第三章。为你的网页选择正确的颜色可以大大提高对读者的审美吸引力。在通过构建一组彩色标记来学习 CSS 颜色的课程中，构建一组彩色标记，学习设置颜色值的不同方法以及如何将颜色相互配对。</p></blockquote><span id="more"></span><h3 id="一、重点-HTML-代码"><a href="#一、重点-HTML-代码" class="headerlink" title="一、重点 HTML 代码"></a>一、重点 HTML 代码</h3><p>head 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Colored Markers<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>含多个 CSS class 的 div 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS Color Markers<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;marker red&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sleeve&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;marker green&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sleeve&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;marker blue&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sleeve&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、重点-CSS-代码"><a href="#二、重点-CSS-代码" class="headerlink" title="二、重点 CSS 代码"></a>二、重点 CSS 代码</h3><p>padding 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.marker</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> opacity 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sleeve</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">110px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>border-left 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sleeve</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">10px</span> double <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多层 CSS class selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cap</span>,</span><br><span class="line"><span class="selector-class">.sleeve</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>linear-gradient 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">rgb</span>(<span class="number">122</span>, <span class="number">74</span>, <span class="number">14</span>), <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">62</span>, <span class="number">113</span>), <span class="built_in">rgb</span>(<span class="number">162</span>, <span class="number">27</span>, <span class="number">27</span>));</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">83</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>box-shadow 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.green</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">#55680D</span>, <span class="number">#71F53E</span>, <span class="number">#116C31</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">#3B7E20CC</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HSL color model：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">hsl</span>(<span class="number">186</span>, <span class="number">76%</span>, <span class="number">16%</span>), <span class="built_in">hsl</span>(<span class="number">223</span>, <span class="number">90%</span>, <span class="number">60%</span>), <span class="built_in">hsl</span>(<span class="number">240</span>, <span class="number">56%</span>, <span class="number">42%</span>));</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">hsla</span>(<span class="number">223</span>, <span class="number">59%</span>, <span class="number">31%</span>, <span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、页面展示"><a href="#三、页面展示" class="headerlink" title="三、页面展示"></a>三、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过构建一组彩色标记学习CSS颜色/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过编写咖啡店菜单学习基础 CSS</title>
      <link href="/CSS%E5%92%96%E5%95%A1%E5%BA%97%E8%8F%9C%E5%8D%95/"/>
      <url>/CSS%E5%92%96%E5%95%A1%E5%BA%97%E8%8F%9C%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第二章。CSS 负责告诉浏览器如何展示你的网页。你可以使用 CSS 设置 HTML 元素的颜色、字体、大小等属性。在通过编写咖啡店菜单学习基础 CSS 课程中，通过为一个咖啡店网站设计菜单页来学习 CSS。</p></blockquote><span id="more"></span><h3 id="一、重点-HTML-代码"><a href="#一、重点-HTML-代码" class="headerlink" title="一、重点 HTML 代码"></a>一、重点 HTML 代码</h3><p>meta 标签（自闭和）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>head 中 link CSS 文件 <code>styles.css</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>header 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CAMPER CAFE<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;established&quot;</span>&gt;</span>Est. 2020<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>div 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--header + main + footer--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>article 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/curriculum/css-cafe/coffee.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;coffee icon&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;flavor&quot;</span>&gt;</span>French Vanilla<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>3.00<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>footer 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">&quot;bottom-line&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.freecodecamp.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>Visit our website<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;address&quot;</span>&gt;</span>123 Free Code Camp Drive<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS type selector：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、重点-CSS-代码"><a href="#二、重点-CSS-代码" class="headerlink" title="二、重点 CSS 代码"></a>二、重点 CSS 代码</h3><p>CSS 注释：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* FOOTER */</span></span><br></pre></td></tr></table></figure><p>background-image 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg</span>);</span><br><span class="line">    <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS class selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: burlywood;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多层 CSS style selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Impact, serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多层 CSS class selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flavor</span>, <span class="selector-class">.dessert</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>display 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS pseudo-selector：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: brown;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给 img 和 hr 设置属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line">hr &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: brown;</span><br><span class="line">    <span class="attribute">border-color</span>: brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>font-size 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、页面展示"><a href="#三、页面展示" class="headerlink" title="三、页面展示"></a>三、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过编写咖啡店菜单学习基础CSS/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过编写猫咪相册应用学习 HTML</title>
      <link href="/HTML%E7%8C%AB%E5%92%AA%E7%9B%B8%E5%86%8C%E5%BA%94%E7%94%A8/"/>
      <url>/HTML%E7%8C%AB%E5%92%AA%E7%9B%B8%E5%86%8C%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freeCodeCamp 响应式网页设计的认证课程第一章。HTML 标签赋予了网页结构。你可以使用 HTML 标签添加照片、按钮和其它元素到你的网页。在通过编写猫咪相册应用学习 HTML 的课程中，通过编写一个猫咪相册应用，学习最常见的 HTML 标签。</p></blockquote><span id="more"></span><h3 id="一、重点代码"><a href="#一、重点代码" class="headerlink" title="一、重点代码"></a>一、重点代码</h3><p>页面格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>CatPhotoApp<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span>  <span class="comment">&lt;!--多个分块--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Copyright<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>figure 标签，用于规定独立的流内容（图像、图表、照片、代码等）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/lasagna.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;A slice of lasagna on a plate.&quot;</span>&gt;</span>   <span class="comment">&lt;!--img 标签自闭和--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>Cats <span class="tag">&lt;<span class="name">em</span>&gt;</span>love<span class="tag">&lt;/<span class="name">em</span>&gt;</span> lasagna.<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure><p>form 表单提交：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://freecatphotoapp.com/submit-cat-photo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;catphotourl&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;cat photo URL&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用 fieldset 标签对表单进行分组，一个表单可以有多个 fieldset：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>Is your cat an indoor or outdoor cat?<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;indoor&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;indoor-outdoor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;indoor&quot;</span> <span class="attr">checked</span>&gt;</span> Indoor<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;outdoor&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;indoor-outdoor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;outdoor&quot;</span>&gt;</span> Outdoor<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>What&#x27;s your cat&#x27;s personality?<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;loving&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;personality&quot;</span> <span class="attr">value</span>=<span class="string">&quot;loving&quot;</span> <span class="attr">checked</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;loving&quot;</span>&gt;</span>Loving<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;personality&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span>Lazy<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;energetic&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;personality&quot;</span> <span class="attr">value</span>=<span class="string">&quot;energetic&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;energetic&quot;</span>&gt;</span>Energetic<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、页面展示"><a href="#二、页面展示" class="headerlink" title="二、页面展示"></a>二、页面展示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://free-code-camp-demo.vercel.app/通过编写猫咪相册应用学习HTML/index.html" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构体与 typedef 的使用</title>
      <link href="/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%20typedef/"/>
      <url>/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%20typedef/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在我们编写程序时，有时候需要将不同类型的数据组合为一个整体，以便于引用。例如，一名学生有学号、姓名、性别、年龄、地址等属性，如果针对学生的学号、姓名、年龄等都单独定义一个变量，那么在有多名学生时，变量就难以分清。为此，C 语言提供结构体来管理不同类型的数据组合。</p></blockquote><span id="more"></span><h3 id="一、结构体的定义"><a href="#一、结构体的定义" class="headerlink" title="一、结构体的定义"></a>一、结构体的定义</h3><p>先声明一个结构体类型，再定义变量名。结构体类型声明要放在 main 函数之前，这样 main 函数中才可以使用这个结构体，工作中往往把结构体声明放在头文件中。</p><p>注意，结构体类型声明最后一定要加分号，否则会编译不通。另外，定义结构体变量时，使用 struct student 来定义，不能只有 struct 或 student，否则也会编译不通。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">    <span class="type">char</span> addr[<span class="number">30</span>];</span><br><span class="line">&#125;; <span class="comment">//结构体类型声明，注意最后一定要加分号</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s</span> =</span> &#123;<span class="number">1001</span>, <span class="string">&quot;lele&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">20</span>, <span class="number">85.4</span>, <span class="string">&quot;Shenzhen&quot;</span>&#125;; <span class="comment">//定义及初始化</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">sarr</span>[3];</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d%s %c %d %f %s\n&quot;</span>, s.num, s.name, s.sex, s.age, s.score, s.addr);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%s %c%d%f%s&quot;</span>, &amp;sarr[i].num, sarr[i].name, &amp;sarr[i].sex, &amp;sarr[i].age, &amp;sarr[i].score, sarr[i].addr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %s %c %d %f %s\n&quot;</span>, sarr[i].num, sarr[i].name, sarr[i].sex, sarr[i].age, sarr[i].score, sarr[i].addr);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sarr 是结构体数组变量。结构体的初始化只能在一开始定义，如果 <code>struct student s=&#123;1001,&quot;lele&quot;,&#39;M&#39;,20,85.4,&quot;Shenzhen&quot;&#125;</code> 已经执行，即 <code>struct student s</code> 已经定义，就不能再执行 <code>s=&#123;1001,&quot;lele&quot;,&#39;M&#39;,20,85.4,&quot;Shenzhen&quot;&#125;</code>。如果结构体变量已经定义, 那么只能对它的每个成员单独赋值，如 <code>s.num=1003</code>。</p><p>采用 <code>结构体变量名,成员名</code> 的形式来访问结构体成员，例如用 <code>s.num</code> 访问学号。</p><p>在进行打印输出时，必须访问到成员，而且 <code>printf</code> 中的 <code>%</code> 类型要与各成员匹配。使用 <code>scanf</code> 读取标准输入时，也必须是各成员取地址，然后进行存储，不可以写成 <code>&amp;s</code>，即不可以直接对结构体变量取地址。整型数据（<code>%d</code>）、浮点型数据（<code>%f</code>）、字符串型数据（<code>%s</code>）都会忽略空格，但是字符型数据（<code>%c</code>）不会忽略空格，所以如果要读取字符型数据，那么就要在待读取的字符数据与其他数据之间加入空格。</p><h3 id="二、结构体指针"><a href="#二、结构体指针" class="headerlink" title="二、结构体指针"></a>二、结构体指针</h3><p>一个结构体变量的指针就是该变量所占据的内存段的起始地址。可以设置一个指针变量，用它指向一个结构体变量，此时该指针变量的值是结构体变量的起始地址。指针变量也可以用来指向结构体数组中的元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s</span> =</span> &#123;<span class="number">1001</span>, <span class="string">&quot;wangle&quot;</span>, <span class="string">&quot;M&quot;</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">sarr</span>[3] =</span> &#123;<span class="number">1001</span>, <span class="string">&quot;lilei&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">1005</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">1007</span>, <span class="string">&quot;lili&quot;</span>, <span class="string">&#x27;F&#x27;</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>;</span> <span class="comment">//定义结构体指针</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    p = &amp;s;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s %c\n&quot;</span>, p-&gt;num, p-&gt;name, p-&gt;sex);</span><br><span class="line">    p = sarr;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s %c\n&quot;</span>, (*p).num, (*p).name, (*p).sex); <span class="comment">//方式一获取成员</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s %c\n&quot;</span>, p-&gt;num, p-&gt;name, p-&gt;sex);       <span class="comment">//方式二获取成员</span></span><br><span class="line">    num = p-&gt;num++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num=%d,p-&gt;num=%d\n&quot;</span>, num, p-&gt;num);</span><br><span class="line">    num = p++-&gt;num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num=%d,p-&gt;num=%d\n&quot;</span>, num, p-&gt;num);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，p 就是一个结构体指针，可以对结构体 s 取地址并赋给 p，这样借助成员选择操作符，就可以通过 p 访问结构体的每个成员，然后进行打印。我们知道数组名中存储的是数据的首地址，所以可以将 <code>sarr</code> 赋给 p，这样就可以通过两种方式访问对应的成员。</p><p>使用 <code>(*p).num</code> 访问成员为什么要加括号呢？原因是 “<code>.</code>” 成员选择的优先级高于 “<code>*</code>”（即取值）运算符，所以必须加括号，通过 <code>*p</code> 得到 <code>sarr[0]</code>，然后获取对应的成员。</p><h3 id="三、typedef-的使用"><a href="#三、typedef-的使用" class="headerlink" title="三、typedef 的使用"></a>三、typedef 的使用</h3><p>使用 typedef 声明新的类型名来代替已有的类型名。使用 stu 定义结构体变量和使用 struct student 定义结构体变量是等价的；使用 INTEGER 定义变量 ⅰ 和使用 int 定义变量i是等价的；pstu 等价于 <code>struct student*</code>，所以 p 是结构体指针变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//结构体指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">&#125; stu, *pstu; <span class="comment">// pstu 等价于 struct student *</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> INTEGER;  <span class="comment">//代码即注释</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    stu s = &#123;<span class="number">1001</span>, <span class="string">&quot;wangle&quot;</span>, <span class="string">&#x27;M&#x27;</span>&#125;;</span><br><span class="line">    pstu p;  <span class="comment">//也可写为 stu *p，此时 p 也是结构体指针</span></span><br><span class="line">    INTEGER i = <span class="number">10</span>;</span><br><span class="line">    p = &amp;s;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i=%d,p-&gt;num=%d\n&quot;</span>, i, p-&gt;num);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈 C 语言指针</title>
      <link href="/%E6%B5%85%E8%B0%88%E6%8C%87%E9%92%88/"/>
      <url>/%E6%B5%85%E8%B0%88%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>计算机内存区域中的每字节都对应一个编号，这个编号就是“地址”。如果在程序中定义了一个变量，那么在对程序进行编译时，系统就会给这个变量分配内存单元。如果我们在程序中需要将某个整型、浮点型或字符型数据变量的地址保存下来，需要用到 C 语言为我们提供的指针。在 C 语言中，指针变量是一种特殊的变量，它用来存放变量地址。掌握指针，对于学习操作系统、理解操作系统原理会有非常大的帮助。</p></blockquote><span id="more"></span><h3 id="一、取地址操作符和取值操作符"><a href="#一、取地址操作符和取值操作符" class="headerlink" title="一、取地址操作符和取值操作符"></a>一、取地址操作符和取值操作符</h3><p>取地址操作符为 <code>&amp;</code>，也称引用，通过该操作符我们可以获取一个变量的地址值；取值操作符为 <code>*</code>，也称解引用，通过该操作符我们可以得到一个地址对应的数据。取地址操作符和取值操作符优先级相同，按照自右向左的顺序相结合。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> *p; <span class="comment">//p就是一个指针变量，可以用来存储地址，类型是整型指针</span></span><br><span class="line">  p = &amp;i; <span class="comment">//初始化赋值</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i); <span class="comment">//直接访问</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p); <span class="comment">//间接访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针变量前面的表示该变量为指针型变量，例如 <code>float **pointer_1;</code> 的指针变量名是 <code>pointer_1</code>。在定义指针变量时必须指定其类型，只有整型变量的地址才能放到指向整型变量的指针变量中。</p><h3 id="二、指针的传递和偏移"><a href="#二、指针的传递和偏移" class="headerlink" title="二、指针的传递和偏移"></a>二、指针的传递和偏移</h3><p>C 语言中的函数调用均为值传递。指针的传递将变量 i 的地址传递给 change 函数时，实际效果是 <code>j=&amp;i</code>，这时 j 是一个指针变量，依然是值传递, 只是 j 内部存储的是变量 i 的地址，所以通过 <code>*j</code> 就间接访问到了与变量 i 相同的区域，通过 <code>*j=5</code> 就实现了对变量 i 的值的改变。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>* j)</span></span><br><span class="line">&#123;</span><br><span class="line">  *j = <span class="number">5</span>; <span class="comment">//间接访问得到变量 i</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> <span class="comment">//指针的传递</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;before change i=%d\n&quot;</span>, i);</span><br><span class="line">change(&amp;i); <span class="comment">//传递变量 i 的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;after change i=%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把对指针的加减称为指针的偏移，加就是向后偏移，减就是向前偏移，但对指针进行乘除是没有意义的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针的偏移</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  <span class="type">int</span> *p;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  p = a; <span class="comment">//保证等号两边的数值类型一致</span></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) <span class="comment">//正序输出</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, *(p+i));</span><br><span class="line">  &#125;</span><br><span class="line">  p = &amp;a[<span class="number">4</span>]; <span class="comment">//让 p 指向最后一个元素</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) <span class="comment">//逆序输出</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,*(p-i));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、指针与一维数组"><a href="#三、指针与一维数组" class="headerlink" title="三、指针与一维数组"></a>三、指针与一维数组</h3><p>数组在传递时弱化为指针。这是由于一维数组名中存储的是数组的首地址，因此一维数组在函数调用进行传递时，它的长度子函数无法知道。定义一个指针变量时，指针变量的类型要和数组的数据类型保持一致，通过取值操作, 就可获取数组元素, 这种方法称为指针法。也可以通过取下标的方式来获取数组元素并进行修改，这种方法称为下标法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">char</span> *d)</span>  <span class="comment">//*d 为形参</span></span><br><span class="line">&#123;</span><br><span class="line">  *d = <span class="string">&#x27;H&#x27;</span>; <span class="comment">//指针法</span></span><br><span class="line">  d[<span class="number">1</span>] = <span class="string">&#x27;E&#x27;</span>; <span class="comment">//下标法</span></span><br><span class="line">  *(d+<span class="number">2</span>) = <span class="string">&#x27;L&#x27;</span>; <span class="comment">//指针的偏移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> c[<span class="number">10</span>] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  change(c); <span class="comment">//c 为实参</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、指针与动态内存申请"><a href="#四、指针与动态内存申请" class="headerlink" title="四、指针与动态内存申请"></a>四、指针与动态内存申请</h3><p>C 语言的数组长度固定是因为其定义的整型、浮点型、字符型变量、数组变量都在栈空间中，而栈空间的大小在编译时是确定的。如果使用的空间大小不确定，那么就要使用堆空间申请动态内存申请。栈空间由系统自动管理，而堆空间的申请和释放需要自行管理，所以在具体例子中需要通过 free 函数释放堆空间。</p><p>栈是计算机系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈操作、出栈操作都有专门的指令执行，这就决定了栈的效率比较高；堆则是 C/C++ 函数库提供的数据结构，它的机制很复杂，例如为了分配一块内存，库函数会按照一定的算法在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能由于内存碎片太多）那么就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后返回。显然，堆的效率要比栈低得多。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="type">char</span> *p;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i); <span class="comment">//输入要申请的空间大小</span></span><br><span class="line">  p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(i)；<span class="comment">//使用 malloc 动态申请堆空间，(char *)是强制类型转换</span></span><br><span class="line">  <span class="built_in">strcpy</span>(p, <span class="string">&quot;malloc success&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(p);</span><br><span class="line">  <span class="built_in">free</span>(p)；<span class="comment">//free 时必须使用 malloc 申请时返回的指针值，不能进行任何偏移</span></span><br><span class="line">  p = <span class="literal">NULL</span>; <span class="comment">//消除野指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C 初始动态分配 vs C++ 初始动态分配</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C 初始动态分配</span></span><br><span class="line">L.data = (ElemType *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Elemtype) *InitSize);</span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) *<span class="number">10</span>);</span><br><span class="line"><span class="comment">// C++ 初始动态分配</span></span><br><span class="line">L.data = <span class="keyword">new</span> Elemtype[InitSize];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gets 函数与 puts 函数</title>
      <link href="/gets%E5%87%BD%E6%95%B0%E4%B8%8Eputs%E5%87%BD%E6%95%B0/"/>
      <url>/gets%E5%87%BD%E6%95%B0%E4%B8%8Eputs%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>C 语言标准输入 scanf 在通过 <code>%s</code> 读取字符串时遇到空格就认为读取结束，这样没办法把一行带有空格的字符串存入到一个字符数组中。所以当需要输入的字符串中含有空格时，我们需要使用 gets 函数进行读取，使用 puts 函数进行输出。</p></blockquote><span id="more"></span><h3 id="一、字符数组"><a href="#一、字符数组" class="headerlink" title="一、字符数组"></a>一、字符数组</h3><p>字符数组的定义方法一维数组、二维数组类似，例如 <code>char c[10]=&quot;hello&quot;</code>。</p><p>因为 C 语言规定字符串的结束标志为 <code>\0</code>，而系统会对字符串常量自动加一个 <code>\0</code>，为了保证处理方法一致，一般会人为地在字符数组中添加 <code>\0</code>，所以字符数组存储的字符串长度必须比字符数组少 1 字节。例如 <code>char[10]</code> 最多存储 9 个字符，最后一个字符用来存储 <code>\0</code>。</p><p>字符数组的数组名里存的就是字符数组的起始地址，类型是字符指针。即编译器给字符数组 c 内部存了一个值，c 中存储的值的类型是字符指针。</p><h3 id="二、gets-函数和-puts-函数"><a href="#二、gets-函数和-puts-函数" class="headerlink" title="二、gets 函数和 puts 函数"></a>二、gets 函数和 puts 函数</h3><p>scanf 函数没办法把一行带有空格的字符串存入到一个字符数组中，所以当需要输入的字符串中含有空格时，我们需要使用 gets 函数进行读取：<code>char *gets(char *str)</code>。</p><p>gets 函数从 STDIN（标准输入）读取字符并把它们加载到 str（字符串）中，直到遇到换行符（\n）或到达 EOF。gets 遇到 <code>\n</code> 后, 不会存储 <code>\n</code>，而是将其翻译为空字符 <code>\0</code>。</p><p>puts 函数类似于 printf 函数，用于输出标准输出：<code>int puts(char *str);</code>。</p><p>函数 puts 把 str (字符串) 写人STDOU (标准输出)。puts 执行成功时返回非负值，执行失败时返回 EOF。相对于 printf 函数，puts 只能用于输出字符串，同时多打印一个换行符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c[<span class="number">20</span>];</span><br><span class="line">gets(c); <span class="comment">//当一次读取一行时，使用gets</span></span><br><span class="line"><span class="built_in">puts</span>(c); <span class="comment">//等价于printf(&quot;%s\n&quot;,c);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然用 <code>gets()</code> 时有空格也可以直接输入，但是 gets 不检查预留存储区是否能够容纳实际输入的数据，换句话说，如果输入的字符数目大于数组的长度，gets 无法检测到这个问题，就会发生内存越界，所以编程时建议使用 <code>fgets()</code>。fgets 相对于 gets 去读取标准输入时，会把 <code>\n</code> 放到字符数组中。<code>char *fgets(char *s, int size, FILE *stream);</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c[<span class="number">20</span>];</span><br><span class="line">fgets(c, <span class="keyword">sizeof</span>(c), <span class="built_in">stdin</span>);</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(c);</span><br><span class="line">  c[len <span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">puts</span>(c);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、str-系列字符串操作函数"><a href="#三、str-系列字符串操作函数" class="headerlink" title="三、str 系列字符串操作函数"></a>三、str 系列字符串操作函数</h3><p>str 系列字符串操作函数主要包括 strlen、strcpy 、strcmp、strcat 等。strlen 函数用于统计字符串长度，strcpy 函数用于将某个字符串复制到字符数组中，strcmp 函数用于比较两个字符串的大小，strcat 函数用于将两个字符串连接到一起：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">strlen</span><span class="params">(<span class="type">char</span> *str)</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">strcpy</span><span class="params">(<span class="type">char</span> *to, <span class="type">const</span> <span class="type">char</span> *from)</span>; <span class="comment">//有const修饰代表此处可以放字符串常量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str1, <span class="type">const</span> <span class="type">char</span> *str2)</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">strcat</span><span class="params">(<span class="type">char</span> *str1, <span class="type">const</span> <span class="type">char</span> *str2)</span>;</span><br></pre></td></tr></table></figure><p>对于传参类型 <code>char*</code>，直接放入字符数组的数组名即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">20</span>] = <span class="string">&quot;zhuang&quot;</span>;</span><br><span class="line">    <span class="built_in">puts</span>(c); <span class="comment">//zhuang</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组c内字符串的长度=%d\n&quot;</span>, <span class="built_in">strlen</span>(c));</span><br><span class="line">    <span class="type">char</span> d[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(d, c); <span class="comment">// 将c的内容复制到d中</span></span><br><span class="line">    <span class="built_in">puts</span>(d); <span class="comment">//zhuang</span></span><br><span class="line">    <span class="built_in">strcpy</span>(d, <span class="string">&quot;study&quot;</span>); <span class="comment">// 将字符串study复制到d中</span></span><br><span class="line">    <span class="comment">//strcmp比较字符串对应字符位置的ascii码值</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">strcmp</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;how&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;两个字符串比较结果=%d\n&quot;</span>, ret);  <span class="comment">//-1</span></span><br><span class="line">    <span class="comment">//strcat拼接两个字符串</span></span><br><span class="line">    <span class="built_in">strcat</span>(d, <span class="string">&quot;!&quot;</span>); <span class="comment">// 将字符串!拼接到d中</span></span><br><span class="line">    <span class="built_in">puts</span>(d);  <span class="comment">//study!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、判断回文数"><a href="#四、判断回文数" class="headerlink" title="四、判断回文数"></a>四、判断回文数</h3><p>读取一个字符串，字符串可能含有空格，将字符串逆转，原来的字符串与逆转后字符串相同，输出 0，原字符串小于逆转后字符串输出 -1，大于逆转后字符串输出 1。例如输入 hello，逆转后的字符串为 olleh，因为hello 小于 olleh，所以输出 -1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> c[<span class="number">20</span>], d[<span class="number">20</span>];</span><br><span class="line">  gets(c);</span><br><span class="line">  <span class="type">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="built_in">strlen</span>(c) - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--, j++)</span><br><span class="line">  &#123;</span><br><span class="line">    d[j] = c[i];</span><br><span class="line">  &#125;</span><br><span class="line">  d[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="type">int</span> result = <span class="built_in">strcmp</span>(c, d);</span><br><span class="line">  <span class="keyword">if</span> (result &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (result &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Filter 和 Listener</title>
      <link href="/Filter&amp;Listener/"/>
      <url>/Filter&amp;Listener/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java Web 核心第五章。Filter 和 Listener 是 JavaWeb 三大组件（Servlet、Filter、Listener）的另两个组成部分。Filter 表示过滤器，可以把对资源的请求拦截下来，从而实现一些特殊的功能。Listener 监听器可以监听就是在 <code>application</code>，<code>session</code>，<code>request</code> 三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件。 <code>application</code> 是 <code>ServletContext</code> 类型的对象。<code>ServletContext</code> 代表整个 web 应用，在服务器启动的时候，tomcat 会自动创建该对象，在服务器关闭时会自动销毁该对象。</p></blockquote><span id="more"></span><h3 id="一、Filter"><a href="#一、Filter" class="headerlink" title="一、Filter"></a>一、Filter</h3><p>过滤器一般完成一些通用的操作。比如每个资源都要写一些代码完成某个功能，此时我们可以将这些代码写在过滤器中，因为请求每一个资源都要经过过滤器。例如：权限控制、统一编码处理、敏感字符处理等。</p><h4 id="Filter-快速入门"><a href="#Filter-快速入门" class="headerlink" title="Filter 快速入门"></a>Filter 快速入门</h4><p>进行 <code>Filter</code> 开发分成以下三步实现：</p><ol><li><p>定义类，实现 Filter 接口，并重写其所有方法。</p></li><li><p>配置 Filter 拦截资源的路径：在类上定义 <code>@WebFilter</code> 注解。而注解的 <code>value</code> 属性值 <code>/*</code> 表示拦截所有的资源。</p></li><li><p>在 doFilter 方法中输出一句话，并放行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1.FilterDemo...&quot;</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="Filter-执行流程"><a href="#Filter-执行流程" class="headerlink" title="Filter 执行流程"></a>Filter 执行流程</h4><p><img src="https://blog.zhuangzhihao.top/img/filter01.png" alt="filter01" style="zoom:70%;"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a[执行放行前逻辑] --&gt; b[放行] --&gt; c[访问资源] --&gt; d[执行放行后逻辑]</span><br></pre></td></tr></table></figure><h4 id="Filter-拦截路径配置"><a href="#Filter-拦截路径配置" class="headerlink" title="Filter 拦截路径配置"></a>Filter 拦截路径配置</h4><p>拦截路径表示 Filter 会对请求的哪些资源进行拦截，使用 <code>@WebFilter</code> 注解进行配置。如：<code>@WebFilter(&quot;拦截路径&quot;)</code> 。拦截路径的配置方式和 <code>Servlet</code> 的请求资源路径配置方式一样，但是表示的含义不同。</p><p>拦截路径有四种配置方式：</p><ol><li>拦截具体的资源：<code>/index.jsp</code>：只有访问 <code>index.jsp</code> 时才会被拦截。</li><li>目录拦截：<code>/user/*</code>：访问 <code>/user</code> 下的所有资源，都会被拦截。</li><li>后缀名拦截：<code>*.jsp</code>：访问后缀名为 <code>jsp</code> 的资源，都会被拦截。</li><li>拦截所有：<code>/*</code>：访问所有资源，都会被拦截。</li></ol><h4 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h4><p>过滤器链是指在一个 Web 应用，可以配置多个过滤器，这多个过滤器称为过滤器链。注解配置 Filter 的优先级是按照过滤器类名（字符串）的自然先后排序。</p><p><img src="https://blog.zhuangzhihao.top/img/filter02.png" alt="filter02" style="zoom:70%;"></p><h4 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h4><p>访问服务器资源时，需要先进行登录验证，如果没有登录，则自动跳转到登录页面。只需要写一个 <code>Filter</code> ，在该过滤器中进行登陆状态校验即可。而在该 <code>Filter</code> 中逻辑如下：</p><p><img src="https://blog.zhuangzhihao.top/img/filter03.png" alt="filter03" style="zoom:70%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断访问资源路径是否和登录注册相关</span></span><br><span class="line">        <span class="comment">//1,在数组中存储登陆和注册相关的资源路径</span></span><br><span class="line">        String[] urls = &#123;<span class="string">&quot;/login.jsp&quot;</span>,<span class="string">&quot;/imgs/&quot;</span>,<span class="string">&quot;/css/&quot;</span>,<span class="string">&quot;/loginServlet&quot;</span>,<span class="string">&quot;/register.jsp&quot;</span>,<span class="string">&quot;/registerServlet&quot;</span>,<span class="string">&quot;/checkCodeServlet&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//2,获取当前访问的资源路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> req.getRequestURL().toString(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">//3,遍历数组，获取到每一个需要放行的资源路径</span></span><br><span class="line">        <span class="keyword">for</span> (String u : urls) &#123;</span><br><span class="line">            <span class="comment">//4,判断当前访问的资源路径字符串是否包含要放行的的资源路径字符串</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                比如当前访问的资源路径是  /brand-demo/login.jsp</span></span><br><span class="line"><span class="comment">                而字符串 /brand-demo/login.jsp 包含了  字符串 /login.jsp ，所以这个字符串就需要放行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span>(url.contains(u))&#123;</span><br><span class="line">                <span class="comment">//找到了，放行</span></span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">                <span class="comment">//break;</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//1. 判断session中是否有user</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断user是否为null</span></span><br><span class="line">        <span class="keyword">if</span>(user != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 登录过了</span></span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有登陆，存储提示信息，跳转到登录页面</span></span><br><span class="line"></span><br><span class="line">            req.setAttribute(<span class="string">&quot;login_msg&quot;</span>,<span class="string">&quot;您尚未登陆！&quot;</span>);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(req,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、Listener"><a href="#二、Listener" class="headerlink" title="二、Listener"></a>二、Listener</h3><h4 id="Listener-分类"><a href="#Listener-分类" class="headerlink" title="Listener 分类"></a>Listener 分类</h4><p>JavaWeb 提供了8个监听器：</p><p><img src="https://blog.zhuangzhihao.top/img/listener01.png" alt="listener01" style="zoom:80%;"></p><h4 id="ServletContextListener-监听器"><a href="#ServletContextListener-监听器" class="headerlink" title="ServletContextListener 监听器"></a><code>ServletContextListener</code> 监听器</h4><p><code>ServletContextListener</code> 接口中有以下两个方法：</p><ol><li><code>void contextInitialized(ServletContextEvent sce)</code>：<code>ServletContext</code> 对象被创建了会自动执行的方法。</li><li><code>void contextDestroyed(ServletContextEvent sce)</code>：<code>ServletContext</code> 对象被销毁时会自动执行的方法。</li></ol><p>定义一个类，实现<code>ServletContextListener</code> 接口，重写所有的抽象方法，使用 <code>@WebListener</code> 进行配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextLoaderListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="comment">//加载资源</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ContextLoaderListener...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务器，就可以在启动的日志信息中看到 <code>contextInitialized()</code> 方法输出的内容，同时也说明了 <code>ServletContext</code> 对象在服务器启动的时候被创建了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 会话跟踪技术</title>
      <link href="/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/"/>
      <url>/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java Web 核心第四章。当用户打开浏览器，访问 web 服务器的资源时，会话就会建立，直到有一方断开连接，会话结束。在访问时，服务器会收到多个请求，这多个请求可能来自多个浏览器，服务器需要用会话跟踪来识别请求是否来自同一个浏览器。会话追踪技术在实际开发中也非常重要，可以用于实现一次会话多次请求之间的数据共享。</p></blockquote><span id="more"></span><h3 id="一、会话跟踪技术的概述"><a href="#一、会话跟踪技术的概述" class="headerlink" title="一、会话跟踪技术的概述"></a>一、会话跟踪技术的概述</h3><p>会话：从浏览器发出请求到服务端响应数据给前端之后，一次会话（在浏览器和服务器之间）就被建立了。会话被建立后，如果浏览器或服务端都没有被关闭，则会话就会持续建立着。浏览器和服务器就可以继续使用该会话进行请求发送和响应，上述的整个过程就被称之为会话。</p><p>在一次会话中可以包含多次请求和响应。</p><p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。服务器用来识别浏览器的过程就是会话跟踪。</p><p>服务器识别浏览器后就可以在同一个会话中多次请求之间来共享数据。</p><p>为什么现在浏览器和服务器不支持数据共享呢？</p><ul><li>浏览器和服务器之间使用的是 HTTP 请求来进行数据传输，HTTP 协议是无状态的，每次浏览器向服务器请求时，服务器都会将该请求视为新的请求。</li><li>HTTP 协议设计成无状态的目的是让每次请求之间相互独立，互不影响。</li><li>请求与请求之间独立后，就无法实现多次请求之间的数据共享。</li></ul><p>会话跟踪技术的具体实现方式：</p><ol><li><p>客户端会话跟踪技术：Cookie</p></li><li><p>服务端会话跟踪技术：Session</p></li></ol><p>这两个技术都可以实现会话跟踪，它们之间最大的区别：Cookie 是存储在浏览器端而 Session 是存储在服务器端。</p><h3 id="二、Cookie"><a href="#二、Cookie" class="headerlink" title="二、Cookie"></a>二、Cookie</h3><p>Cookie：客户端会话技术，将数据保存到客户端，以后每次请求都携带 Cookie 数据进行访问。</p><p><img src="https://blog.zhuangzhihao.top/img/cookie01.png" alt></p><p>服务端提供了两个 Servlet，分别是 Servlet A 和 Servlet B。</p><p>浏览器发送 HTTP 请求 1 给服务端，服务端 Servlet A 接收请求并进行业务处理；服务端 Servlet A 在处理的过程中可以创建一个 Cookie 对象并将 <code>name=zs</code> 的数据存入 Cookie；服务端 Servlet A 在响应数据的时候，会把 Cookie 对象响应给浏览器；浏览器接收到响应数据，会把 Cookie 对象中的数据存储在浏览器内存中，此时浏览器和服务端就建立了一次会话。</p><p>在同一次会话中浏览器再次发送 HTTP 请求 2 给服务端 Servlet B，浏览器会携带 Cookie 对象中的所有数据；Servlet B 接收到请求和数据后，就可以获取到存储在 Cookie 对象中的数据，这样同一个会话中的多次请求之间就实现了数据共享。</p><h4 id="Cookie-的基本使用"><a href="#Cookie-的基本使用" class="headerlink" title="Cookie 的基本使用"></a>Cookie 的基本使用</h4><p>发送Cookie：</p><ol><li>创建 Cookie 对象，并设置数据：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li>使用 response 对象发送Cookie到客户端：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><p>在 Servlet 中生成 Cookie 对象并存入数据，然后将数据发送给浏览器：</p><ol><li>创建 Maven 项目 cookie-demo，并在 pom.xml 添加依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jstl--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>编写 Servlet 类，名称为 AServlet，在Servlet中创建Cookie对象，存入数据，发送给前端：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/aServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//发送Cookie</span></span><br><span class="line">        <span class="comment">//1. 创建Cookie对象</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 发送Cookie，response</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取 Cookie：</p><ol><li>获取客户端携带的所有 Cookie，使用 request 对象：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br></pre></td></tr></table></figure><ol><li>遍历数组，获取每一个 Cookie 对象，使用 Cookie 对象方法获取数据：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cookie.getName();</span><br><span class="line">cookie.getValue();</span><br></pre></td></tr></table></figure><p>在 Servlet 中获取前一个案例存入在 Cookie 对象中的数据：</p><ol><li>编写一个新 Servlet 类，名称为 BServlet，在 BServlet 中使用 request 对象获取 Cookie 数组，遍历数组，从数据中获取指定名称对应的值：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/bServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取Cookie</span></span><br><span class="line">        <span class="comment">//1. 获取Cookie数组</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="comment">//2. 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="comment">//3. 获取数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;username&quot;</span>.equals(name))&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">                System.out.println(name+<span class="string">&quot;:&quot;</span>+value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Cookie-的原理分析"><a href="#Cookie-的原理分析" class="headerlink" title="Cookie 的原理分析"></a>Cookie 的原理分析</h4><p>对于 Cookie 的实现原理是基于 HTTP 协议的两个请求头信息：响应头 <code>set-cookie</code> 和请求头 <code>cookie</code>。</p><p><img src="https://blog.zhuangzhihao.top/img/cookie02.png" alt></p><p>对于 AServlet 响应数据的时候，Tomcat 服务器是基于 HTTP 协议来响应数据，当 Tomcat 发现后端要返回的是一个 Cookie 对象之后，Tomcat 就会在响应头中添加一行数据 <code>Set-Cookie:username=zs</code>。浏览器获取到响应结果后，从响应头中就可以获取到 <code>Set-Cookie</code> 对应值 <code>username=zs</code>，并将数据存储在浏览器的内存中。</p><p>浏览器再次发送请求给 BServlet 的时候，浏览器会自动在请求头中添加 <code>Cookie: username=zs</code> 发送给服务端 BServlet。Request 对象会把请求头中 cookie 对应的值封装成一个个 Cookie 对象，最终形成一个数组。BServlet 通过 Request 对象获取到 <code>Cookie[]</code> 后，就可以从中获取自己需要的数据。</p><h4 id="Cookie-的使用细节"><a href="#Cookie-的使用细节" class="headerlink" title="Cookie 的使用细节"></a>Cookie 的使用细节</h4><p>Cookie 的存活时间：默认情况下，Cookie 存储在浏览器内存中，当浏览器关闭，内存释放，则 Cookie 被销毁。</p><p>如何将 Cookie 持久化存储？Cookie 其实已经为我们提供好了对应的 API 来完成这件事，这个 API 就是 <code>setMaxAge</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setMaxAge(<span class="type">int</span> seconds)  <span class="comment">//设置Cookie存活时间</span></span><br></pre></td></tr></table></figure><p><code>setMaxAge</code> 参数值为：</p><ol><li><p>正数：将 Cookie 写入浏览器所在电脑的硬盘，持久化存储，到时间自动删除。</p></li><li><p>负数：默认值，Cookie 在当前浏览器内存中，当浏览器关闭，则 Cookie 被销毁。</p></li><li><p>零：删除对应 Cookie。</p></li></ol><p>在 AServlet 中设置 Cookie 的存活时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/aServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//发送Cookie</span></span><br><span class="line">        <span class="comment">//1. 创建Cookie对象</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        <span class="comment">//设置存活时间   ，1周 7天</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>); <span class="comment">//易阅读，需程序计算</span></span><br><span class="line"><span class="comment">//cookie.setMaxAge(604800); //不易阅读(可以使用注解弥补)，程序少进行一次计算</span></span><br><span class="line">        <span class="comment">//2. 发送Cookie，response</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Cookie-存储中文"><a href="#Cookie-存储中文" class="headerlink" title="Cookie 存储中文"></a>Cookie 存储中文</h4><p>Cookie 不能存储中文，但是如果有这方面的需求，可以使用 <code>URL编码</code> 进行转码：</p><ol><li>在 AServlet 中对中文进行 URL 编码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/aServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//发送Cookie</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        <span class="comment">//对中文进行URL编码</span></span><br><span class="line">        value = URLEncoder.encode(value, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;存储数据：&quot;</span>+value);</span><br><span class="line">        <span class="comment">//将编码后的值存入Cookie中</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>,value);</span><br><span class="line">        <span class="comment">//设置存活时间   ，1周 7天</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);</span><br><span class="line">        <span class="comment">//2. 发送Cookie，response</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 BServlet 中获取值，并对值进行解码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/bServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取Cookie</span></span><br><span class="line">        <span class="comment">//1. 获取Cookie数组</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="comment">//2. 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="comment">//3. 获取数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;username&quot;</span>.equals(name))&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();<span class="comment">//获取的是URL编码后的值 %E5%BC%A0%E4%B8%89</span></span><br><span class="line">                <span class="comment">//URL解码</span></span><br><span class="line">                value = URLDecoder.decode(value,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                System.out.println(name+<span class="string">&quot;:&quot;</span>+value);<span class="comment">//value解码后为 张三</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、Session"><a href="#三、Session" class="headerlink" title="三、Session"></a>三、Session</h3><p>Session：另一种服务端会话跟踪技术，将数据保存到服务端。</p><p>Session 是存储在服务端而 Cookie 是存储在客户端。存储在客户端的数据容易被窃取和截获，存在很多不安全的因素，存储在服务端的数据相比于客户端来说就更安全。</p><p><img src="https://blog.zhuangzhihao.top/img/session01.png" alt></p><p>在服务端的 AServlet 获取一个 Session 对象，把数据存入其中，在服务端的 BServlet 获取到相同的 Session 对象，从中取出数据，就可以实现一次会话中多次请求之间的数据共享了。</p><h4 id="Session-的基本使用"><a href="#Session-的基本使用" class="headerlink" title="Session 的基本使用"></a>Session 的基本使用</h4><p>JavaEE 提供了 HttpSession 接口来实现一次会话的多次请求之间数据共享功能。</p><p>获取 Session 对象,使用的是 request 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br></pre></td></tr></table></figure><p>Session 对象提供的功能:</p><ul><li><p>Session 的获取：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br></pre></td></tr></table></figure></li><li><p>Session 常用方法的使用：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object o)</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>存储数据到 session 域中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object o)</span></span><br></pre></td></tr></table></figure></li><li><p>根据 key，获取值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span></span><br></pre></td></tr></table></figure></li><li><p>根据 key，删除该键值对：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span></span><br></pre></td></tr></table></figure></li></ul><p>在一个 Servlet 中往 Session 中存入数据，在另一个 Servlet 中获取 Session 中存入的数据：</p><ol><li>创建名为 SessionDemo1 的 Servlet 类，获取 Session 对象、存储数据：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//存储到Session中</span></span><br><span class="line">        <span class="comment">//1. 获取Session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//2. 存储数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建名为 SessionDemo2 的 Servlet 类，获取 Session 对象、获取数据：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionDemo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取数据，从session中</span></span><br><span class="line">        <span class="comment">//1. 获取Session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//2. 获取数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">username</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Session-的原理分析"><a href="#Session-的原理分析" class="headerlink" title="Session 的原理分析"></a>Session 的原理分析</h4><p>Session 是基于 Cookie 实现的，所以 Session 实现的也是一次会话中的多次请求之间的数据共享。</p><p>Session 要想实现一次会话多次请求之间的数据共享，就必须要保证多次请求获取 Session 的对象是同一个，如果是不同浏览器或者重新打开浏览器后，打印的 Session 就不一样了。</p><h4 id="Session-的使用细节"><a href="#Session-的使用细节" class="headerlink" title="Session 的使用细节"></a>Session 的使用细节</h4><p>Session 钝化与活化：</p><ul><li><p>Session 数据存储在服务端，服务器重启后，Session数据会被保存；</p></li><li><p>浏览器被关闭启动后，重新建立的连接就已经是一个全新的会话，获取的 Session 数据也是一个新的对象；</p></li><li><p>Session 的数据要想共享，浏览器不能关闭，所以 Session 数据不能长期保存数据；</p></li><li>Cookie 是存储在客户端，是可以长期保存的。</li></ul><p>Session 的销毁有两种方式：</p><ol><li>默认情况下，无操作，默认 30 分钟自动销毁，失效时间可以在项目的 web.xml 中配置修改：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>100<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>调用 Session 对象的 <code>invalidate()</code> 进行销毁，该销毁方法一般会在用户退出的时候及时将 Session 销毁掉：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionDemo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取数据，从session中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 获取Session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        System.out.println(session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 销毁</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">        <span class="comment">//2. 获取数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">username</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、Cookie-和-Session"><a href="#四、Cookie-和-Session" class="headerlink" title="四、Cookie 和 Session"></a>四、Cookie 和 Session</h3><p>Cookie 和 Session 都是来完成一次会话内多次请求间数据共享的。</p><p>Cookie 和 Session 的区别：</p><ul><li>存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端。</li><li>安全性：Cookie 不安全，Session 安全。</li><li>数据大小：Cookie 最大 3 KB，Session 无大小限制。</li><li>存储时间：Cookie 可以通过 <code>setMaxAge()</code> 长期存储，Session 默认 30 分钟。</li><li>服务器性能：Cookie 不占服务器资源，Session 占用服务器资源。</li></ul><p>Cookie 和 Session 的应用场景：</p><ul><li>购物车：使用 Cookie 来存储；</li><li>以登录用户的名称展示：使用 Session 来存储；</li><li>记住我功能使用 Cookie 来存储；</li><li>验证码使用 Session 来存储。</li></ul><p>简而言之，Cookie 是用来保证用户在未登录情况下的身份识别，Session 是用来保存用户登录后的数据。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JSP - Java Server Pages</title>
      <link href="/JSP/"/>
      <url>/JSP/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java Web 核心第三章。JSP（Java Server Pages）是由 Sun Microsystems 公司主导创建的一种动态网页技术标准。JSP 部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成 HTML、XML 或其他格式文档的 Web 网页，然后返回给请求者。</p></blockquote><span id="more"></span><h3 id="一、JSP-概述"><a href="#一、JSP-概述" class="headerlink" title="一、JSP 概述"></a>一、JSP 概述</h3><p>JSP（全称：Java Server Pages）：Java 服务端页面。是一种动态的网页技术，其中既可以定义 HTML、JS、CSS等静态内容，还可以定义 Java 代码的动态内容，也就是 <code>JSP = HTML + Java</code>：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;JSP,Hello World&lt;/h1&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,jsp~&quot;</span>);</span><br><span class="line">        %&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>上面代码 <code>h1</code> 标签内容是展示在页面上，而 Java 的输出语句是输出在 idea 的控制台</p><p>JSP 作用：简化开发，避免了在 Servlet 中直接输出 HTML 标签。</p><h4 id="JSP-快速入门"><a href="#JSP-快速入门" class="headerlink" title="JSP 快速入门"></a>JSP 快速入门</h4><ol><li>创建一个 maven 的 web 项目，项目结构如下：</li></ol><p><img src="https://blog.zhuangzhihao.top/img/jsp01.jpg" alt></p><p><code>pom.xml</code> 文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>在 <code>dependencies</code> 标签中导入 JSP 依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该依赖的 <code>scope</code> 必须设置为 <code>provided</code>，因为 tomcat 中有这个 jar 包了，所以在打包时我们是不希望将该依赖打进到我们工程的 war 包中。</p><ol><li>在项目的 <code>webapp</code> 下创建 JSP 页面，在 <code>hello.jsp</code> 页面中书写 <code>HTML</code> 标签和 <code>Java</code> 代码：</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;hello jsp&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,jsp~&quot;</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol><li>测试，在浏览器地址栏输入 <code>http://localhost:8080/jsp-demo/hello.jsp</code>。</li></ol><h3 id="二、JSP-原理"><a href="#二、JSP-原理" class="headerlink" title="二、JSP 原理"></a>二、JSP 原理</h3><p>JSP 本质上就是一个 Servlet。浏览器第一次访问 <code>hello.jsp</code> 页面时，<code>tomcat</code> 会将 <code>hello.jsp</code> 转换为名为 <code>hello_jsp.java</code> 的一个 <code>Servlet</code>，<code>tomcat</code> 再将转换的 <code>servlet</code> 编译成字节码文件 <code>hello_jsp.class</code>，<code>tomcat</code> 会执行该字节码文件，向外提供服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承关系</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">hello_jsp</span> <span class="keyword">extends</span> <span class="title class_">org</span>.apache.jasper.runtime.HttpJspBase <span class="keyword">implements</span> <span class="title class_">org</span>,apache.jasper.runtime.JspSourceDependent &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HttpJspBase</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> <span class="keyword">implements</span> <span class="title class_">HttpJspPage</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="三、JSP-脚本"><a href="#三、JSP-脚本" class="headerlink" title="三、JSP 脚本"></a>三、JSP 脚本</h3><p>JSP 脚本用于在 JSP页面内定义 Java 代码。</p><p>JSP 脚本有如下三个分类：</p><ol><li><code>&lt;%...%&gt;</code>：内容会直接放到 <code>_jspService()</code> 方法之中。</li><li><code>&lt;%=…%&gt;</code>：内容会放到 <code>out.print()</code> 中，作为 <code>out.print()</code> 的参数。</li><li><code>&lt;%!…%&gt;</code>：内容会放到 <code>_jspService()</code> 方法之外，被类直接包含。</li></ol><h4 id="JSP-脚本案例"><a href="#JSP-脚本案例" class="headerlink" title="JSP 脚本案例"></a>JSP 脚本案例</h4><p>使用JSP脚本展示品牌数据</p><p>将 <code>Brand.java</code> 文件放置到项目的 <code>com.itheima.pojo</code> 包下，在项目的 <code>webapp</code> 中创建 <code>brand.jsp</code> ，并将 <code>brand.html</code>页面中的内容拷贝过来。<code>brand.jsp</code> 内容如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.itheima.pojo.Brand&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 查询数据库</span></span><br><span class="line">    List&lt;Brand&gt; brands = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Brand&gt;();</span><br><span class="line">    brands.add(<span class="keyword">new</span> <span class="title class_">Brand</span>(<span class="number">1</span>,<span class="string">&quot;三只松鼠&quot;</span>,<span class="string">&quot;三只松鼠&quot;</span>,<span class="number">100</span>,<span class="string">&quot;三只松鼠，好吃不上火&quot;</span>,<span class="number">1</span>));</span><br><span class="line">    brands.add(<span class="keyword">new</span> <span class="title class_">Brand</span>(<span class="number">2</span>,<span class="string">&quot;优衣库&quot;</span>,<span class="string">&quot;优衣库&quot;</span>,<span class="number">200</span>,<span class="string">&quot;优衣库，服适人生&quot;</span>,<span class="number">0</span>));</span><br><span class="line">    brands.add(<span class="keyword">new</span> <span class="title class_">Brand</span>(<span class="number">3</span>,<span class="string">&quot;小米&quot;</span>,<span class="string">&quot;小米科技有限公司&quot;</span>,<span class="number">1000</span>,<span class="string">&quot;为发烧而生&quot;</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;新增&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span> width=<span class="string">&quot;800&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;品牌名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;企业名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;排序&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;品牌介绍&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;状态&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; brands.size(); i++) &#123;</span><br><span class="line">            <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> brands.get(i);</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=brand.getId()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=brand.getBrandName()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=brand.getCompanyName()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=brand.getOrdered()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=brand.getDescription()%&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;%=brand.getStatus() == <span class="number">1</span> ? <span class="string">&quot;启用&quot;</span>:<span class="string">&quot;禁用&quot;</span>%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;修改&lt;/a&gt; &lt;a href=<span class="string">&quot;#&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="四、JSP-缺点"><a href="#四、JSP-缺点" class="headerlink" title="四、JSP 缺点"></a>四、JSP 缺点</h3><p>由于 JSP页面内，既可以定义 HTML 标签，又可以定义 Java代码，造成了以下问题：</p><ul><li><p>书写麻烦：特别是复杂的页面，既要写 HTML 标签，还要写 Java 代码。</p></li><li><p>阅读麻烦：上面案例的代码，相信你后期再看这段代码时还需要花费很长的时间去梳理。</p></li><li><p>复杂度高：运行需要依赖于各种环境，JRE，JSP容器，JavaEE…</p></li><li><p>占内存和磁盘：JSP 会自动生成 <code>.java</code> 和 <code>.class</code> 文件占磁盘，运行的是 <code>.class</code> 文件占内存。</p></li><li><p>调试困难：出错后，需要找到自动生成的 <code>.java</code> 文件进行调试。</p></li><li><p>不利于团队协作：前端人员不会 Java，后端人员不精 HTML。如果页面布局发生变化，前端工程师对静态页面进行修改，然后再交给后端工程师，由后端工程师再将该页面改为 JSP 页面。</p></li></ul><p>由于上述的问题， JSP 已逐渐退出历史舞台，以后开发更多的是使用 HTML +  Ajax 来替代。</p><p>技术的发展：</p><ol><li><p>第一阶段：使用 <code>servlet</code> 即实现逻辑代码编写，也对页面进行拼接。</p></li><li><p>第二阶段：随着技术的发展，出现了 <code>JSP</code> ，人们发现 <code>JSP</code> 使用起来比 <code>Servlet</code> 方便很多，但是还是要在 <code>JSP</code> 中嵌套 <code>Java</code> 代码，也不利于后期的维护。</p></li><li><p>第三阶段：使用 <code>Servlet</code> 进行逻辑代码开发，而使用 <code>JSP</code> 进行数据展示。</p></li><li><p>第四阶段：使用 <code>servlet</code> 进行后端逻辑代码开发，而使用 <code>HTML</code> 进行数据展示。而这里面就存在问题，<code>HTML</code> 是静态页面，怎么进行动态数据展示呢？这就是 <code>ajax</code> 的作用了。</p></li></ol><h3 id="五、EL-表达式"><a href="#五、EL-表达式" class="headerlink" title="五、EL 表达式"></a>五、EL 表达式</h3><p>EL（全称Expression Language ）表达式语言，用于简化 JSP 页面内的 Java 代码。EL 表达式的主要作用是获取数据，其实就是从域对象中获取数据，然后将数据展示在页面上。</p><p>而 EL 表达式的语法：<code>$&#123;expression&#125;</code> 。例如：<code>$&#123;brands&#125;</code> 就是获取域中存储的 key 为 brands 的数据。</p><p>定义 servlet，在 servlet 中封装一些数据并存储到 request 域对象中并转发到 <code>el-demo.jsp</code> 页面。此处需要用转发，因为转发才可以使用 request 对象作为域对象进行数据共享。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 准备数据</span></span><br><span class="line">        List&lt;Brand&gt; brands = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Brand&gt;();</span><br><span class="line">        brands.add(<span class="keyword">new</span> <span class="title class_">Brand</span>(<span class="number">1</span>,<span class="string">&quot;三只松鼠&quot;</span>,<span class="string">&quot;三只松鼠&quot;</span>,<span class="number">100</span>,<span class="string">&quot;三只松鼠，好吃不上火&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        brands.add(<span class="keyword">new</span> <span class="title class_">Brand</span>(<span class="number">2</span>,<span class="string">&quot;优衣库&quot;</span>,<span class="string">&quot;优衣库&quot;</span>,<span class="number">200</span>,<span class="string">&quot;优衣库，服适人生&quot;</span>,<span class="number">0</span>));</span><br><span class="line">        brands.add(<span class="keyword">new</span> <span class="title class_">Brand</span>(<span class="number">3</span>,<span class="string">&quot;小米&quot;</span>,<span class="string">&quot;小米科技有限公司&quot;</span>,<span class="number">1000</span>,<span class="string">&quot;为发烧而生&quot;</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 存储到request域中</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;brands&quot;</span>,brands);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 转发到 el-demo.jsp</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/el-demo.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>el-demo.jsp</code> 中通过 EL表达式 获取数据</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;brands&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>域对象：Java Web 中有四大域对象：</p><ul><li>page：当前页面有效。</li><li>request：当前请求有效。</li><li>session：当前会话有效。</li><li>application：当前应用有效。</li></ul><p>el 表达式获取数据，会依次从这4个域中寻找，直到找到为止。而这四个域对象的作用范围由小到大，例如：<code>$&#123;brands&#125;</code>，el 表达式获取数据，会先从 page 域对象中获取数据，如果没有再到 requet 域对象中获取数据，如果再没有再到 session 域对象中获取，如果还没有才会到 application 中获取数据。</p><h3 id="六、JSTL-标签"><a href="#六、JSTL-标签" class="headerlink" title="六、JSTL 标签"></a>六、JSTL 标签</h3><p>JSP 标准标签库（Jsp Standarded Tag Library），使用标签取代 JSP 页面上的 Java 代码，比 JSP 中嵌套 Java 代码看起来舒服多了：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;flag == 1&#125;&quot;</span>&gt;</span><br><span class="line">    男</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;flag == 2&#125;&quot;</span>&gt;</span><br><span class="line">    女</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><p>JSTL 提供了很多标签，最常用的标签是 <code>&lt;c:forEach&gt;</code> 标签和 <code>&lt;c:if&gt;</code> 标签。</p><p>JSTL 使用也是比较简单的，分为如下步骤：</p><ol><li>导入坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>在JSP页面上引入JSTL标签库</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br></pre></td></tr></table></figure><ol><li>使用标签</li></ol><h4 id="if-标签"><a href="#if-标签" class="headerlink" title="if 标签"></a>if 标签</h4><p><code>&lt;c:if&gt;</code>：相当于 if 判断。属性：test，用于定义条件表达式。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;flag == 1&#125;&quot;</span>&gt;</span><br><span class="line">    男</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;flag == 2&#125;&quot;</span>&gt;</span><br><span class="line">    女</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><p>定义一个 <code>servlet</code> ，在该 <code>servlet</code> 中向 request 域对象中添加 键是 <code>status</code> ，值为 <code>1</code> 的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 存储数据到request域中</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;status&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 转发到 jstl-if.jsp</span></span><br><span class="line">        数据request.getRequestDispatcher(<span class="string">&quot;/jstl-if.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义 <code>jstl-if.jsp</code> 页面，在该页面使用 <code>&lt;c:if&gt;</code> 标签。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;  <span class="comment">// 引入 JSTL核心标签库</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">        c:<span class="keyword">if</span>：来完成逻辑判断，替换java  <span class="keyword">if</span> <span class="keyword">else</span></span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;status ==1&#125;&quot;</span>&gt;</span><br><span class="line">        启用</span><br><span class="line">    &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;status ==0&#125;&quot;</span>&gt;</span><br><span class="line">        禁用</span><br><span class="line">    &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="forEach-标签"><a href="#forEach-标签" class="headerlink" title="forEach 标签"></a>forEach 标签</h4><p><code>&lt;c:forEach&gt;</code>：相当于 for 循环。Java 中有增强 for 循环和普通 for 循环，JSTL 中的 <code>&lt;c:forEach&gt;</code> 也有两种用法：</p><ol><li>增强 for 循环。涉及到的 <code>&lt;c:forEach&gt;</code> 中的属性：</li></ol><ul><li><p>items：被遍历的容器</p></li><li><p>var：遍历产生的临时变量</p></li><li><p>varStatus：遍历状态对象</p></li></ul><p>例，从域对象中获取名为 brands 数据，该数据是一个集合；遍历遍历，并给该集合中的每一个元素起名为 <code>brand</code>，是 Brand 对象。在循环里面使用 EL表达式获取每一个 Brand 对象的属性值。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;brands&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;brand&quot;</span>&gt;</span><br><span class="line">    &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">        &lt;td&gt;$&#123;brand.id&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;brand.brandName&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;brand.companyName&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;brand.description&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><ol><li>从0循环到10，变量名是 <code>i</code> ，每次自增1</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach begin=<span class="string">&quot;0&quot;</span> end=<span class="string">&quot;10&quot;</span> step=<span class="string">&quot;1&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span>&gt;</span><br><span class="line">    $&#123;i&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h3 id="七、MVC-模式和三层架构"><a href="#七、MVC-模式和三层架构" class="headerlink" title="七、MVC 模式和三层架构"></a>七、MVC 模式和三层架构</h3><h4 id="MVC-模式"><a href="#MVC-模式" class="headerlink" title="MVC 模式"></a>MVC 模式</h4><p>MVC 是一种分层开发的模式，其中：</p><ul><li><p>M：Model，业务模型，处理业务</p></li><li><p>V：View，视图，界面展示</p></li><li><p>C：Controller，控制器，处理请求，调用模型和视图</p></li></ul><p><img src="https://blog.zhuangzhihao.top/img/jsp02.jpg" alt="jsp02.jpg" style="zoom:70%;"></p><p>控制器（serlvlet）用来接收浏览器发送过来的请求，控制器调用模型（JavaBean）来获取数据，比如从数据库查询数据；控制器获取到数据后再交由视图（JSP）进行数据展示。</p><p>MVC 的优点：</p><ul><li><p>职责单一，互不影响。每个角色做它自己的事，各司其职。</p></li><li><p>有利于分工协作。</p></li><li><p>有利于组件重用。</p></li></ul><h4 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h4><p>三层架构是将我们的项目分成了三个层面，分别是 <code>表现层</code>、<code>业务逻辑层</code>、<code>数据访问层</code>。</p><p><img src="https://blog.zhuangzhihao.top/img/jsp03.png" alt="jsp03.png" style="zoom:60%;"></p><ul><li>数据访问层：对数据库的 CRUD 基本操作。</li><li>业务逻辑层：对业务逻辑进行封装，组合数据访问层层中基本功能，形成复杂的业务逻辑功能。例如 <code>注册业务功能</code> ，我们会先调用 <code>数据访问层</code> 的 <code>selectByName()</code> 方法判断该用户名是否存在，如果不存在再调用 <code>数据访问层</code> 的 <code>insert()</code> 方法进行数据的添加操作。</li><li>表现层：接收请求，封装数据，调用业务逻辑层，响应数据。</li></ul><p>而整个流程是，浏览器发送请求，表现层的 Servlet 接收请求并调用业务逻辑层的方法进行业务逻辑处理，而业务逻辑层方法调用数据访问层方法进行数据的操作，依次返回到 serlvet，然后 servlet 将数据交由 JSP 进行展示。</p><p>三层架构的每一层都有特有的包名称：</p><ul><li>表现层： <code>com.itheima.controller</code> 或者 <code>com.itheima.web</code>。</li><li>业务逻辑层：<code>com.itheima.service</code>。</li><li>数据访问层：<code>com.itheima.dao</code> 或者 <code>com.itheima.mapper</code>。</li></ul><h4 id="MVC-和-三层架构"><a href="#MVC-和-三层架构" class="headerlink" title="MVC 和 三层架构"></a>MVC 和 三层架构</h4><p><img src="https://blog.zhuangzhihao.top/img/jsp04.png" alt="jsp04.png" style="zoom:60%;"></p><p> <code>MVC 模式</code> 中的 C（控制器）和 V（视图）就是 <code>三层架构</code> 中的表现层，而 <code>MVC 模式</code> 中的 M（模型）就是 <code>三层架构</code> 中的 业务逻辑层 和 数据访问层。</p><p>可以将 <code>MVC 模式</code> 理解成是一个大的概念，而 <code>三层架构</code> 是对 <code>MVC 模式</code> 实现架构的思想。 那么我们以后按照要求将不同层的代码写在不同的包下，每一层里功能职责做到单一，将来如果将表现层的技术换掉，而业务逻辑层和数据访问层的代码不需要发生变化。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Request 和 Response 对象详解</title>
      <link href="/Request&amp;Response/"/>
      <url>/Request&amp;Response/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java Web 核心第二章。在 Java Servlet 中，Request 对象是用来封装请求数据的对象，Response 对象是用来封装响应数据的对象。Web 服务器收到客户端的 HTTP 请求，会针对每一次请求分别创建一个用于代表请求的 Request 对象和代表响应的 Response 对象。</p></blockquote><span id="more"></span><h3 id="一、Request-和-Response-对象的使用"><a href="#一、Request-和-Response-对象的使用" class="headerlink" title="一、Request 和 Response 对象的使用"></a>一、Request 和 Response 对象的使用</h3><p>Request 和 Response 这两个参数的作用是什么?</p><p>Request：获取请求数据</p><ul><li>浏览器会发送 HTTP 请求到后台服务器（Tomcat）。</li><li>HTTP 的请求中会包含很多请求数据（请求行 + 请求头 + 请求体）。</li><li>后台服务器会对 HTTP 请求中的数据进行解析并把解析结果存入到一个对象中。</li><li>所存入的对象即为 Request 对象，所以我们可以从 Request 对象中获取请求的相关参数。</li><li>获取到数据后就可以继续后续的业务，比如获取用户名和密码就可以实现登录操作的相关业务。</li></ul><p>Response：设置响应数据</p><ul><li>业务处理完后，后台就需要给前端返回业务处理的结果，即响应数据。</li><li>把响应数据封装到 Response 对象中。</li><li>后台服务器（Tomcat）会解析 Response 对象，按照（响应行 + 响应头 + 响应体）格式拼接结果。</li><li>浏览器最终解析结果，把内容展示在浏览器给用户浏览。</li></ul><p>初步体验下 Request 和 Response 对象的使用案例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//使用request对象 获取请求数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);<span class="comment">//url?name=zhangsan</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用response对象 设置响应数据</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;&lt;h1&gt;&quot;</span>+name+<span class="string">&quot;,欢迎您！&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Post...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、Request-对象"><a href="#二、Request-对象" class="headerlink" title="二、Request 对象"></a>二、Request 对象</h3><h4 id="Request-继承体系"><a href="#Request-继承体系" class="headerlink" title="Request 继承体系"></a>Request 继承体系</h4><p>当我们的 Servlet 类实现的是 Servlet 接口的时候，service 方法中的参数是 ServletRequest 和 ServletResponse，当我们的 Servlet 类继承的是 HttpServlet 类的时候，doGet 和 doPost 方法中的参数就变成 HttpServletRequest 和 HttpServletReponse。</p><p>Request 的继承体系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph BT</span><br><span class="line">RequestFacade --&gt; HttpServletRequest --&gt; ServletRequest</span><br></pre></td></tr></table></figure><p>ServletRequest 和 HttpServletRequest 是继承关系，并且两个都是接口，接口是无法创建对象，需要用到 RequestFacade：该类实现了 HttpServletRequest 接口，也间接实现了ServletRequest接口。Servlet 类中的 service 方法、doGet 方法或者是 doPost 方法最终都是由 Web 服务器来调用的，所以 Tomcat 提供了方法参数接口的具体实现类，并完成了对象的创建。</p><p>要想了解 RequestFacade 中都提供了哪些方法，我们可以直接查看 JavaEE API 文档中关于 ServletRequest 和 HttpServletRequest 的接口文档，因为 RequestFacade 实现了其接口就需要重写接口中的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Request-获取请求数据"><a href="#Request-获取请求数据" class="headerlink" title="Request 获取请求数据"></a>Request 获取请求数据</h4><p>获取请求行数据：请求行包含三块内容，分别是 <code>请求方式</code>、<code>请求资源路径</code>、<code>HTTP协议及版本</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/req1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// String getMethod()：获取请求方式： GET</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getMethod();</span><br><span class="line">        System.out.println(method);<span class="comment">//GET</span></span><br><span class="line">        <span class="comment">// String getContextPath()：获取虚拟目录(项目访问路径)：/request-demo</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> req.getContextPath();</span><br><span class="line">        System.out.println(contextPath);</span><br><span class="line">        <span class="comment">// StringBuffer getRequestURL(): 获取URL(统一资源定位符)：http://localhost:8080/request-demo/req1</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">url</span> <span class="operator">=</span> req.getRequestURL();</span><br><span class="line">        System.out.println(url.toString());</span><br><span class="line">        <span class="comment">// String getRequestURI()：获取URI(统一资源标识符)： /request-demo/req1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">        System.out.println(uri);</span><br><span class="line">        <span class="comment">// String getQueryString()：获取请求参数（GET方式）： username=zhangsan</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queryString</span> <span class="operator">=</span> req.getQueryString();</span><br><span class="line">        System.out.println(queryString);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取请求头数据：请求头的数据格式为 <code>key: value</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/req1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求头: user-agent: 浏览器的版本信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">agent</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;user-agent&quot;</span>);</span><br><span class="line">System.out.println(agent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取请求体数据：浏览器在发送 GET 请求的时候是没有请求体的，所以需要把请求方式变更为 POST。</p><ol><li><p>如果前端发送的是字节数据，比如传递的是文件数据，则使用 <code>getInputStream()</code> 方法获取字节输入流。</p></li><li><p>如果前端发送的是纯文本数据，则使用 <code>getReader()</code> 方法获取字符输入流。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/req1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">         <span class="comment">//获取post 请求体：请求参数</span></span><br><span class="line">        <span class="comment">//1. 获取字符输入流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> req.getReader();</span><br><span class="line">        <span class="comment">//2. 读取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BufferedReader 流是通过 request 对象来获取的，当请求完成后 request 对象就会被销毁，request 对象被销毁后，BufferedReader 流就会自动关闭，所以此处就不需要手动关闭流了。</p><h4 id="获取请求参数的通用方式"><a href="#获取请求参数的通用方式" class="headerlink" title="获取请求参数的通用方式"></a>获取请求参数的通用方式</h4><p>请求参数是请求数据中的部分内容（如：用户名和密码），请求数据则是包含请求行、请求头和请求体的所有数据，如果是 GET 请求，请求参数在请求行中，如果是 POST 请求，请求参数一般在请求体中。</p><ol><li><p>GET 方式获取请求参数：<code>String getQueryString()</code></p></li><li><p>POST 方式获取请求参数：<code>BufferedReader getReader();</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/req1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//GET 方式获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> req.getQueryString();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// POST 方式获取请求参数</span></span><br><span class="line">      <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> req.getReader();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GET 请求方式和 POST 请求方式区别主要在于获取请求参数的方式不一样，为了统一获取请求参数，Request 对象为我们提供了如下方法：</p><ol><li><p>获取所有参数Map集合：<code>Map&lt;String,String[]&gt; getParameterMap()</code></p></li><li><p>根据名称获取参数值（数组）：<code>String[] getParameterValues(String name)</code></p></li><li><p>根据名称获取参数值（单个值）：<code>String getParameter(String name)</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * request 通用方式获取请求参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/req2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//GET请求逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;get....&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 获取所有参数的Map集合</span></span><br><span class="line">        Map&lt;String, String[]&gt; map = req.getParameterMap();</span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            <span class="comment">// username:zhangsan lisi</span></span><br><span class="line">            System.out.print(key+<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="comment">//获取值</span></span><br><span class="line">            String[] values = map.get(key);</span><br><span class="line">            <span class="keyword">for</span> (String value : values) &#123;</span><br><span class="line">                System.out.print(value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 获取GET请求参数中的爱好，结果是数组值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        String[] hobbies = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String hobby : hobbies) &#123;</span><br><span class="line">            System.out.println(hobby);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//3. 获取GET请求参数中的用户名和密码，结果是单个值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>req.getParameter()</code> 方法使用的频率会比较高，以后我们再写代码的时候，就只需要按照如下格式来编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//采用request提供的获取请求参数的通用方式来获取请求参数</span></span><br><span class="line">       <span class="comment">//编写其他的业务代码...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="请求参数中文乱码问题"><a href="#请求参数中文乱码问题" class="headerlink" title="请求参数中文乱码问题"></a>请求参数中文乱码问题</h4><p>POST 的请求参数是通过 request 的 <code>getReader()</code> 来获取流中的数据，Tomcat 在获取流的时候采用的编码是ISO-8859-1（不支持中文），需要通过 <code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code> 把 Tomcat 在获取流数据之前的编码设置为UTF-8。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/req4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 解决乱码: POST getReader()</span></span><br><span class="line">        <span class="comment">//设置字符输入流的编码，设置的字符集要和页面保持一致</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">       <span class="comment">//2. 获取username</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">       System.out.println(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GET 请求获取请求参数的方式是 <code>request.getQueryString()</code>，并没有通过流的方式获取数据，所以 GET 请求不能用设置编码的方式来解决中文乱码问题。</p><p>GET 请求中文参数出现乱码的原因，是浏览器把中文参数按照  <code>UTF-8</code>  进行 URL 编码，而后台的 Tomcat 对获取到的内容进行 <code>ISO-8859-1</code> 的 URL 解码，我们可以按照 ISO-8859-1 编码获取乱码对应的字节数组，再按照 UTF-8 编码获取字节数组对应的字符串，在转换的过程中它们的编码一致，就可以解决中文乱码问题。</p><p>URL编码实现方式:</p><ul><li><p>编码：<code>URLEncoder.encode(str,&quot;UTF-8&quot;);</code></p></li><li><p>解码：<code>URLDecoder.decode(s,&quot;ISO-8859-1&quot;);</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        <span class="comment">//1. URL编码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> URLEncoder.encode(username, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.out.println(encode);</span><br><span class="line">        <span class="comment">//2. URL解码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">decode</span> <span class="operator">=</span> URLDecoder.decode(encode, <span class="string">&quot;ISO-8859-1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(decode); <span class="comment">//此处打印的是对应的乱码数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 转换为字节数据,编码</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = decode.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : bytes) &#123;</span><br><span class="line">            System.out.print(b + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//此处打印的是:-27 -68 -96 -28 -72 -119</span></span><br><span class="line">        <span class="comment">//4. 将字节数组转为字符串，解码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.out.println(s); <span class="comment">//此处打印的是张三</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通用中文乱码解决方案：先解码，再编码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/req4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 解决乱码：POST，getReader()</span></span><br><span class="line">        <span class="comment">//request.setCharacterEncoding(&quot;UTF-8&quot;);//设置字符输入流的编码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取username</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;解决乱码前：&quot;</span>+username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. GET,获取参数的方式：getQueryString</span></span><br><span class="line">        <span class="comment">// 乱码原因：tomcat进行URL解码，默认的字符集ISO-8859-1</span></span><br><span class="line">       <span class="comment">/* //3.1 先对乱码数据进行编码：转为字节数组</span></span><br><span class="line"><span class="comment">        byte[] bytes = username.getBytes(StandardCharsets.ISO_8859_1);</span></span><br><span class="line"><span class="comment">        //3.2 字节数组解码</span></span><br><span class="line"><span class="comment">        username = new String(bytes, StandardCharsets.UTF_8);*/</span></span><br><span class="line"></span><br><span class="line">        username  = <span class="keyword">new</span> <span class="title class_">String</span>(username.getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;解决乱码后：&quot;</span>+username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把 <code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code> 代码注释掉后，会发现 GET 请求参数乱码解决方案同时也可也把 POST 请求参数乱码的问题也解决了，只不过对于 POST 请求参数一般都会比较多，采用这种方式解决乱码起来比较麻烦，所以对于 POST 请求还是建议使用设置编码的方式进行。</p><p>Tomcat 8.0 之后的版本已将 GET 请求乱码问题解决，设置默认的解码方式为 UTF-8。</p><h4 id="Request-请求转发"><a href="#Request-请求转发" class="headerlink" title="Request 请求转发"></a>Request 请求转发</h4><p>请求转发（forward）是一种在服务器内部的资源跳转方式。</p><p>请求转发的实现方式：<code>req.getRequestDispatcher(&quot;资源B路径&quot;).forward(req,resp);</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/req5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo5</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo5...&quot;</span>);</span><br><span class="line">        <span class="comment">//请求转发</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/req6&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求转发资源间共享数据：使用 Request 对象。</p><ol><li><p>存储数据到 request 域中：<code>void setAttribute(String name,Object o);</code></p></li><li><p>根据 key 获取值：<code>Object getAttribute(String name);</code></p></li><li><p>根据 key 删除该键值对：<code>void removeAttribute(String name);</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/req5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo5</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo5...&quot;</span>);</span><br><span class="line">        <span class="comment">//存储数据</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">//请求转发</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/req6&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/req6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo6</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo6...&quot;</span>);</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">msg</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求转发的特点：浏览器地址栏路径不发生变化，只能转发到当前服务器的内部资源，而不能从一个服务器通过转发访问另一台服务器。一次请求可以在转发资源间使用 request 共享数据。</p><h3 id="三、Response-对象"><a href="#三、Response-对象" class="headerlink" title="三、Response 对象"></a>三、Response 对象</h3><p>Reponse 的继承体系和 Request 的继承体系非常相似</p><p>Servlet -&gt; <code>service(request, response)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph BT</span><br><span class="line">ReponseFacade --&gt; HttpServletReponse --&gt; ServletReponse</span><br></pre></td></tr></table></figure><h4 id="Response-设置响应数据"><a href="#Response-设置响应数据" class="headerlink" title="Response 设置响应数据"></a>Response 设置响应数据</h4><p>HTTP响应数据总共分为三部分内容，分别是响应行、响应头、响应体，对于这三部分内容的数据，respone 对象都提供了哪些方法来进行设置?</p><p>对于响应头，比较常用的就是设置响应状态码：<code>void setStatus(int sc);</code>。</p><p>设置响应头键值对：<code>void setHeader(String name,String value);</code>。</p><p>对于响应体，是通过字符、字节输出流的方式往浏览器写，获取字符输出流：<code>PrintWriter getWriter();</code>，或获取字节输出流：<code>ServletOutputStream getOutputStream();</code>。</p><p>介绍完这些方法后，后面我们会通过案例把这些方法都用一用，首先先来完成下重定向的功能开发。</p><h4 id="Respones-请求重定向"><a href="#Respones-请求重定向" class="headerlink" title="Respones 请求重定向"></a>Respones 请求重定向</h4><p>Response 重定向（redirect）是一种资源跳转方式。浏览器发送请求给服务器，服务器中对应的资源 A 接收到请求。当资源 A 现在无法处理该请求，就会给浏览器响应一个 302 的状态码 + location 的一个访问资源 B 的路径。浏览器接收到响应状态码为 302 就会重新发送请求到 location 对应的访问地址去访问资源 B。资源 B 接收到请求后进行处理并最终给浏览器响应结果，这整个过程就叫重定向。</p><p>重定向的实现方式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp.setStatus(302);</span><br><span class="line">resp.setHeader(&quot;location&quot;,&quot;资源B的访问路径&quot;);</span><br></pre></td></tr></table></figure><ol><li>具体使用，我们先创建 ResponseDemo1 类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp1....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建 ResponseDemo2 类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp2....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 ResponseDemo1 的 doGet 方法中给前端响应数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp1....&quot;</span>);</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="comment">//1.设置响应状态码 302</span></span><br><span class="line">        response.setStatus(<span class="number">302</span>);</span><br><span class="line">        <span class="comment">//2. 设置响应头 Location</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/request-demo/resp2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>虽然功能已经实现，但是从设置重定向的两行代码来看，会发现除了重定向的地址不一样，其他的内容都是一模一样，所以request对象给我们提供了简化的编写方式为：<code>resposne.sendRedirect(&quot;/request-demo/resp2&quot;)</code>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp1....&quot;</span>);</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        resposne.sendRedirect(<span class="string">&quot;/request-demo/resp2&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重定向的特点</p><ul><li><p>浏览器地址栏路径发送变化：当进行重定向访问的时候，由于是由浏览器发送的两次请求，所以地址会发生变化。</p></li><li><p>可以重定向到任何位置的资源(服务内容、外部均可)，因为第一次响应结果中包含了浏览器下次要跳转的路径，所以这个路径是可以任意位置资源。</p></li><li><p>两次请求，不能在多个资源使用 request 共享数据，因为浏览器发送了两次请求，是两个不同的 request 对象，就无法通过 request 对象进行共享数据</p></li></ul><h4 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h4><ol><li><p>转发的时候路径上没有加 <code>/request-demo</code> 而重定向加了，因为对于转发来说，因为是在服务端进行的，所以不需要加虚拟目录。对于重定向来说，路径最终是由浏览器来发送请求，就需要添加虚拟目录。</p></li><li><p>在重定向的代码中，<code>/request-demo</code> 是固定编码的，如果后期通过 Tomcat 插件配置了项目的访问路径，那么所有需要重定向的地方都需要重新修改，因此我们可以在代码中动态去获取项目访问的虚拟目录进行优化，具体可以借助 request 对象 <code>getContextPath()</code>方法，修改后的代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp1....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化方式完成重定向</span></span><br><span class="line">        <span class="comment">//动态获取虚拟目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">        response.sendRedirect(contextPath+<span class="string">&quot;/resp2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动访问测试，功能依然能够实现，此时就可以动态获取项目访问的虚拟路径，从而降低代码的耦合度。</p><h4 id="Response-响应字符数据"><a href="#Response-响应字符数据" class="headerlink" title="Response 响应字符数据"></a>Response 响应字符数据</h4><p>要想将字符数据写回到浏览器，我们需要两个步骤：首先通过 Response 对象获取字符输出流（<code>PrintWriter writer = resp.getWriter();</code>），再通过字符输出流写数据（<code>writer.write(&quot;aaa&quot;);</code>）</p><ol><li>返回一个简单的字符串 <code>aaa</code>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应字符数据：设置字符数据的响应体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/resp3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 获取字符输出流</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"> writer.write(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>返回一串 html 字符串，并且能被浏览器解析。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"><span class="comment">//content-type，告诉浏览器返回的数据类型是HTML类型数据，这样浏览器才会解析HTML标签</span></span><br><span class="line">response.setHeader(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot;&lt;h1&gt;aaa&lt;/h1&gt;&quot;</span>);</span><br><span class="line"><span class="comment">//一次请求响应结束后，response 对象就会被销毁掉，所以不要手动关闭流。</span></span><br></pre></td></tr></table></figure><ol><li>返回一个中文的字符串 <code>你好</code>，需要注意设置响应数据的编码为 <code>utf-8</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置响应的数据格式及数据的编码</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot;你好&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="Response-响应字节数据"><a href="#Response-响应字节数据" class="headerlink" title="Response 响应字节数据"></a>Response 响应字节数据</h4><p>要想将字节数据写回到浏览器，我们需要两个步骤：首先通过Response对象获取字节输出流（<code>ServletOutputStream outputStream = resp.getOutputStream();</code>），再通过字节输出流写数据（<code>outputStream.write(字节数据);</code>）。</p><p>响应字符数据的实际应用：</p><ol><li>返回一个图片文件到浏览器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应字节数据：设置字节数据的响应体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/resp4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 读取文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d://a.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取response字节输出流</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="comment">//3. 完成流的copy</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，对于流的 copy 的代码还是比较复杂的，所以我们可以使用别人提供好的方法来简化代码的开发，具体的步骤是：</p><ol><li>pom.xml 添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>调用工具类方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fis:输入流</span></span><br><span class="line"><span class="comment">//os:输出流</span></span><br><span class="line">IOUtils.copy(fis,os);</span><br></pre></td></tr></table></figure><p>优化后的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应字节数据：设置字节数据的响应体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/resp4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 读取文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d://a.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取response字节输出流</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="comment">//3. 完成流的copy</span></span><br><span class="line">      IOUtils.copy(fis,os);</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 协议和 Servlet</title>
      <link href="/HTTP&amp;Servlet/"/>
      <url>/HTTP&amp;Servlet/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java Web 核心第一章。Java Web 是用 Java 技术来解决相关 web 互联网领域的技术栈，国内很多大型网站公司也是首选 Java 语言来解决 web 互联网相关的问题。要了解 Java Web 开发的技术栈，首先需要理解 HTTP 协议和 HTTP 请求与响应数据的格式，理解 Servlet 的执行流程和生命周期，掌握 Servlet 的使用和相关配置。</p></blockquote><span id="more"></span><h3 id="一、HTTP-协议"><a href="#一、HTTP-协议" class="headerlink" title="一、HTTP 协议"></a>一、HTTP 协议</h3><p>HyperText Transfer Protocol（超文本传输协议）规定了浏览器和服务器之间数据传输的规则。数据传输的规则指的是请求数据和响应数据需要按照指定的格式进行传输。</p><p>HTTP 协议是基于 TCP 的协议，TCP 是一种面向连接的（建立连接前是需经过三次握手）、可靠的、基于字节流的传输层通信协议，在数据传输方面更安全。</p><p>HTTP 同样也是基于请求—响应模型的，一次请求对应一次响应，请求和响应是一一对应关系。</p><p>HTTP 协议是无状态协议，对于事物处理没有记忆能力，每次请求—响应都是独立的。无状态指的是客户端发送 HTTP 请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息。这种特性有优点也有缺点，缺点是多次请求间不能共享数据，但速度快。</p><p>请求之间无法共享数据会引发的问题，如电商网站加入购物车和去购物车结算是两次请求，加入购物车请求响应结束后，并未记录加入购物车是何商品，发起去购物车结算的请求后，因为无法获取哪些商品加入了购物车，会导致此次请求无法正确展示数据，在 Java Web 中要使用会话技术（Cookie、Session）来解决这个问题。</p><h4 id="请求数据格式"><a href="#请求数据格式" class="headerlink" title="请求数据格式"></a>请求数据格式</h4><p>HTTP 请求数据总共分为三部分内容，分别是请求行、请求头、请求体，请求方式有七种，最常用的是 GET 和 POST 方法。</p><p>请求行是 HTTP 请求中的第一行数据，请求行包含三块内容，分别是 <code>[请求方式] /[请求URL路径] / [HTTP协议及版本]</code>。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure><p>请求头从第二行开始，格式均为 <code>key: value</code> 形式，请求头中会包含若干个属性。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>请求的主机名</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>浏览器版本, Mozilla/5.0 Chrome/79</span><br><span class="line">Accept：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有</span><br><span class="line">Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页</span><br><span class="line">Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等</span><br></pre></td></tr></table></figure><p>服务端可以根据请求头中的内容来获取客户端的相关信息，有了这些信息服务端就可以处理不同的业务需求，比如浏览器兼容问题。</p><p>请求体是 POST 请求的最后一部分，存储请求参数，请求体和请求头之间是有一个空行隔开。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=bezhuang@password=1234</span><br></pre></td></tr></table></figure><p>GET 和 POST 两个请求的区别：GET 请求请求参数在请求行中，没有请求体，POST 请求请求参数在请求体中，GET 请求请求参数大小有限制，POST 没有。</p><h4 id="响应数据格式"><a href="#响应数据格式" class="headerlink" title="响应数据格式"></a>响应数据格式</h4><p>响应数据总共分为三部分内容，分别是响应行、响应头、响应体。</p><p>响应行是响应数据的第一行，响应行包含三块内容，分别是 <code>[HTTP协议及版本] [响应状态码] [状态码的描述]</code>。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br></pre></td></tr></table></figure><p>响应状态码</p><ul><li>200  ok 客户端请求成功</li><li>404  Not Found 请求资源不存在</li><li>500 Internal Server Error 服务端发生不可预期的错误</li></ul><p>响应头从第二行开始，格式也为 <code>key：value</code> 形式，响应头中会包含若干个属性。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Content-Type：表示该响应内容的类型，例如text/html，image/jpeg；</span><br><span class="line">Content-Length：表示该响应内容的长度（字节数）；</span><br><span class="line">Content-Encoding：表示该响应压缩算法，例如gzip；</span><br><span class="line">Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒</span><br></pre></td></tr></table></figure><p>响应体是最后一部分，存放响应数据，<code>&lt;html&gt;数据内容&lt;/html&gt;</code>。</p><h4 id="自定义服务器"><a href="#自定义服务器" class="headerlink" title="自定义服务器"></a>自定义服务器</h4><p>可以使用 Java 编写服务器，用来接受页面发送的请求和响应数据给前端浏览器，主要使用到的是 <code>ServerSocket</code> 和 <code>Socket</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"><span class="keyword">import</span> sun.misc.IOUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>); <span class="comment">// 监听指定端口</span></span><br><span class="line">        System.out.println(<span class="string">&quot;server is running...&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">sock</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;connected from &quot;</span> + sock.getRemoteSocketAddress());</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>(sock);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    Socket sock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(Socket sock)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sock = sock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="built_in">this</span>.sock.getInputStream()) &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="built_in">this</span>.sock.getOutputStream()) &#123;</span><br><span class="line">                handle(input, output);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.sock.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;client disconnected.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(InputStream input, OutputStream output)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(input, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(output, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// 读取HTTP请求:</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">requestOk</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">        <span class="keyword">if</span> (first.startsWith(<span class="string">&quot;GET / HTTP/1.&quot;</span>)) &#123;</span><br><span class="line">            requestOk = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            <span class="keyword">if</span> (header.isEmpty()) &#123; <span class="comment">// 读取到空行时, HTTP Header读取完毕</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(header);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(requestOk ? <span class="string">&quot;Response OK&quot;</span> : <span class="string">&quot;Response Error&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!requestOk) &#123;</span><br><span class="line">            <span class="comment">// 发送错误响应:</span></span><br><span class="line">            writer.write(<span class="string">&quot;HTTP/1.0 404 Not Found\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;Content-Length: 0\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 发送成功响应:</span></span><br><span class="line">            <span class="comment">//读取html文件，转换为字符串</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;http/html/a.html&quot;</span>));</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                data.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> data.toString().getBytes(StandardCharsets.UTF_8).length;</span><br><span class="line">            writer.write(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;Connection: keep-alive\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;Content-Type: text/html\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;Content-Length: &quot;</span> + length + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;\r\n&quot;</span>); <span class="comment">// 空行标识Header和Body的分隔</span></span><br><span class="line">            writer.write(data.toString());</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、Tomcat-服务器"><a href="#二、Tomcat-服务器" class="headerlink" title="二、Tomcat 服务器"></a>二、Tomcat 服务器</h3><p>Web 服务器是一个安装在服务器端的对 HTTP 协议的操作进行封装的应用程序，使得程序员不必直接对协议进行操作，让 Web 开发更加便捷，当Web服务器软件启动后，部署在Web服务器软件中的页面就可以直接通过浏览器来访问了。</p><p>Tomcat 是 Apache 软件基金会一个核心项目，是一个开源免费的轻量级 Web 服务器，支持 Servlet/JSP 少量 JavaEE 规范。JavaEE 规范是指 Java 企业级开发的技术规范总和。因为 Tomcat 支持 Servlet/JSP 规范，所以 Tomcat 也被称为Web容器、Servlet容器。Servlet需要依赖 Tomcat 才能运行。</p><p>使用 Maven 工具能更加简单快捷的把 Web 项目给创建出来，创建方式有两种：使用骨架和不使用骨架。使用骨架，默认没有 java 和 resources 目录，需要手动完成创建补齐，不使用骨架要在 pom.xml 设置打包方式为 war、补齐 Maven Web 项目缺失 webapp 的目录结构和 WEB-INF/web.xml 的目录结构。</p><p>Maven Web 项目创建成功后，通过 Maven 的 package 命令可以将项目打包成 war 包，将 war 文件拷贝到 Tomcat 的 webapps 目录下，启动 Tomcat 就可以将项目部署成功，然后通过浏览器进行访问即可。</p><p>在 IDEA 中可以直接使用 Maven 中的 Tomcat 插件来部署项目，即在 pom.xml 中添加 Tomcat 插件，再使用 Maven Helper 插件快速启动项目。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Tomcat插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span><span class="comment">&lt;!--访问端口号 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--项目访问路径</span></span><br><span class="line"><span class="comment">未配置访问路径: http://localhost:80/tomcat-demo2/a.html</span></span><br><span class="line"><span class="comment">配置/后访问路径: http://localhost:80/a.html</span></span><br><span class="line"><span class="comment">如果配置成 /hello,访问路径会变成什么?</span></span><br><span class="line"><span class="comment">答案: http://localhost:80/hello/a.html</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、Servlet"><a href="#三、Servlet" class="headerlink" title="三、Servlet"></a>三、Servlet</h3><p>Servlet 是 Java Web 最为核心的内容，它是 Java 提供的一门动态 web 资源开发技术。使用 Servlet 就可以实现根据不同的登录用户在页面上动态显示不同内容。Servlet 是 JavaEE 规范之一，其实就是一个接口，将来我们需要定义 Servlet 类实现 Servlet 接口，并由 web 服务器运行 Servlet。</p><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><p>编写一个 Servlet 类，并使用 IDEA 中 Tomcat 插件进行部署，最终通过浏览器访问所编写的 Servlet 程序。具体的实现步骤如下：</p><ol><li>创建 Web 项目 <code>web-demo</code>，导入 Servlet 依赖坐标。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      此处为什么需要添加该标签?</span></span><br><span class="line"><span class="comment">      provided指的是在编译和测试过程中有效,最后生成的war包时不会加入</span></span><br><span class="line"><span class="comment">       因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>创建：定义一个类，实现 Servlet 接口，并重写接口中所有方法，并在 service 方法中输入一句话。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>配置：在类上使用 <code>@WebServlet</code> 注解，配置该 Servlet 的访问路径。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br></pre></td></tr></table></figure><ol><li>访问：启动 Tomcat，浏览器中输入 URL 地址访问该 Servlet。</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/web-demo/demo1</span><br></pre></td></tr></table></figure><ol><li>通过浏览器访问后，在控制台会打印 <code>servlet hello world~</code> ，说明 servlet 程序已经成功运行。</li></ol><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p>Servlet 的执行流程：浏览器发出 <code>http://localhost:8080/web-demo/demo1</code> 请求，从请求中可以解析出三部分内容，分别是 <code>localhost:8080</code>、<code>web-demo</code>、<code>demo1</code>，根据 <code>localhost:8080</code> 可以找到要访问的 Tomcat Web 服务器，根据 <code>web-demo</code> 可以找到部署在 Tomcat 服务器上的 web-demo 项目，根据 <code>demo1</code> 可以找到要访问的是项目中的哪个 Servlet 类，根据 <code>@WebServlet</code> 后面的值进行匹配。</p><p>找到 ServletDemo1 这个类后，Tomcat Web 服务器就会为 ServletDemo1 这个类创建一个对象，然后调用对象中的 service 方法。</p><p>ServletDemo1 实现了 Servlet 接口，所以类中必然会重写 service 方法供 Tomcat Web 服务器进行调用，service 方法中 ServletRequest 和 ServletResponse 两个参数，ServletRequest 封装的是请求数据，ServletResponse 封装的是响应数据，后期我们可以通过这两个参数实现前后端的数据交互。</p><p>Servlet 由 web 服务器创建，Servlet 方法由 web 服务器调用。</p><p>因为我们自定义的 Servlet 必须实现 Servlet 接口并复写其方法，而 Servlet 接口中有 service 方法，因此服务器知道 Servlet 中一定有 service 方法。</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>对象的生命周期指一个对象从被创建到被销毁的整个过程。</p><p>Servlet 运行在 Servlet 容器（web 服务器）中，其生命周期由容器来管理，分为 4 个阶段：</p><ol><li>加载和实例化：默认情况下，当 Servlet 第一次被访问时，由容器创建 Servlet 对象，，但是如果创建 Servlet 比较耗时的话，那么第一个访问的人等待的时间就比较长，用户的体验就比较差，那么我们可以把 Servlet 的创建放到服务器启动的时候来创建。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo1&quot;,loadOnStartup = 1)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">loadOnstartup的取值有两类情况</span></span><br><span class="line"><span class="comment">（1）负整数:第一次访问时创建Servlet对象</span></span><br><span class="line"><span class="comment">（2）0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li>初始化：在 Servlet 实例化之后，容器将调用 Servlet 的 <code>init()</code> 方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次。</li><li>请求处理：每次请求 Servlet 时，Servlet 容器都会调用 Servlet 的 <code>service()</code> 方法对请求进行处理</li><li>服务终止：当需要释放内存或者容器关闭时，容器就会调用 Servlet 实例的 <code>destroy()</code> 方法完成资源的释放。在 <code>destroy()</code> 方法调用之后，容器会释放这个 Servlet 实例，该实例随后会被 Java 的垃圾收集器所回收。</li></ol><p>通过案例演示 Servlet 生命周期方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Servlet生命周期方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo2&quot;,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo2</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  初始化方法</span></span><br><span class="line"><span class="comment">     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用</span></span><br><span class="line"><span class="comment">     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用</span></span><br><span class="line"><span class="comment">     *  2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供服务</span></span><br><span class="line"><span class="comment">     * 1.调用时机:每一次Servlet被访问时，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 多次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁方法</span></span><br><span class="line"><span class="comment">     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Servlet 对象默认是第一次访问的时候被创建，可以使用 <code>@WebServlet(urlPatterns = &quot;/demo2&quot;,loadOnStartup = 1)</code> 的 loadOnStartup 修改成在服务器启动的时候创建。</p><p>Servlet 生命周期中涉及到三个方法，分别是 <code>init()</code>、<code>service()</code>、<code>destroy()</code>，<code>init</code> 方法在 Servlet 对象被创建的时候执行，只执行 1 次，service 方法在 Servlet 被访问的时候调用，每访问 1 次就调用 1 次，destroy 方法在 Servlet 对象被销毁的时候调用，只执行 1 次。</p><h4 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>Servlet 中总共有5个方法，我们已经介绍过其中的三个，剩下的两个方法为 <code>getServletInfo()</code> 和 <code>getServletConfig()</code>。</p><ol><li>初始化方法，在 Servlet 被创建时执行，只执行一次。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> </span><br></pre></td></tr></table></figure><ol><li>提供服务方法， 每次 Servlet 被访问，都会调用该方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span><br></pre></td></tr></table></figure><ol><li>销毁方法，当 Servlet 被销毁时，调用该方法。在内存释放或服务器关闭时销毁 Servlet。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> </span><br></pre></td></tr></table></figure><ol><li>获取 Servlet 信息方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getServletInfo</span><span class="params">()</span> </span><br><span class="line"><span class="comment">//该方法用来返回Servlet的相关信息，没有什么太大的用处，一般我们返回一个空字符串即可</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取 ServletConfig 对象方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p>ServletConfig 对象在 init 方法的参数中有，而 Tomcat Web 服务器在创建 Servlet 对象的时候会调用 init 方法，必定会传入一个  ServletConfig 对象，我们只需要将服务器传过来的 ServletConfig 进行返回即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet方法介绍</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo3&quot;,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo3</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ServletConfig servletConfig;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  初始化方法</span></span><br><span class="line"><span class="comment">     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用</span></span><br><span class="line"><span class="comment">     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用</span></span><br><span class="line"><span class="comment">     *  2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">this</span>.servletConfig = config;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供服务</span></span><br><span class="line"><span class="comment">     * 1.调用时机:每一次Servlet被访问时，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 多次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁方法</span></span><br><span class="line"><span class="comment">     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h4><p>B/S 架构的 web 项目都是针对 HTTP 协议，所以我们自定义 Servlet，会通过继承 HttpServlet，具体的编写格式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//TODO GET 请求方式处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//TODO Post 请求方式处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;post...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想发送一个 GET 请求，请求该 Servlet，只需要通过浏览器发送 <code>http://localhost:8080/web-demo/demo4</code>，就能看到 doGet 方法被执行了。</p><p>要想发送一个 POST 请求，请求该 Servlet，单单通过浏览器是无法实现的，这个时候就需要编写一个 form 表单来发送请求，在 webapp 下创建一个 <code>a.html</code> 页面，启动测试，即可看到 doPost 方法被执行了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/web-demo/demo4&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为前端发送 GET 和 POST 请求的时候，参数的位置不一致，GET 请求参数在请求行中，POST 请求参数在请求体中，为了能处理不同的请求方式，我们得在 service 方法中进行判断，然后写不同的业务处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo5</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//如何调用?</span></span><br><span class="line">        <span class="comment">//获取请求方式，根据不同的请求方式进行不同的业务处理</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">       <span class="comment">//1. 获取请求方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="comment">//2. 判断</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;GET&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="comment">// get方式的处理逻辑</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;POST&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="comment">// post方式的处理逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样能实现，但是每个 Servlet 类中都将有相似的代码，针对这个问题，我们可以对 Servlet 接口进行继承封装，来简化代码开发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">        <span class="comment">//1. 获取请求方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="comment">//2. 判断</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;GET&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="comment">// get方式的处理逻辑</span></span><br><span class="line">            doGet(req,res);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;POST&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="comment">// post方式的处理逻辑</span></span><br><span class="line">            doPost(req,res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了 MyHttpServlet 这个类，以后我们再编写 Servlet 类的时候，只需要继承 MyHttpServlet，重写父类中的 doGet 和 doPost 方法，就可以用来处理 GET 和 POST 请求的业务逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo5</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将来页面发送的是 GET 请求，则会进入到 doGet 方法中进行执行，如果是 POST 请求，则进入到 doPost 方法。这样代码在编写的时候就相对来说更加简单快捷。</p><p>类似 MyHttpServlet 这样的类 Servlet 中已经为我们提供好了，就是 HttpServlet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">ifModifiedSince</span> <span class="operator">=</span> req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);       </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>HttpServlet 的使用步骤是先继承 HttpServlet，再重写 doGet、doPost 或其他方法。HttpServlet 的原理就是获取请求方式，并根据不同的请求方式，调用不同的 doXxx 方法。</p><h4 id="urlPattern-配置"><a href="#urlPattern-配置" class="headerlink" title="urlPattern 配置"></a>urlPattern 配置</h4><p>Servlet 类编写好后，要想被访问到，就需要配置其访问路径（urlPattern），一个 Servlet，可以配置多个 urlPattern。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* urlPattern: 一个 Servlet 可以配置多个访问路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &#123;&quot;/demo7&quot;,&quot;/demo8&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo7</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo7 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在浏览器上输入 http://localhost:8080/web-demo/demo7, http://localhost:8080/web-demo/demo8 这两个地址都能访问到 ServletDemo7 的 doGet 方法</span></span><br></pre></td></tr></table></figure><p>urlPattern 总共有四种配置方式，分别是精确匹配、目录匹配、扩展名匹配、任意匹配，配置的优先级为 精确匹配 &gt; 目录匹配 &gt; 扩展名匹配 &gt; <code>/*</code> &gt; <code>/</code> 。</p><ol><li>精确匹配</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/user/select&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo8</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo8 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">//访问路径：http://localhost:8080/web-demo/user/select</span></span><br></pre></td></tr></table></figure><ol><li>目录匹配：<code>/*</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo9</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo9 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">//访问路径：http://localhost:8080/web-demo/user/任意</span></span><br></pre></td></tr></table></figure><ol><li>扩展名匹配：<code>*.do</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;*.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo10</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo10 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">//访问路径：http://localhost:8080/web-demo/任意.do</span></span><br></pre></td></tr></table></figure><ol><li>任意匹配：<code>/</code> 或 <code>/*</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo11</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo11 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">//访问路径：http://localhost:8080/demo-web/任意</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo12</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo12 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// 访问路径：http://localhost:8080/demo-web/任意</span></span><br></pre></td></tr></table></figure><p>当我们的项目中的 Servlet 配置了 <code>/</code>，会覆盖掉 tomcat 中的 DefaultServlet，当其他的 url-pattern 都匹配不上时都会走这个 Servlet。当我们的项目中配置了 <code>/*</code>，意味着匹配任意访问路径。</p><p>DefaultServlet 是用来处理静态资源，如果配置了 <code>/</code> 会把默认的覆盖掉，就会引发请求静态资源的时候没有走默认的而是走了自定义的 Servlet 类，最终导致静态资源不能被访问。</p><h4 id="XML-配置"><a href="#XML-配置" class="headerlink" title="XML 配置"></a>XML 配置</h4><p>一般情况下 Servlet 使用的是注解配置 <code>@WebServlet</code>，但 3.0 版本前只支持 XML 配置文件的配置方法。对于 XML 的配置步骤有两步：</p><ol><li>编写Servlet类。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo13</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo13 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 web.xml 中配置该 Servlet。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        Servlet 全类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet的名称，名字任意--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo13<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet的类全名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.itheima.web.ServletDemo13<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        Servlet 访问路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet的名称，要和上面的名称一致--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo13<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet的访问路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo13<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis 基础知识总结</title>
      <link href="/MyBatis%E5%9F%BA%E7%A1%80/"/>
      <url>/MyBatis%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p></blockquote><span id="more"></span><h3 id="一、Mybatis-概述"><a href="#一、Mybatis-概述" class="headerlink" title="一、Mybatis 概述"></a>一、Mybatis 概述</h3><p>MyBatis 是一款优秀的持久层框架，用于简化 JDBC 开发。</p><p>MyBatis 本是 Apache 的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p><p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a> 。</p><p>持久层：负责将数据到保存到数据库的那一层代码。以后开发我们会将操作数据库的 Java 代码作为持久层。而 Mybatis 就是对 jdbc 代码进行了封装。</p><p>JavaEE三层架构：表现层、业务层、持久层。</p><p>框架：框架就是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。在框架的基础之上构建软件编写更加高效、规范、通用、可扩展。</p><h4 id="JDBC-缺点"><a href="#JDBC-缺点" class="headerlink" title="JDBC 缺点"></a>JDBC 缺点</h4><p>硬编码：注册驱动、获取连接代码有很多字符串，而这些是连接数据库的四个基本信息，以后如果要换成其他的关系型数据库的话，要修改源代码。如果表结构发生变化，SQL语句就要进行更改。这也不方便后期的维护。</p><p>操作繁琐：手动设置参数。手动封装结果集。</p><p>使用Mybatis 优化：硬编码可以配置到配置文件，操作繁琐的地方 MyBatis 都自动完成。</p><h4 id="MyBatis-快速入门"><a href="#MyBatis-快速入门" class="headerlink" title="MyBatis 快速入门"></a>MyBatis 快速入门</h4><p>需求：查询 user 表中所有的数据。</p><p>创建 user 表，添加数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database mybatis;</span><br><span class="line">use mybatis;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">addr <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;234&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>);</span><br></pre></td></tr></table></figure><p>创建模块，导入坐标：需要在项目的 resources 目录下创建 logback 的配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%level] %blue(%d&#123;HH:mm:ss.SSS&#125;) %cyan([%thread]) %boldGreen(%logger&#123;15&#125;) - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</span></span><br><span class="line"><span class="comment">     ， 默认debug</span></span><br><span class="line"><span class="comment">      &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在创建好的模块中的 pom.xml 配置文件中添加依赖的坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mysql 驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit 单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加slf4j日志api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加logback-classic依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加logback-core依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写 MyBatis 核心配置文件 — &gt; 替换连接信息 解决硬编码问题。</p><ul><li>在模块下的 resources 目录下创建 MyBatis 的配置文件 <code>mybatis-config.xml</code>，内容如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：配置数据库连接环境信息。可以配置多个environment，通过default属性切换不同的environment</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--加载sql映射文件--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写 SQL 映射文件：统一管理sql语句，解决硬编码问题。</p><ul><li>在模块的 <code>resources</code> 目录下创建映射配置文件 <code>UserMapper.xml</code>，内容如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编码</p><ul><li>在 <code>com.itheima.pojo</code> 包下创建 User类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line">    <span class="comment">//添加 setter 和 getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 <code>com.itheima</code> 包下编写 MybatisDemo 测试类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>); <span class="comment">//参数是一个字符串，该字符串必须是映射配置文件的namespace.id</span></span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、Mapper-代理开发"><a href="#二、Mapper-代理开发" class="headerlink" title="二、Mapper 代理开发"></a>二、Mapper 代理开发</h3><p>Mapper 代理方式的目的：解决原生方式中的硬编码，简化后期执行SQL。</p><h4 id="使用-Mapper-代理要求"><a href="#使用-Mapper-代理要求" class="headerlink" title="使用 Mapper 代理要求"></a>使用 Mapper 代理要求</h4><ul><li><p>定义与 SQL 映射文件同名的 Mapper 接口，并且将 Mapper 接口和 SQL 映射文件放置在同一目录下。</p></li><li><p>设置 SQL 映射文件的 namespace 属性为 Mapper 接口全限定名。</p></li><li><p>在 Mapper 接口中定义方法，方法名就是 SQL 映射文件中 sql 语句的 id，并保持参数类型和返回值类型一致。</p></li></ul><h4 id="Mapper-代理代码实现"><a href="#Mapper-代理代码实现" class="headerlink" title="Mapper 代理代码实现"></a>Mapper 代理代码实现</h4><p>在 <code>com.itheima.mapper</code> 包下创建 UserMapper接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">    User <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>resources</code> 下创建 <code>com/itheima/mapper</code> 目录，并在该目录下创建 UserMapper.xml 映射配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace:名称空间。必须是对应接口的全限定名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>com.itheima</code> 包下创建 MybatisDemo2 测试类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mybatis 代理开发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="comment">//3.1 获取UserMapper接口的代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectAll();</span><br><span class="line"></span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果Mapper接口名称和SQL映射文件名称相同，并在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载。</p><p>也就是将核心配置文件的加载映射配置文件的配置修改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载sql映射文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;mapper resource=&quot;com/itheima/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Mapper代理方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、MyBatis-核心配置文件"><a href="#三、MyBatis-核心配置文件" class="headerlink" title="三、MyBatis 核心配置文件"></a>三、MyBatis 核心配置文件</h3><h4 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h4><p>在核心配置文件的 <code>environments</code> 标签中其实是可以配置多个 <code>environment</code> ，使用 <code>id</code> 给每段环境起名，在 <code>environments</code> 中使用 <code>default=&#39;环境id&#39;</code> 来指定使用哪儿段配置。一般就配置一个 <code>environment</code> 即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span>=</span><br></pre></td></tr></table></figure><h4 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h4><p>在映射配置文件中的 <code>resultType</code> 属性需要配置数据封装的类型（类的全限定名）。</p><p>Mybatis 提供了 <code>类型别名</code>(typeAliases) 可以简化这部分的书写。</p><p>首先需要现在核心配置文件中配置类型别名，也就意味着给pojo包下所有的类起了别名（别名就是类名），不区分大小写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--name属性的值是实体类所在包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.pojo&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过上述的配置，我们就可以简化映射配置文件中 <code>resultType</code> 属性值的编写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven 项目管理知识总结</title>
      <link href="/Maven%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
      <url>/Maven%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Maven 是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理，也可被用于构建和管理其他语言编写的各种项目，例如 C#，Ruby，Scala。</p></blockquote><span id="more"></span><h3 id="一、Maven-概述"><a href="#一、Maven-概述" class="headerlink" title="一、Maven 概述"></a>一、Maven 概述</h3><p>Maven 是专门用于管理和构建 Java 项目的工具，它提供了一套标准化的项目结构，提供了一套标准化的构建流程（编译，测试，打包，发布……），提供了一套依赖管理机制。</p><p>标准化的项目结构：每一个开发工具（IDE）都有自己不同的项目结构，它们互相之间不通用。在 Eclipse 中创建的目录，无法在 IDEA 中进行使用，这就造成了很大的不方便，而 Maven 提供了一套标准化的项目结构，所有的 IDE 使用 Maven 构建的项目完全一样，所以 IDE 创建的 Maven 项目可以通用。</p><p>标准化的构建流程：开发了一套系统，代码需要进行编译、测试、打包、发布，这些操作如果需要反复进行就显得特别麻烦，而 Maven 提供了一套简单的命令来完成项目构建。</p><p>依赖管理：管理你项目所依赖的第三方资源（jar包、插件），而 Maven 使用标准的坐标配置来管理各种依赖，只需要简单的配置就可以完成依赖管理。</p><p>Maven 模型：</p><ol><li>项目对象模型（Project Object Model）：将我们自己抽象成一个对象模型，有自己专属的坐标。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>依赖管理模型（Dependency）：使用坐标来描述当前项目依赖哪儿些第三方jar包。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Maven 仓库</p><ul><li>本地仓库：自己计算机上的一个目录。</li><li>中央仓库：由 Maven 团队维护的全球唯一的仓库： <a href="https://repo1.maven.org/maven2/。">https://repo1.maven.org/maven2/。</a></li><li>远程仓库(私服)：一般由公司团队搭建的私有仓库。</li><li>当项目中使用坐标引入对应依赖 jar 包后，首先会查找本地仓库中是否有对应的 jar 包，如果有，则在项目直接引用；如果没有，则去中央仓库中下载对应的jar包到本地仓库。</li><li>如果还可以搭建远程仓库，将来jar包的查找顺序则变为：本地仓库 —&gt; 远程仓库—&gt; 中央仓库。</li></ul><p>Maven 安装配置</p><ul><li>IDEA 自带 Maven 且 Mac 无需配置环境变量。</li><li>安装 Maven Helper 插件。</li></ul><h3 id="二、Maven-基本使用"><a href="#二、Maven-基本使用" class="headerlink" title="二、Maven 基本使用"></a>二、Maven 基本使用</h3><h4 id="Maven-常用命令"><a href="#Maven-常用命令" class="headerlink" title="Maven 常用命令"></a>Maven 常用命令</h4><p><code>mvn compile</code> ：编译，在项目下会生成一个 <code>target</code> 目录。</p><p><code>mvn clean</code>：清理，删除项目下的 <code>target</code> 目录。</p><p><code>mvn test</code>：测试，执行所有的测试代码。</p><p><code>mvn package</code>：打包，将当前项目打成的 jar 包。</p><p><code>mvn install</code>：安装，将当前项目打成jar包，并安装到本地仓库。</p><h4 id="Maven-生命周期"><a href="#Maven-生命周期" class="headerlink" title="Maven 生命周期"></a>Maven 生命周期</h4><p>Maven 构建项目生命周期描述的是一次构建过程经历经历了多少个事件。</p><p>Maven 对项目构建的生命周期划分为3套：</p><ul><li><p>clean ：清理工作。</p></li><li><p>default ：核心工作，例如编译，测试，打包，安装等。</p></li><li><p>site ： 产生报告，发布站点等。这套声明周期一般不会使用。</p></li></ul><p>同一套生命周期内，执行后边的命令，前面的所有命令会自动执行。当我们执行 <code>install</code>（安装）命令时，它会先执行 <code>compile</code>命令，再执行 <code>test</code> 命令，再执行 <code>package</code> 命令，最后执行 <code>install</code> 命令；当我们执行 <code>package</code> （打包）命令时，它会先执行 <code>compile</code> 命令，再执行 <code>test</code> 命令，最后执行 <code>package</code> 命令。</p><h4 id="Maven-坐标详解"><a href="#Maven-坐标详解" class="headerlink" title="Maven 坐标详解"></a>Maven 坐标详解</h4><p>Maven 中的坐标是资源的唯一标识，资源可以是插件、依赖、当前项目。</p><p>使用坐标来定义项目或引入项目中需要的依赖。</p><p>Maven 坐标主要组成：</p><ul><li><p>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）。</p></li><li><p>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）。</p></li><li><p>version：定义当前项目版本号。</p></li></ul><p>我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。</p><h3 id="三、Maven-依赖管理"><a href="#三、Maven-依赖管理" class="headerlink" title="三、Maven 依赖管理"></a>三、Maven 依赖管理</h3><h4 id="使用坐标引入-jar-包"><a href="#使用坐标引入-jar-包" class="headerlink" title="使用坐标引入 jar 包"></a>使用坐标引入 jar 包</h4><p>在项目的 pom.xml 中编写<code>&lt;dependencies&gt;</code> 标签。</p><p>在 <code>&lt;dependencies&gt;</code>标签中 使用 <code>&lt;dependency&gt;</code> 引入坐标。</p><p>定义坐标的 <code>groupId</code>，<code>artifactId</code>，<code>version</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><p>通过设置坐标的依赖范围（scope），可以设置对应 jar 包的作用范围：编译环境、测试环境、运行环境。</p><p>通过 <code>scope</code> 标签指定依赖的作用范围。 那么这个依赖就只能作用在测试环境，其他环境下不能使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>scope</code> 的取值：</p><div class="table-container"><table><thead><tr><th><strong>依赖范围</strong></th><th>编译classpath</th><th>测试classpath</th><th>运行classpath</th><th>例子</th></tr></thead><tbody><tr><td><strong>compile</strong></td><td>Y</td><td>Y</td><td>Y</td><td>logback</td></tr><tr><td><strong>test</strong></td><td>-</td><td>Y</td><td>-</td><td>Junit</td></tr><tr><td><strong>provided</strong></td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td><strong>runtime</strong></td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr><tr><td><strong>system</strong></td><td>Y</td><td>Y</td><td>-</td><td>存储在本地的jar包</td></tr></tbody></table></div><p>compile：作用于编译环境、测试环境、运行环境。</p><p>test：作用于测试环境。典型的就是 Junit 坐标，以后使用 Junit 时，都会将 scope 指定为该值。</p><p>provided：作用于编译环境、测试环境。我们后面会学习 <code>servlet-api</code> ，在使用它时，必须将 <code>scope</code> 设置为该值，不然运行时就会报错。</p><p>runtime： 作用于测试环境、运行环境。jdbc驱动一般将 <code>scope</code> 设置为该值，当然不设置也没有任何问题 。</p><p>如果引入坐标不指定 <code>scope</code> 标签时，默认就是 compile  值，大部分 jar 包都是使用默认值。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据操作和数据预处理</title>
      <link href="/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E5%92%8C%E9%A2%84%E5%A4%84%E7%90%86/"/>
      <url>/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E5%92%8C%E9%A2%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>要学习深度学习，首先需要先掌握一些基本技能。 所有机器学习方法都涉及从数据中提取信息。 因此，动手学深度学习 v2 课程在第二章的一开始先教授了一些关于数据的实用技能，包括存储、操作和预处理数据，作为预备知识的内容。以下为学习 Dive to Deep Learning（d2l） 课程第二章数据操作 + 数据预处理所记笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><ul><li>为了能够完成各种数据操作，我们需要某种方法来存储和操作数据</li><li>通常，我们需要做两件重要的事：获取数据和将数据读入计算机后对其进行处理</li><li>如果没有某种方法来存储数据，那么获取数据是没有意义的</li></ul><h4 id="n-维数组"><a href="#n-维数组" class="headerlink" title="n 维数组"></a>n 维数组</h4><ul><li><p>深度学习存储和操作数据的主要接口是张量（n维数组）。它提供了各种功能，包括基本数学运算、广播、索引、切片、内存节省和转换其他Python对象</p></li><li><p>n 维数组，也称为张量（tensor）</p></li><li><p>深度学习框架的张量类（在MXNet中为<code>ndarray</code>， 在PyTorch和TensorFlow中为<code>Tensor</code>）与Numpy的<code>ndarray</code>类似</p></li><li><p>但深度学习框架又比Numpy的<code>ndarray</code>多一些重要功能： 首先，GPU 很好地支持加速计算，而 NumPy 仅支持CPU计算； 其次，张量类支持自动微分。 这些功能使得张量类更适合深度学习</p></li><li><p>张量表示由一个数值组成的数组，这个数组可能有多个维度。 具有一个轴的张量对应数学上的向量（vector）； 具有两个轴的张量对应数学上的矩阵（matrix）</p></li><li><p>可以使用<code>arange</code>创建一个行向量<code>x</code>。 这个行向量包含从0开始的前12个整数，它们被默认创建为浮点数。 张量中的每个值都称为张量的元素（element）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">x = torch.arange(<span class="number">12</span>)</span><br><span class="line">x <span class="comment"># tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])</span></span><br></pre></td></tr></table></figure></li><li><p>可以通过张量的<code>shape</code>属性来访问张量（沿每个轴的长度）的形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.shape  <span class="comment"># torch.Size([12])</span></span><br></pre></td></tr></table></figure></li><li><p>如果只想知道张量中元素的总数，即形状的所有元素乘积，可以检查它的大小（size）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.numel() <span class="comment"># 12</span></span><br></pre></td></tr></table></figure></li><li><p>要想改变一个张量的形状而不改变元素数量和元素值，可以调用<code>reshape</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X = x.reshape(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 张量x从形状为（12,）的行向量转换为形状为（3,4）的矩阵</span></span><br><span class="line">X <span class="comment"># tensor([[ 0,  1,  2,  3],</span></span><br><span class="line">  <span class="comment">#       [ 4,  5,  6,  7],</span></span><br><span class="line">  <span class="comment">#       [ 8,  9, 10, 11]])</span></span><br></pre></td></tr></table></figure><ul><li>我们可以通过<code>-1</code>来调用此自动计算出维度的功能。 即我们可以用<code>x.reshape(-1,4)</code>或<code>x.reshape(3,-1)</code>来取代<code>x.reshape(3,4)</code></li></ul></li><li><p>使用全0、全1、其他常量，或者从特定分布中随机采样的数字来初始化矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">torch.zeros((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))  <span class="comment"># tensor([[[0., 0., 0., 0.],</span></span><br><span class="line">                        <span class="comment">#   [0., 0., 0., 0.],</span></span><br><span class="line">        <span class="comment">#  [0., 0., 0., 0.]],</span></span><br><span class="line">        <span class="comment"># [[0., 0., 0., 0.],</span></span><br><span class="line">         <span class="comment">#  [0., 0., 0., 0.],</span></span><br><span class="line">         <span class="comment"># [0., 0., 0., 0.]]])</span></span><br><span class="line">torch.ones((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))  <span class="comment"># 一个形状为(2,3,4)的张量，其中所有元素都设置为1</span></span><br><span class="line">torch.randn(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 一个形状为（3,4）的张量。 其中的每个元素都从均值为0、标准差为1的标准高斯分布（正态分布）中随机采样</span></span><br></pre></td></tr></table></figure></li><li><p>通过提供包含数值的Python列表（或嵌套列表），来为所需张量中的每个元素赋予确定值。 在这里，最外层的列表对应于轴0，内层的列表对应于轴1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.tensor([[<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])  </span><br></pre></td></tr></table></figure></li></ul><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li><p>在这些数据上执行数学运算，其中最简单且最有用的操作是按元素（elementwise）运算。 它们将标准标量运算符应用于数组的每个元素。</p></li><li><p>对于将两个数组作为输入的函数，按元素运算将二元运算符应用于两个数组中的每对位置对应的元素。 我们可以基于任何从标量到标量的函数来创建按元素函数</p></li><li><p>对于任意具有相同形状的张量，常见的标准算术运算符（<code>+</code>、<code>-</code>、<code>\*</code>、<code>/</code>和<code>**</code>）都可以被升级为按元素运算。 我们可以在同一形状的任意两个张量上调用按元素操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1.0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>])</span><br><span class="line">y = torch.tensor([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">x + y, x - y, x * y, x / y, x ** y  <span class="comment"># **运算符是求幂运算</span></span><br></pre></td></tr></table></figure></li><li><p>按元素方式可以应用更多的计算，包括像求幂这样的一元运算符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.exp(x)</span><br></pre></td></tr></table></figure></li><li><p>除了按元素计算外，我们还可以执行线性代数运算，包括向量点积和矩阵乘法。</p></li><li><p>也可以把多个张量连结（concatenate）在一起， 把它们端对端地叠起来形成一个更大的张量。 我们只需要提供张量列表，并给出沿哪个轴连结</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X = torch.arange(<span class="number">12</span>, dtype=torch.float32).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">Y = torch.tensor([[<span class="number">2.0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line">torch.cat((X, Y), dim=<span class="number">0</span>) <span class="comment"># 沿行（轴-0，形状的第一个元素）连结两个矩阵</span></span><br><span class="line">torch.cat((X, Y), dim=<span class="number">1</span>) <span class="comment"># 按列（轴-1，形状的第二个元素）连结两个矩阵</span></span><br></pre></td></tr></table></figure><ul><li><p>第一个输出张量的轴 -0 长度（6）是两个输入张量轴 -0 长度的总和（3+3）； 第二个输出张量的轴 -1 长度（8）是两个输入张量轴 -1 长度的总和（4+4）</p></li><li><p>通过逻辑运算符构建二元张量： 对于每个位置，如果<code>X</code>和<code>Y</code>在该位置相等，则新张量中相应项的值为1。 这意味着逻辑语句<code>X == Y</code>在该位置处为真，否则该位置为0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X == Y <span class="comment"># tensor([[False,  True, False,  True],</span></span><br><span class="line">       <span class="comment"># [False, False, False, False],</span></span><br><span class="line">       <span class="comment"># [False, False, False, False]])</span></span><br></pre></td></tr></table></figure></li><li><p>对张量中的所有元素进行求和，会产生一个单元素张量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.<span class="built_in">sum</span>() <span class="comment"># tensor(66.)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h4><ul><li><p>即使形状不同，我们仍然可以通过调用广播机制（broadcasting mechanism）来执行按元素操作</p></li><li><p>首先，通过适当复制元素来扩展一个或两个数组， 以便在转换之后，两个张量具有相同的形状。 其次，对生成的数组执行按元素操作。在大多数情况下，我们将沿着数组中长度为1的轴进行广播</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">3</span>).reshape((<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">b = torch.arange(<span class="number">2</span>).reshape((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">a, b <span class="comment"># (tensor([[0],</span></span><br><span class="line">     <span class="comment">#    [1],</span></span><br><span class="line">     <span class="comment">#    [2]]),</span></span><br><span class="line">     <span class="comment">#  tensor([[0, 1]]))</span></span><br></pre></td></tr></table></figure></li><li><p>由于<code>a</code>和<code>b</code>分别是3×1和1×2矩阵，如果让它们相加，它们的形状不匹配。 我们将两个矩阵广播为一个更大的3×2矩阵，如下所示：矩阵<code>a</code>将复制列， 矩阵<code>b</code>将复制行，然后再按元素相加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a + b <span class="comment"># tensor([[0, 1],</span></span><br><span class="line">      <span class="comment">#  [1, 2],</span></span><br><span class="line">      <span class="comment">#  [2, 3]])</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h4><ul><li><p>就像在任何其他Python数组中一样，张量中的元素可以通过索引访问。</p></li><li><p>与任何Python数组一样：第一个元素的索引是0，最后一个元素索引是-1； 可以指定范围以包含第一个元素和最后一个之前的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X[-<span class="number">1</span>], X[<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># (tensor([ 8.,  9., 10., 11.]),</span></span><br><span class="line">              <span class="comment"># tensor([[ 4.,  5.,  6.,  7.],</span></span><br><span class="line">              <span class="comment">#         [ 8.,  9., 10., 11.]]))</span></span><br></pre></td></tr></table></figure></li><li><p>除读取外，我们还可以通过指定索引来将元素写入矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X[<span class="number">1</span>, <span class="number">2</span>] = <span class="number">9</span> <span class="comment"># 将第二行第三列元素改为 9</span></span><br></pre></td></tr></table></figure></li><li><p>为多个元素赋值相同的值，我们只需要索引所有元素，然后为它们赋值，例如，<code>[0:2, :]</code>访问第1行和第2行，其中 “:” 代表沿轴1（列）的所有元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X[<span class="number">0</span>:<span class="number">2</span>, :] = <span class="number">12</span> <span class="comment"># tensor([[12., 12., 12., 12.],</span></span><br><span class="line">               <span class="comment">#         [12., 12., 12., 12.],</span></span><br><span class="line">               <span class="comment">#         [ 8.,  9., 10., 11.]])</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="节省内存"><a href="#节省内存" class="headerlink" title="节省内存"></a>节省内存</h4><ul><li><p>运行一些操作可能会导致为新结果分配内存。 例如，如果我们用<code>Y = X + Y</code>，我们将取消引用<code>Y</code>指向的张量，而是指向新分配的内存处的张量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before = <span class="built_in">id</span>(Y)</span><br><span class="line">Y = Y + X</span><br><span class="line"><span class="built_in">id</span>(Y) == before  <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li><li><p>执行原地操作非常简单。 我们可以使用切片表示法将操作的结果分配给先前分配的数组，例如<code>Y[:] = &lt;expression&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Z = torch.zeros_like(Y) <span class="comment"># 创建一个新的矩阵Z，其形状与另一个Y相同， 使用zeros_like来分配一个全 0 的块</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;id(Z):&#x27;</span>, <span class="built_in">id</span>(Z))</span><br><span class="line">Z[:] = X + Y</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;id(Z):&#x27;</span>, <span class="built_in">id</span>(Z))  <span class="comment"># id一样</span></span><br></pre></td></tr></table></figure><ul><li>如果在后续计算中没有重复使用<code>X</code>， 我们也可以使用<code>X[:] = X + Y</code>或<code>X += Y</code>来减少操作的内存开销</li></ul></li></ul><h4 id="转换为其他Python对象"><a href="#转换为其他Python对象" class="headerlink" title="转换为其他Python对象"></a>转换为其他Python对象</h4><ul><li><p>将深度学习框架定义的张量[转换为NumPy张量（<code>ndarray</code>）很容易，反之也同样容易</p></li><li><p>torch张量和numpy数组将共享它们的底层内存，就地操作更改一个张量也会同时更改另一个张量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A = X.numpy()</span><br><span class="line">B = torch.tensor(A)</span><br><span class="line"><span class="built_in">type</span>(A), <span class="built_in">type</span>(B) <span class="comment"># (numpy.ndarray, torch.Tensor)</span></span><br></pre></td></tr></table></figure></li><li><p>要(将大小为1的张量转换为Python标量，我们可以调用<code>item</code>函数或Python的内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = torch.tensor([<span class="number">3.5</span>])</span><br><span class="line">a, a.item(), <span class="built_in">float</span>(a), <span class="built_in">int</span>(a)</span><br><span class="line"><span class="comment"># (tensor([3.5000]), 3.5, 3.5, 3)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><ul><li>为了能用深度学习来解决现实世界的问题，我们经常从预处理原始数据开始， 而不是从那些准备好的张量格式数据开始</li><li>在Python中常用的数据分析工具中，我们通常使用<code>pandas</code>软件包。 像庞大的Python生态系统中的许多其他扩展包一样，<code>pandas</code>可以与张量兼容</li></ul><h4 id="读取数据集"><a href="#读取数据集" class="headerlink" title="读取数据集"></a>读取数据集</h4><ul><li><p>首先创建一个人工数据集，并存储在CSV（逗号分隔值文件) <code>../data/house_tiny.csv</code>中。 以其他格式存储的数据也可以通过类似的方式进行处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.makedirs(os.path.join(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;data&#x27;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">data_file = os.path.join(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(data_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;NumRooms,Alley,Price\n&#x27;</span>)  <span class="comment"># 列名</span></span><br><span class="line">    f.write(<span class="string">&#x27;NA,Pave,127500\n&#x27;</span>)  <span class="comment"># 每行表示一个数据样本</span></span><br><span class="line">    f.write(<span class="string">&#x27;2,NA,106000\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;4,NA,178100\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;NA,NA,140000\n&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>要从创建的CSV文件中加载原始数据集，我们导入<code>pandas</code>包并调用<code>read_csv</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(data_file)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><ul><li>该数据集有四行三列。其中每行描述了房间数量（“NumRooms”）、巷子类型（“Alley”）和房屋价格（“Price”）</li></ul></li></ul><h4 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h4><ul><li><p>“NaN”项代表缺失值</p></li><li><p>为了处理缺失的数据，典型的方法包括插值法和删除法，其中插值法用一个替代值弥补缺失值，而删除法则直接忽略缺失值</p></li><li><p>插值法：通过位置索引<code>iloc</code>，将<code>data</code>分成<code>inputs</code>和<code>outputs</code>， 其中前者为<code>data</code>的前两列，而后者为<code>data</code>的最后一列</p><ul><li>对于<code>inputs</code>中缺少的数值，我们用同一列的均值替换“NaN”项</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inputs, outputs = data.iloc[:, <span class="number">0</span>:<span class="number">2</span>], data.iloc[:, <span class="number">2</span>]</span><br><span class="line">inputs = inputs.fillna(inputs.mean())</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br></pre></td></tr></table></figure></li><li><p>对于<code>inputs</code>中的类别值或离散值，我们将“NaN”视为一个类别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputs = pd.get_dummies(inputs, dummy_na=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br></pre></td></tr></table></figure></li></ul><h4 id="转换为张量格式"><a href="#转换为张量格式" class="headerlink" title="转换为张量格式"></a>转换为张量格式</h4><ul><li><p>现在<code>inputs</code>和<code>outputs</code>中的所有条目都是数值类型，它们可以转换为张量格式</p></li><li><p>当数据采用张量格式后，可以通过张量函数来进一步操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">X, y = torch.tensor(inputs.values), torch.tensor(outputs.values)</span><br><span class="line">X, y</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 数据库基础知识总结</title>
      <link href="/JDBC%E5%9F%BA%E7%A1%80/"/>
      <url>/JDBC%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java 数据库连接，JDBC（Java Database Connectivity），是 Java 语言编程中与数据库连接的 API，封装了各种数据库访问的 API 和基础类库，支持多种数据库连接，也是 Java Web 技术核心的第一部分，我把整个学习过程分为 MySQL 基础、MySQL 高级、JDBC 和数据连接池四个部分，便于理解。</p></blockquote><span id="more"></span><h3 id="MySQL-基础"><a href="#MySQL-基础" class="headerlink" title="MySQL 基础"></a>MySQL 基础</h3><h4 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h4><ul><li>英文：Structured Query Language，简称 SQL</li><li>结构化查询语言，一门操作关系型数据库的编程语言</li><li>定义操作所有关系型数据库的统一标准</li><li>对于同一个需求，每一种数据库操作的方式可能会存在一些不一样的地方</li></ul><h4 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法"></a>通用语法</h4><ul><li><p>SQL 语句可以单行或多行书写，以分号结尾。</p></li><li><p>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</p></li><li><p>注释</p><ul><li><p>单行注释: <code>-- 注释内容</code> 或 <code>#注释内容</code></p></li><li><p>多行注释: <code>/* 注释 */</code></p></li></ul></li></ul><h4 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h4><ul><li><p>DDL (Data Definition Language) ： 数据定义语言，用来定义数据库对象：数据库，表，列等</p></li><li><p>DML (Data Manipulation Language) 数据操作语言，用来对数据库中表的数据进行增删改</p></li><li><p>DQL (Data Query Language) 数据查询语言，用来查询数据库中表的记录（数据）</p></li><li><p>DCL (Data Control Language) 数据控制语言，用来定义数据库的访问权限和安全级别，及创建用户</p></li></ul><h4 id="DDL：操作数据库"><a href="#DDL：操作数据库" class="headerlink" title="DDL：操作数据库"></a>DDL：操作数据库</h4><ul><li>查询所有的数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><ul><li>创建数据库（先判断，如果不存在则创建）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名称;</span><br></pre></td></tr></table></figure><ul><li>删除数据库（先判断，如果存在则删除）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 数据库名称;</span><br></pre></td></tr></table></figure><ul><li>使用数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名称;</span><br></pre></td></tr></table></figure><ul><li>查看当前使用的数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><h4 id="DDL：操作表"><a href="#DDL：操作表" class="headerlink" title="DDL：操作表"></a>DDL：操作表</h4><ul><li>查询当前数据库下所有表名称</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><ul><li>查询表结构</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名称;</span><br></pre></td></tr></table></figure><ul><li>创建表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user (</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">32</span>)  <span class="comment">-- 最后一行末尾，不能加逗号</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>删除表（先判断表是否存在）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> 表名;</span><br></pre></td></tr></table></figure><ul><li>修改表名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME <span class="keyword">TO</span> 新的表名;</span><br></pre></td></tr></table></figure><ul><li>添加一列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 列名 数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给stu表添加一列address，该字段类型是varchar(50)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> address <span class="type">varchar</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><ul><li>修改数据类型</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 列名 新数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将stu表中的address字段的类型改为 char(50)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu modify address <span class="type">char</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><ul><li>修改列名和数据类型</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 列名 新列名 新数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将stu表中的address字段名改为 addr，类型改为varchar(50)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu change address addr <span class="type">varchar</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><ul><li>删除列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 列名;</span><br></pre></td></tr></table></figure><h4 id="SQL-的数据类型"><a href="#SQL-的数据类型" class="headerlink" title="SQL 的数据类型"></a>SQL 的数据类型</h4><ul><li><p>数值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tinyint : 小整数型，占一个字节</span><br><span class="line"><span class="type">int</span>： 大整数类型，占四个字节</span><br><span class="line">eg ： age <span class="type">int</span></span><br><span class="line"><span class="keyword">double</span> ： 浮点类型</span><br><span class="line">使用格式： 字段名 <span class="keyword">double</span>(总长度,小数点后保留的位数)</span><br><span class="line">eg ： score <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>)   </span><br></pre></td></tr></table></figure></li><li><p>日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">date</span> ： 日期值。只包含年月日</span><br><span class="line">eg ：birthday <span class="type">date</span> ： </span><br><span class="line">datetime ： 混合日期和时间值。包含年月日时分秒</span><br></pre></td></tr></table></figure></li><li><p>字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ： 定长字符串。</span><br><span class="line">优点：存储性能高</span><br><span class="line">缺点：浪费空间</span><br><span class="line">eg ： name <span class="type">char</span>(<span class="number">10</span>)  如果存储的数据字符个数不足<span class="number">10</span>个，也会占<span class="number">10</span>个的空间</span><br><span class="line"><span class="type">varchar</span> ： 变长字符串。</span><br><span class="line">优点：节约空间</span><br><span class="line">缺点：存储性能底</span><br><span class="line">eg ： name <span class="type">varchar</span>(<span class="number">10</span>) 如果存储的数据字符个数不足<span class="number">10</span>个，那就数据字符个数是几就占几个的空间</span><br></pre></td></tr></table></figure></li></ul><h4 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h4><ul><li>查询所有数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><ul><li>给指定列添加数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名<span class="number">1</span>,列名<span class="number">2</span>,…) <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,…);</span><br></pre></td></tr></table></figure><ul><li>给全部列添加数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,…);</span><br></pre></td></tr></table></figure><ul><li>批量添加数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名<span class="number">1</span>,列名<span class="number">2</span>,…) <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,…),(值<span class="number">1</span>,值<span class="number">2</span>,…),(值<span class="number">1</span>,值<span class="number">2</span>,…)…;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,…),(值<span class="number">1</span>,值<span class="number">2</span>,…),(值<span class="number">1</span>,值<span class="number">2</span>,…)…;</span><br></pre></td></tr></table></figure><ul><li>修改表数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,列名<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>,… [<span class="keyword">WHERE</span> 条件] ;</span><br><span class="line"><span class="comment">-- 修改语句中如果不加条件，则将所有数据都修改！</span></span><br></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件] ;</span><br></pre></td></tr></table></figure><ul><li>删除表中所有的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h4><ul><li>查询多个字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名; <span class="comment">-- 查询所有数据</span></span><br></pre></td></tr></table></figure><ul><li>去除重复记录</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><ul><li>起别名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">AS</span>: 别名 <span class="keyword">FROM</span> 表名; <span class="comment">-- AS 也可以省略</span></span><br></pre></td></tr></table></figure><ul><li>条件查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表;</span><br></pre></td></tr></table></figure><ul><li>模糊查询<ul><li>使用 <code>LIKE</code> 关键字，可以使用通配符进行占位</li><li><code>_</code> ：代表单个任意字符</li><li><code>%</code> ：代表任意个数字符</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;马%&#x27;</span>;  <span class="comment">-- 查询姓&#x27;马&#x27;的学员信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;_花%&#x27;</span>;  <span class="comment">-- 查询第二个字是&#x27;花&#x27;的学员信息 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%德%&#x27;</span>;  <span class="comment">-- 查询名字中包含 &#x27;德&#x27; 的学员信息</span></span><br></pre></td></tr></table></figure><ul><li>排序查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序字段名<span class="number">1</span> [排序方式<span class="number">1</span>],排序字段名<span class="number">2</span> [排序方式<span class="number">2</span>] …;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">排序方式有两种，分别是：</span></span><br><span class="line"><span class="comment">ASC ： 升序排列（默认值）</span></span><br><span class="line"><span class="comment">DESC ： 降序排列</span></span><br><span class="line"><span class="comment">如果有多个排序条件，当前边的条件值一样时，才会根据第二条件进行排序</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>聚合函数<ul><li>将一列数据作为一个整体，进行纵向计算</li></ul></li></ul><div class="table-container"><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td><code>count(列名)</code></td><td>统计数量（一般选用不为null的列）</td></tr><tr><td><code>max(列名)</code></td><td>最大值</td></tr><tr><td><code>min(列名)</code></td><td>最小值</td></tr><tr><td><code>sum(列名)</code></td><td>求和</td></tr><tr><td><code>avg(列名)</code></td><td>平均值</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数名(列名) <span class="keyword">FROM</span> 表;</span><br><span class="line"><span class="comment">-- null 值不参与所有聚合函数运算</span></span><br></pre></td></tr></table></figure><ul><li>分组查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 分组前条件限定] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名 [<span class="keyword">HAVING</span> 分组后条件过滤];</span><br><span class="line"><span class="comment">-- 分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</span></span><br></pre></td></tr></table></figure><ul><li><p>where 和 having 区别：</p><ul><li>执行时机不一样：<code>where</code> 是分组之前进行限定，不满足 <code>where</code> 条件，则不参与分组，而 <code>having</code> 是分组之后对结果进行过滤。</li></ul></li></ul><ul><li>可判断的条件不一样：<code>where</code> 不能对聚合函数进行判断，<code>having</code> 可以</li></ul><ul><li>分页查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT  起始索引 , 查询条目数;</span><br><span class="line"><span class="comment">-- 起始索引是从0开始</span></span><br></pre></td></tr></table></figure><ul><li>起始索引计算公式：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">起始索引 <span class="operator">=</span> (当前页码 <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> 每页显示的条数</span><br></pre></td></tr></table></figure><h3 id="MySQL-进阶"><a href="#MySQL-进阶" class="headerlink" title="MySQL 进阶"></a>MySQL 进阶</h3><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><ul><li><p>约束是作用于表中列上的规则，用于限制加入表的数据</p></li><li><p>约束的存在保证了数据库中数据的正确性、有效性和完整性</p></li><li><p>约束的分类</p><ul><li>非空约束：关键字是 <code>NOT NULL</code>，保证列中所有的数据不能有null值。</li></ul></li></ul><ul><li>唯一约束：关键字是 <code>UNIQUE</code>，保证列中所有数据各不相同</li></ul><ul><li>主键约束： 关键字是 <code>PRIMARY KEY</code>，主键是一行数据的唯一标识，要求非空且唯一</li></ul><ul><li>检查约束： 关键字是 <code>CHECK</code>，保证列中的值满足某一条件（MySQL不支持检查约束）</li></ul><ul><li>默认约束： 关键字是  <code>DEFAULT</code>，保存数据时，未指定值则采用默认值</li><li>外键约束： 关键字是 <code>FOREIGN KEY</code>，外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性</li></ul><ul><li><p>非空约束</p><ul><li><p>用于保证列中所有数据不能有NULL值</p></li><li><p>添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加非空约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   …</span><br><span class="line">); </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>* 删除约束  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 数据类型;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>唯一约束</p><ul><li>用于保证列中所有数据各不相同</li></ul></li></ul><pre><code>* 添加约束  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加唯一约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型 <span class="keyword">UNIQUE</span> [AUTO_INCREMENT],</span><br><span class="line">   <span class="comment">-- AUTO_INCREMENT: 当不指定值时自动增长</span></span><br><span class="line">   …</span><br><span class="line">); </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型,</span><br><span class="line">   …</span><br><span class="line">   [<span class="keyword">CONSTRAINT</span>] [约束名称] <span class="keyword">UNIQUE</span>(列名)</span><br><span class="line">); </span><br></pre></td></tr></table></figure>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 数据类型 <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure>* 删除约束  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> INDEX 字段名;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>主键约束</p><ul><li>主键是一行数据的唯一标识，要求非空且唯一</li><li>一张表只能有一个主键</li></ul><ul><li><p>添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加主键约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型 <span class="keyword">PRIMARY</span> KEY [AUTO_INCREMENT],</span><br><span class="line">   …</span><br><span class="line">); </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型,</span><br><span class="line">   [<span class="keyword">CONSTRAINT</span>] [约束名称] <span class="keyword">PRIMARY</span> KEY(列名)</span><br><span class="line">); </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(字段名);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>默认约束</p><ul><li><p>保存数据时，未指定值则采用默认值</p></li><li><p>添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加默认约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型 <span class="keyword">DEFAULT</span> 默认值,</span><br><span class="line">   …</span><br><span class="line">); </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ALTER</span> 列名 <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> 默认值;</span><br></pre></td></tr></table></figure></li><li><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ALTER</span> 列名 <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>默认约束只有在不给值时才会采用默认值。如果给了null，那值就是null值</li></ul><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><ul><li>外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性</li></ul><ul><li>添加外键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加外键约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型,</span><br><span class="line">   …</span><br><span class="line">   [<span class="keyword">CONSTRAINT</span>] [外键名称] <span class="keyword">FOREIGN</span> KEY(外键列名) <span class="keyword">REFERENCES</span> 主表(主表列名) </span><br><span class="line">); </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段名称) <span class="keyword">REFERENCES</span> 主表名称(主表列名称);</span><br></pre></td></tr></table></figure><ul><li>删除外键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键名称;</span><br></pre></td></tr></table></figure><ul><li>添加数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加 2 个部门</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(dep_name,addr) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;研发部&#x27;</span>,<span class="string">&#x27;广州&#x27;</span>),(<span class="string">&#x27;销售部&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加员工,dep_id 表示员工所在的部门</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (NAME, age, dep_id) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;王五&#x27;</span>, <span class="number">20</span>, <span class="number">1</span>),</span><br></pre></td></tr></table></figure><p>删除外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">FOREIGN</span> key fk_emp_dept;</span><br></pre></td></tr></table></figure><p>重新添加外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_emp_dept <span class="keyword">FOREIGN</span> key(dep_id) <span class="keyword">REFERENCES</span> dept(id);</span><br></pre></td></tr></table></figure><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><ul><li><p>数据库设计概念</p><ul><li>数据库设计就是根据业务系统的具体需求，结合我们所选用的DBMS，为这个业务系统构造出最优的数据存储模型</li><li>建立数据库中的表结构以及表与表之间的关联关系的过程</li><li>有哪些表？表里有哪些字段？表和表之间有什么关系？</li></ul></li><li><p>数据库设计的步骤</p><ul><li><p>需求分析（数据是什么? 数据具有哪些属性? 数据与属性的特点是什么）</p></li><li><p>逻辑分析（通过ER图对数据库进行逻辑建模，不需要考虑我们所选用的数据库管理系统）</p></li><li><p>物理设计（根据数据库自身的特点把逻辑设计转换为物理设计）</p></li><li><p>维护设计（1.对新的需求进行建表；2.表优化）</p></li></ul></li><li><p>表关系</p><ul><li><p>一对一（如：用户 和 用户详情）：一对一关系多用于表拆分，将一个实体中经常使用的字段放一张表，不经常使用的字段放另一张表，用于提升查询性能</p></li><li><p>一对多（如：部门 和 员工）：一个部门对应多个员工，一个员工对应一个部门</p></li><li><p>多对多（如：商品 和 订单）：一个商品对应多个订单，一个订单包含多个商品</p></li></ul></li></ul><ul><li><p>表关系（一对多）</p><ul><li>实现方式：在多的一方建立外键，指向一的一方的主键</li></ul></li></ul><ul><li>以 <code>员工表</code> 和 <code>部门表</code> 举例：在员工表中添加一列（dep_id），指向于部门表的主键（id）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_emp;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_dept(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    dep_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    addr <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 员工表 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_emp(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span>,</span><br><span class="line">    dep_id <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 添加外键 dep_id,关联 dept 表的id主键</span></span><br><span class="line">    <span class="keyword">CONSTRAINT</span> fk_emp_dept <span class="keyword">FOREIGN</span> KEY(dep_id) <span class="keyword">REFERENCES</span> tb_dept(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p>表关系（多对多）</p><ul><li>建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li></ul><ul><li>以 <code>订单表</code> 和 <code>商品表</code> 举例：订单表和商品表都属于多的一方，此时需要创建一个中间表，在中间表中添加订单表的外键和商品表的外键指向两张表的主键：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_order_goods;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_order;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_goods;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 订单表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_order(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">payment <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">payment_type TINYINT,</span><br><span class="line">status TINYINT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 商品表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_goods(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">title <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">price <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 订单商品中间表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_order_goods(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">order_id <span class="type">int</span>,</span><br><span class="line">goods_id <span class="type">int</span>,</span><br><span class="line">count <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建完表后，添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_order_goods <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_order_id <span class="keyword">FOREIGN</span> key(order_id) <span class="keyword">REFERENCES</span> tb_order(id);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_order_goods <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_goods_id <span class="keyword">FOREIGN</span> key(goods_id) <span class="keyword">REFERENCES</span> tb_goods(id);</span><br></pre></td></tr></table></figure></li><li><p>表关系（一对一）</p><ul><li>在任意一方加入外键，关联另一方主键，并且设置外键为唯一（<code>UNIQUE</code>）</li></ul></li></ul><ul><li>以 <code>用户表</code> 举例：在真正使用过程中发现 id、photo、nickname、age、gender 字段比较常用，此时就可以将这张表查分成两张表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user_desc (</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">city <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">edu <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">income <span class="type">int</span>,</span><br><span class="line">status <span class="type">char</span>(<span class="number">2</span>),</span><br><span class="line">des <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user (</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">photo <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">nickname <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">desc_id <span class="type">int</span> <span class="keyword">unique</span>,</span><br><span class="line"><span class="comment">-- 添加外键</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_user_desc <span class="keyword">FOREIGN</span> KEY(desc_id) <span class="keyword">REFERENCES</span> tb_user_desc(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><ul><li>多表查询顾名思义就是从多张表中一次性的查询出我们想要的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dept;</span><br><span class="line"></span><br><span class="line"># 创建部门表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(</span><br><span class="line">        did <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">        dname <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"># 创建员工表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">        id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">        NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">        gender <span class="type">CHAR</span>(<span class="number">1</span>), <span class="comment">-- 性别</span></span><br><span class="line">        salary <span class="keyword">DOUBLE</span>, <span class="comment">-- 工资</span></span><br><span class="line">        join_date <span class="type">DATE</span>, <span class="comment">-- 入职日期</span></span><br><span class="line">        dep_id <span class="type">INT</span>,</span><br><span class="line">        <span class="keyword">FOREIGN</span> KEY (dep_id) <span class="keyword">REFERENCES</span> dept(did) <span class="comment">-- 外键，关联部门表(部门表的主键)</span></span><br><span class="line">    );</span><br><span class="line"><span class="comment">-- 添加部门数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept (dNAME) <span class="keyword">VALUES</span> (<span class="string">&#x27;研发部&#x27;</span>),(<span class="string">&#x27;市场部&#x27;</span>),(<span class="string">&#x27;财务部&#x27;</span>),(<span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"><span class="comment">-- 添加员工数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(NAME,gender,salary,join_date,dep_id) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">7200</span>,<span class="string">&#x27;2013-02-24&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">3600</span>,<span class="string">&#x27;2010-12-02&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">9000</span>,<span class="string">&#x27;2008-08-08&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;白骨精&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">5000</span>,<span class="string">&#x27;2015-10-07&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">&#x27;蜘蛛精&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">4500</span>,<span class="string">&#x27;2011-03-14&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;小白龙&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">2500</span>,<span class="string">&#x27;2011-02-14&#x27;</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><ul><li>执行下面的多表查询语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp , dept;  <span class="comment">-- 从emp和dept表中查询所有的字段数据</span></span><br></pre></td></tr></table></figure><ul><li>通过限制员工表中的 <code>dep_id</code> 字段的值和部门表 <code>did</code> 字段的值相等来消除无效的数据，</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp , dept <span class="keyword">where</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure><ul><li><p>连接查询 </p><ul><li>内连接查询 ：相当于查询AB交集数据</li><li>外连接查询<ul><li>左外连接查询 ：相当于查询A表所有数据和交集部门数据</li><li>右外连接查询 ： 相当于查询B表所有数据和交集部分数据</li></ul></li><li>子查询</li></ul></li></ul><ul><li>内连接查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 隐式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span>,表<span class="number">2</span>… <span class="keyword">WHERE</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><ul><li>隐式内连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp, dept <span class="keyword">WHERE</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure><ul><li>查询 emp 的 name， gender，dept 表的 dname</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">t1. NAME,</span><br><span class="line">t1.gender,</span><br><span class="line">t2.dname</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp t1,</span><br><span class="line">dept t2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">t1.dep_id <span class="operator">=</span> t2.did;</span><br></pre></td></tr></table></figure><ul><li>显式内连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">inner</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br><span class="line"><span class="comment">-- 上面语句中的inner可以省略，可以书写为如下语句</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp  <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure><ul><li>外连接查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 左外连接：相当于查询A表所有数据和交集部分数据</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 右外连接：相当于查询B表所有数据和交集部分数据</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><ul><li>查询emp表所有数据和对应的部门信息（左外连接）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br><span class="line"><span class="comment">-- 结果显示查询到了左表（emp）中所有的数据及两张表能关联的数据</span></span><br></pre></td></tr></table></figure><ul><li>查询dept表所有数据和对应的员工信息（右外连接）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br><span class="line"><span class="comment">-- 结果显示查询到了右表（dept）中所有的数据及两张表能关联的数据</span></span><br></pre></td></tr></table></figure><p>。要查询出部门表中所有的数据，也可以通过左外连接实现，只需要将两个表的位置进行互换：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept <span class="keyword">left</span> <span class="keyword">join</span> emp <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure><ul><li><p>子查询</p><ul><li>查询中嵌套查询，称嵌套查询为子查询</li></ul></li></ul><ul><li>子查询根据查询结果不同，作用不同</li><li>子查询语句结果是单行单列，子查询语句作为条件值，使用 =  !=  &gt;  &lt;  等进行条件判断</li><li>子查询语句结果是多行单列，子查询语句作为条件值，使用 in 等关键字进行条件判断</li><li>子查询语句结果是多行多列，子查询语句作为虚拟表</li><li>查询 ‘财务部’ 和 ‘市场部’ 所有的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 &#x27;财务部&#x27; 或者 &#x27;市场部&#x27; 所有的员工的部门did</span></span><br><span class="line"><span class="keyword">select</span> did <span class="keyword">from</span> dept <span class="keyword">where</span> dname <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span> <span class="keyword">or</span> dname <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dep_id <span class="keyword">in</span> (<span class="keyword">select</span> did <span class="keyword">from</span> dept <span class="keyword">where</span> dname <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span> <span class="keyword">or</span> dname <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>查询入职日期是 ‘2011-11-11’ 之后的员工信息和部门信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询入职日期是 &#x27;2011-11-11&#x27; 之后的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> join_date <span class="operator">&gt;</span> <span class="string">&#x27;2011-11-11&#x27;</span> ;</span><br><span class="line"><span class="comment">-- 将上面语句的结果作为虚拟表和dept表进行内连接查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> join_date <span class="operator">&gt;</span> <span class="string">&#x27;2011-11-11&#x27;</span> ) t1, dept <span class="keyword">where</span> t1.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ul><li><p>概述</p><ul><li><p>数据库的事务（Transaction）是一种机制、一个操作序列，包含了一组数据库操作命令</p></li><li><p>事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么同时成功，要么同时失败</p></li><li><p>事务是一个不可分割的工作逻辑单元</p></li></ul></li></ul><ul><li><p>语法</p><ul><li>开启事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">或者  </span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>回滚事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>代码验证</p><ul><li>环境准备</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建账户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(name,money) <span class="keyword">values</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">1000</span>),(<span class="string">&#x27;李四&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>不加事务演示问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 转账操作</span></span><br><span class="line"><span class="comment">-- 1. 查询李四账户金额是否大于500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 李四账户 -500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line">出现异常了...  <span class="comment">-- 此处不是注释，在整体执行时会出问题，后面的sql则不执行</span></span><br><span class="line"><span class="comment">-- 3. 张三账户 +500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>添加事务 sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">-- 转账操作</span></span><br><span class="line"><span class="comment">-- 1. 查询李四账户金额是否大于500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 李四账户 -500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line">出现异常了...  <span class="comment">-- 此处不是注释，在整体执行时会出问题，后面的sql则不执行</span></span><br><span class="line"><span class="comment">-- 3. 张三账户 +500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><ul><li>上面sql中的执行成功进选择执行提交事务，而出现问题则执行回滚事务的语句，以后我们肯定不可能这样操作，而是在java中进行操作，在java中可以抓取异常，没出现异常提交事务，出现异常回滚事务</li></ul></li></ul><ul><li><p>事务的四大特征</p><ul><li>原子性（Atomicity）: 事务是不可分割的最小操作单位，要么同时成功，要么同时失败</li><li>一致性（Consistency） :事务完成时，必须使所有的数据都保持一致状态</li><li>隔离性（Isolation） :多个事务之间，操作的可见性</li><li>持久性（Durability） :事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li><li>MySQL 中事务是自动提交的，也就是说我们不添加事务执行sql语句，语句执行完毕会自动的提交事务<ul><li>可以通过下面语句查询默认提交方式：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @<span class="meta">@autocommit</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询到的结果是1 则表示自动提交，结果是0表示手动提交。当然也可以通过下面语句修改提交方式</p></li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><h4 id="JDBC-简介"><a href="#JDBC-简介" class="headerlink" title="JDBC 简介"></a>JDBC 简介</h4><ul><li><p>JDBC 概念</p><ul><li><p>JDBC 就是使用Java语言操作关系型数据库的一套API</p></li><li><p>JDBC 全称：( Java DataBase Connectivity ) Java 数据库连接</p></li><li><p>sun公司指定了一套标准接口（JDBC），JDBC中定义了所有操作关系型数据库的规则，众所周知接口是无法直接使用的，我们需要使用接口的实现类，而这套实现类（称之为：驱动）就由各自的数据库厂商给出</p></li></ul></li><li><p>JDBC本质</p><ul><li><p>官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口</p></li><li><p>各个数据库厂商去实现这套接口，提供数据库驱动jar包</p></li><li><p>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类</p></li></ul></li></ul><ul><li><p>JDBC好处</p><ul><li><p>各数据库厂商使用相同的接口，Java代码不需要针对不同数据库分别开发</p></li><li><p>可随时替换底层数据库，访问数据库的Java代码基本不变</p></li><li>以后编写操作数据库的代码只需要面向JDBC（接口），操作哪儿个关系型数据库就需要导入该数据库的驱动包，如需要操作MySQL数据库，就需要再项目中导入MySQL数据库的驱动包</li></ul></li></ul><h4 id="JDBC快速入门"><a href="#JDBC快速入门" class="headerlink" title="JDBC快速入门"></a>JDBC快速入门</h4><ul><li><p>通过Java操作数据库的流程</p><ul><li>第一步：编写Java代码</li></ul></li></ul><pre><code>- 第二步：Java代码将SQL发送到MySQL服务端- 第三步：MySQL服务端接收到SQL语句并执行该SQL语句- 第四步：将SQL语句执行的结果返回给Java代码</code></pre><ul><li><p>编写代码步骤</p><ul><li>创建工程，导入驱动 jar 包（mysql-connector-java-5.1.48.jar）</li></ul></li></ul><ul><li><p>注册驱动</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>获取连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure><ul><li>Java代码需要发送SQL给MySQL服务端，就需要先建立连接</li></ul></li></ul><ul><li><p>定义SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="keyword">sql</span> <span class="operator">=</span>  &quot;select * from table;&quot; ;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>获取执行SQL对象</p><ul><li>执行SQL语句需要SQL执行对象，而这个执行对象就是Statement对象</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure></li><li><p>执行SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stmt.executeUpdate(<span class="keyword">sql</span>);  </span><br></pre></td></tr></table></figure></li></ul><ul><li>处理返回结果</li><li>释放资源</li><li>IDEA 中编写代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line">        <span class="comment">//2. 获取连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//3. 定义sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = 2000 where id = 1&quot;</span>;</span><br><span class="line">        <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">//5. 执行sql</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);<span class="comment">//受影响的行数</span></span><br><span class="line">        <span class="comment">//6. 处理结果</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//7. 释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JDBC-API-详解"><a href="#JDBC-API-详解" class="headerlink" title="JDBC API 详解"></a>JDBC API 详解</h4><ul><li><p>DriverManager（驱动管理类）</p><ul><li><p>注册驱动：<code>registerDriver</code> 方法是用于注册驱动的，但是我们之前做的入门案例并不是这样写的。而是如下实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure></li><li><p>在该类中的静态代码块中已经执行了 <code>DriverManager</code> 对象的 <code>registerDriver()</code> 方法进行驱动的注册了，那么我们只需要加载 <code>Driver</code> 类，该静态代码块就会执行，而 <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code> 就可以加载 <code>Driver</code> 类</p></li></ul></li></ul><pre><code>* 获取数据库连接  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure>  * url ： `jdbc:mysql://ip地址(域名):端口号/数据库名称?参数键值对1&amp;参数键值对2…`    * 配置 `useSSL=false` 参数，禁用安全连接方式，解决警告提示  * user ：用户名  * poassword ：密码</code></pre><ul><li><p>Connection（数据库连接对象）</p><ul><li><p>获取执行 SQL 的对象</p><ul><li>普通执行SQL对象</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Statement createStatement()  </span><br><span class="line"><span class="comment">-- 通过该方法获取执行对象</span></span><br><span class="line">Statement stmt <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">int</span> count <span class="operator">=</span> stmt.executeUpdate(<span class="keyword">sql</span>);</span><br></pre></td></tr></table></figure><ul><li>预编译SQL的执行SQL对象：防止SQL注入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement  prepareStatement(<span class="keyword">sql</span>)</span><br></pre></td></tr></table></figure><ul><li><p>通过这种方式获取的 <code>PreparedStatement</code> SQL语句执行对象可以防止SQL注入</p></li><li><p>执行存储过程的对象</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CallableStatement prepareCall(<span class="keyword">sql</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过这种方式获取的 <code>CallableStatement</code> 执行对象是用来执行存储过程的，但存储过程在MySQL中不常用</p></li></ul></li></ul></li></ul><pre><code>- 事务管理  - MySQL事务管理的操作（MySQL默认是自动提交事务）    * 开启事务 ： `BEGIN;` 或者 `START TRANSACTION;`    * 提交事务 ： `COMMIT;`    * 回滚事务 ： `ROLLBACK;`  - JDBC事务管理的方法    - Connection几个接口中定义了3个对应的方法：      * 开启事务        <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setAutoCommit(<span class="type">boolean</span> autoCommit)</span><br></pre></td></tr></table></figure>      * 参与 `autoCommit` 表示是否自动提交事务，true表示自动提交事务，false表示手动提交事务，而开启事务需要将该参数设为为 false      * 提交事务        <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>()</span><br></pre></td></tr></table></figure>      * 回滚事务        <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>Statement（声明执行对象）</p><ul><li>Statement对象的作用就是用来执行SQL语句，而针对不同类型的SQL语句使用的方法也不一样</li></ul></li></ul><pre><code>* 执行DDL、DML语句  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> excuteUpdate(<span class="keyword">sql</span>)</span><br></pre></td></tr></table></figure>  * 返回值：DML语句影响的行数，DDL语句执行成功后可能返回0* 执行DQL语句  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResultSet excuteQuery(<span class="keyword">sql</span>)</span><br></pre></td></tr></table></figure>  - 返回值： `ResultSet` 结果集对象</code></pre><ul><li><p>ResultSet（结果集对象）</p><ul><li>封装了SQL查询语句的结果，执行DQL语句后就会返回该对象<ul><li><code>ResultSet  executeQuery(sql)</code>：执行DQL 语句，返回 <code>ResultSet</code> 对象</li></ul></li></ul><ul><li><p><code>ResultSet</code> 对象提供了获取查询结果数据的方法</p><ul><li><p><code>boolean  next()</code>：将光标从当前位置向前移动一行，判断当前行是否为有效行</p></li><li><p>方法返回值：true （ 有效行，当前行有数据），false（无效行，当前行没有数据）</p></li><li><p><code>xxx  getXxx(参数)</code>：获取数据</p></li><li>xxx : 数据类型；如： <code>nt getInt(参数)</code> ；<code>String getString(参数)</code></li><li>int 类型的参数：列的编号，从1开始</li><li>String 类型的参数： 列的名称 </li></ul></li></ul></li></ul><ul><li>一开始光标指定于第一行前，当我们调用了 <code>next()</code> 方法后，光标就下移到第一行数据，并且方法返回 true，此时就可以通过 <code>getInt(&quot;id&quot;)</code> 获取当前行id字段的值，也可以通过 <code>getString(&quot;name&quot;)</code> 获取当前行name字段的值。如果想获取下一行的数据，继续调用 <code>next()</code>  方法，以此类推。</li></ul><ul><li><p>PreparedStatement</p><ul><li>预编译SQL语句并执行：预防SQL注入问题</li><li><p>SQL注入是通过操作输入来修改事先定义好的SQL语句，用以达到执行代码对服务器进行攻击的方法。</p></li><li><p>代码模拟SQL注入问题</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLogin</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收用户输入 用户名和密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;sjdljfld&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user where username = &#x27;&quot;</span>+name+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+pwd+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取stmt对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">    <span class="comment">// 执行sql</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">    <span class="comment">// 判断登录是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功~&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码是将用户名和密码拼接到sql语句中，拼接后的sql语句如下</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;sjdljfld&#x27;</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;&#x27;</span><span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>获取 PreparedStatement 对象</li></ul></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SQL语句中的参数值，使用？占位符替代</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br><span class="line"><span class="comment">// 通过Connection对象获取，并传入对应的sql语句</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure><ul><li><p>设置参数值：PreparedStatement 的sql语句中参数使用 ? 进行占位，在之前之前肯定要设置这些 ?  的值</p></li><li><p>PreparedStatement对象：<code>setXxx(参数1，参数2)</code>：给 ? 赋值</p></li><li><p>Xxx：数据类型 ； 如 setInt (参数1，参数2)</p></li><li><p>参数：</p></li><li>参数1： ？的位置编号，从1 开始<ul><li>参数2： ？的值</li></ul></li></ul><ul><li><p>执行SQL语句</p><ul><li><code>executeUpdate()</code>;  执行DDL语句和DML语句</li><li><code>executeQuery()</code>;  执行DQL语句</li><li>调用这两个方法时不需要传递SQL语句，因为获取SQL语句执行对象时已经对SQL语句进行预编译了</li></ul></li></ul><ul><li><p>使用PreparedStatement改进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPreparedStatement</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收用户输入 用户名和密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user where username = ? and password = ?&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取pstmt对象</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">    <span class="comment">// 设置？的值</span></span><br><span class="line">    pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">    pstmt.setString(<span class="number">2</span>,pwd);</span><br><span class="line">    <span class="comment">// 执行sql</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line">    <span class="comment">// 判断登录是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功~&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    pstmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>PreparedStatement 实际上是将特殊字符进行了转义，转义的SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;sjdljfld&#x27;</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;\&#x27;</span><span class="keyword">or</span> \<span class="string">&#x27;1\&#x27;</span> <span class="operator">=</span> \<span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>PreparedStatement原理</p><ul><li>预编译SQL，性能更高</li><li>防止SQL注入：将敏感字符进行转义</li></ul><ul><li>将sql语句发送到MySQL服务器端</li></ul></li></ul><pre><code>* MySQL服务端会对sql语句进行如下操作  * 检查SQL语句的语法是否正确。  * 编译SQL语句。将SQL语句编译成可执行的函数。  * 检查SQL和编译SQL花费的时间比执行SQL的时间还要长。如果我们只是重新设置参数，那么检查SQL语句和编译SQL语句将不需要重复执行。这样就提高了性能。  * 执行SQL语句</code></pre><ul><li><p>开启预编译功能：<code>useServerPrepStmts=true</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url <span class="operator">=</span> &quot;jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true&quot;;</span><br></pre></td></tr></table></figure></li><li><p>配置MySQL执行日志（重启mysql服务后生效）</p><ul><li>在mysql配置文件（my.ini）中添加如下配置</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log-output</span>=FILE</span><br><span class="line"><span class="attr">general-log</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">general_log_file</span>=<span class="string">&quot;D:\mysql.log&quot;</span></span><br><span class="line"><span class="attr">slow-query-log</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">slow_query_log_file</span>=<span class="string">&quot;D:\mysql_slow.log&quot;</span></span><br><span class="line"><span class="attr">long_query_time</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>PreparedStatement 小结<ul><li>在获取PreparedStatement对象时，将sql语句发送给mysql服务器进行检查，编译（这些步骤很耗时）</li><li>执行时就不用再进行这些步骤了，速度更快</li><li>如果sql模板一样，则只需要进行一次检查、编译</li></ul></li></ul><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><h4 id="数据库连接池简介"><a href="#数据库连接池简介" class="headerlink" title="数据库连接池简介"></a>数据库连接池简介</h4><ul><li>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</li><li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；</li><li>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏</li><li>好处<ul><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ul></li><li>之前我们代码中使用连接是没有使用都创建一个Connection对象，使用完毕就会将其销毁。这样重复创建销毁的过程是特别耗费计算机的性能的及消耗时间的</li><li>而数据库使用了数据库连接池后，就能达到Connection对象的复用</li><li>连接池是在一开始就创建好了一些连接（Connection）对象存储起来。用户需要连接数据库时，不需要自己创建连接，而只需要从连接池中获取一个连接进行使用，使用完毕后再将连接对象归还给连接池；这样就可以起到资源重用，也节省了频繁创建连接销毁连接所花费的时间，从而提升了系统响应的速度</li></ul><h4 id="数据库连接池实现"><a href="#数据库连接池实现" class="headerlink" title="数据库连接池实现"></a>数据库连接池实现</h4><ul><li><p>标准接口：DataSource</p></li><li><p>官方(SUN) 提供的数据库连接池标准接口，由第三方组织实现此接口。该接口提供了获取连接的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection <span class="title function_">getConnection</span><span class="params">()</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>那么以后就不需要通过 <code>DriverManager</code> 对象获取 <code>Connection</code> 对象，而是通过连接池（DataSource）获取 <code>Connection</code> 对象。</li></ul><ul><li><p>常见的数据库连接池</p><ul><li>DBCP</li><li>C3P0</li><li>Druid</li></ul><p>我们现在使用更多的是Druid，它的性能比其他两个会好一些。</p></li><li><p>Druid（德鲁伊）</p><ul><li><p>Druid连接池是阿里巴巴开源的数据库连接池项目 </p></li><li><p>功能强大，性能优秀，是Java语言最好的数据库连接池之一</p></li></ul></li></ul><h4 id="Driud-使用"><a href="#Driud-使用" class="headerlink" title="Driud 使用"></a>Driud 使用</h4><ul><li>导入jar包 druid-1.1.12.jar</li><li>定义配置文件：src 目录下新建 <code>druid.properties</code></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure><ul><li>加载配置文件</li><li>获取数据库连接池对象</li><li>获取连接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid数据库连接池演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc-demo/src/druid.properties&quot;</span>));</span><br><span class="line">        <span class="comment">// 获取连接池对象</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line">        <span class="comment">// 获取数据库连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(connection); <span class="comment">//获取到了连接后就可以继续做其他操作了</span></span><br><span class="line">        <span class="comment">//System.out.println(System.getProperty(&quot;user.dir&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>druid 配置详解</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">说明</th><th style="text-align:center">建议值</th></tr></thead><tbody><tr><td style="text-align:center">url</td><td style="text-align:center">数据库的jdbc连接地址。一般为连接oracle/mysql。示例如下：</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">mysql : jdbc:mysql://ip:port/dbname?option1&amp;option2&amp;…</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">oracle : jdbc:oracle:thin:@ip:port:oracle_sid</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">username</td><td style="text-align:center">登录数据库的用户名</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">password</td><td style="text-align:center">登录数据库的用户密码</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">initialSize</td><td style="text-align:center">启动程序时，在连接池中初始化多少个连接</td><td style="text-align:center">10-50已足够</td></tr><tr><td style="text-align:center">maxActive</td><td style="text-align:center">连接池中最多支持多少个活动会话</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">maxWait</td><td style="text-align:center">程序向连接池中请求连接时,超过maxWait的值后，认为本次请求失败，即连接池</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">没有可用连接，单位毫秒，设置-1时表示无限等待</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">minEvictableIdleTimeMillis</td><td style="text-align:center">池中某个连接的空闲时长达到 N 毫秒后, 连接池在下次检查空闲连接时，将</td><td style="text-align:center">见说明部分</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">回收该连接,要小于防火墙超时设置</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">net.netfilter.nf_conntrack_tcp_timeout_established的设置</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">timeBetweenEvictionRunsMillis</td><td style="text-align:center">检查空闲连接的频率，单位毫秒, 非正整数时表示不进行检查</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">keepAlive</td><td style="text-align:center">程序没有close连接且空闲时长超过 minEvictableIdleTimeMillis,则会执</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">行validationQuery指定的SQL,以保证该程序连接不会池kill掉,其范围不超</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">过minIdle指定的连接个数。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">minIdle</td><td style="text-align:center">回收空闲连接时，将保证至少有minIdle个连接.</td><td style="text-align:center">与initialSize相同</td></tr><tr><td style="text-align:center">removeAbandoned</td><td style="text-align:center">要求程序从池中get到连接后, N 秒后必须close,否则druid 会强制回收该</td><td style="text-align:center">false,当发现程序有未</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">连接,不管该连接中是活动还是空闲, 以防止进程不会进行close而霸占连接。</td><td style="text-align:center">正常close连接时设置为true</td></tr><tr><td style="text-align:center">removeAbandonedTimeout</td><td style="text-align:center">设置druid 强制回收连接的时限，当程序从池中get到连接开始算起，超过此</td><td style="text-align:center">应大于业务运行最长时间</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">值后，druid将强制回收该连接，单位秒。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">logAbandoned</td><td style="text-align:center">当druid强制回收连接后，是否将stack trace 记录到日志中</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">testWhileIdle</td><td style="text-align:center">当程序请求连接，池在分配连接时，是否先检查该连接是否有效。(高效)</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">validationQuery</td><td style="text-align:center">检查池中的连接是否仍可用的 SQL 语句,drui会连接到数据库执行该SQL, 如果</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">正常返回，则表示连接可用，否则表示连接不可用</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">testOnBorrow</td><td style="text-align:center">程序 <strong>申请</strong> 连接时,进行连接有效性检查（低效，影响性能）</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">testOnReturn</td><td style="text-align:center">程序 <strong>返还</strong> 连接时,进行连接有效性检查（低效，影响性能）</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">poolPreparedStatements</td><td style="text-align:center">缓存通过以下两个方法发起的SQL:</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">public PreparedStatement prepareStatement(String sql)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">public PreparedStatement prepareStatement(String sql,</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">int resultSetType, int resultSetConcurrency)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">maxPoolPrepareStatementPerConnectionSize</td><td style="text-align:center">每个连接最多缓存多少个SQL</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">filters</td><td style="text-align:center">这里配置的是插件,常用的插件有:</td><td style="text-align:center">stat,wall,slf4j</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">监控统计: filter:stat</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">日志监控: filter:log4j 或者 slf4j</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">防御SQL注入: filter:wall</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">connectProperties</td><td style="text-align:center">连接属性。比如设置一些连接池统计方面的配置。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">比如设置一些数据库连接属性:</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习和深度学习介绍及入门</title>
      <link href="/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>机器学习（machine learning，ML）是一类强大的可以从经验中学习的技术。 通常采用观测数据或与环境交互的形式，机器学习算法会积累更多的经验，其性能也会逐步提高就在过去的五年里，深度学习给世界带来了惊喜，推动了计算机视觉、自然语言处理、自动语音识别、强化学习和统计建模等领域的快速发展。我选择动手学深度学习 v2 课程来开启机器学习之旅，并特别关注深度学习（deep learning，DL）的基础知识深度学习。</p></blockquote><span id="more"></span><h3 id="日常生活中的机器学习"><a href="#日常生活中的机器学习" class="headerlink" title="日常生活中的机器学习"></a>日常生活中的机器学习</h3><ul><li>Hey, Siri：收集一个包含音频样本的巨大的数据集（dataset），并对包含和不包含唤醒词的样本进行标记</li><li>通过机器学习算法，我们不需要设计一个“明确地”识别唤醒词的系统。 相反，我们定义一个灵活的程序算法，其输出由许多参数（parameter）决定。 然后我们使用数据集来确定当下的“最佳参数集”，这些参数通过某种性能度量来获取完成任务的最佳性能</li><li>把参数看作是旋钮，我们可以转动旋钮来调整程序的行为。 任一调整参数后的程序，我们称为模型（model）</li><li>通过操作参数而生成的所有不同程序（输入-输出映射）的集合称为“模型族”</li><li>使用数据集来选择参数的元程序被称为学习算法（learning algorithm）</li><li>在我们开始用机器学习算法解决问题之前，我们必须精确地定义问题，确定输入（input）和输出（output）的性质，并选择合适的模型族</li><li>在机器学习中，学习（learning）是一个训练模型的过程。 通过这个过程，我们可以发现正确的参数集，从而使模型强制执行所需的行为。 换句话说，我们用数据训练（train）我们的模型</li><li>训练过程通常包含如下步骤：<ol><li>从一个随机初始化参数的模型开始，这个模型基本毫不“智能”</li><li>获取一些数据样本（例如，音频片段以及对应的{是,否}{是,否}标签）</li><li>调整参数，使模型在这些样本中表现得更好</li><li>重复第2步和第3步，直到模型在任务中的表现令你满意</li></ol></li></ul><h3 id="机器学习的关键组件"><a href="#机器学习的关键组件" class="headerlink" title="机器学习的关键组件"></a>机器学习的关键组件</h3><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><ul><li>每个数据集由一个个样本（example, sample）组成，大多时候，它们遵循独立同分布（independently and identically distributed, i.i.d.）</li><li>样本有时也叫做数据点（data point）或者数据实例（data instance），通常每个样本由一组称为特征（features，或<em>协变量</em>（covariates））的属性组成，机器学习模型会根据这些属性进行预测</li><li>在监督学习问题中，要预测的是一个特殊的属性，它被称为标签（label，或目标（target））</li><li>当每个样本的特征类别数量都是相同的时候，其特征向量是固定长度的，这个长度被称为数据的维数（dimensionality）。 固定长度的特征向量是一个方便的属性，它有助于我们量化学习大量样本</li><li>然而，并不是所有的数据都可以用“固定长度”的向量表示，例如文本数据。与传统机器学习方法相比，深度学习的一个主要优势是可以处理不同长度的数据</li><li>一般来说，我们拥有的数据越多，通常可以训练出更强大的模型，从而减少对预先设想假设的依赖。 数据集的由小变大为现代深度学习的成功奠定基础。 在没有大数据集的情况下，许多令人兴奋的深度学习模型黯然失色。 就算一些深度学习模型在小数据集上能够工作，但其效能并不比传统方法高</li><li>仅仅拥有海量的数据是不够的，我们还需要正确的数据。 如果数据中充满了错误，或者如果数据的特征不能预测任务目标，那么模型很可能无效</li><li>此外，糟糕的预测性能甚至会加倍放大事态的严重性。 在一些敏感应用中，如预测性监管、简历筛选和用于贷款的风险模型，我们必须特别警惕垃圾数据带来的后果。一种常见的问题来自不均衡的数据集，比如在一个有关医疗的训练数据集中，某些人群没有样本表示</li><li>当数据不具有充分代表性，甚至包含了一些社会偏见时，模型就很有可能有偏见</li></ul><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><ul><li>大多数机器学习会涉及到数据的转换。 比如，建立一个“摄取照片并预测笑脸”的系统</li><li>深度学习与经典方法的区别主要在于：前者关注的功能强大的模型，这些模型由神经网络错综复杂的交织在一起，包含层层数据转换，因此被称为深度学习（deep learning）</li></ul><h4 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h4><ul><li>在机器学习中，我们需要定义模型的优劣程度的度量，这个度量在大多数情况是“可优化”的，我们称之为目标函数（objective function）</li><li>我们通常定义一个目标函数，并希望优化它到最低点。 因为越低越好，所以这些函数有时被称为损失函数（loss function，或cost function）。 但这只是一个惯例，你也可以取一个新的函数，优化到它的最高点。 这两个函数本质上是相同的，只是翻转一下符号</li><li>当任务在试图预测数值时，最常见的损失函数是平方误差（squared error），即预测值与实际值之差的平方</li><li>当试图解决分类问题时，最常见的目标函数是最小化错误率，即预测与实际情况不符的样本比例</li><li>有些目标函数（如平方误差）很容易被优化，有些目标（如错误率）由于不可微性或其他复杂性难以直接优化。 在这些情况下，通常会优化替代目标</li><li>通常，损失函数是根据模型参数定义的，并取决于数据集。 在一个数据集上，我们通过最小化总损失来学习模型参数的最佳值。 该数据集由一些为训练而收集的样本组成，称为训练数据集（training dataset，或称为训练集（training set））</li><li>然而，在训练数据上表现良好的模型，并不一定在“新数据集”上有同样的效能，这里的“新数据集”通常称为测试数据集（test dataset，或称为测试集（test set））</li><li>综上所述，我们通常将可用数据集分成两部分：训练数据集用于拟合模型参数，测试数据集用于评估拟合的模型。 然后我们观察模型在这两部分数据集的效能</li><li>换言之，测试性能可能会显著偏离训练性能。 当一个模型在训练集上表现良好，但不能推广到测试集时，我们说这个模型是“过拟合”（overfitting）的</li></ul><h4 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h4><ul><li>一旦我们获得了一些数据源及其表示、一个模型和一个合适的损失函数，我们接下来就需要一种算法，它能够搜索出最佳参数，以最小化损失函数</li><li>深度学习中，大多流行的优化算法通常基于一种基本方法——梯度下降（gradient descent）。 简而言之，在每个步骤中，梯度下降法都会检查每个参数，看看如果你仅对该参数进行少量变动，训练集损失会朝哪个方向移动。 然后，它在可以减少损失的方向上优化参数</li></ul><h3 id="各种机器学习问题"><a href="#各种机器学习问题" class="headerlink" title="各种机器学习问题"></a>各种机器学习问题</h3><h4 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h4><ul><li>监督学习（supervised learning）擅长在“给定输入特征”的情况下预测标签。 每个“特征-标签”对都称为一个样本（example）。 有时，即使标签是未知的，样本也可以指代输入特征。 我们的目标是生成一个模型，能够将任何输入特征映射到标签，即预测</li><li>监督学习之所以发挥作用，是因为在训练参数时，我们为模型提供了一个数据集，其中每个样本都有真实的标签。 用概率论术语来说，我们希望预测“估计给定输入特征的标签”的条件概率</li><li>虽然监督学习只是几大类机器学习问题之一，但是在工业中，大部分机器学习的成功应用都是监督学习。 这是因为在一定程度上，许多重要的任务可以清晰地描述为：在给定一组特定的可用数据的情况下，估计未知事物的概率</li><li>监督学习的学习过程：<ol><li>首先，从已知大量数据样本中随机选取一个子集，为每个样本获取基本的真实标签</li><li>有时，这些样本已有标签（例如，患者是否在下一年内康复？）； 有时，我们可能需要人工标记数据（例如，将图像分类）。这些输入和相应的标签一起构成了训练数据集</li><li>随后，我们选择有监督的学习算法，它将训练数据集作为输入，并输出一个“完成学习模型”</li><li>最后，我们将之前没见过的样本特征放到这个“完成学习模型”中，使用模型的输出作为相应标签的预测</li></ol></li><li>即使使用简单的描述“给定输入特征的预测标签”，监督学习也可以采取多种形式的模型，并且需要大量不同的建模决策，这取决于输入和输出的类型、大小和数量</li><li>回归<ul><li>回归（regression）是最简单的监督学习任务之一</li><li>回归问题本质上是输出决定的。 假设你在市场上寻找新房子，你可能需要估计一栋房子的公平市场价值。 销售价格，即标签，是一个数值。 当标签取任意数值时，我们称之为回归问题。 我们的目标是生成一个模型，它的预测非常接近实际标签值</li></ul></li><li>分类<ul><li>虽然回归模型可以很好地解决“有多少？”的问题，但是解决不了“哪一个？”的问题，这种问题叫做分类（classification）问题</li><li>在分类问题中，我们希望模型能够预测样本属于哪个类别（category，正式称为类（class））</li><li>最简单的分类问题是只有两类，我们称之为“二元分类”</li><li>在回归中，我们训练一个回归函数来输出一个数值； 而在分类中，我们训练一个分类器，它的输出即为预测的类别</li><li>可以试着用概率语言来理解模型。 给定一个样本特征，我们的模型为每个可能的类分配一个概率，比如，猫狗分类器可能会输出图像是猫的概率为0.9，即分类器90%确定图像描绘的是一只猫。 预测类别的概率的大小传达了一种模型的不确定性</li><li>当我们有两个以上的类别时，我们把这个问题称为多元分类（multiclass classification）问题，常见的例子包括手写字符识别 </li><li>与解决回归问题不同，分类问题的常见损失函数被称为交叉熵（cross-entropy）</li><li>最常见的类别不一定是你将用于决策的类别，或许不确定风险的影响远远大于收益。 因此，我们需要将“预期风险”作为损失函数。 也就是说，我们需要将结果的概率乘以与之相关的收益（或伤害）</li><li>有一些分类任务的变体可以用于寻找层次结构，层次结构假定在许多类之间存在某种关系。 因此，并不是所有的错误都是均等的。 我们宁愿错误地分入一个相关的类别，也不愿错误地分入一个遥远的类别，这通常被称为层次分类（hierarchical classification）</li></ul></li><li>标记问题<ul><li>学习预测不相互排斥的类别的问题称为多标签分类（multi-label classification）</li><li>举个例子，人们在技术博客上贴的标签，比如“机器学习”、“技术”、“小工具”、“编程语言”、“Linux”、“云计算”、“AWS”。 一篇典型的文章可能会用5-10个标签，因为这些概念是相互关联的。 关于“云计算”的帖子可能会提到“AWS”，而关于“机器学习”的帖子也可能涉及“编程语言”</li></ul></li><li>搜索<ul><li>有时，我们不仅仅希望输出为一个类别或一个实值。 在信息检索领域，我们希望对一组项目进行排序</li><li>以网络搜索为例，我们的目标不是简单的“查询（query）-网页（page）”分类，而是在海量搜索结果中找到用户最需要的那部分。 搜索结果的排序也十分重要，我们的学习算法需要输出有序的元素子集</li><li>该问题的一种可能的解决方案：首先为集合中的每个元素分配相应的相关性分数，然后检索评级最高的元素。PageRank，谷歌搜索引擎背后最初的秘密武器就是这种评分系统的早期例子</li><li>如今，搜索引擎使用机器学习和用户行为模型来获取网页相关性得分，很多学术会议也致力于这一主题</li></ul></li><li>推荐系统<ul><li>另一类与搜索和排名相关的问题是推荐系统（recommender system），它的目标是向特定用户进行“个性化”推荐</li><li>简单来说，推荐系统会为“给定用户和物品”的匹配性打分，这个“分数”可能是估计的评级或购买的概率。 由此，对于任何给定的用户，推荐系统都可以检索得分最高的对象集，然后将其推荐给用户。工业生产的推荐系统还要先进得多，它会将详细的用户活动和项目特征考虑在内</li><li>尽管推荐系统具有巨大的应用价值，但单纯用它作为预测模型仍存在一些缺陷。首先，用户更倾向于给他们感觉强烈的事物打分，此外，推荐系统有可能形成反馈循环</li></ul></li><li>序列学习<ul><li>以上大多数问题都具有固定大小的输入和产生固定大小的输出，在这些情况下，模型只会将输入作为生成输出的“原料”，而不会“记住”输入的具体内容</li><li>但是如果输入是连续的，我们的模型可能就需要拥有“记忆”功能。 比如，处理视频片段时，每个视频片段可能由不同数量的帧组成，通过前一帧的图像，我们可能对后一帧中发生的事情更有把握。 语言也是如此，机器翻译的输入和输出都为文字序列</li><li>序列学习的实例，是机器学习最令人兴奋的应用之一。 序列学习需要摄取输入序列或预测输出序列，或两者兼而有之。 具体来说，输入和输出都是可变长度的序列，例如机器翻译和从语音中转录文本</li><li>标记和解析：这涉及到用属性注释文本序列。 换句话说，输入和输出的数量基本上是相同的。 例如，我们可能想知道动词和主语在哪里，或者，我们可能想知道哪些单词是命名实体。 通常，目标是基于结构和语法假设对文本进行分解和注释，以获得一些注释</li><li>自动语音识别：在语音识别中，输入序列是说话人的录音，输出序列是说话人所说内容的文本记录。 它的挑战在于，与文本相比，音频帧多得多，也就是说，音频和文本之间没有1:1的对应关系，因为数千个样本可能对应于一个单独的单词。 这也是“序列到序列”的学习问题，其中输出比输入短得多</li><li>文本到语音：这与自动语音识别相反。 换句话说，输入是文本，输出是音频文件。 在这种情况下，输出比输入长得多。 虽然人类很容易识判断发音别扭的音频文件，但这对计算机来说并不是那么简单</li><li>机器翻译：在语音识别中，输入和输出的出现顺序基本相同。 而在机器翻译中，颠倒输入和输出的顺序非常重要。 换句话说，虽然我们仍将一个序列转换成另一个序列，但是输入和输出的数量以及相应序列的顺序大都不会相同</li></ul></li></ul><h4 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h4><ul><li>监督学习向模型提供巨大数据集，每个样本包含特征和相应标签值，准确地告诉模型在每种情况下应该做什么，直到模型学会从情况到行动的映射</li><li>如果没有十分具体的目标，就需要“自发”地去学习了，我们称这类数据中不含有“目标”的机器学习问题为无监督学习（unsupervised learning）</li><li>无监督学习可以回答什么样的问题<ul><li>聚类（clustering）问题：没有标签的情况下，我们是否能给数据分类。比如，给定一组照片，把它们分成风景照片、狗、婴儿、猫和山峰的照片</li><li>主成分分析（principal component analysis）问题：我们能否找到少量的参数来准确地捕捉数据的线性相关属性。比如，一个球的运动轨迹可以用球的速度、直径和质量来描述</li><li>因果关系（causality）和概率图模型（probabilistic graphical models）问题：我们能否描述观察到的许多数据的根本原因。例如，如果我们有关于房价、污染、犯罪、地理位置、教育和工资的人口统计数据，我们能否简单地根据经验数据发现它们之间的关系</li><li>生成对抗性网络（generative adversarial networks）：为我们提供一种合成数据的方法，甚至像图像和音频这样复杂的非结构化数据。潜在的统计机制是检查真实和虚假数据是否相同的测试，它是无监督学习的另一个重要而令人兴奋的领域</li></ul></li></ul><h4 id="与环境互动"><a href="#与环境互动" class="headerlink" title="与环境互动"></a>与环境互动</h4><ul><li>不管是监督学习还是无监督学习，我们都会预先获取大量数据，然后启动模型，不再与环境交互。 这里所有学习都是在算法与环境断开后进行的，被称为离线学习（offline learning）</li><li>离线学习可以孤立地进行模式识别，而不必分心于其他问题，但缺点是，解决的问题相当有限</li><li>你可能会期望人工智能不仅能够做出预测，而且能够与真实环境互动。 与预测不同，“与真实环境互动”实际上会影响环境。 这里的人工智能是“智能代理”，而不仅是“预测模型”。 因此，我们必须考虑到它的行为可能会影响未来的观察结果</li><li>考虑“与真实环境互动”将打开一整套新的建模问题<ul><li>环境还记得我们以前做过什么吗？</li><li>环境是否有助于我们建模？例如，用户将文本读入语音识别器。</li><li>环境是否想要打败模型？例如，一个对抗性的设置，如垃圾邮件过滤或玩游戏？</li><li>环境是否重要？</li><li>当训练和测试数据不同时，环境是否变化？这是分布偏移（distribution shift）的问题。例如，未来的数据是否总是与过去相似，还是随着时间的推移会发生变化？是自然变化还是响应我们的自动化工具而发生变化？</li></ul></li></ul><h4 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h4><ul><li>如果你对使用机器学习开发与环境交互并采取行动感兴趣，那么你最终可能会专注于强化学习（reinforcement learning）。 这可能包括应用到机器人、对话系统，甚至开发视频游戏的人工智能（AI）</li><li>深度强化学习（deep reinforcement learning）将深度学习应用于强化学习的问题，是非常热门的研究领域</li><li>我们可以将任何监督学习问题转化为强化学习问题。 假设我们有一个分类问题，我们可以创建一个强化学习agent，每个分类对应一个“动作”。 然后，我们可以创建一个环境，该环境给予agent的奖励。 这个奖励与原始监督学习问题的损失函数是一致的</li><li>在监督学习中，我们总是希望输入与正确的标签相关联。 但在强化学习中，我们并不假设环境告诉agent每个观测的最优动作。 一般来说，agent只是得到一些奖励。</li><li>环境甚至可能不会告诉我们是哪些行为导致了奖励，因此，强化学习者必须处理学分分配（credit assignment）问题：决定哪些行为是值得奖励的，哪些行为是需要惩罚的</li><li>强化学习可能还必须处理部分可观测性问题。 也就是说，当前的观察结果可能无法阐述有关当前状态的所有信息</li><li>最后，在任何时间点上，强化学习agent可能知道一个好的策略，但可能有许多更好的策略从未尝试过的。 强化学习agent必须不断地做出选择：是应该利用当前最好的策略，还是探索新的策略空间（放弃一些短期回报来换取知识）</li><li>环境可以是完整观察到的，也可以是部分观察到的，解释所有这些复杂性可能会对研究人员要求太高。 此外，并不是每个实际问题都表现出所有这些复杂性。 因此，学者们研究了一些特殊情况下的强化学习问题</li><li>当环境可被完全观察到时，我们将强化学习问题称为马尔可夫决策过程（markov decision process）。 当状态不依赖于之前的操作时，我们称该问题为上下文赌博机（contextual bandit problem）。 当没有状态，只有一组最初未知回报的可用动作时，这个问题就是经典的多臂赌博机（multi-armed bandit problem）</li></ul><h3 id="深度学习的发展"><a href="#深度学习的发展" class="headerlink" title="深度学习的发展"></a>深度学习的发展</h3><ul><li>为了解决各种各样的机器学习问题，深度学习提供了强大的工具。 虽然许多深度学习方法都是最近的才有重大突破，但使用数据和神经网络编程的核心思想已经研究了几个世纪</li><li>伯努利分布是以雅各布•伯努利（1654–1705）命名的。 而高斯分布是由卡尔•弗里德里希•高斯（1777—1855）发现的， 他发明了最小均方算法，至今仍用于解决从保险计算到医疗诊断的许多问题</li><li>随着数据的收集和可获得性，统计数据真正实现了腾飞。 罗纳德·费舍尔（1890-1962）对统计理论和在遗传学中的应用做出了重大贡献。 他的许多算法（如线性判别分析）和公式（如费舍尔信息矩阵）至今仍被频繁使用</li><li>机器学习的第二个影响来自克劳德·香农(1916–2001)的信息论和艾伦·图灵（1912-1954）的计算理论。 图灵在他著名的论文《计算机器与智能》中提出了“机器能思考吗？”的问题（图灵测试）</li><li>唐纳德·赫布 (1904–1985)开创性的著作《行为的组织》提出神经元通过积极强化学习，是Rosenblatt感知器学习算法的原型，被称为“赫布学习”。 这个算法也为当今深度学习的许多随机梯度下降算法奠定了基础：强化期望行为和减少不良行为，从而在神经网络中获得良好的参数设置</li><li>神经网络（neural networks）的得名源于生物灵感。 一个多世纪以来（追溯到1873年亚历山大·贝恩和1890年詹姆斯·谢林顿的模型），研究人员一直试图组装类似于相互作用的神经元网络的计算电路。 随着时间的推移，对生物学的解释变得不再肤浅，但这个名字仍然存在。 其核心是当今大多数网络中都可以找到的几个关键原则：<ul><li>线性和非线性处理单元的交替，通常称为层（layers）。</li><li>使用链式规则（也称为反向传播（backpropagation））一次性调整网络中的全部参数</li></ul></li><li>神经网络的研究从1995年左右一直开始停滞不前，直到到2005年才稍有起色。 这主要是因为两个原因。 首先，训练网络（在计算上）非常昂贵， 其次，数据集相对较小</li><li>大约2010年开始，那些在计算上看起来不可行的神经网络算法变得热门起来，实际上是以下两点导致的： 其一，随着互联网的公司的出现，为数亿在线用户提供服务，大规模数据集变得触手可及。 另外，廉价又高质量的传感器、廉价的数据存储（克莱德定律）以及廉价计算（摩尔定律）的普及，特别是GPU的普及，使大规模算力唾手可得</li><li>很明显，随机存取存储器没有跟上数据增长的步伐。 与此同时，算力的增长速度已经超过了现有数据的增长速度。 这意味着统计模型需要提高内存效率（这通常是通过添加非线性来实现的）</li><li>同时由于计算预算的增加，能够花费更多时间来优化这些参数。 因此，机器学习和统计的关注点从（广义的）线性模型和核方法转移到了深度神经网络。 这也造就了许多深度学习的中流砥柱，如多层感知机、卷积神经网络、长短期记忆网络和Q学习，在相对休眠了相当长一段时间之后，在过去十年中被“重新发现</li></ul><h3 id="深度学习的成功案例"><a href="#深度学习的成功案例" class="headerlink" title="深度学习的成功案例"></a>深度学习的成功案例</h3><ul><li>感知 -&gt; 推理 -&gt; 知识 -&gt; 规划：自然语言处理 -&gt; 计算机视觉 -&gt; 深度学习</li><li>深度学习应用：图片地图、样式迁移、人脸合成、文字生成图片、文字生成、无人驾驶</li><li>案例研究：广告点击<ul><li>触发 -&gt; 点击率预估 -&gt; 排序（$点击率 * 竞价$）</li><li>预测：特征提取 -&gt; 模型 -&gt; 点击率预测</li><li>训练：训练数据（过去广告展现与用户点击） -&gt; 特征和用户点击 -&gt; 模型</li><li>领域专家：点击 -&gt; 展现</li><li>数据科学家：数据 -&gt; 模型（模型控制广告展现，这些用来训练新的模型）</li><li>AI 专家：提升模型精度和性能</li></ul></li></ul><h3 id="深度学习的特点"><a href="#深度学习的特点" class="headerlink" title="深度学习的特点"></a>深度学习的特点</h3><ul><li>机器学习可以使用数据来学习输入和输出之间的转换，例如在语音识别中将音频转换为文本。 在这样做时，通常需要以适合算法的方式表示数据，以便将这种表示转换为输出</li><li>深度学习是“深度”的，模型学习了许多“层”的转换，每一层提供一个层次的表示。 例如，靠近输入的层可以表示数据的低级细节，而接近分类输出的层可以表示用于区分的更抽象的概念。 由于表示学习（representation learning）目的是寻找表示本身，因此深度学习可以称为“多级表示学习”</li><li>多层模型能够以以前的工具所不能的方式处理低级的感知数据。 毋庸置疑，深度学习方法中最显著的共同点是使用端到端训练。 也就是说，与其基于单独调整的组件组装系统，不如构建系统，然后联合调整它们的性能。</li><li>在过去的日子里，将机器学习应用于这些问题的关键部分是提出人工设计的特征工程方法，将数据转换为某种适合于浅层模型的形式。 然而，与一个算法自动执行的数百万个选择相比，人类通过特征工程所能完成的事情很少。 当深度学习开始时，这些特征抽取器被自动调整的滤波器所取代，产生了更高的精确度</li><li>因此，深度学习的一个关键优势是它不仅取代了传统学习管道末端的浅层模型，而且还取代了劳动密集型的特征工程过程。 此外，通过取代大部分特定领域的预处理，深度学习消除了以前分隔计算机视觉、语音识别、自然语言处理、医学信息学和其他应用领域的许多界限，为解决各种问题提供了一套统一的工具</li><li>除了端到端的训练，我们正在经历从参数统计描述到完全非参数模型的转变。 当数据稀缺时，人们需要依靠简化对现实的假设来获得有用的模型。 当数据丰富时，可以用更准确地拟合实际情况的非参数模型来代替。</li><li>现在人们可以借助于相关偏微分方程的数值模拟，而不是用手来求解电子行为的参数近似。这导致了更精确的模型，尽管常常以牺牲可解释性为代价。与以前工作的另一个不同之处是接受次优解，处理非凸非线性优化问题，并且愿意在证明之前尝试。 这种在处理统计问题上新发现的经验主义，加上人才的迅速涌入，导致了实用算法的快速进步</li></ul><h3 id="安装动手学深度学习-v2"><a href="#安装动手学深度学习-v2" class="headerlink" title="安装动手学深度学习 v2"></a>安装动手学深度学习 v2</h3><ul><li><p>安装环境：Ubuntu 18.04 + build-essential + Python 3.8 + </p></li><li><p>安装 Miniconda 到 <code>\root\miniconda3</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.11.0-Linux-x86_64.sh</span><br><span class="line">bash Miniconda3-py38_4.11.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></li><li><p>安装其他软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter d2l torch torchvision</span><br></pre></td></tr></table></figure></li><li><p>拷贝 Jupyter 记事本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://zh-v2.d2l.ai/d2l-zh.zip</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:d2l-ai/d2l-zh-pytorch-slides.git</span><br></pre></td></tr></table></figure></li><li><p>远程运行 Jupyter Notebook</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --allow-root</span><br></pre></td></tr></table></figure></li><li><p>将远端 localhost 映射到本地 localhost（端口 :8888）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L8888:localhost:8888 root@106.15.200.147</span><br></pre></td></tr></table></figure></li><li><p>安装 jupyter 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install rise</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>机器学习研究计算机系统如何利用经验（通常是数据）来提高特定任务的性能。它结合了统计学、数据挖掘和优化的思想。通常，它是被用作实现人工智能解决方案的一种手段</li><li>表示学习作为机器学习的一类，其研究的重点是如何自动找到合适的数据表示方式。深度学习是通过学习多层次的转换来进行的多层次的表示学习</li><li>深度学习不仅取代了传统机器学习的浅层模型，而且取代了劳动密集型的特征工程</li><li>最近在深度学习方面取得的许多进展，大都是由廉价传感器和互联网规模应用所产生的大量数据，以及（通过GPU）算力的突破来触发的</li><li>整个系统优化是获得高性能的关键环节。有效的深度学习框架的开源使得这一点的设计和实现变得非常容易</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS + Ubuntu 实现远程开发配置</title>
      <link href="/Ubuntu%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/"/>
      <url>/Ubuntu%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>刚刚续费了一年的阿里云轻量应用服务器，打算把大多数的开发环境放到服务器上，实现远程开发。我使用的是 macOS Monterey 和基于 Ubuntu 18.04 的 LNMP 镜像系统，IDE 选取 Visual Studio Code 和 IntelliJ IDEA 进行开发学习。</p></blockquote><span id="more"></span><h3 id="一、服务器镜像信息"><a href="#一、服务器镜像信息" class="headerlink" title="一、服务器镜像信息"></a>一、服务器镜像信息</h3><p>我使用的是阿里云轻量应用服务器提供的 LNMP 7.4 镜像，该镜像为LNMP（Ubuntu18.04 64位+Nginx+MySQL5.7+PHP5.3～8.0切换）架构，jemalloc优化内存管理，脚本菜单式添加Nginx虚拟主机绑定，并支持内网OSS备份功能，是常见的搭建Web应用所需的环境，支持高并发性能。</p><p>应用程序安装信息：</p><ul><li><p>Nginx 1.18：<code>/usr/local/nginx</code></p></li><li><p>PHP 7.4：<code>/usr/local/php</code></p></li><li>MySQL 5.7：<code>/usr/local/mysql</code></li><li>数据库地址：127.0.0.1:3306 </li><li>网站根目录：<code>/data/wwwroot</code></li></ul><p>查询数据库和 FTP 密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /root/ReadMe</span><br></pre></td></tr></table></figure><h3 id="二、Ubuntu-系统配置"><a href="#二、Ubuntu-系统配置" class="headerlink" title="二、Ubuntu 系统配置"></a>二、Ubuntu 系统配置</h3><p>依赖源设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> /etc/apt/sources.list&#123;,bak&#125; <span class="comment">#备份sources.list</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/apt/sources.list &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">apt update</span><br></pre></td></tr></table></figure><p>在防火墙添加规则放行 21、20000/30000 端口，允许通过 FTP 连接。</p><h3 id="三、搭建开发环境"><a href="#三、搭建开发环境" class="headerlink" title="三、搭建开发环境"></a>三、搭建开发环境</h3><p>C/C++ 开发环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><p>Python3 开发环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 --version  </span><br><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><p>Java 开发环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-11-jdk</span><br></pre></td></tr></table></figure><p>Go 开发环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -c https://dl.google.com/go/go1.15.6.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local</span><br><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go</span><br><span class="line"><span class="built_in">export</span> GOPATH=/tufei/code/go</span><br><span class="line"><span class="built_in">export</span> GOBIN=<span class="variable">$GOPATH</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GOPATH</span>:<span class="variable">$GOBIN</span>:<span class="variable">$GOROOT</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>保存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>  /etc/profile</span><br><span class="line">go version</span><br></pre></td></tr></table></figure><p>Git 安装配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line">git config --global user.name <span class="string">&quot;Zhuang Zhihao&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;bezhuang@outlook.com&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;bezhuang@outlook.com&quot;</span></span><br><span class="line"><span class="built_in">cat</span> /root/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>提交公钥到 Github 或其他 Git 仓库。</p><h3 id="四、管理服务"><a href="#四、管理服务" class="headerlink" title="四、管理服务"></a>四、管理服务</h3><p>Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx &#123;start|stop|status|restart|reload|configtest&#125;</span><br></pre></td></tr></table></figure><p>MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld &#123;start|stop|restart|reload|status&#125;</span><br></pre></td></tr></table></figure><p>PHP：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service php-fpm &#123;start|stop|restart|reload|status&#125;</span><br></pre></td></tr></table></figure><p>Pure-Ftpd：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service pureftpd &#123;start|stop|restart|status&#125;</span><br></pre></td></tr></table></figure><p>Redis：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service redis-server &#123;start|stop|status|restart&#125;</span><br></pre></td></tr></table></figure><p>Memcached：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service memcached &#123;start|stop|status|restart|reload&#125;</span><br></pre></td></tr></table></figure><h3 id="五、虚拟主机管理"><a href="#五、虚拟主机管理" class="headerlink" title="五、虚拟主机管理"></a>五、虚拟主机管理</h3><p>添加虚拟主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/oneinstack</span><br><span class="line">./vhost.sh</span><br></pre></td></tr></table></figure><p>删除虚拟主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./vhost.sh --del</span><br></pre></td></tr></table></figure><h3 id="六、本地开发环境"><a href="#六、本地开发环境" class="headerlink" title="六、本地开发环境"></a>六、本地开发环境</h3><p>使用 Visual Studio Code 中的 Remote -SSH 插件连接，</p><p>使用 Termius 进行 SSH 和 SFTP 连接，</p><p>博客现仍使用 Hexo，Typora 软件用于编写博客文章，uPic 软件用于上传图床。</p>]]></content>
      
      
      <categories>
          
          <category> 其他开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言基础知识总结</title>
      <link href="/Go%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%97%85/"/>
      <url>/Go%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言，它用批判吸收的眼光，融合 C 语言、Java 等众家之长，将简洁、高效演绎得淋漓尽致。Golang非常适合用来做网络并发方面的服务，比如消息推送、监控、容器等。初次学习我选择的是 <a href="https://go-zh.org/">Go 编程语言</a>指南，指南涵盖了该语言的大部分重要特性，放在以下为所记笔记，另附有随堂代码放在 <a href="https://github.com/Bezhuang/Learn-CS/tree/main/Learn%20Programming/Go%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%97%85">Github 仓库</a>中，可供参考。</p></blockquote><span id="more"></span><h3 id="包、变量和函数"><a href="#包、变量和函数" class="headerlink" title="包、变量和函数"></a>包、变量和函数</h3><h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><ul><li><p>每个 Go 程序都是由包构成的</p></li><li><p>程序从 <code>main</code> 包开始运行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure></li></ul><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><ul><li><p>此代码用圆括号组合了导入，这是“分组”形式的导入语句</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>当然也可以编写多个导入语句，不过使用分组导入语句是更好的形式</p></li></ul><h4 id="导出名"><a href="#导出名" class="headerlink" title="导出名"></a>导出名</h4><ul><li><p>在 Go 中，如果一个名字以大写字母开头，那么它就是已导出的。例如，<code>Pizza</code> 就是个已导出名，<code>Pi</code> 也同样，它导出自 <code>math</code> 包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(math.Pi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在导入一个包时，你只能引用其中已导出的名字。任何“未导出”的名字在该包外均无法访问</p></li></ul><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ul><li><p>函数可以没有参数或接受多个参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add 接受两个 int 类型的参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意类型在变量名 <strong>之后</strong></p></li><li><p>当连续两个或多个函数的已命名形参类型相同时，除最后一个类型以外，其它都可以省略</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="多值返回"><a href="#多值返回" class="headerlink" title="多值返回"></a>多值返回</h4><ul><li><p>函数可以返回任意数量的返回值</p></li><li><p><code>swap</code> 函数返回了两个字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="命名返回值"><a href="#命名返回值" class="headerlink" title="命名返回值"></a>命名返回值</h4><ul><li><p>Go 的返回值可被命名，它们会被视作定义在函数顶部的变量</p></li><li><p>返回值的名称应当具有一定的意义，它可以作为文档使用</p></li><li><p>没有参数的 <code>return</code> 语句返回已命名的返回值。也就是 <code>直接</code> 返回</p></li><li><p>直接返回语句应当仅用在下面这样的短函数中。在长的函数中它们会影响代码的可读性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="type">int</span>)</span></span> (x, y <span class="type">int</span>) &#123;</span><br><span class="line">x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">y = sum - x</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li><p><code>var</code> 语句用于声明一个变量列表，跟函数的参数列表一样，类型在最后</p></li><li><p><code>var</code> 语句可以出现在包或函数级别</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c, python, java <span class="type">bool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">fmt.Println(i, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h4><ul><li><p>变量声明可以包含初始值，每个变量对应一个</p></li><li><p>如果初始化值已存在，则可以省略类型；变量会从初始值中获得类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i, j <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c, python, java = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">&quot;no!&quot;</span></span><br><span class="line">fmt.Println(i, j, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h4><ul><li><p>在函数中，简洁赋值语句 <code>:=</code> 可在类型明确的地方代替 <code>var</code> 声明</p></li><li><p>函数外的每个语句都必须以关键字开始（<code>var</code>, <code>func</code> 等等），因此 <code>:=</code> 结构不能在函数外使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i, j <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">k := <span class="number">3</span></span><br><span class="line">c, python, java := <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">&quot;no!&quot;</span></span><br><span class="line">fmt.Println(i, j, k, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ul><li><p>Go 的基本类型有</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bool</span><br><span class="line"></span><br><span class="line">string</span><br><span class="line"></span><br><span class="line">int  int8  int16  int32  int64</span><br><span class="line">uint uint8 uint16 uint32 uint64 uintptr</span><br><span class="line"></span><br><span class="line">byte // uint8 的别名</span><br><span class="line"></span><br><span class="line">rune // int32 的别名，表示一个 Unicode 码点</span><br><span class="line"></span><br><span class="line">float32 float64</span><br><span class="line"></span><br><span class="line">complex64 complex128</span><br></pre></td></tr></table></figure></li><li><p>同导入语句一样，变量声明也可以“分组”成一个语法块</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ToBe   <span class="type">bool</span>       = <span class="literal">false</span></span><br><span class="line">MaxInt <span class="type">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></span><br><span class="line">z      <span class="type">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p><code>int</code>, <code>uint</code> 和 <code>uintptr</code> 在 32 位系统上通常为 32 位宽，在 64 位系统上则为 64 位宽</p></li><li><p>当你需要一个整数值时应使用 <code>int</code> 类型，除非你有特殊的理由使用固定大小或无符号的整数类型</p></li></ul><h4 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h4><ul><li>没有明确初始值的变量声明会被赋予它们的 <strong>零值</strong><ul><li>数值类型零值为 <code>0</code></li><li>布尔类型零值为 <code>false</code></li><li>字符串零值为 <code>&quot;&quot;</code>（空字符串）</li></ul></li></ul><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul><li><p>表达式 <code>T(v)</code> 将值 <code>v</code> 转换为类型 <code>T</code>。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span></span><br><span class="line">f := <span class="type">float64</span>(i)</span><br><span class="line">u := <span class="type">uint</span>(f)</span><br></pre></td></tr></table></figure></li><li><p>与 C 不同的是，Go 在不同类型的项之间赋值时需要显式转换</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = <span class="type">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="type">uint</span> = <span class="type">uint</span>(f)</span><br></pre></td></tr></table></figure></li></ul><h4 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h4><ul><li>在声明一个变量而不指定其类型时（即使用不带类型的 <code>:=</code> 语法或 <code>var =</code> 表达式语法）</li><li>变量的类型由右值推导得出</li><li><p>当右值声明了类型时，新变量的类型与其相同：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">j := i <span class="comment">// j 也是一个 int</span></span><br></pre></td></tr></table></figure></li><li><p>不过当右边包含未指明类型的数值常量时，新变量的类型就可能是 <code>int</code>, <code>float64</code> 或 <code>complex128</code> 了，这取决于常量的精度：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span>           <span class="comment">// int</span></span><br><span class="line">f := <span class="number">3.142</span>        <span class="comment">// float64</span></span><br><span class="line">g := <span class="number">0.867</span> + <span class="number">0.5i</span> <span class="comment">// complex128</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul><li><p>常量的声明与变量类似，只不过是使用 <code>const</code> 关键字</p></li><li><p>常量可以是字符、字符串、布尔值或数值</p></li><li><p>常量不能用 <code>:=</code> 语法声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Pi = <span class="number">3.14</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="数值常量"><a href="#数值常量" class="headerlink" title="数值常量"></a>数值常量</h4><ul><li><p>数值常量是高精度的 <strong>值</strong></p></li><li><p>一个未指定类型的常量由上下文来决定其类型</p></li><li><p><code>int</code> 可以存放最大64位的整数，根据平台不同有时会更少</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// 将 1 左移 100 位来创建一个非常大的数字</span></span><br><span class="line"><span class="comment">// 即这个数的二进制是 1 后面跟着 100 个 0</span></span><br><span class="line">Big = <span class="number">1</span> &lt;&lt; <span class="number">100</span></span><br><span class="line"><span class="comment">// 再往右移 99 位，即 Small = 1 &lt;&lt; 1，或者说 Small = 2</span></span><br><span class="line">Small = Big &gt;&gt; <span class="number">99</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">needInt</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> x*<span class="number">10</span> + <span class="number">1</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">needFloat</span><span class="params">(x <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * <span class="number">0.1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><ul><li><p>Go 只有一种循环结构：<code>for</code> 循环</p></li><li><p>基本的 <code>for</code> 循环由三部分组成，它们用分号隔开</p><ul><li>初始化语句：在第一次迭代前执行</li><li>条件表达式：在每次迭代前求值</li><li>后置语句：在每次迭代的结尾执行</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化语句通常为一句短变量声明，该变量声明仅在 <code>for</code> 语句的作用域中可见</p></li><li><p>一旦条件表达式的布尔值为 <code>false</code>，循环迭代就会终止</p></li><li><p><strong>注意</strong>：和 C、Java、JavaScript 之类的语言不同，Go 的 for 语句后面的三个构成部分外没有小括号， 大括号 <code>&#123; &#125;</code> 则是必须的</p></li></ul><h4 id="for-是-Go-中的-“while”"><a href="#for-是-Go-中的-“while”" class="headerlink" title="for 是 Go 中的 “while”"></a>for 是 Go 中的 “while”</h4><ul><li><p>初始化语句和后置语句是可选的</p></li><li><p>此时你可以去掉分号，因为 C 的 <code>while</code> 在 Go 中叫做 <code>for</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</span><br><span class="line">    sum += sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果省略循环条件，该循环就不会结束，因此无限循环可以写得很紧凑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><ul><li><p>Go 的 <code>if</code> 语句与 <code>for</code> 循环类似，表达式外无需小括号 <code>( )</code> ，而大括号 <code>&#123; &#125;</code> 则是必须的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqrt</span><span class="params">(x <span class="type">float64</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sqrt(-x) + <span class="string">&quot;i&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprint(math.Sqrt(x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同 <code>for</code> 一样， <code>if</code> 语句可以在条件表达式前执行一个简单的语句。该语句声明的变量作用域仅在 <code>if</code> 之内</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="if-和-else"><a href="#if-和-else" class="headerlink" title="if  和 else"></a>if  和 else</h4><ul><li><p>在 <code>if</code> 的简短语句中声明的变量同样可以在任何对应的 <code>else</code> 块中使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%g &gt;= %g\n&quot;</span>, v, lim)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里开始就不能使用 v 了</span></span><br><span class="line"><span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><ul><li><p><code>switch</code> 是编写一连串 <code>if - else</code> 语句的简便方法，它运行第一个值等于条件表达式的 case 语句</p></li><li><p>Go 的 switch 语句类似于 C、C++、Java、JavaScript 和 PHP 中的，不过 Go 只运行选定的 case，而非之后所有的 case</p></li><li><p>实际上，Go 自动提供了在这些语言中每个 case 后面所需的 <code>break</code> 语句</p></li><li><p>除非以 <code>fallthrough</code> 语句结束，否则分支会自动终止</p></li><li><p>Go 的另一点重要的不同在于 switch 的 case 无需为常量，且取值不必为整数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;darwin&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;OS X.&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;linux&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Linux.&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;%s. \n&quot;</span>, os)</span><br></pre></td></tr></table></figure></li><li><p>switch 的求值顺序：case 语句从上到下顺次执行，直到匹配成功时停止</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> i &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">case</span> f():  <span class="comment">// 在 i==0 时 f 不会被调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>没有条件的 switch 同 <code>switch true</code> 一样。这种形式能将一长串 <code>if-then-else</code> 写得更加清晰</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Good morning!&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">17</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Good afternoon.&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Good evening.&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><ul><li><p>defer 语句会将函数推迟到外层函数返回之后执行</p></li><li><p>推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125; <span class="comment">// 输出：hello world</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="defer-栈"><a href="#defer-栈" class="headerlink" title="defer 栈"></a>defer 栈</h4><ul><li><p>推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;counting&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">// 输出：counting 9 8 7 6 5 4 3 2 1 0 done</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结构体、数组、切片和映射"><a href="#结构体、数组、切片和映射" class="headerlink" title="结构体、数组、切片和映射"></a>结构体、数组、切片和映射</h3><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><ul><li><p>Go 拥有指针。指针保存了值的内存地址</p></li><li><p>类型 <code>*T</code> 是指向 <code>T</code> 类型值的指针。其零值为 <code>nil</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p *<span class="type">int</span></span><br></pre></td></tr></table></figure></li><li><p><code>&amp;</code> 操作符会生成一个指向其操作数的指针。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span></span><br><span class="line">p = &amp;i</span><br></pre></td></tr></table></figure></li><li><p><code>*</code> 操作符表示指针指向的底层值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(*p) <span class="comment">// 通过指针 p 读取 i</span></span><br><span class="line">*p = <span class="number">21</span>         <span class="comment">// 通过指针 p 设置 i</span></span><br></pre></td></tr></table></figure></li><li><p>这也就是通常所说的“间接引用”或“重定向”</p></li><li><p>与 C 不同，Go 没有指针运算</p></li></ul><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><ul><li><p>一个结构体（<code>struct</code>）就是一组字段（field）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X <span class="type">int</span></span><br><span class="line">Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结构体字段使用点号来访问</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">v.X = <span class="number">4</span></span><br><span class="line">fmt.Println(v, v.X, v.Y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h4><ul><li><p>结构体字段可以通过结构体指针来访问</p></li><li><p>如果我们有一个指向结构体的指针 <code>p</code>，那么可以通过 <code>(*p).X</code> 来访问其字段 <code>X</code>。不过这么写太啰嗦了，所以语言也允许我们使用隐式间接引用，直接写 <code>p.X</code> 就可以</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">p = &amp;v</span><br><span class="line">p.X = <span class="number">1e9</span></span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="结构体文法"><a href="#结构体文法" class="headerlink" title="结构体文法"></a>结构体文法</h4><ul><li><p>结构体文法通过直接列出字段的值来新分配一个结构体</p></li><li><p>使用 <code>Name:</code> 语法可以仅列出部分字段。（字段名的顺序无关。）</p></li><li><p>特殊的前缀 <code>&amp;</code> 返回一个指向结构体的指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">v1 = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;  <span class="comment">// 创建一个 Vertex 类型的结构体    &#123;1, 2&#125; </span></span><br><span class="line">v2 = Vertex&#123;X: <span class="number">1</span>&#125;  <span class="comment">// Y:0 被隐式地赋予    &#123;1, 0&#125; </span></span><br><span class="line">v3 = Vertex&#123;&#125;      <span class="comment">// X:0 Y:0    &#123;0, 0&#125; </span></span><br><span class="line">p  = &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 创建一个 *Vertex 类型的结构体（指针）   &amp;&#123;1, 2&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li><p>类型 <code>[n]T</code> 表示拥有 <code>n</code> 个 <code>T</code> 类型的值的数组。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">2</span>]<span class="type">string</span>  <span class="comment">// 会将变量 a 声明为拥有 10 个整数的数组</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="string">&quot;World&quot;</span>  </span><br></pre></td></tr></table></figure></li><li><p>数组的长度是其类型的一部分，因此数组不能改变大小。这看起来是个限制，不过没关系，Go 提供了更加便利的方式来使用数组</p></li></ul><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><ul><li><p>每个数组的大小都是固定的。而切片则为数组元素提供动态大小的、灵活的视角。在实践中，切片比数组更常用。</p></li><li><p>类型 <code>[]T</code> 表示一个元素类型为 <code>T</code> 的切片。</p></li><li><p>切片通过两个下标来界定，即一个上界和一个下界，二者以冒号分隔：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[low : high] <span class="comment">// 选择一个半开区间，包括第一个元素，但排除最后一个元素</span></span><br></pre></td></tr></table></figure>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">primes := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line"><span class="keyword">var</span> s []<span class="type">int</span> = primes[<span class="number">1</span>:<span class="number">4</span>] <span class="comment">// 创建了一个切片，它包含 primes 中下标从 1 到 3 的元素 </span></span><br><span class="line">fmt.Println(s)  <span class="comment">// 输出：[3 5 7]</span></span><br></pre></td></tr></table></figure></li><li><p>切片就像数组的引用，切片并不存储任何数据，它只是描述了底层数组中的一段</p></li><li>更改切片的元素会修改其底层数组中对应的元素，与它共享底层数组的切片都会观测到这些修改</li></ul><h4 id="切片文法"><a href="#切片文法" class="headerlink" title="切片文法"></a>切片文法</h4><ul><li>切片文法类似于没有长度的数组文法。</li><li><p>这是一个数组文法：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>]<span class="type">bool</span>&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>下面这样则会创建一个和上面相同的数组，然后构建一个引用了它的切片：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]<span class="type">bool</span>&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="切片的默认行为"><a href="#切片的默认行为" class="headerlink" title="切片的默认行为"></a>切片的默认行为</h4><ul><li><p>在进行切片时，你可以利用它的默认行为来忽略上下界。</p></li><li><p>切片下界的默认值为 <code>0</code>，上界则是该切片的长度</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line"><span class="comment">// 以下切片是等价的</span></span><br><span class="line">a[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">a[:<span class="number">10</span>]</span><br><span class="line">a[<span class="number">0</span>:]</span><br><span class="line">a[:]</span><br></pre></td></tr></table></figure></li></ul><h4 id="切片的长度与容量"><a href="#切片的长度与容量" class="headerlink" title="切片的长度与容量"></a>切片的长度与容量</h4><ul><li><p>切片拥有 <strong>长度</strong> 和 <strong>容量</strong>。</p></li><li><p>切片的长度就是它所包含的元素个数。</p></li><li><p>切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。</p></li><li><p>切片 <code>s</code> 的长度和容量可通过表达式 <code>len(s)</code> 和 <code>cap(s)</code> 来获取</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">printSlice(s)</span><br><span class="line"><span class="comment">// 截取切片使其长度为 0</span></span><br><span class="line">s = s[:<span class="number">0</span>]</span><br><span class="line">printSlice(s)</span><br><span class="line"><span class="comment">// 拓展其长度</span></span><br><span class="line">s = s[:<span class="number">4</span>]</span><br><span class="line">printSlice(s)</span><br><span class="line"><span class="comment">// 舍弃前两个值</span></span><br><span class="line">s = s[<span class="number">2</span>:]</span><br><span class="line">printSlice(s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;len=%d cap=%d %v\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="nil-切片"><a href="#nil-切片" class="headerlink" title="nil 切片"></a>nil 切片</h4><ul><li><p>切片的零值是 <code>nil</code>。</p></li><li><p>nil 切片的长度和容量为 0 且没有底层数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="type">int</span>    <span class="comment">// s == nil</span></span><br><span class="line">fmt.Println(s, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))  <span class="comment">// [] 0 0</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="用-make-创建切片"><a href="#用-make-创建切片" class="headerlink" title="用 make 创建切片"></a>用 make 创建切片</h4><ul><li><p>切片可以用内建函数 <code>make</code> 来创建，这也是你创建动态数组的方式。</p></li><li><p><code>make</code> 函数会分配一个元素为零值的数组并返回一个引用了它的切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>)  <span class="comment">// len(a)=5</span></span><br></pre></td></tr></table></figure></li><li><p>要指定它的容量，需向 <code>make</code> 传入第三个参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">5</span>)  <span class="comment">// len(b)=0, cap(b)=5</span></span><br><span class="line">b = b[:<span class="built_in">cap</span>(b)]  <span class="comment">// len(b)=5, cap(b)=5</span></span><br><span class="line">b = b[<span class="number">1</span>:]      <span class="comment">// len(b)=4, cap(b)=4</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="切片的切片"><a href="#切片的切片" class="headerlink" title="切片的切片"></a>切片的切片</h4><ul><li><p>切片可包含任何类型，甚至包括其它的切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个井字板（经典游戏）</span></span><br><span class="line">board := [][]<span class="type">string</span>&#123;</span><br><span class="line">[]<span class="type">string</span>&#123;<span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>&#125;,</span><br><span class="line">[]<span class="type">string</span>&#123;<span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>&#125;,</span><br><span class="line">[]<span class="type">string</span>&#123;<span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 两个玩家轮流打上 X 和 O</span></span><br><span class="line">board[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&quot;X&quot;</span></span><br><span class="line">board[<span class="number">2</span>][<span class="number">2</span>] = <span class="string">&quot;O&quot;</span></span><br><span class="line">board[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">&quot;X&quot;</span></span><br><span class="line">board[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&quot;O&quot;</span></span><br><span class="line">board[<span class="number">0</span>][<span class="number">2</span>] = <span class="string">&quot;X&quot;</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(board); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, strings.Join(board[i], <span class="string">&quot; &quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="向切片追加元素"><a href="#向切片追加元素" class="headerlink" title="向切片追加元素"></a>向切片追加元素</h4><ul><li><p>为切片追加新的元素是种常用的操作，为此 Go 提供了内建的 <code>append</code> 函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(s []T, vs ...T)</span></span> []T</span><br></pre></td></tr></table></figure></li><li><p><code>append</code> 的第一个参数 <code>s</code> 是一个元素类型为 <code>T</code> 的切片，其余类型为 <code>T</code> 的值将会追加到该切片的末尾</p></li><li><p><code>append</code> 的结果是一个包含原切片所有元素加上新添加元素的切片</p></li><li><p>当 <code>s</code> 的底层数组太小，不足以容纳所有给定的值时，它就会分配一个更大的数组。返回的切片会指向这个新分配的数组</p></li></ul><h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><ul><li><p><code>for</code> 循环的 <code>range</code> 形式可遍历切片或映射。</p></li><li><p>当使用 <code>for</code> 循环遍历切片时，每次迭代都会返回两个值。第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pow = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;2**%d = %d\n&quot;</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以将下标或值赋予 <code>_</code> 来忽略它</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, _ := <span class="keyword">range</span> pow</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> pow</span><br></pre></td></tr></table></figure></li><li><p>若你只需要索引，忽略第二个变量即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pow</span><br></pre></td></tr></table></figure></li></ul><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><ul><li><p>映射将键映射到值</p></li><li><p>映射的零值为 <code>nil</code> 。<code>nil</code> 映射既没有键，也不能添加键</p></li><li><p><code>make</code> 函数会返回给定类型的映射，并将其初始化备用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[key_type]value_type</span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[key_type]value_type)</span><br></pre></td></tr></table></figure></li><li><p>短声明写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)  <span class="comment">// m := make(map[key_type]value_type)</span></span><br></pre></td></tr></table></figure></li><li><p>映射的文法与结构体相似，不过必须有键名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">Lat, Long <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="type">string</span>]Vertex&#123;</span><br><span class="line"><span class="string">&quot;Bell Labs&quot;</span>: Vertex&#123;</span><br><span class="line"><span class="number">40.68433</span>, <span class="number">-74.39967</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;Google&quot;</span>: Vertex&#123;</span><br><span class="line"><span class="number">37.42202</span>, <span class="number">-122.08408</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若顶级类型只是一个类型名，你可以在文法的元素中省略它</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="type">string</span>]Vertex&#123;</span><br><span class="line"><span class="string">&quot;Bell Labs&quot;</span>: &#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;,</span><br><span class="line"><span class="string">&quot;Google&quot;</span>:    &#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="修改映射"><a href="#修改映射" class="headerlink" title="修改映射"></a>修改映射</h4><ul><li><p>在映射 <code>m</code> 中插入或修改元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m[key] = elem</span><br></pre></td></tr></table></figure></li><li><p>获取元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elem = m[key]</span><br></pre></td></tr></table></figure></li><li><p>删除元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delete</span>(m, key)</span><br></pre></td></tr></table></figure></li><li><p>通过双赋值检测某个键是否存在：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elem, ok = m[key]</span><br></pre></td></tr></table></figure></li><li><p>若 <code>elem</code> 或 <code>ok</code> 还未声明，你可以使用短变量声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elem, ok := m[key]</span><br></pre></td></tr></table></figure></li><li><p>若 <code>key</code> 在 <code>m</code> 中，<code>ok</code> 为 <code>true</code> ；否则，<code>ok</code> 为 <code>false</code></p></li><li><p>若 <code>key</code> 不在映射中，那么 <code>elem</code> 是该映射元素类型的零值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v, ok := m[<span class="string">&quot;Answer&quot;</span>]</span><br><span class="line">fmt.Println(<span class="string">&quot;The value:&quot;</span>, v, <span class="string">&quot;Present?&quot;</span>, ok)  <span class="comment">// The value: 0 Present? false</span></span><br></pre></td></tr></table></figure></li><li><p>同样的，当从映射中读取某个不存在的键时，结果是映射的元素类型的零值</p></li></ul><h4 id="函数值"><a href="#函数值" class="headerlink" title="函数值"></a>函数值</h4><ul><li><p>函数也是值。它们可以像其它值一样传递。</p></li><li><p>函数值可以用作函数的参数或返回值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hypot := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(x*x + y*y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数的闭包"><a href="#函数的闭包" class="headerlink" title="函数的闭包"></a>函数的闭包</h4><ul><li><p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了其函数体之外的变量。该函数可以访问并赋予其引用的变量的值，换句话说，该函数被这些变量“绑定”在一起。</p></li><li><p>例如，函数 <code>adder</code> 返回一个闭包。每个闭包都被绑定在其各自的 <code>sum</code> 变量上</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sum += x</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pos, neg := adder(), adder()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(</span><br><span class="line">pos(i),</span><br><span class="line">neg(<span class="number">-2</span>*i),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="方法和接口"><a href="#方法和接口" class="headerlink" title="方法和接口"></a>方法和接口</h3><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><p>Go 没有类。不过你可以为结构体类型定义方法。</p></li><li><p>方法就是一类带特殊的 <strong>接收者</strong> 参数的函数。</p></li><li><p>方法接收者在它自己的参数列表内，位于 <code>func</code> 关键字和方法名之间。</p></li><li><p>在此例中，<code>Abs</code> 方法拥有一个名为 <code>v</code>，类型为 <code>Vertex</code> 的接收者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>记住：方法只是个带接收者参数的函数。</p></li><li><p>现在这个 <code>Abs</code> 的写法就是个正常的函数，功能并没有什么变化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Abs</span><span class="params">(v Vertex)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(Abs(v))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>也可以为非结构体类型声明方法。</p></li><li><p>在此例中，我们看到了一个带 <code>Abs</code> 方法的数值类型 <code>MyFloat</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">float64</span>(-f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="type">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := MyFloat(-math.Sqrt2)</span><br><span class="line">fmt.Println(f.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>只能为在同一包内定义的类型的接收者声明方法，而不能为其它包内定义的类型（包括 <code>int</code> 之类的内建类型）的接收者声明方法（就是接收者的类型定义和方法声明必须在同一包内；不能为内建类型声明方法。）</p></li></ul><h4 id="指针接收者"><a href="#指针接收者" class="headerlink" title="指针接收者"></a>指针接收者</h4><ul><li><p>可以为指针接收者声明方法。</p></li><li><p>这意味着对于某类型 <code>T</code>，接收者的类型可以用 <code>*T</code> 的文法。（此外，<code>T</code> 不能是像 <code>*int</code> 这样的指针。）</p></li><li><p>例如，这里为 <code>*Vertex</code> 定义了 <code>Scale</code> 方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Scale(f <span class="type">float64</span>) &#123;</span><br><span class="line">v.X = v.X * f</span><br><span class="line">v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">v.Scale(<span class="number">10</span>)</span><br><span class="line">fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指针接收者的方法可以修改接收者指向的值（就像 <code>Scale</code> 在这做的）。由于方法经常需要修改它的接收者，指针接收者比值接收者更常用。</p></li><li><p>若使用值接收者，那么 <code>Scale</code> 方法会对原始 <code>Vertex</code> 值的副本进行操作。（对于函数的其它参数也是如此。）<code>Scale</code> 方法必须用指针接受者来更改 <code>main</code> 函数中声明的 <code>Vertex</code> 的值。</p></li></ul><h4 id="方法与指针重定向"><a href="#方法与指针重定向" class="headerlink" title="方法与指针重定向"></a>方法与指针重定向</h4><ul><li><p>注意：带指针参数的函数必须接受一个指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScaleFunc</span><span class="params">(v *Vertex, f <span class="type">float64</span>)</span></span> &#123;</span><br><span class="line">v.X = v.X * f</span><br><span class="line">v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    ScaleFunc(v, <span class="number">5</span>)  <span class="comment">// 编译错误！</span></span><br><span class="line">    ScaleFunc(&amp;v, <span class="number">5</span>) <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>而以指针为接收者的方法被调用时，接收者既能为值又能为指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Scale(f <span class="type">float64</span>) &#123;</span><br><span class="line">v.X = v.X * f</span><br><span class="line">v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">v.Scale(<span class="number">5</span>)  <span class="comment">// OK</span></span><br><span class="line">    p := &amp;v</span><br><span class="line">    p.Scale(<span class="number">10</span>) <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于语句 <code>v.Scale(5)</code>，即便 <code>v</code> 是个值而非指针，带指针接收者的方法也能被直接调用。 也就是说，由于 <code>Scale</code> 方法有一个指针接收者，为方便起见，Go 会将语句 <code>v.Scale(5)</code> 解释为 <code>(&amp;v).Scale(5)</code></p></li><li><p>同样的事情也发生在相反的方向。</p></li><li><p>接受一个值作为参数的函数必须接受一个指定类型的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AbsFunc</span><span class="params">(v Vertex)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(AbsFunc(v))  <span class="comment">// OK</span></span><br><span class="line">fmt.Println(AbsFunc(&amp;v)) <span class="comment">// 编译错误！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>而以值为接收者的方法被调用时，接收者既能为值又能为指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">var</span> v Vertex</span><br><span class="line">    fmt.Println(v.Abs()) <span class="comment">// OK</span></span><br><span class="line">    p := &amp;v</span><br><span class="line">    fmt.Println(p.Abs()) <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这种情况下，方法调用 <code>p.Abs()</code> 会被解释为 <code>(*p).Abs()</code></p></li></ul><h4 id="选择值或指针作为接收者"><a href="#选择值或指针作为接收者" class="headerlink" title="选择值或指针作为接收者"></a>选择值或指针作为接收者</h4><ul><li><p>使用指针接收者的原因有二：</p><ol><li>首先，方法能够修改其接收者指向的值。</li><li>其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效。</li></ol></li><li><p>在本例中，<code>Scale</code> 和 <code>Abs</code> 接收者的类型为 <code>*Vertex</code>，即便 <code>Abs</code> 并不需要修改其接收者。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Scale(f <span class="type">float64</span>) &#123;</span><br><span class="line">v.X = v.X * f</span><br><span class="line">v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := &amp;Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Before scaling: %+v, Abs: %v\n&quot;</span>, v, v.Abs())</span><br><span class="line">v.Scale(<span class="number">5</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;After scaling: %+v, Abs: %v\n&quot;</span>, v, v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通常来说，所有给定类型的方法都应该有值或指针接收者，但并不应该二者混用</p></li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><ul><li><p><strong>接口类型</strong> 是由一组方法签名定义的集合。</p></li><li><p>接口类型的变量可以保存任何实现了这些方法的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Abser <span class="keyword">interface</span> &#123;</span><br><span class="line">Abs() <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a Abser</span><br><span class="line">f := MyFloat(-math.Sqrt2)</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">a = f  <span class="comment">// a MyFloat 实现了 Abser</span></span><br><span class="line">a = &amp;v <span class="comment">// a *Vertex 实现了 Abser</span></span><br><span class="line">fmt.Println(a.Abs())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> MyFloat <span class="type">float64</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">float64</span>(-f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="type">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="接口与隐式实现"><a href="#接口与隐式实现" class="headerlink" title="接口与隐式实现"></a>接口与隐式实现</h4><ul><li><p>类型通过实现一个接口的所有方法来实现该接口。既然无需专门显式声明，也就没有“implements”关键字。</p></li><li><p>隐式接口从接口的实现中解耦了定义，这样接口的实现可以出现在任何包中，无需提前准备。</p></li><li><p>因此，也就无需在每一个实现上增加新的接口名称，这样同时也鼓励了明确的接口定义。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">M()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">S <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此方法表示类型 T 实现了接口 I，但我们无需显式声明此事。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span></span> M() &#123;</span><br><span class="line">fmt.Println(t.S)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i I = T&#123;<span class="string">&quot;hello&quot;</span>&#125;</span><br><span class="line">i.M()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="接口值"><a href="#接口值" class="headerlink" title="接口值"></a>接口值</h4><ul><li><p>接口也是值。它们可以像其它值一样传递。</p></li><li><p>接口值可以用作函数的参数或返回值。</p></li><li><p>在内部，接口值可以看做包含值和具体类型的元组：<code>(value, type)</code></p></li><li><p>接口值保存了一个具体底层类型的具体值。</p></li><li><p>接口值调用方法时会执行其底层类型的同名方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">M()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">S <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span></span> M() &#123;</span><br><span class="line">fmt.Println(t.S)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> F <span class="type">float64</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f F)</span></span> M() &#123;</span><br><span class="line">fmt.Println(f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i I</span><br><span class="line">i = &amp;T&#123;<span class="string">&quot;Hello&quot;</span>&#125;</span><br><span class="line">describe(i)</span><br><span class="line">i.M()</span><br><span class="line">i = F(math.Pi)</span><br><span class="line">describe(i)</span><br><span class="line">i.M()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describe</span><span class="params">(i I)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;(%v, %T)\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="底层值为-nil-的接口值"><a href="#底层值为-nil-的接口值" class="headerlink" title="底层值为 nil 的接口值"></a>底层值为 nil 的接口值</h4><ul><li>即便接口内的具体值为 nil，方法仍然会被 nil 接收者调用。</li><li>在一些语言中，这会触发一个空指针异常，但在 Go 中通常会写一些方法来优雅地处理它（如本例中的 <code>M</code> 方法）。</li><li><strong>注意:</strong> 保存了 nil 具体值的接口其自身并不为 nil。</li><li>nil 接口值既不保存值也不保存具体类型。</li><li>为 nil 接口调用方法会产生运行时错误，因为接口的元组内并未包含能够指明该调用哪个 <strong>具体</strong> 方法的类型。</li></ul><h4 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h4><ul><li><p>指定了零个方法的接口值被称为 <em>空接口：</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>空接口可保存任何类型的值。（因为每个类型都至少实现了零个方法。）</p></li><li><p>空接口被用来处理未知类型的值。例如，<code>fmt.Print</code> 可接受类型为 <code>interface&#123;&#125;</code> 的任意数量的参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">describe(i)</span><br><span class="line">i = <span class="number">42</span></span><br><span class="line">describe(i)</span><br><span class="line">i = <span class="string">&quot;hello&quot;</span></span><br><span class="line">describe(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describe</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;(%v, %T)\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><ul><li><p><strong>类型断言</strong> 提供了访问接口值底层具体值的方式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t := i.(T)</span><br></pre></td></tr></table></figure></li><li><p>该语句断言接口值 <code>i</code> 保存了具体类型 <code>T</code>，并将其底层类型为 <code>T</code> 的值赋予变量 <code>t</code>。</p></li><li><p>若 <code>i</code> 并未保存 <code>T</code> 类型的值，该语句就会触发一个恐慌。</p></li><li><p>为了 <strong>判断</strong> 一个接口值是否保存了一个特定的类型，类型断言可返回两个值：其底层值以及一个报告断言是否成功的布尔值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t, ok := i.(T)</span><br></pre></td></tr></table></figure></li><li><p>若 <code>i</code> 保存了一个 <code>T</code>，那么 <code>t</code> 将会是其底层值，而 <code>ok</code> 为 <code>true</code>。</p></li><li><p>否则，<code>ok</code> 将为 <code>false</code> 而 <code>t</code> 将为 <code>T</code> 类型的零值，程序并不会产生恐慌。</p></li><li><p>请注意这种语法和读取一个映射时的相同之处</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">&quot;hello&quot;</span></span><br><span class="line">s := i.(<span class="type">string</span>)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">s, ok := i.(<span class="type">string</span>)</span><br><span class="line">fmt.Println(s, ok)</span><br><span class="line">f, ok := i.(<span class="type">float64</span>)</span><br><span class="line">fmt.Println(f, ok)</span><br><span class="line">f = i.(<span class="type">float64</span>) <span class="comment">// 报错(panic)</span></span><br><span class="line">fmt.Println(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="类型选择"><a href="#类型选择" class="headerlink" title="类型选择"></a>类型选择</h4><ul><li><p><strong>类型选择</strong> 是一种按顺序从几个类型断言中选择分支的结构。</p></li><li><p>类型选择与一般的 switch 语句相似，不过类型选择中的 case 为类型（而非值）， 它们针对给定接口值所存储的值的类型进行比较。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">switch v := i.(type) &#123;</span><br><span class="line">case T:</span><br><span class="line">    // v 的类型为 T</span><br><span class="line">case S:</span><br><span class="line">    // v 的类型为 S</span><br><span class="line">default:</span><br><span class="line">    // 没有匹配，v 与 i 的类型相同</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类型选择中的声明与类型断言 <code>i.(T)</code> 的语法相同，只是具体类型 <code>T</code> 被替换成了关键字 <code>type</code>。</p></li><li><p>此选择语句判断接口值 <code>i</code> 保存的值类型是 <code>T</code> 还是 <code>S</code>。在 <code>T</code> 或 <code>S</code> 的情况下，变量 <code>v</code> 会分别按 <code>T</code> 或 <code>S</code> 类型保存 <code>i</code> 拥有的值。在默认（即没有匹配）的情况下，变量 <code>v</code> 与 <code>i</code> 的接口类型和值相同。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;Twice %v is %v\n&quot;</span>, v, v*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;%q is %v bytes long\n&quot;</span>, v, <span class="built_in">len</span>(v))</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;I don&#x27;t know about type %T!\n&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">do(<span class="number">21</span>)</span><br><span class="line">do(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">do(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Stringer"><a href="#Stringer" class="headerlink" title="Stringer"></a>Stringer</h4><ul><li><p><a href="https://go-zh.org/pkg/fmt/"><code>fmt</code></a> 包中定义的 <a href="https://go-zh.org/pkg/fmt/#Stringer"><code>Stringer</code></a> 是最普遍的接口之一。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Stringer</code> 是一个可以用字符串描述自己的类型。<code>fmt</code> 包（还有很多包）都通过此接口来打印值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%v (%v years)&quot;</span>, p.Name, p.Age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := Person&#123;<span class="string">&quot;Arthur Dent&quot;</span>, <span class="number">42</span>&#125;</span><br><span class="line">z := Person&#123;<span class="string">&quot;Zaphod Beeblebrox&quot;</span>, <span class="number">9001</span>&#125;</span><br><span class="line">fmt.Println(a, z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><ul><li><p>Go 程序使用 <code>error</code> 值来表示错误状态。</p></li><li><p>与 <code>fmt.Stringer</code> 类似，<code>error</code> 类型是一个内建接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>（与 <code>fmt.Stringer</code> 类似，<code>fmt</code> 包在打印值时也会满足 <code>error</code>。）</p></li><li><p>通常函数会返回一个 <code>error</code> 值，调用的它的代码应当判断这个错误是否等于 <code>nil</code> 来进行错误处理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i, err := strconv.Atoi(<span class="string">&quot;42&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;couldn&#x27;t convert number: %v\n&quot;</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Converted integer:&quot;</span>, i)</span><br></pre></td></tr></table></figure></li><li><p><code>error</code> 为 nil 时表示成功；非 nil 的 <code>error</code> 表示失败</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">When time.Time</span><br><span class="line">What <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *MyError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;at %v, %s&quot;</span>,</span><br><span class="line">e.When, e.What)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;MyError&#123;</span><br><span class="line">time.Now(),</span><br><span class="line"><span class="string">&quot;it didn&#x27;t work&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h4><ul><li><p><code>io</code> 包指定了 <code>io.Reader</code> 接口，它表示从数据流的末尾进行读取。</p></li><li><p>Go 标准库包含了该接口的<a href="https://go-zh.org/search?q=Read#Global">许多实现</a>，包括文件、网络连接、压缩和加密等等。</p></li><li><p><code>io.Reader</code> 接口有一个 <code>Read</code> 方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T)</span></span> Read(b []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>Read</code> 用数据填充给定的字节切片并返回填充的字节数和错误值。在遇到数据流的结尾时，它会返回一个 <code>io.EOF</code> 错误。</p></li><li><p>示例代码创建了一个 <a href="https://go-zh.org/pkg/strings/#Reader"><code>strings.Reader</code></a> 并以每次 8 字节的速度读取它的输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := strings.NewReader(<span class="string">&quot;Hello, Reader!&quot;</span>)</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n, err := r.Read(b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;n = %v err = %v b = %v\n&quot;</span>, n, err, b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;b[:n] = %q\n&quot;</span>, b[:n])</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h4><ul><li><p><a href="https://go-zh.org/pkg/image/#Image"><code>image</code></a> 包定义了 <code>Image</code> 接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> image</span><br><span class="line"><span class="keyword">type</span> Image <span class="keyword">interface</span> &#123;</span><br><span class="line">    ColorModel() color.Model</span><br><span class="line">    Bounds() Rectangle</span><br><span class="line">    At(x, y <span class="type">int</span>) color.Color</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注意:</strong> <code>Bounds</code> 方法的返回值 <code>Rectangle</code> 实际上是一个 <a href="https://go-zh.org/pkg/image/#Rectangle"><code>image.Rectangle</code></a>，它在 <code>image</code> 包中声明。</p></li><li><p>参阅<a href="https://go-zh.org/pkg/image/#Image">文档</a>了解全部信息</p></li><li><p><code>color.Color</code> 和 <code>color.Model</code> 类型也是接口，但是通常因为直接使用预定义的实现 <code>image.RGBA</code> 和 <code>image.RGBAModel</code> 而被忽视了。这些接口和类型由 <a href="https://go-zh.org/pkg/image/color/"><code>image/color</code></a> 包定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := image.NewRGBA(image.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">fmt.Println(m.Bounds())</span><br><span class="line">fmt.Println(m.At(<span class="number">0</span>, <span class="number">0</span>).RGBA())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><h4 id="Go-程"><a href="#Go-程" class="headerlink" title="Go 程"></a>Go 程</h4><ul><li><p>Go 程（goroutine）是由 Go 运行时管理的轻量级线程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go f(x, y, z)</span><br></pre></td></tr></table></figure></li><li><p>会启动一个新的 Go 程并执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(x, y, z)</span><br></pre></td></tr></table></figure></li><li><p><code>f</code>, <code>x</code>, <code>y</code> 和 <code>z</code> 的求值发生在当前的 Go 程中，而 <code>f</code> 的执行发生在新的 Go 程中。</p></li><li><p>Go 程在相同的地址空间中运行，因此在访问共享的内存时必须进行同步。<a href="https://go-zh.org/pkg/sync/"><code>sync</code></a> 包提供了这种能力，不过在 Go 中并不经常用到，因为还有其它的办法</p></li></ul><h4 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h4><ul><li><p>信道是带有类型的管道，你可以通过它用信道操作符 <code>&lt;-</code> 来发送或者接收值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ch &lt;- v    <span class="comment">// 将 v 发送至信道 ch。</span></span><br><span class="line">v := &lt;-ch  <span class="comment">// 从 ch 接收值并赋予 v。</span></span><br></pre></td></tr></table></figure></li><li><p>（“箭头”就是数据流的方向。）</p></li><li><p>和映射与切片一样，信道在使用前必须创建：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br></pre></td></tr></table></figure></li><li><p>默认情况下，发送和接收操作在另一端准备好之前都会阻塞。这使得 Go 程可以在没有显式的锁或竞态变量的情况下进行同步。</p></li><li><p>以下示例对切片中的数进行求和，将任务分配给两个 Go 程。一旦两个 Go 程完成了它们的计算，它就能算出最终的结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(s []<span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">sum += v</span><br><span class="line">&#125;</span><br><span class="line">c &lt;- sum <span class="comment">// 将和送入 c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="type">int</span>&#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">-9</span>, <span class="number">4</span>, <span class="number">0</span>&#125;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> sum(s[:<span class="built_in">len</span>(s)/<span class="number">2</span>], c)</span><br><span class="line"><span class="keyword">go</span> sum(s[<span class="built_in">len</span>(s)/<span class="number">2</span>:], c)</span><br><span class="line">x, y := &lt;-c, &lt;-c <span class="comment">// 从 c 中接收</span></span><br><span class="line">fmt.Println(x, y, x+y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="带缓冲的信道"><a href="#带缓冲的信道" class="headerlink" title="带缓冲的信道"></a>带缓冲的信道</h4><ul><li><p>信道可以是 <em>带缓冲的</em>。将缓冲长度作为第二个参数提供给 <code>make</code> 来初始化一个带缓冲的信道：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></li><li><p>仅当信道的缓冲区填满后，向其发送数据时才会阻塞。当缓冲区为空时，接受方会阻塞。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">2</span>)</span><br><span class="line">ch &lt;- <span class="number">1</span></span><br><span class="line">ch &lt;- <span class="number">2</span></span><br><span class="line">fmt.Println(&lt;-ch)</span><br><span class="line">fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="range-和-close"><a href="#range-和-close" class="headerlink" title="range 和 close"></a>range 和 close</h4><ul><li><p>发送者可通过 <code>close</code> 关闭一个信道来表示没有需要发送的值了。接收者可以通过为接收表达式分配第二个参数来测试信道是否被关闭：若没有值可以接收且信道已被关闭，那么在执行完</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v, ok := &lt;-ch</span><br></pre></td></tr></table></figure></li><li><p>之后 <code>ok</code> 会被设置为 <code>false</code>。</p></li><li><p>循环 <code>for i := range c</code> 会不断从信道接收值，直到它被关闭。</p></li><li><p><em>注意：</em> 只有发送者才能关闭信道，而接收者不能。向一个已经关闭的信道发送数据会引发程序恐慌（panic）。</p></li><li><p><em>还要注意：</em> 信道与文件不同，通常情况下无需关闭它们。只有在必须告诉接收者不再有需要发送的值时才有必要关闭，例如终止一个 <code>range</code> 循环。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">x, y := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">c &lt;- x</span><br><span class="line">x, y = y, x+y</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="select-语句"><a href="#select-语句" class="headerlink" title="select 语句"></a>select 语句</h4><ul><li><p><code>select</code> 语句使一个 Go 程可以等待多个通信操作。</p></li><li><p><code>select</code> 会阻塞到某个分支可以继续执行为止，这时就会执行该分支。当多个分支都准备好时会随机选择一个执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">x, y := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> c &lt;- x:</span><br><span class="line">x, y = y, x+y</span><br><span class="line"><span class="keyword">case</span> &lt;-quit:</span><br><span class="line">fmt.Println(<span class="string">&quot;quit&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(&lt;-c)</span><br><span class="line">&#125;</span><br><span class="line">quit &lt;- <span class="number">0</span></span><br><span class="line">&#125;()</span><br><span class="line">fibonacci(c, quit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="默认选择"><a href="#默认选择" class="headerlink" title="默认选择"></a>默认选择</h4><ul><li><p>当 <code>select</code> 中的其它分支都没有准备好时，<code>default</code> 分支就会执行。</p></li><li><p>为了在尝试发送或者接收时不发生阻塞，可使用 <code>default</code> 分支：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i := &lt;-c:</span><br><span class="line">    <span class="comment">// 使用 i</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// 从 c 中接收会阻塞时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h4><ul><li><p>我们已经看到信道非常适合在各个 Go 程间进行通信。</p></li><li><p>但是如果我们并不需要通信呢？比如说，若我们只是想保证每次只有一个 Go 程能够访问一个共享的变量，从而避免冲突？</p></li><li>这里涉及的概念叫做 互斥（<code>mutual*exclusion</code>），我们通常使用 互斥锁（Mutex）这一数据结构来提供这种机制。</li><li>Go 标准库中提供了 <a href="https://go-zh.org/pkg/sync/#Mutex"><code>sync.Mutex</code></a> 互斥锁类型及其两个方法：<ul><li><code>Lock</code></li><li><code>Unlock</code></li></ul></li><li>我们可以通过在代码前调用 <code>Lock</code> 方法，在代码后调用 <code>Unlock</code> 方法来保证一段代码的互斥执行。参见 <code>Inc</code> 方法。</li><li>我们也可以用 <code>defer</code> 语句来保证互斥锁一定会被解锁。参见 <code>Value</code> 方法</li></ul><h3 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h3><ul><li>Go <a href="https://go-zh.org/doc/">文档</a></li><li><a href="https://go-zh.org/doc/code.html">如何使用Go编程</a></li><li><a href="https://go-zh.org/pkg/">包手册</a></li><li><a href="https://go-zh.org/ref/spec">语言规范</a></li><li>进一步探索 Go 的并发模型，参阅 <a href="https://www.youtube.com/watch?v=f6kdp27TYZs">Go 并发模型</a>(<a href="https://talks.go-zh.org/2012/concurrency.slide">幻灯片</a>)以及<a href="https://www.youtube.com/watch?v=QDDwwePbDtw">深入 Go 并发模型</a>(<a href="https://talks.go-zh.org/2013/advconc.slide">幻灯片</a>)并阅读<a href="https://go-zh.org/doc/codewalk/sharemem/">通过通信共享内存</a>的代码之旅</li><li><a href="https://vimeo.com/53221558">一个简单的编程环境</a>(<a href="https://talks.go-zh.org/2012/simple.slide">幻灯片</a>)</li><li><a href="https://go-zh.org/doc/articles/wiki/">编写 Web 应用</a>的指南</li><li><a href="https://go-zh.org/doc/codewalk/functions/">函数：Go 中的一等公民</a>展示了有趣的函数类型</li><li><a href="https://blog.go-zh.org/">Go 博客</a>有着众多关于 Go 的文章和信息</li><li><a href="https://www.mikespook.com/tag/golang/">mikespook 的博客</a>中有大量中文的关于 Go 的文章和翻译</li><li>开源电子书 <a href="https://github.com/astaxie/build-web-application-with-golang">Go Web 编程</a>和 <a href="https://github.com/Unknwon/the-way-to-go_ZH_CN">Go 入门指南</a>能够帮助你更加深入的了解和学习 Go 语言</li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 实现银行 ATM 系统</title>
      <link href="/ATM%E7%B3%BB%E7%BB%9F/"/>
      <url>/ATM%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在复习完 Java SE 的全部基础知识点后，为了更加熟练掌握 Java 面向对象的特性，进一步掌握编程技巧和调试技巧，使用 Java 模拟实现一个银行 ATM 系统软件，共 Account.java 和 ATM.java 两个 Java 类。</p></blockquote><span id="more"></span><h3 id="一、银行-ATM-系统技术选型分析"><a href="#一、银行-ATM-系统技术选型分析" class="headerlink" title="一、银行 ATM 系统技术选型分析"></a>一、银行 ATM 系统技术选型分析</h3><p>面向对象编程：每个用户对象要对应一个账户对象，所以需要设计账户类 <code>Account</code>。</p><p>使用集合容器：系统需要提供一个容器用于存储这些账户对象的信息，选用 <code>ArrayList</code> 集合。</p><p>程序流程控制：需要结合分支、循环、跳转等相关操作控制程序的业务逻辑。</p><p>使用常见API：内容比较，分析，数据处理等需要用到 <code>String</code> 等常用 API。</p><h3 id="二、Account-账户类设计"><a href="#二、Account-账户类设计" class="headerlink" title="二、Account 账户类设计"></a>二、Account 账户类设计</h3><p>每个用户一个账户对象，需要设计账户类 <code>Account</code>，账户类至少包含（卡号、用户名、余额、取现额度、密码）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cardId; <span class="comment">// 卡号</span></span><br><span class="line">    <span class="keyword">private</span> String userName; <span class="comment">// 用户名称</span></span><br><span class="line">    <span class="keyword">private</span> String passWord; <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> money; <span class="comment">// 账户余额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> quotaMoney; <span class="comment">// 每次取现额度限度。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCardId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cardId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCardId</span><span class="params">(String cardId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cardId = cardId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassWord</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassWord</span><span class="params">(String passWord)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.passWord = passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(<span class="type">double</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getQuotaMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> quotaMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setQuotaMoney</span><span class="params">(<span class="type">double</span> quotaMoney)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.quotaMoney = quotaMoney;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、首页设计"><a href="#三、首页设计" class="headerlink" title="三、首页设计"></a>三、首页设计</h4><p>需要定义一个 <code>ArrayList</code> 的集合用于存储账户对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">accounts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>需要展示欢迎页包含2个功能：注册开户、登录账户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 2、创建一个集合对象，用于后期存入账户对象。</span></span><br><span class="line">        ArrayList&lt;Account&gt; accounts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、展示系统欢迎页面</span></span><br><span class="line">        System.out.println(<span class="string">&quot;======欢迎您进入到黑马ATM系统===============&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1、登录账户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;2、注册账户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请您选择操作：&quot;</span>);</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">int</span> <span class="variable">command</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (command)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="comment">// 登录操作</span></span><br><span class="line">                    login(accounts, sc);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="comment">// 注册账户</span></span><br><span class="line">                    register(accounts, sc);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;当前输入的操作不存在！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="四、用户开户功能实现"><a href="#四、用户开户功能实现" class="headerlink" title="四、用户开户功能实现"></a>四、用户开户功能实现</h3><p>开户功能应该独立定义成方法，并传入当前集合对象给该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(ArrayList&lt;Account&gt; accounts)</span> &#123;…&#125;</span><br></pre></td></tr></table></figure><p>需要提示用户输入个人信息，开户的卡号是系统自动生成的8位数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createCardId</span><span class="params">()</span>&#123;…&#125;</span><br></pre></td></tr></table></figure><p>注意自动生成的卡号不能与其他用户的卡号重复。</p><p>最终把用户开户的信息封装成 <code>Account</code> 对象，存入到集合中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       用户开户功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(ArrayList&lt;Account&gt; accounts, Scanner sc)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==================欢迎您进入到开户操作======================&quot;</span>);</span><br><span class="line">        <span class="comment">// 2、创建一个账户对象封装账户信息</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">acc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">        <span class="comment">// 1、录入用户账户信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请您输入账户名称：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span>sc.next();</span><br><span class="line">        acc.setUserName(userName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请您输入账户密码：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">passWord</span> <span class="operator">=</span>sc.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;请您输入确认密码：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">okPassWord</span> <span class="operator">=</span>sc.next();</span><br><span class="line">            <span class="keyword">if</span>(okPassWord.equals(passWord))&#123;</span><br><span class="line">                <span class="comment">// 密码无问题</span></span><br><span class="line">                acc.setPassWord(okPassWord);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;两次输入的密码不一致！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;请您设置当次取现额度：&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">quataMoney</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">        acc.setQuotaMoney(quataMoney);</span><br><span class="line">        <span class="comment">// 关键点：为当前账户生成一个随机的8位数字作为卡号，卡号不能与其他用户的卡号重复。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cardId</span> <span class="operator">=</span> createCardId(accounts);</span><br><span class="line">        acc.setCardId(cardId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、把账户对象存入到集合容器对象中去</span></span><br><span class="line">        accounts.add(acc);</span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜您,&quot;</span>+acc.getUserName()+<span class="string">&quot;先生/女士，您开户完成，您的卡号是：&quot;</span> + acc.getCardId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createCardId</span><span class="params">(ArrayList&lt;Account&gt; accounts)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cardId</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">// 随机8个数字</span></span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">8</span> ; i++) &#123;</span><br><span class="line">                cardId += r.nextInt(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断这个卡号是否重复：根据卡号去查询账户对象</span></span><br><span class="line">            <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> getAccountByCardId(cardId , accounts);</span><br><span class="line">            <span class="keyword">if</span>(account == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> cardId;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Account <span class="title function_">getAccountByCardId</span><span class="params">(String cardId , ArrayList&lt;Account&gt; accounts)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; accounts.size(); i++) &#123;</span><br><span class="line">            <span class="type">Account</span> <span class="variable">acc</span> <span class="operator">=</span> accounts.get(i);</span><br><span class="line">            <span class="keyword">if</span>(acc.getCardId().equals(cardId))&#123;</span><br><span class="line">                <span class="keyword">return</span> acc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、用户登录功能和界面实现"><a href="#五、用户登录功能和界面实现" class="headerlink" title="五、用户登录功能和界面实现"></a>五、用户登录功能和界面实现</h3><p>定义方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(ArrayList&lt;Account&gt; accounts)</span> &#123;…&#125;</span><br></pre></td></tr></table></figure><p>需要根据卡号去集合中查询对应的账户对象。如果找到了账户对象，说明卡号存在，继续输入密码。如果密码也正确，则登录成功。</p><p>用户登录成功后，需要进入用户操作页。查询就是直接展示当前登录成功的账户对象的信息。退出账户是需要回到首页的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   用户登录功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(ArrayList&lt;Account&gt; accounts, Scanner sc)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;==================欢迎您进入到登录操作======================&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(accounts.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请您输入登录的卡号：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cardId</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="comment">// 2、根据卡号去集合中查询是否存在账户对象</span></span><br><span class="line">            <span class="type">Account</span> <span class="variable">acc</span> <span class="operator">=</span> getAccountByCardId(cardId , accounts);</span><br><span class="line">            <span class="comment">// 判断账户对象是否存在，存在说明卡号正确</span></span><br><span class="line">            <span class="keyword">if</span>(acc != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="comment">// 3、判断密码是否正确</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;请您输入登录的密码：&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">passWord</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                    <span class="keyword">if</span>(acc.getPassWord().equals(passWord))&#123;</span><br><span class="line">                        <span class="comment">// 登录成功了！</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;欢迎你：&quot;</span> + acc.getUserName() + <span class="string">&quot;先生/女士进入系统，您可开始办理你的业务了!&quot;</span>);</span><br><span class="line">                        <span class="comment">// 展示登录成功后的操作界面。</span></span><br><span class="line">                        showCommand(sc, acc, accounts);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;您的密码不正确！&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;卡号不存在，请确认！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前系统无任何账户，请先注册再登录！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  登录后展示的界面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showCommand</span><span class="params">(Scanner sc, Account acc, ArrayList&lt;Account&gt; accounts)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==================欢迎您进入到操作界面======================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1、查询&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2、存款&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3、取款&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4、转账&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;5、修改密码&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;6、退出&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;7、注销账户&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请您输入操作命令：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">command</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="comment">// 查询账户信息展示</span></span><br><span class="line">                showAccount(acc);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="comment">// 存款</span></span><br><span class="line">                depositMoney(acc,sc);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="comment">// 取款</span></span><br><span class="line">                drawMoney(acc,sc);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="comment">// 转账</span></span><br><span class="line">                transferMoney(acc, accounts, sc);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="comment">// 修改密码</span></span><br><span class="line">                updatePassWord(acc, sc);</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// 跳出当前操作的方法，最终回到首页</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="comment">// 退出 回到首页</span></span><br><span class="line">                System.out.println(<span class="string">&quot;欢迎下次继续光临！！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// 结束登录后的全部操作</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="comment">// 注销账户</span></span><br><span class="line">                accounts.remove(acc); <span class="comment">// 从集合对象中删除当前账户对象。</span></span><br><span class="line">                System.out.println(<span class="string">&quot;您的账户已经完成了销毁，您将不可以进行登录了！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;您的操作命令有误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、用户转账、存款、取款功能"><a href="#六、用户转账、存款、取款功能" class="headerlink" title="六、用户转账、存款、取款功能"></a>六、用户转账、存款、取款功能</h3><p>转账功能要分析对方账户是否存在的问题。还要分析自己的余额是否足够的问题。</p><p>存款和取款都是拿到当前用户的账户对象，通过调用账户对象的 <code>set</code> 方法修改其余额。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从当前账户对象中把金额转给其他账户对象。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> acc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> accounts</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">transferMoney</span><span class="params">(Account acc, ArrayList&lt;Account&gt; accounts, Scanner sc)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、判断自己的账户中是否有钱</span></span><br><span class="line">    <span class="keyword">if</span>(acc.getMoney() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您自己都没钱，就别转了吧！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、判断总账户数量是否大于等于2个。</span></span><br><span class="line">    <span class="keyword">if</span>(accounts.size() &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 3、让当前用户输入对方的账号进行转账</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请您输入对方卡号：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cardId</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4、根据卡号查询出集合中的账户对象</span></span><br><span class="line">            <span class="type">Account</span> <span class="variable">otherAcc</span> <span class="operator">=</span> getAccountByCardId(cardId , accounts);</span><br><span class="line">            <span class="comment">// 5、判断账户对象是否存在，而且这个账户对象不能是自己。</span></span><br><span class="line">            <span class="keyword">if</span>(otherAcc != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">// 6、判断当前账户是否是自己。</span></span><br><span class="line">                <span class="keyword">if</span>(acc.getCardId().equals(otherAcc.getCardId()))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;不能给自己账户转账！&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 7、正式进入到转账逻辑了</span></span><br><span class="line">                    <span class="comment">// 黑马刘德华</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="string">&quot;*&quot;</span> + otherAcc.getUserName().substring(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;请您确认[&quot;</span>+rs +<span class="string">&quot;]的姓氏来确认！&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;请您输入对方的姓氏：&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">preName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                    <span class="keyword">if</span>(otherAcc.getUserName().startsWith(preName))&#123;</span><br><span class="line">                        <span class="comment">// 认证通过</span></span><br><span class="line">                        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;请您输入转账的金额（您最多可以转账：&quot;</span> + acc.getMoney() +<span class="string">&quot;元）：&quot;</span>);</span><br><span class="line">                            <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">                            <span class="keyword">if</span>(money &gt; acc.getMoney())&#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;你不听话，没有这么多钱可以转！&quot;</span>);</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">// 开始转</span></span><br><span class="line">                                acc.setMoney(acc.getMoney() - money); <span class="comment">// 更新自己账户</span></span><br><span class="line">                                otherAcc.setMoney(otherAcc.getMoney() + money);</span><br><span class="line">                                System.out.println(<span class="string">&quot;您已经完成转账！您当前还剩余：&quot;</span> + acc.getMoney());</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;您输入对方的信息有误！&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的转账卡号不存在！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前系统中没有其他账户可以转账，去注册一个账户吧！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">drawMoney</span><span class="params">(Account acc, Scanner sc)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;==================欢迎进入账户取款操作======================&quot;</span>);</span><br><span class="line">    <span class="comment">// 1、判断账户的余额是否高于等于100</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> acc.getMoney();</span><br><span class="line">    <span class="keyword">if</span>(money &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 2、输入取钱的金额</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请您输入取钱的金额：&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">drawMoney</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">            <span class="comment">// 3、判断取钱金额是否超过了当次限额</span></span><br><span class="line">            <span class="keyword">if</span>(drawMoney &gt; acc.getQuotaMoney())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您当前取款金额超过了每次限额！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 4、判断当前取钱金额是超过了账户的余额</span></span><br><span class="line">                <span class="keyword">if</span>(drawMoney &gt; money)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;当前余额不足！当前余额是：&quot;</span> + money);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 更新账户余额</span></span><br><span class="line">                    acc.setMoney(money - drawMoney);</span><br><span class="line">                    System.out.println(<span class="string">&quot;您当前取钱完成，请拿走你的钱，当前剩余余额是：&quot;</span> + acc.getMoney());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您当前账户余额不足100元，存钱去吧！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">depositMoney</span><span class="params">(Account acc, Scanner sc)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;==================欢迎进入账户存款操作======================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;请您输入存款金额：&quot;</span>);</span><br><span class="line">    <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">    acc.setMoney(acc.getMoney() + money);</span><br><span class="line">    showAccount(acc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showAccount</span><span class="params">(Account acc)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;==================您当前账户详情信息如下======================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;卡号：&quot;</span> + acc.getCardId());</span><br><span class="line">    System.out.println(<span class="string">&quot;户主：&quot;</span> + acc.getUserName());</span><br><span class="line">    System.out.println(<span class="string">&quot;余额：&quot;</span> + acc.getMoney());</span><br><span class="line">    System.out.println(<span class="string">&quot;当次取现额度：&quot;</span> + acc.getQuotaMoney());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从当前账户对象中把金额转给其他账户对象。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> acc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> accounts</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">transferMoney</span><span class="params">(Account acc, ArrayList&lt;Account&gt; accounts, Scanner sc)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、判断自己的账户中是否有钱</span></span><br><span class="line">    <span class="keyword">if</span>(acc.getMoney() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您自己都没钱，就别转了吧！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、判断总账户数量是否大于等于2个。</span></span><br><span class="line">    <span class="keyword">if</span>(accounts.size() &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 3、让当前用户输入对方的账号进行转账</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请您输入对方卡号：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cardId</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4、根据卡号查询出集合中的账户对象</span></span><br><span class="line">            <span class="type">Account</span> <span class="variable">otherAcc</span> <span class="operator">=</span> getAccountByCardId(cardId , accounts);</span><br><span class="line">            <span class="comment">// 5、判断账户对象是否存在，而且这个账户对象不能是自己。</span></span><br><span class="line">            <span class="keyword">if</span>(otherAcc != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">// 6、判断当前账户是否是自己。</span></span><br><span class="line">                <span class="keyword">if</span>(acc.getCardId().equals(otherAcc.getCardId()))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;不能给自己账户转账！&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 7、正式进入到转账逻辑了</span></span><br><span class="line">                    <span class="comment">// 黑马刘德华</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="string">&quot;*&quot;</span> + otherAcc.getUserName().substring(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;请您确认[&quot;</span>+rs +<span class="string">&quot;]的姓氏来确认！&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;请您输入对方的姓氏：&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">preName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                    <span class="keyword">if</span>(otherAcc.getUserName().startsWith(preName))&#123;</span><br><span class="line">                        <span class="comment">// 认证通过</span></span><br><span class="line">                        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;请您输入转账的金额（您最多可以转账：&quot;</span> + acc.getMoney() +<span class="string">&quot;元）：&quot;</span>);</span><br><span class="line">                            <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">                            <span class="keyword">if</span>(money &gt; acc.getMoney())&#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;你不听话，没有这么多钱可以转！&quot;</span>);</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">// 开始转</span></span><br><span class="line">                                acc.setMoney(acc.getMoney() - money); <span class="comment">// 更新自己账户</span></span><br><span class="line">                                otherAcc.setMoney(otherAcc.getMoney() + money);</span><br><span class="line">                                System.out.println(<span class="string">&quot;您已经完成转账！您当前还剩余：&quot;</span> + acc.getMoney());</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;您输入对方的信息有误！&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的转账卡号不存在！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前系统中没有其他账户可以转账，去注册一个账户吧！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">drawMoney</span><span class="params">(Account acc, Scanner sc)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;==================欢迎进入账户取款操作======================&quot;</span>);</span><br><span class="line">    <span class="comment">// 1、判断账户的余额是否高于等于100</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> acc.getMoney();</span><br><span class="line">    <span class="keyword">if</span>(money &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 2、输入取钱的金额</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请您输入取钱的金额：&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">drawMoney</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">            <span class="comment">// 3、判断取钱金额是否超过了当次限额</span></span><br><span class="line">            <span class="keyword">if</span>(drawMoney &gt; acc.getQuotaMoney())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您当前取款金额超过了每次限额！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 4、判断当前取钱金额是超过了账户的余额</span></span><br><span class="line">                <span class="keyword">if</span>(drawMoney &gt; money)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;当前余额不足！当前余额是：&quot;</span> + money);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 更新账户余额</span></span><br><span class="line">                    acc.setMoney(money - drawMoney);</span><br><span class="line">                    System.out.println(<span class="string">&quot;您当前取钱完成，请拿走你的钱，当前剩余余额是：&quot;</span> + acc.getMoney());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您当前账户余额不足100元，存钱去吧！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">depositMoney</span><span class="params">(Account acc, Scanner sc)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;==================欢迎进入账户存款操作======================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;请您输入存款金额：&quot;</span>);</span><br><span class="line">    <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">    acc.setMoney(acc.getMoney() + money);</span><br><span class="line">    showAccount(acc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showAccount</span><span class="params">(Account acc)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;==================您当前账户详情信息如下======================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;卡号：&quot;</span> + acc.getCardId());</span><br><span class="line">    System.out.println(<span class="string">&quot;户主：&quot;</span> + acc.getUserName());</span><br><span class="line">    System.out.println(<span class="string">&quot;余额：&quot;</span> + acc.getMoney());</span><br><span class="line">    System.out.println(<span class="string">&quot;当次取现额度：&quot;</span> + acc.getQuotaMoney());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、用户密码修改功能、销户功能"><a href="#七、用户密码修改功能、销户功能" class="headerlink" title="七、用户密码修改功能、销户功能"></a>七、用户密码修改功能、销户功能</h3><p>修改密码就是把当前对象的密码属性使用 <code>set</code> 方法进行更新。销户是从集合对象中删除当前对象，并回到首页。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  修改当前账户对象的密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> acc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updatePassWord</span><span class="params">(Account acc, Scanner sc)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、判断旧密码是否正确</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请您输入当前密码认证：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">passWord</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="keyword">if</span>(acc.getPassWord().equals(passWord))&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 2、输入新密码</span></span><br><span class="line">                System.out.println(<span class="string">&quot;请您输入新密码：&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">newPassWord</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                System.out.println(<span class="string">&quot;请您确认新密码：&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">okPassWord</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                <span class="comment">// 3、比对两次密码是否一致</span></span><br><span class="line">                <span class="keyword">if</span>(newPassWord.equals(okPassWord))&#123;</span><br><span class="line">                    acc.setPassWord(okPassWord);</span><br><span class="line">                    System.out.println(<span class="string">&quot;密码已经修改成功，请重新登录！&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;两次密码不一致！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您输入的密码有误。请重新确认密码！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Accenture Coding Virtual Experience Program</title>
      <link href="/Accenture-Coding-Virtual-Experience/"/>
      <url>/Accenture-Coding-Virtual-Experience/</url>
      
        <content type="html"><![CDATA[<blockquote><p>The Accenture Know-the-Code Virtual Experience Program covers the fundamentals of software development, including object-oriented programming, code refactoring, and agile delivery. It empowers me to explore what a career in software development could look like at Accenture while practicing my coding skills. The following are the notes I took during this virtual experience.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Accenture-Coding-Virtual-Experience.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Task-1-Object-Oriented-Programming"><a href="#Task-1-Object-Oriented-Programming" class="headerlink" title="Task 1: Object Oriented Programming"></a>Task 1: Object Oriented Programming</h3><h4 id="Background-Information"><a href="#Background-Information" class="headerlink" title="Background Information"></a>Background Information</h4><ul><li>Recently, a company has brought on Accenture to help with the development of its e-commerce website written in Java using the Spring Boot framework. The first task they need help with is searching for products</li><li>One of the UX designers at Accenture has already implemented the new search capability in the UI</li><li>My responsibility is to implement the search capability in our backend Java app</li></ul><h4 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h4><ul><li>Expose an HTTP GET request on the path <code>/api/products/search</code></li><li>The request should take a single parameter named “<code>query</code>” which will be the text that was entered in the search bar</li><li>The request will return a Collection of <code>ProductItem</code> which are the matching products for the search</li></ul><h4 id="Implement-a-new-controller-to-handle-searching"><a href="#Implement-a-new-controller-to-handle-searching" class="headerlink" title="Implement a new controller to handle searching"></a>Implement a new controller to handle searching</h4><ol><li>Download and unzip the mock-company-webapp codebase</li><li>Open the application in IDEA with Gradle support</li><li>Follow the README.md instructions for setting up the development environment</li><li>Implement the “<code>search</code>” method of the class <code>SearchController</code>, the relevant code is outlined with a TODO comment</li><li>The controller should use the “<code>productItemRepository</code>” to interface with the product database</li><li>Review the tests and implement the controller to the spec</li></ol><h4 id="Practical-skills-gained"><a href="#Practical-skills-gained" class="headerlink" title="Practical skills gained"></a>Practical skills gained</h4><ul><li>Object Oriented Programming</li><li>Java</li><li>Spring</li></ul><h3 id="Task-2-Code-Refactoring"><a href="#Task-2-Code-Refactoring" class="headerlink" title="Task 2: Code Refactoring"></a>Task 2: Code Refactoring</h3><h4 id="Background-Information-1"><a href="#Background-Information-1" class="headerlink" title="Background Information"></a>Background Information</h4><ul><li>Now we’ve identified some code in the <code>ReportController</code> class that seems to be doing similar product searching</li><li>I need to refactor the <code>SearchController</code> logic into a new <code>SearchService</code> class that can be used in the <code>SearchController</code> as well as in the <code>ReportController</code></li></ul><h4 id="Requirements-1"><a href="#Requirements-1" class="headerlink" title="Requirements"></a>Requirements</h4><ul><li>Logic moved from <code>SearchController</code> to <code>SearchService</code></li><li><code>SearchController</code> and <code>ReportController</code> both updated to use the <code>SearchService</code></li><li>All unit tests pass</li></ul><h4 id="Refactor-controllers-to-a-shared-service"><a href="#Refactor-controllers-to-a-shared-service" class="headerlink" title="Refactor controllers to a shared service"></a>Refactor controllers to a shared service</h4><ol><li>Follow the README.md instructions for setting up the development environment</li><li>Create the new <code>SearchService</code> class in the “<code>services</code>” package. All of the search logic from the <code>SearchController</code> should be moved into a function in this class for reusability. The relevant code is outlined with a TODO comment</li><li>Using <code>@Autowired</code>, inject the <code>SearchService</code> into the <code>SearchController</code> and <code>ReportController</code></li><li>Refactor both controller classes to use the service by rewriting their functions to use the new service</li><li>Ensure unit tests all pass</li></ol><h4 id="Practical-skills-gained-1"><a href="#Practical-skills-gained-1" class="headerlink" title="Practical skills gained"></a>Practical skills gained</h4><ul><li>Java</li><li>Spring</li></ul><h3 id="Task-3-Continuous-Integration"><a href="#Task-3-Continuous-Integration" class="headerlink" title="Task 3: Continuous Integration"></a>Task 3: Continuous Integration</h3><h4 id="Background-Information-2"><a href="#Background-Information-2" class="headerlink" title="Background Information"></a>Background Information</h4><ul><li>Continuous Integration is the practice of automating the integration of code changes from multiple contributors into a single software project</li><li>It’s a primary DevOps best practice, allowing developers to frequently merge code changes into a central repository where building and test runs can occur</li><li>Use the most popular Continuous Integration tool, Jenkins</li><li>Creating a <code>Jenkinsfile</code> that will build and test the application on all branches of the repository</li></ul><h4 id="Requirements-2"><a href="#Requirements-2" class="headerlink" title="Requirements"></a>Requirements</h4><ul><li>GitHub account created, Git CLI setup, mock-company-webapp repository forked and cloned</li><li><code>Jenkinsfile</code> defined with stages setting it up to run on commit to any branch in the repository</li><li>Continuous Integration server runs <code>build/test</code> and succeeds</li><li>Change made to code that breaks test</li><li>Continuous Integration server runs <code>build/test</code> and fails</li></ul><h4 id="Simulating-Jenkins-using-the-Jenkinsfile-Runner-Action-in-a-GitHub-Workflow"><a href="#Simulating-Jenkins-using-the-Jenkinsfile-Runner-Action-in-a-GitHub-Workflow" class="headerlink" title="Simulating Jenkins using the Jenkinsfile Runner Action in a GitHub Workflow"></a>Simulating Jenkins using the <code>Jenkinsfile</code> Runner Action in a GitHub Workflow</h4><ol><li>Create an account with GitHub and fork the mock-company-webapp repository</li><li>Setup the Git CLI on workstation and “<code>clone</code>” the repository you forked to workstation</li><li>Install the Pipelines application from the GitHub marketplace to use Jenkins directly</li><li>use the Simulated Jenkins for GitHub link to add a <code>.github/workflows/workflow.yml</code> to the repository.</li><li>Add the following stages to the <code>Jenkinsfile</code>, the relevant code is outlined with a TODO comment.<ul><li>Build: <code>./gradlew assemble</code></li><li>Test: <code>./gradlew test</code></li></ul></li><li>Continue to tweak the <code>Jenkinsfile</code> until the build is successful</li><li>Change the <code>SearchService</code> to always return <code>Collections.emptyList()</code> in order to break the tests.</li><li>Commit the change and validate the Continuous Integration build fails which proves that we’ve properly set up Continuous Integration guard rails, that will catch failing tests each time a commit is made by a developer</li></ol><h4 id="Practical-skills-gained-2"><a href="#Practical-skills-gained-2" class="headerlink" title="Practical skills gained"></a>Practical skills gained</h4><ul><li>Continuous Integration</li><li>Jenkins</li><li>DevOps</li></ul><h3 id="Task-4-Agile-Planning"><a href="#Task-4-Agile-Planning" class="headerlink" title="Task 4: Agile Planning"></a>Task 4: Agile Planning</h3><h4 id="Background-Information-3"><a href="#Background-Information-3" class="headerlink" title="Background Information"></a>Background Information</h4><ul><li>In an Agile planning session, developers are given a set of large software features that they then must break up into smaller units of work, called stories, that can be completed within a one to three week period, called a sprint</li><li>A story is an informal, general explanation of a software feature written from the perspective of the end user or customer and is made up of the following components:<ul><li>Who the feature is for</li><li>What they need</li><li>Why they need it</li><li>What shows it’s done</li></ul></li></ul><h4 id="Requirements-3"><a href="#Requirements-3" class="headerlink" title="Requirements"></a>Requirements</h4><ul><li>Stories are written in the following format: As a <code>&lt;who the feature is for&gt;</code>, I need to be able to <code>&lt;what they need&gt;</code> so I can <code>&lt;why they need it&gt;</code></li><li>The “<code>what shows it’s done</code>”, called acceptance criteria, must be provided with the story as well</li><li>Stories are then pointed or sized which means to assign some kind of value indicating the difficulty of implementing the story</li><li>Use a T-Shirt size strategy assigning a value of small/medium/large to each story</li><li>It’s very important that stories are broken down as small as they can be so try and keep them either small or medium</li><li>This allows for better concurrency throughout the sprint and easier completion within a single sprint</li></ul><h4 id="planning-a-sprint-to-implement-the-checkout-feature-of-the-site"><a href="#planning-a-sprint-to-implement-the-checkout-feature-of-the-site" class="headerlink" title="planning a sprint to implement the checkout feature of the site"></a>planning a sprint to implement the checkout feature of the site</h4><ul><li>Create a document that defines around 10 to 20 stories around the checkout feature</li><li>Pull in a subset of these stories based on our capacity to work on in the next sprint</li><li>Make sure the stories are broken up as small as possible, and the acceptance criteria is testable</li></ul><h4 id="Practical-skills-gained-3"><a href="#Practical-skills-gained-3" class="headerlink" title="Practical skills gained"></a>Practical skills gained</h4><ul><li>Agile Methodology</li><li>Software Development Lifecycle (SDLC)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Gradle </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>计算机网络是计算机专业必修的重要课程之一，与现实世界结合得相当紧密，也是考研408计算机学科专业基础综合考试中的一门课程。计算机网络学习的核心内容就是网络协议的学习。网络协议是为计算机网络中进行数据交换而建立的规则、标准或者说是约定的集合。</p></blockquote><span id="more"></span><h3 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h3><h4 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h4><ul><li>计算机网络就是一些互联的、自治的计算机系统的集合。</li><li>自治计算机就是能够进行自我管理、配置和维护的计算机。</li><li>计算机网络包括硬件、软件、协议三大部分。<ul><li>硬件由主机、通信处理机、通信线路和交换设备组成。</li></ul></li><li>从工作方式上看，计算机网络可分为边缘部分和核心部分。</li><li>从功能组成上看，计算机网络由通信子网和资源子网两部分构成。<ul><li>通信子网包括物理层、数据链路层和网络层。</li></ul></li><li>数据通信是计算机网络最基本和最重要的功能。</li><li>资源共享包括数据资源、软件资源以及硬件资源。</li></ul><h4 id="计算机网络体系结构与参考模型"><a href="#计算机网络体系结构与参考模型" class="headerlink" title="计算机网络体系结构与参考模型"></a>计算机网络体系结构与参考模型</h4><ul><li>实体是任何可发送或接收信息的硬件或软件进程。</li><li>对等层是不同机器上的同一层，对等实体是同一层上的实体。</li><li>协议是控制2个对等实体进行通信的规则。</li><li>接口又称服务访问点，没有接口就不能提供服务。从物理层开始，每一层都向上层提供服务访问点。</li><li>服务数据单元 SDU，协议控制信息 PCI，接口控制信息 ICI。</li><li>协议数据单元 PDU，表示的是同等层对等实体间传送的数据单元。<code>n-SDU</code>+<code>n-PCI</code>=<code>n-PDU</code>，<code>n-PDU</code>=<code>(n-1)-SDU</code></li><li>接口数据单元 IDU，表示的是在相邻层接口间传送的数据单元。<code>n-SDU</code>+<code>n-ICI</code>=<code>n-IDU</code></li><li>服务至下层为相邻上层提供的功能调用。只有那些能够被高一层实体看得见的功能才成为服务。</li><li>面向连接的服务（TCP），面向无连接的服务（IP和UDP）。</li><li>第n层的实体使用第n-1层的服务，向第n+1层提供本层的服务。该服务是第n层及其下各层所提供的服务的总和。</li><li>最高层向用户提供服务，下一层提供服务的实现细节对上一层透明。</li><li>OSI参考模型具有7层结构，而TCP/IP模型仅有4层结构。<ul><li>应用层（用户对用户），提供系统与用户的接口。文件传输、访问和管理、电子邮件服务。FTP，smtp，pop3，HTTP。</li><li>传输层（应用对应用，进程对进程），负责主机中2个进程之间的通信。为端到端连接提供可靠的运输服务、流量控制、差错控制、服务质量管理。TCP、udp、ARQ。</li><li>网络层（主机对主机），为传输层提供服务、组包和拆包、路由选择、拥塞控制。ICMP、Arp、RARP、IP、IGMP。</li><li>网络接口层 = 数据链路层 + 物理层</li><li>数据链路层，将网络层传下来的IP数据报组装成帧数。PPP、HDLC。</li><li>物理层，为数据端设备提供传送数据通路，传输比特流。 </li><li>应用层 = 应用层 + 表示层 + 会话层</li><li>会话层的主要功能是在2个节点间建立维护和释放面向用户的连接，并对会话进行管理和控制，保证会话数据可靠传送。</li><li>表示层负责处理在2个内部数据表示结构不同的通信系统间交换信息的表示格式，数据压缩及解压。</li><li>TCP/IP模型没有明确区分服务、接口、协议，且网络层仅有无连接。OSI参考模型网络层有连接和无连接，但传输层仅面向连接。</li></ul></li></ul><h4 id="计算机网络性能指标"><a href="#计算机网络性能指标" class="headerlink" title="计算机网络性能指标"></a>计算机网络性能指标</h4><ul><li>总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延</li><li>数据传输率是由总时延决定的，而带宽仅决定了发送时延。</li><li>发送时延 = 数据帧长度（bit）/ 发送速率（bit/s）</li><li>传播时延 = 信道长度（m）/ 电磁波在信道上的传播速度（m/s）</li><li>时延带宽积 = 传播时延 × 带宽</li><li>利用率包括信道利用率和网络利用率（全网络的信道利用率的加权平均值）。</li><li>1 MB/s = 8 Mbit/s</li></ul><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><h4 id="通信基础"><a href="#通信基础" class="headerlink" title="通信基础"></a>通信基础</h4><ul><li>数据是传送信息的实体。而信号是数据的电气或电磁的表现。</li><li>基带对应数字信号，宽带对应模拟信号。</li><li>数据传输方式分为串行传输和并行传输。通信方式分为同步通信和异步通信。通信模式分为单向通信、双向交替通信、双向同时通信。</li><li>波特率（码元传输速率）表示单位时间内数字通信系统所传输的码元个数，单位波特（Baud）。</li><li>比特率（信息传输速率）表示单位时间内通信数字系统所传输的二进制码元个数，单位比特数（bit/s）。</li><li>每比特只能表示两种信号变化，可看成二进制。</li><li>带宽表示在单位时间内从网络中的某一点到另一点所能通过的最高数据率（网络的通信线路所能传送数据的能力）。单位比特每秒（bit/s）。</li><li>在通信领域，带宽是指信号最高频率与最低频率之差（Hz）。因此将模拟信号转换成数字信号时，采样频率必须大于等于最大频率f的2倍。</li><li>奈奎斯特定理给出了在无噪声情况下码元的最大传输速率。f表示理想低通信道的带宽。N表示每个码元的离散电平的数目。<ul><li>$C<em>{\max }=f_1*\log </em>{2}N=2f*\log _{2}N$</li></ul></li><li>信噪比是信号的平均功率和噪声的平均功率之比。S/N（dB）‘</li><li>香农公式给出了信号传输速率的极限。W为信道的带宽。<ul><li>$C<em>{\max }=W*\log </em>{2}\left( 1+\dfrac{S}{N}\right)$</li></ul></li><li>要使信息的极限传输速率提高，就必须提高信道的带宽或信道中的信噪比。实际信道的传输速率要比极限速率低不少。</li><li>模拟数据和数字数据都可以转化成模拟信号（调制）或数字信号（编码）。</li><li>数据传输方式包括电路交换、报文交换和分组交换。<ul><li>电路交换一定面向连接。通信时延小、实时性强、有序传输，但信道利用率低、缺乏统一标准、灵活性差。</li><li>报文交换，报文携带有目的地址、源地址。无需建立连接、动态分配线路，但报文大小没限制，要求网络节点需要有较大的存储缓存空间。</li><li>分组交换仍采用存储转发传输方式。将一个长报文分割成若干个较短的分组。加速传输、简化存储管理、减少出错概率和重发数据量，但存在传输时延、可能出现失序、丢失或重复分组现象。</li><li>TCP可以向应用层提供面向连接的服务，而UDP在传输层是无连接的。</li><li>分组交换可分为面向连接的虚电路方式和面向无连接的数据报方式，二者都由网络层提供。</li><li>数据报无需建立连接、提高吞吐量、对故障适应力强，每个分组包含完整的源地址和目的地址，可靠通信由用户主机来保证。</li><li>虚电路时延小、按序到达，每个分组包含一个虚电路号，可靠通信由网络来保证。</li></ul></li></ul><h4 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h4><ul><li>传输介质分为导向性传输介质和非导向性传输介质。<ul><li>导向性传输介质包含双绞线、同轴电缆和光纤。</li><li>双绞线分为无屏蔽双绞线和屏蔽双绞线。</li><li>同轴电缆分为基带同轴电缆（50Ω）和宽带同轴电缆（75Ω）。</li><li>光纤分为单模光纤（远距离）和多模光纤（近距离）。</li><li>非导向性传输介质有短波、微波、红外线与可见光等。</li></ul></li><li>传输介质并不是物理层，在传输介质中传输的是信号。物理层主要的功能就是确定与传输介质的接口有关的一些特性，即物理层接口的特性，如机械特性、电气特性、功能特性、规程特性。</li><li>物理层设备主要包含中继器和集线器。放大器放大的是模拟信号，中继器放大的是数字信号。</li><li>集线器实际就是一个多端口的中继器（Hub）。集线器在一个时钟周期内只能传输一组信息。集线器不能隔离冲突域。</li><li>通过中继器或集线器连接起来的几个网段仍然是一个局域网。使用集线器的以太网在逻辑上仍是一个总线网，各工作站使用CSMA/CD协议，共享逻辑上的总线。</li></ul><h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><h4 id="数据链路层的功能"><a href="#数据链路层的功能" class="headerlink" title="数据链路层的功能"></a>数据链路层的功能</h4><ul><li>数据链路层在物理层所提供的服务的基础上向网络层提供服务，分为无确认的无连接服务、有确认的无连接服务和有确认的有连接服务。</li><li>数据链路层的主要功能分为链路管理、帧同步、差错控制、透明传输。</li><li>当2个主机互相传送信息时，网络层的分组。必须封装成帧，并以帧的格式进行传送。即将一段数据的前后分别添加首部和尾部形成帧，首部和尾部中有很多控制信息，如帧定界。</li></ul><h4 id="组帧"><a href="#组帧" class="headerlink" title="组帧"></a>组帧</h4><ul><li>组帧方法分为字符计数法、字节填充的首尾界符法、比特填充的首尾标志法、物理编码违例法。</li><li>在网络中以帧为最小单位进行传输，所以组帧既要有首部又要加尾部，确定接收端清楚该帧在一串比特流中从哪里开始、到哪里结束。</li><li>字符计数法用一个特殊的字符表示一帧的开始，用一个计数字段表明该帧包含的字节数，计数字段提供的字节数包含自身所占的一个字节。</li><li>首尾界符法选定2个字符（SOH/EOT）作为每一个帧的开始和结束。字符填充的首尾界符法是将数据中可能出现的控制字符<code>SOH</code>和<code>EOT</code>在接收端不解释为控制字符。</li><li>比特填充的首尾标志法使用<code>01111110</code>作为帧的开始和结束标志。零比特填充法每有5个连续的<code>1</code>马上在其后插入<code>0</code>，接收方每收到5个连续的<code>1</code>自动删除后面紧跟的<code>0</code>恢复原始数据。</li><li>物理编码违例法利用物理介质上的编码的违法标志来区分帧的开始和结束，例如在曼彻斯特编码中高-高和低-低电平的编码方式是无效的，用来作为帧的起始和结束标志。</li></ul><h4 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h4><ul><li>检错编码分为奇偶校验码和循环冗余码。<ul><li>奇偶校验码是在信息码后面加1位校验码，分为奇校验和偶校验。奇校验是添加1位校验码后使得整个码字里面<code>1</code>的个数是奇数。</li><li>循环冗余码（CRC）是在发送端产生一个冗余码，附加在信息位后面一起发送到接收端，接收端收到的信息按发送端形成循冗余码同样的算法进行校验，如果发现错误则通知发送端重发。</li><li>CRC的本质是模-2除法的余数，采用的除数不同，CRC的类型也就不一样。</li><li>循环冗余码具有r检测位的多项式能够检测出所有小于或等于r的突发错误，长度大于r+1的错误逃脱的概率是 $\dfrac{1}{2^{r}}$。</li></ul></li><li>常见的纠错编码是海明码，在 k 位信息字段中插入若干位数据用于监督码字里的哪一位数据发生变化，具有一位纠错能力。<ul><li>确认校验码的位数 r：$2^{r}-1\geq k+r$</li><li>校验码$P_i$在编码中的位置为$2^{i-1}$</li><li>出错位$e_n$等于所有有关位$M_n$互为异或，求出$P_i$，按序写出海明码</li><li>校验海明码：出错位$e_n$等于所有有关位$M_n$互为异或，求出$e_n$</li><li>出错位$e_n$对应的十进制数就是出错的位数</li></ul></li></ul><h4 id="流量控制与可靠传输机制"><a href="#流量控制与可靠传输机制" class="headerlink" title="流量控制与可靠传输机制"></a>流量控制与可靠传输机制</h4><ul><li>流量控制就是要控制发送方发送数据的速率使接收方来得及接收，分为停止-等待流量控制和滑动窗口流量控制。<ul><li>停止-等待流量控制就是发送方发出一帧，等接收方收到一帧后返回应答信号，再发送下一帧。</li><li>滑动窗口流量控制允许一次发送多个帧。在任意时刻发送方都维持一组连续的允许发送的帧的序号，称为发送窗口。同时接收方也维持一组连续的允许接收帧的序号，称为接收窗口。发送端每收到一个帧的确认，发送窗口就向前移动1个帧的位置。</li><li>只有在接收窗口向前滑动时，发送窗口才有可能向前滑动。</li><li>只要当接收窗口大小为1时，则可保证帧按序接受。</li></ul></li><li>端到端的可靠传输就是在传输层使用面向连接的TCP，而不是数据链路层。</li><li>可靠传输一般使用确认和超时重传两种机制共同完成（ARQ自动请求重发）。</li><li>可靠传输机制包括停止-等待协议、后退N帧协议和选择重传协议。<ul><li>停止等待协议就是发送窗口和接收窗口大小均为1。帧一般分为数据帧和确认帧。</li><li>后退N帧协议：发送方连续发送若干个数据帧，如果收到接收方的确认帧接着发送数据，如果某个帧出错，接收方只能简单丢弃该帧及后续所有帧。增加吞吐量，但造成一定浪费。</li><li>后退N帧协议接收窗口大小=1，$1&lt;发送窗口大小W_{T}\leq 2^{n}-1$。n为对帧编号的比特数。</li><li>选择重传（SR）协议：当一帧出错时，后续帧先存入接收方的缓冲区中,同时要求发送方重传出错帧。提高信道利用率但增加缓冲空间。</li><li>选择重传协议的接收窗口尺寸和发送窗口尺寸都大于1，以便能一次性接受多个帧。发送窗口的最大尺寸也不能超过序列号范围的一半。当发送窗口等于接收窗口=$2^{n}-1$时达到最大效率。</li><li>按序到达的且没有被交付给主机的帧被放在接收缓存里。不按序到达的数据且没有错误的帧放在接收窗口里。不直接给主机，等缺少的帧收到后再一起放到接收缓存。</li></ul></li></ul><h4 id="介质访问控制"><a href="#介质访问控制" class="headerlink" title="介质访问控制"></a>介质访问控制</h4><ul><li>静态分配信道的方法是信道划分介质访问控制。动态分配信道的方法分为随机访问介质访问控制和轮询访问介质访问控制。</li><li>多路复用技术是在一条介质上同时携带多个传输信号，使多个计算机或终端设备共享信道资源，提高信道的利用率。实现信道划分介质访问控制。</li><li>信道划分介质访问控制分为频分多路复用、时分多路复用、波分多路复用和码分多路复用。<ul><li>频分多路复用时如果复用数增加，那么信号的频率带宽增加。</li><li>统计时分复用是一种动态的时间分配。</li><li>波分多路复用就是光的频分多路复用。</li><li>码分多路复用，又称为码分多址（CDMA），既共享信道的频率又共享时间，主要用于无线通信系统。</li><li>任意2个站点的码片向量的规格化内积一定为1。任意站点的码片向量与该码片向量自身的规格化内积一定为1。任何站点的码片向量和该码片的反码向量的规格化内积一定为负1。</li></ul></li><li>动态划分信道分为随机接入（争用性协议）和受控接入。<ul><li>ALOHA协议：不检测发送数据，一段时间没收到确认即为发送冲突，发生冲突的节点等待一段随机事件后再发送数据。</li><li>时分ALOHA：所有节点的时间被划分为间隔相同的时隙，并规定每个节点就会等到下一个时隙到来时才可发送数据。</li><li>载波侦听多路访问（CSMA）协议：每个节点发送数据之前，都使用载波侦听技术来判定通信信道是否空闲，在局域网中被广泛的应用。</li><li>1-坚持CSMA：监听到信道空闲时，立即发送数据，否则继续监听。</li><li>p-坚持CSMA：监听到信道空闲时，以概率P发送数据，以概率(1-P)延迟一段时间并重新监听。</li><li>非坚持CSMA。监听到信道空闲时，立即发送数据，否则延迟一段随机的时间再重新监听。</li><li>CSMA/CD协议（带冲突检测的载波侦听多路访问协议）：检测超过发送站点本身发送的载波信号的幅度，由此判断出冲突的存在，并向总线上发一串阻塞信号。</li><li>CSMA/CD工作流程：先听后发，边听边发，冲突停发，随机重发。</li><li>CSMACD用于信道使用半双工的网络环境，而对于使用全双工的网络环境，则无需采用这种介质访问控制技术。</li><li>争用期（$2\tau$）：以太网端到端的往返时延，又称冲突窗口或碰撞窗口。只有经过争用期还没有检测到冲突，才能肯定这次发送不会发生冲突。</li><li>以太网规定最短帧长为64B，凡长度小于64B的都是由于冲突而异常停止的无效帧。以太网端到端的单程时延实际上小于争用期的一半（25.6μs）。</li><li>最短有效帧长和最远2个站的距离及传输速率成正比。</li><li>截断二进制指数类型退避算法：发生碰撞的站在停止发送数据后要推迟一个随机时间才能发送数据，基本退避时间一般取争用期（$2\tau$），重传需要推迟的平均时间随重传次数的增大而增大。</li><li>CSMA/CA协议主要用在无线局域网中，在CSMA的基础上增加了冲突避免的功能。</li><li>CSMA/CA协议要对正确接收到的数据帧进行确认。</li></ul></li><li>轮询访问介质访问控制主要用于在令牌环局域网中。典型的轮询访问介质访问控制协议就是令牌传递协议。</li></ul><h4 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h4><ul><li>局域网（local area network，LAN）是指一个较小范围内的多台计算机或其他通信设备通过双绞线、同轴电缆等连接介质互联起来，以达到资源和信息共享目的的互联网络。<ul><li>局域网有较高的数据率、较低的时延和较小的误码率，具有广播功能，便于系统的扩展和演变。</li><li>局域网的主要技术要素包括网络拓扑结构传输介质与介质访问控制方法。局域网的主要拓扑结构包括星型网环形网总线型网和树型网（星型网和总线型网的结合）。双绞线为局域网的主流传输介质。</li><li>局域网的主要介质访问控制方法包括CSMA/CD、令牌总线和令牌环。前两种作用于总线型网，令牌环作用于环形网。</li><li>局域网对应OSI参考模型中的数据链路层和物理层，并将数据链路层拆分为2个子层，逻辑链路控制（LLC）子层和媒体接入控制（MAC）子层。</li></ul></li><li>以太网采用总线拓扑结构。所有计算机都共享一条总线信息，以广播方式发送，使用CSMACD技术对总线进行访问控制。<ul><li>以太网采用无连接的工作方式，不对发送的数据帧进行编号，也不要求对发送方发送确认。以太网提供的服务是不可靠服务，所以有重传机制，且差错纠正由传输层的TCP完成。</li><li>数据传输速率达到或超过100Mbit/s的以太网称为高速以太网。100base-T以太网称为快速以太网。吉比特以太网成为千兆以太网,允许在全双工和半双工两种方式工作。在半双工方式下工作时必须使用CSMA/CD协议进行冲突检测。</li></ul></li><li>无线局域网分为有固定基础设施和无固定基础设施两类。IEEE802.11规定有固定基础设施的无线局域网的最小构建为基本服务集（BSS），BSS中的基站称为接入点（AP）。<ul><li>基本服务集可以是孤立的，也可以通过接入点连接到一个主干分配系统（DS）构成扩展的服务器（ESS），ESS还可通过门桥（portal）设备为无线用户提供到非IEEE802.11无线局域网的接入。</li><li>IEEE802.11标准中的物理层有跳频扩频（FHSS）、直接序列扩频（DSS）、红外线（IR）3种实现方法。</li><li>IEEE802.11标准中的MAC层在物理层上，包括2个子层，从下往上依次为分布协调功能（DCF）子层和点协调功能（PCF）子层。在带有碰撞避免功能的CSMA/CA协议的基础上增加确认机制。</li></ul></li><li>广域网是覆盖范围很广的长距离网络，由一些节点交换机以及连接这些交换机的链路组成。节点交换机完成分组存储转发的功能。<ul><li>广域网是通过交换机连接多个局域网组成，因特网是由广域网和局域网共同通过路由器相连。</li><li>局域网使用的协议主要在数据链路层，而广域网使用的协议主要在网络层。</li><li>广域网的路由选择协议负责搜索分组从某个节点到目的节点的最佳传输路由，以便构成路由表，从路由表再构造出转发分组的转发表，分组是通过转发表进行转发的。</li></ul></li><li>点对点协议（PPP）由一个将IP数据报封装到串行链路的方法、一个用于建立配置和测试数据链路连接的链路控制协议（LCP）和一套用来建立和配置不同的网络层协议的网络控制协议（NCP），其中每个协议支持不同的网络层协议。<ul><li>PPP是一个面向字节的协议，不需要纠错（只负责检错）、流量控制（由TCP负责）、序号（不可靠的传输协议）、多点线路，只支持全双工链路。</li></ul></li><li>高级数据链路控制（HDLC）协议是ISO制定的面向比特的数据链路控制协议，可适用于链路的非平衡配置（一个主站控制整个链路的工作）和平衡配置（链路两端2个站都是复合站）。<ul><li>PPP帧比HDLC协议帧多一个2字节的协议字段，当协议字段值为Ox0021时表示信息字段是IP数据报。</li><li>PPP不使用序号和确认机制，只保证无差错接收（通过硬件进行循环冗余码校验），HDLC协议的信息帧使用了编号和确认机制。</li></ul></li></ul><h4 id="数据链路层设备"><a href="#数据链路层设备" class="headerlink" title="数据链路层设备"></a>数据链路层设备</h4><ul><li>在物理层拓展局域网使用中继器和集线器扩大冲突域，但总吞吐量未提高，且不能互联使用不同以太网技术的局域网。</li><li>在数据链路层扩展局域网使用网桥，具有过滤帧的功能。网桥至少有2个端口，每一个端口与一个网段相连。<ul><li>网桥从一个端口接收一个帧，先暂存到缓存中，若未出现差错，且发往目的站MAC地址属于另一网段，则通过查找转发表将该帧从对应端口发出。</li><li>网桥过滤通信量、扩大物理范围、提高可靠性、可互连不同物理层、不同MAC子层和不同速率的以太网，但存储转发增加时延，且在MAC层并没有流量控制功能，用户过多会因传播过多的广播信息而产生网络拥塞（广播风暴）。</li><li>网桥包括透明网桥（选择的不是最佳路由）和源选径网桥（选择的是最佳路由）。最佳路由并不一定是经过路由器最少的路由，也可以是发送帧往返时间最短的路由（实现负载平衡）。</li></ul></li><li>局域网交换机实质上是工作在数据链路层的多端口网桥。局域网交换机的每个端口都直接与主机或集线器相连，并且一般都工作在全双工方式。<ul><li>交换机总容量 = 端口数×每个端口带宽（半双工）or 端口数×每个端口带宽×2（全双工）</li><li>交换机分为直通式交换和存储转发式交换，工作原理与网桥类似。</li><li>网桥的端口一般连接到局域网的网段，而以太网交换机的每个端口一般都直接与主机相连，也可连接到Hub。</li></ul></li><li>一块网卡发出一个广播，能收到这个广播的所有网卡集合为一个广播域。通常情况下，一个网段就是一个冲突域，一个局域网就是一个广播域。</li></ul><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><h4 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h4><ul><li>网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务，并且网络层不提供服务质量的承诺。</li><li>这样的好处在于网络造价大大降低，运行方式灵活。</li></ul><h4 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h4><ul><li>网际协议IP是TCP/IP体系中两个最主要的协议之一。其中，与IP协议配套使用的有三种协议：<ul><li>地址解析协议ARP</li><li>网际控制报文协议ICMP</li><li>网际组管理协议IGMP</li></ul></li><li>其中，ICMP、IGMP协议是往基层向上提供的两种服务</li></ul><h4 id="互联网络"><a href="#互联网络" class="headerlink" title="互联网络"></a>互联网络</h4><ul><li>因为用户的需求是多种多样的，没有一种单一的网络能够适应所有用户的需求,所以不同的网络之间，将网络互联起来需要使用一些中间设备。<ul><li>物理层使用的中间设备是转发器</li><li>数据链路层使用的中间设备是网桥或者桥接器</li><li>网络层使用的中间设备是路由器</li><li>网络层以上使用的中间设备叫网关</li></ul></li></ul><h5 id="IP地址与硬件地址"><a href="#IP地址与硬件地址" class="headerlink" title="IP地址与硬件地址"></a>IP地址与硬件地址</h5><ul><li><p>物理地址是数据链路层和物理层使用的地址，而IP地址是网络层和网络层以上各层使用的地址</p></li><li><p>在发送数据时，数据从高层下到底层，然后才到通信链路上使用IP的IP数据报一旦交给了数据链路层，就被封装成MAC帧（MAC地址）</p></li></ul><h5 id="地址解析协议ARP"><a href="#地址解析协议ARP" class="headerlink" title="地址解析协议ARP"></a>地址解析协议ARP</h5><ul><li><p>已知一个机器的IP地址，如何找出其所对应的硬件地址呢？这就是ARP的主要任务。</p><ul><li>ARP协议的主要内容在于从网络层使用的IP地址，解析出在数据链路层使用的硬件地址。</li></ul></li></ul><ul><li>工作原理：一个主机都设有一个ARP高速缓存，里面有所在的局域网上的各主机和路由器的 IP 地址到硬件地址的映射表。如果所要找的主机和源主机不在同一个局域网上，那么就要通过 ARP 找到一个位于本局域网上的某个路由器的硬件地址，然后把分组发送给这个路由器，让这个路由器把分组转发给下一个网络。</li></ul><h4 id="IP数据报"><a href="#IP数据报" class="headerlink" title="IP数据报"></a>IP数据报</h4><ul><li>一个IP数据报由首部（20 字节+可选字段）和数据两部分组成</li></ul><h4 id="划分子网和构建超网"><a href="#划分子网和构建超网" class="headerlink" title="划分子网和构建超网"></a>划分子网和构建超网</h4><ul><li><p>两级IP到三级IP</p><ul><li><p>两级IP（&lt;网络号&gt;，&lt;主机号&gt;）的缺陷：</p></li><li><p>IP地址的空间利用率有时很低</p><ul><li>两级IP地址不够灵活</li></ul></li><li><p>给每一个物理网络分配一个网络号会使路由表变得太大而使网络性能变坏。</p></li><li><p>三级IP地址：将其中二级IP的主机号取出并高x位变成子网络，形成网络号+子网号+主机号的地址格式</p></li><li><p>划分子网：划分子网属于一个单位内部的事情，它将二级IP地址变为三级IP地址</p></li></ul></li></ul><h4 id="无分类编制CIDR"><a href="#无分类编制CIDR" class="headerlink" title="无分类编制CIDR"></a>无分类编制CIDR</h4><ul><li>CIDR取消了传统的A类、B类和C类地址以及划分子网的概念，并且用网络前缀代替网络号和子网号，后面的部分指明主机。因此，CIDR使IP地址从三级地址(使用子网掩码)，又回到了两级地址（无分类的两级编址）。</li><li><p>CIDR把网络前缀相同的连续的IP地址组成一个”CIDR地址块”只要知道CIDR地址块中的任何一个地址，就可以知道这地址块的起始地址(即最小地址)和最大地址，以及地址块中的地址数。具体看如下例子</p></li><li><p>地址掩码：是一连串的1和0组成，而1的个数救赎网络前缀长度。在斜线记法中。斜线后面的数字就是地址掩码中1的个数。</p></li><li><p>构成超网：由于一个CIDR地址块中含有很多地址，所以在路由表中就利用CIDR地址块来查找目标网络，这种地址的聚合常称为路由聚合，也称构成超网。</p></li></ul><h4 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h4><ul><li><p>最长前缀匹配之前，使用CIDR时，每个项目由网络前缀和下一跳地址组成。但是在查找路由表时会得到不止一个匹配结果该怎么办呢？</p></li><li><p>此时应该选择匹配结果中，有最长网络前缀的路由。因为网络前缀越长，可分配的地址数就越少，其地址信息路由就越具体</p></li></ul><h4 id="网际控制报文协议ICMP"><a href="#网际控制报文协议ICMP" class="headerlink" title="网际控制报文协议ICMP"></a>网际控制报文协议ICMP</h4><ul><li><p>为了更有效地转发IP数据报和提高交付成功的机会，在网际层使用了ICMP，ICMP允许主机或路由器报告差错情况和提供有关异常情况的报告。ICMP是互联网的标准协议，但不是高层协议。其种类如下：</p><ul><li>ICMP差错报告报文</li></ul></li></ul><ul><li>ICMP询问报文</li></ul><ul><li>ICMP的应用在于分组网间探测PING，以用来测试两台主机之间的连通性。</li></ul><h4 id="互联网的路由选择协议"><a href="#互联网的路由选择协议" class="headerlink" title="互联网的路由选择协议"></a>互联网的路由选择协议</h4><ul><li><p>路由选择协议分为两大类：</p><ul><li>内部网关协议</li></ul></li></ul><ul><li>外部网关协议</li></ul><ul><li><p>内部网关协议</p><ul><li>RIP是内部网关协议中最先得到广泛应用的协议，也被称为路由信息协议，但是其很少被使用。其主要特点如下：<ul><li>仅和相邻路由器交换信息。</li><li>路由器交换的信息是当前路由器所知道的全部信息，即自己现在的路由</li><li>按固定的时间间隔交换路由信息，例如，每隔30秒。</li><li>因此，RIP有如下的优缺点。</li><li>当网络出现故障时，要经过比较长的时间才能将此信息传送到所有的路由器。</li><li>RIP 协议最大的优点就是实现简单，开销较小。</li><li>RIP 限制了网络的规模，它能使用的最大距离为 15（16 表示不可达）。</li><li>路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。</li></ul></li></ul></li><li><p>OSPF最主要的特征就是使用分布式的链路状态协议，其主要特点：</p><ul><li>使用洪泛法向本自治系统中所有路由器发送信息。</li></ul></li></ul><ul><li><p>发送的信息是与本路由器相邻的所有路由器的链路状态。</p></li><li><p>只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。</p></li></ul><h4 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h4><ul><li>解决IP地址耗尽的根本措施在于采用具有更大地址空间的新版本IP，即IPv6。它有两大部分组成：基本首部，有效载荷</li><li>IPv6采用的是点分十六进制的记法，把每个十六位的值用十六进制表示，并且各个值之间用冒号分割</li><li>冒号十六进制允许零压缩，但只能使用一次零压缩</li><li>冒号十六进制可以结合使用点分十进制记法的后缀。</li></ul><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><h4 id="运输层协议概述"><a href="#运输层协议概述" class="headerlink" title="运输层协议概述"></a>运输层协议概述</h4><ul><li>运输层功能<ul><li>运输层应用进程之间提供端到端的逻辑通信。这与网络层的区别在于网络层是为主机之间提供逻辑通信的</li><li>运输层需要对收到的报文进行差错检验</li><li>运输层有两种不同的运输协议，即面向连接的TCP和无连接的UDP</li></ul></li><li>TCP/IP的运输层有两个不同的协议：<ul><li>用户数据报协议UDP</li><li>传输控制协议TCP</li></ul></li><li>UDP协议特点<ul><li>提供无连接服务</li><li>尽最大努力交付</li><li>面向报文，UDP 一次交付一个完整的报文</li><li>没有拥塞控制，网络拥塞不会使源主机的发送速率降低</li><li>支持一对一、一对多、多对一和多对多的交互通信</li><li>首部开销小，只有 8 个字节</li><li>应用：对可靠性要求不高，需要传送的数据不多，使用频率不高。并且可以实时应用。</li></ul></li><li>TCP协议特点<ul><li>提供面向连接的服务</li><li>可靠传输：主要以字节为单位的滑动窗口和超时重传时间的选择</li><li>面向字节流</li><li>拥塞控制：避免由于对网络中某资源的需求超过可用资源，令网络的性能变坏</li><li>TCP 的流量控制：让发送方的发送速率不要太快</li><li>总结：TCP和UDP协议的区别</li></ul></li><li>TCP的特点<ul><li>面向连接协议</li><li>提供交互保证</li><li>较UDP实时性低</li><li>TCP首部开销20个字节</li><li>TCP速度较慢</li><li>拥塞机制</li><li>TCP将数据看成一连串的字节</li><li>重量级协议，资源占用多</li><li>只有点对点连接</li></ul></li><li>UDP的特点<ul><li>无连接协议</li><li>尽最大努力交付，不提供有序、序列保证</li><li>较好的实时性</li><li>首部开销8字节</li><li>运行速度较快</li><li>无拥塞机制</li><li>面向报文</li><li>轻量级</li><li>一对一，一对多，多对多</li></ul></li><li>运输层的端口<ul><li>运行在计算机中的进程是用进程标识符来标志的。但运行在应用层的各种应用进程却不应当让计算机操作系统指派它的进程标识符。这是因为在互联网上使用的计算机的操作系统种类很多，而不同的操作系统又使用不同格式的进程标识符。<br>为了使运行不同操作系统的计算机的应用进程能够互相通信，就必须用统一的方法对 TCP/IP 体系的应用进程进行标志。</li><li>由于进程的创建和撤销都是动态的，发送方几乎无法识别其他机器上的进程。有时我们会改换接收报文的进程，但并不需要通知所有发送方。所以我们往往需要利用目的主机提供的功能来识别终点，而不需要知道实现这个功能的进程。</li><li>解决这个问题的方法就是在运输层使用协议端口号 (protocol port number)，或通常简称为端口(port)。虽然通信的终点是应用进程，但我们可以把端口想象是通信的终点，因为我们只要把要传送的报文交到目的主机的某一个合适的目的端口，剩下的工作（即最后交付目的进程）就由 TCP来完成。</li></ul></li></ul><h4 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h4><ul><li><p>以字节单位的滑动窗口</p><ul><li><p>TCP使用流水线传输和滑动窗口协议实现高效、可靠的传输。TCP 的滑动窗口是以字节为单位的。</p></li><li><p>发送方 A 和接收方 B 分别维持一个发送窗口和一个接收窗口。</p></li></ul></li></ul><ul><li>发送窗口表示：在没有收到确认的情况下，可以连续把窗口内的数据全部发送出去。</li></ul><ul><li>接收窗口表示：只允许接收落入窗口内的数据。</li></ul><ul><li><p>超时重传时间的选择</p><ul><li>重传机制是 TCP 中最重要和最复杂的问题之一。</li><li>TCP 每发送一个报文段，就对这个报文段设置一次计时器。</li><li>只要计时器设置的重传时间到但还没有收到确认，就要重传这一报文段。</li><li>重传时间的选择是 TCP 最复杂的问题之一。</li></ul></li><li><p>利用滑动窗口实现流量控制</p><ul><li>一般说来，我们总是希望数据传输得更快一些。但如果发送方把数据发送得过快，接收方就可能来不及接收，这就会造成数据的丢失。</li><li>流量控制 (flow control) 就是让发送方的发送速率不要太快，既要让接收方来得及接收，也不要使网络发生拥塞。</li><li>利用滑动窗口机制可以很方便地在 TCP 连接上实现流量控制。</li></ul></li><li><p>拥塞机制</p><ul><li>在某段时间，若对网络中某资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种现象称为拥塞 (congestion)。</li><li>最坏结果：系统崩溃。</li></ul></li><li><p>网络拥塞往往是由许多因素引起的。例如：</p><ul><li>点缓存的容量太小；</li><li>链路的容量不足；</li><li>处理机处理的速率太慢；</li><li>拥塞本身会进一步加剧拥塞；</li><li>总的来说，出现拥塞的原因在于对资源的需求大于可用资源</li></ul></li><li><p>TCP的拥塞控制方法</p><ul><li><p>慢开始与拥塞窗口</p><ul><li>TCP 采用基于窗口的方法进行拥塞控制。该方法属于闭环控制方法。</li><li>TCP发送方维持一个拥塞窗口 cwnd</li><li><p>发送端利用拥塞窗口根据网络的拥塞情况调整发送的数据量。</p></li><li><p>发送窗口大小不仅取决于接收方窗口，还取决于网络的拥塞状况</p></li><li>只要网络没有出现拥塞，拥塞窗口就可以再增大一些，以便把更多的分组发送出去，这样就可以提高网络的利用率。</li><li>但只要网络出现拥塞或有可能出现拥塞，就必须把拥塞窗口减小一些，以减少注入到网络中的分组数，以便缓解网络出现的拥塞。</li><li>其中，对于拥塞的判断，有以下两个指标：1.重传定时器超时。2.收到三个重复的ACK。</li></ul></li></ul></li></ul><h3 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h3><ul><li>应用层协议主要定义运行在不同端系统上的应用程序进程之间如何相互传递信息</li><li><p>常用的几种协议：DNS、FTP、HTTP、DHCP 的作用</p><ul><li>DNS：域名系统DNS是互联网使用的命名系统，用来把便于人们使用的机器名字转换为IP地址。DNS同时占用TCP协议与UDP协议的53号端口。</li><li>FTP：文件传送协议FTP是互联网上使用的最广泛的文件传送协议。FTP使用的传输层协议是</li><li>TCP，FTP 传数据流占用20号端口，FTP传控制流占用21号端口。</li><li>HTTP：HTTP协议定义了浏览器怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。HTTP使用传输层协议为TCP，端口号为80。</li><li>DHCP：互联网目前广泛使用的动态主机配置协议DHCP，它提供一种机制，成为即插即用联网。DHCP使用UDP，端口号为67和68。</li></ul></li><li><p>在应用层，用到DNS协议，作用是域名解析，HTTP协议浏览器和服务器之间的交互访问协议。</p></li><li>在传输层，运用UDP域名解析协议使用的运输层协议，TCP浏览器和WWW服务器之间建立连接，提供可靠的数据传输。</li><li>在网际层IP，IP数据报传输和路由选择，ICMP提供网络传输中的差错检测，ARP将本机缺省的网关IP地址映射成物理地址（MAC地址）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学与技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 操作系统（OS）是管理和控制计算机硬件与软件资源，是计算机上直接运行的最基本的系统软件，任何其他软件都必须在操作系统的支持下才能运行。操作系统是用户和计算机的接口，同时也是计算机硬件和其他软件的接口。操作系统的功能包括管理计算机系统的硬件、软件及数据资源，控制程序运行，提供人机交互界面，为其它应用软件提供支持等。</p></blockquote><span id="more"></span><h3 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h3><h4 id="操作系统基本概念"><a href="#操作系统基本概念" class="headerlink" title="操作系统基本概念"></a>操作系统基本概念</h4><ul><li>冯诺依曼模型：运算器、存储器、控制器、输入设备和输出设备</li><li>引入操作系统的目的：提供一个计算机用户与计算机硬件系统之间的接口、有效的控制和管理计算机系统中的各种硬件和软件资源、合理地组织计算机系统的工作流程</li><li>操作系统是计算机系统的资源管理程序</li><li>操作系统的核心是控制和协调进程的运行，解决进程之间的通信</li><li>操作系统的发展：无操作系统阶段 -&gt; 单道批处理系统 -&gt; 多道批处理系统</li></ul><h4 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h4><ul><li>并行性：2个或多个事件在同一时刻发生</li><li>并发性：2个或多个事件在同一时间间隔内发生</li><li>并发和共享是操作系统的2个最基本的特征，二者之间互为存在条件</li><li>资源共享方式：互斥共享、同时访问</li><li>虚拟是指把一个物理上的实体变为若干个逻辑上的对应物</li><li>异步性</li></ul><h4 id="操作系统的功能和服务"><a href="#操作系统的功能和服务" class="headerlink" title="操作系统的功能和服务"></a>操作系统的功能和服务</h4><ul><li>处理器管理：进程控制、进程同步、进程通信、进程调度</li><li>存储器管理：内存分配、内存保护、内存扩充</li><li>设备管理：设备分配、设备传输控制、设备独立性</li><li>文件管理：文件存储空间的管理、目录管理、文件操作管理、文件保护</li><li>用户接口：命令接口、程序接口、图形接口<ul><li>联机命令接口又称交互式命令结构</li><li>脱机命令接口又称批处理命令接口</li></ul></li><li>操作系统3种基本类型：批处理操作系统、分时操作系统、实时操作系统</li><li>其他操作系统：嵌入式操作系统、集群系统、网络操作系统、分布式操作系统</li></ul><h4 id="操作系统的运行环境"><a href="#操作系统的运行环境" class="headerlink" title="操作系统的运行环境"></a>操作系统的运行环境</h4><ul><li>处理器的执行状态分为核心态与用户态<ul><li>核心态是操作系统管理程序执行时机器所处的状态</li><li>用户态是用户程序执行时机器所处的状态</li></ul></li><li>特权指令是只能由操作系统内核部分使用，不允许用户直接使用的指令，如I/O指令、设置中断屏蔽指令、清内存指令、存储保护指令和设置时钟指令</li><li>内核的指令操作工作在核心态<ul><li>时钟管理</li><li>中断机制</li><li>原语</li><li>系统控制的数据结构及处理</li></ul></li><li>异常，也称内中断，是由错误引起的</li><li>通常异常会引起中断，而中断未必是由异常引起的</li><li>系统调用（API）：进程控制、文件系统控制、系统控制、内存管理、网络管理、socket 管控、制用户管理以及进程间通信</li></ul><h4 id="操作系统的体系结构"><a href="#操作系统的体系结构" class="headerlink" title="操作系统的体系结构"></a>操作系统的体系结构</h4><ul><li>操作系统的体系结构主要包括模块组合结构、层次结构和微内核结构</li><li>模块组合结构<ul><li>接口简单直接，系统的效率相对较高</li><li>系统结构不清晰、可扩展性差、可适应性差</li></ul></li><li>层次结构<ul><li>按功能的调用次序排列成若干层</li><li>组织和依赖关系清晰明了，可读性、可适应性及可靠性都得到了增强</li><li>通常要将为进程提供服务的系统调用模块放在系统的内层。</li></ul></li><li>微内核结构<ul><li>客户服务器模式（C/S 模式）</li><li>每个服务进程运行在独立的用户进程中，可靠性好，灵活性好，便于维护</li><li>适合分布式处理的计算环境</li><li>效率不高，尤其是通信频繁的系统</li></ul></li></ul><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><ul><li>在计算机操作系统中，进程是资源分配的基本单位，也是独立运行的基本单位<ul><li>程序顺序执行时的特征：顺序性，封闭性，可再现性</li><li>程序的并发执行的特征：间断性，失去封闭性，不可再现性</li></ul></li><li>程序并发执行且其结果具有可再现性的条件（Bernstein 条件）<ul><li>R(p1) ∩ W(p2) = ∅</li><li>R(p2) ∩ W(p1) = ∅</li><li>W(p1) ∩ W(p2) = ∅</li></ul></li><li>进程的特征：动态性、并发性、独立性、异步性、结构特征（程序段、数据段和进程控制块）</li><li>进程和程序的关系<ul><li>进程和程序的关系程序是静止的</li><li>进程是暂时的，程序是永久的</li><li>进程的组成包括程序段、数据块和进程控制块（Process Control Block）</li><li>通过多次执行，一个程序可以产生多个不同的进程，通过调用关系，一个进程可以执行多个程序</li><li>进程可创建其他进程，而程序不能形成新的程序</li></ul></li><li>由程序段、相关数据段和PCB三部分构成的是进程映像，也叫进程实体<ul><li>映像是静态的，进程是动态的，进程是进程实体的运行过程</li></ul></li><li>进程和作业的区别<ul><li>作业是用户需要计算机完成某项任务而要求计算机所做的工作的集合</li><li>作业提交、作业收容、作业执行、作业完成</li><li>进程是已提交完毕的作业的执行过程，是资源分配的基本单位</li><li>作业是用户向计算机提交任务的任务实体，而进程是完成用户任务的执行实体</li><li>这个作业可由多个进程组成，而必须至少由一个进程组成，但一个进程不能构成多个作业</li></ul></li><li>进程的组成<ul><li>进程控制块（PCB）：标识进程的存在，刻画执行瞬间特征的数据机构</li><li>其他组成部分：程序段、数据段、进程标识符（PID）、进程当前状态、进程队列指针、程序和数据地址，进程优先级、CPU 现场保护区、通信信息、家族联系、占有资源清单</li></ul></li><li><p>PCB 是进程存在的唯一标志</p><ul><li>PCB 存在是为了保证程序的并发执行</li><li>创建进程实质上是创建进程的 PCB，而撤销进程实质上是撤销进程的 PCB</li><li>系统总是通过 PCB 对进程进行控制的</li></ul></li><li><p>进程的5种基本状态：就续状态、执行状态、阻塞状态、创建状态、结束状态</p><ul><li>执行状态只能由就绪状态转换，而无法由阻塞状态直接转换</li><li>不能从就绪状态变为阻塞状态</li><li>进程状态是唯一的</li></ul></li><li>进程的创建<ul><li>进程创建是通过创建原语实现的</li><li>申请一个空闲 PCB，并指定唯一的 PID -&gt; 分配必要的资源 -&gt; 将新进程的PCB初始化 -&gt; 插入到就绪队列</li><li>导致进程创建的事件：用户登录、作业调度和请求服务</li></ul></li><li>撤销一个进程：撤销原语<ul><li>找到被撤销进程的PCB -&gt; 停止该进程的执行 -&gt; 回收被撤销进程所占用的资源 -&gt; 回收PCB</li></ul></li><li>进程的阻塞与唤醒：两条低级进程通讯原语<ul><li>阻塞原语（P 原语）的功能是将进行进程由执行状态转为阻塞状态</li><li>唤醒原语（V 原语）的功能是将进程由阻塞状态变为就绪状态</li><li>一个进程由执行状态变为阻塞状态，是由这个进程自己调用阻塞原语去完成的</li><li>进程由阻塞状态变为就绪状态，是由另一个发现者进程调用唤醒原语去实现的。一般这个发现者进程与被唤醒进程是合作的并发进程</li></ul></li><li>调度是决定将系统资源分配给哪个进程，进程切换是实际分配系统资源<ul><li>进程切换一定会产生中断，但处理器模式切换不一定产生进程切换</li></ul></li><li>进程的互斥与同步就是一种进程间的通信方式<ul><li>高级进程通信方式：共享存储器系、消息传递系统、管道（共享文件）通信系统</li></ul></li></ul><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><ul><li>线程是进程内一个相对独立的可调度的执行单元<ul><li>内核级线程依赖于内核，一个内核级线程由于 I/O 操作而阻塞时不会影响其他线程的运行</li><li>用户级线程不依赖于操作系统核心，由于操作系统内核不了解用户线程的存在，当一个线程阻塞时，整个进程必须等待</li></ul></li><li>进程与线程<ul><li>线程谁独立调度的基本单位，进程是拥有资源的基本单位</li><li>线程不拥有资源，但线程可以访问其隶属进程的系统资源</li><li>进程之间可以并发执行，同一进程内的多个线程之间也可以并发执行</li><li>多线程之间的同步与通信非常容易实现</li></ul></li><li>多线程模型：多对一模型，一对一模型，多对多模型（将多个用户级线程映射到多个内核级线程）</li></ul><h4 id="处理器的三级调度"><a href="#处理器的三级调度" class="headerlink" title="处理器的三级调度"></a>处理器的三级调度</h4><ul><li>高级调度（作业调度）：从外存上处于后备状态的作业中选择一个或多个，给他们分配内存等必要资源并建立相应的进程，以便该作业具有获得竞争处理器的权利<ul><li>作业调度每次要接纳多少个作业进入内存取决于多道程序的并发程度</li><li>多道程序的并发程度应根据系统的规模和运算速度来决定</li><li>应将哪些作业从外存调入内存取决于所采取的调度算法</li></ul></li><li>中级调度（交换调度）：按照给定的原则和策略，将处于外存对换区中具备运行条件的进程调入内存，并将其状态修改为就绪状态，挂在就绪队列上等待</li><li>低级调度（进程调度）：按照某种策略和方法，从就绪队列中选取一个进程，将处理器先分配给他<ul><li>进程调度的运行频率很高</li><li>作业调度的结果是为作业创造进程，而进程调度的结果是进程被执行</li></ul></li><li>衡量调度算法的性能： CPU利用率、系统吞吐量、响应时间、周转时间<ul><li>作业的周转时间 = 作业的完成时间 - 作业的提交时间</li><li>平均周转时间：多个作业周转时间的平均值</li><li>带权周转时间是作业周转时间与运行时间的比</li></ul></li></ul><h4 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h4><ul><li>处理器分配的任务由进程调度程序完成</li><li>进程调度的功能：记录系统中所有进程的有关情况以及状态特征，选择获得处理器的进程和处理器分配</li><li>引起进程调度的原因<ul><li>当前运行进程运行结束</li><li>当前运行进程因某种原因从运行状态进入阻塞状态</li><li>执行完系统调用等系统程序后返回用户进程</li><li>在采用抢占调度方式的系统中，一个更高优先级的进程要求使用处理器</li><li>在分时系统中分配给该进程的时间片已用完</li></ul></li><li>不能进行进程调度的情况<ul><li>处理中断的过程中</li><li>在操作系统内核程序临界区中</li><li>其他需要完全屏蔽中断的原子操作过程中</li></ul></li><li>进程调度的方式：抢占方式、非抢占方式</li></ul><h4 id="常见调度算法"><a href="#常见调度算法" class="headerlink" title="常见调度算法"></a>常见调度算法</h4><ul><li>先来先服务调度算法（作业调度、进程调度）<ul><li>FCFS：按照进程进入就绪队列的先后次序来分配处理器</li></ul></li><li>短作业优先调度算法（作业调度、进程调度）<ul><li>SJF：把处理器分配给最快完成的作业或进程</li></ul></li><li>优先级调度算法（作业调度、进程调度）<ul><li>静态优先级是在创建进程时确定的，确定之后整个进程运行期间不再改变</li><li>按进程类、作业的资源要求、用户类型和要求确定静态优先级</li><li>动态优先级是指在创建进程时根据进程的特点及相关情况确定一个优先级</li><li>根据进程占有CPU时间的长短和就绪进程等待CPU时间的长短确定动态优先级</li><li>基于优先级的调度算法还可按调度方式的不同，分为非抢占优先级调度算法和抢占优先级调度算法</li><li>在优先级相同的情况下，通常按照先来先服务或者短作业优先的顺序执行</li></ul></li><li>时间片轮转调度算法（进程调度）<ul><li>分时系统必须满足系统对响应时间的要求</li><li>就绪队列中的进程数与时间片的大小成反比</li><li>系统的处理能力决定时间片的大小</li></ul></li><li>高响应比优先调度算法（作业调度）<ul><li>响应比 = 作业响应时间 / 估计运行时间</li><li>作业响应时间 = 作业等待时间 + 估计运行时间</li></ul></li><li>多级反馈队列调度算法（作业调度）<ul><li>时间片轮转调度算法和优先级调度算法的综合与发展</li></ul></li></ul><h4 id="同步与互斥"><a href="#同步与互斥" class="headerlink" title="同步与互斥"></a>同步与互斥</h4><ul><li>互斥是间接相互制约关系，而同步是直接相互制约关系</li><li>只要是同类进程即为互斥关系，不同类进程即为同步关系</li><li><p>临界资源：同时仅允许一个进程使用的资源</p><ul><li>进入区、临界区、退出区、剩余区</li><li>临界区：进程中用于访问临界资源的代码，又称临界段</li><li>临界资源是必须互斥访问的资源，这种资源同时只能被一个进程所使用，但需要这种资源的进程不止一个，因此需要对使用临界资源的进程进行管理</li><li>每个进程的临界区代码可以不相同</li></ul></li><li><p>互斥的要求：空闲让进，忙则等待，有限等待，让权等待</p></li><li>互斥实现方法<ul><li>软件实现方法</li><li>互斥实现的硬件方法：中断屏蔽、硬件指令</li><li>硬件方法适用范围广，支持多个临界区，但不能实现让权等待</li></ul></li></ul><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><ul><li>信号量 <code>(s,q)</code> 及同步原语<ul><li>整型变量 s 表示系统中某类资源的数目，q 是一个初始状态为空的队列</li><li>信号量的值仅能由 P 操作（wait）操作和 V 操作（signal）操作改变，操作系统利用它的状态对进程和资源进行管理</li><li>P 操作相当于申请资源，V 操作相当于释放资源</li></ul></li><li>信号量分为整型信号量和记录型信号量（资源信号量）<ul><li>记录型信号量添加了链表结构用于链接所有等待该资源的进程，解决忙等的问题</li></ul></li><li>信号量可以用来实现进程互斥和描述前趋关系</li></ul><h4 id="经典同步问题"><a href="#经典同步问题" class="headerlink" title="经典同步问题"></a>经典同步问题</h4><ul><li>生产者-消费者问题<ul><li>P(full) / P(empty) 与 P(mutex) 的顺序不可倒，必须先对资源信号量进行 P 操作，再对互斥信号量进行 P 操作。否则会导致死锁</li><li>互斥信号量就是给同类进程准备的</li></ul></li><li>读者写者问题（许多进程共享数据区）<ul><li>读者不互斥，写者必须互斥</li><li>读者优先，公平情况和写者优先三种不同算法</li></ul></li><li>哲学家进餐问题<ul><li>最多允许4个哲学家同时进餐</li><li>仅当一个哲学家左右两边的筷子同时可用时，他才可以拿起筷子</li><li>将哲学家编号要求奇数号的哲学家先拿左边筷子，偶数号的哲学家先拿右边筷子</li></ul></li><li>理发师问题</li><li>信号量机制问题的解题步骤分析<ul><li>关系分析</li><li>确定临界资源</li><li>整理思路</li></ul></li><li>实现同步互斥的 P、V 操作必须成对出现，先进行 P 操作进入临界区，后进行 V 操作退出临界区</li><li>P、V操作要分别紧靠临界区的头尾部</li><li>通常用于互斥的信号量初值设为 1</li></ul><h4 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h4><ul><li>管程定义了一个数据结构和能为并发进程所执行的一组操作<ul><li>局部于管程的数据只能被局部于管程内的过程所访问</li><li>一个进程只有通过调用管程内的过程才能进入管程访问共享数据</li><li>每次仅允许一个进程在管程内执行某个内部过程，即进程互斥地通过调用内部过程进入管程</li></ul></li><li>管程的互斥访问完全由编译程序在编译时自动添加</li><li>为实现进程间的同步，管程还必须包含若干用于同步的设施<ul><li>局限于管程并仅能从管程内进行访问的若干变量，用于区别各种不同的等待原因</li><li>在条件变量上进行操作的两个函数过程，wait 和 signal</li></ul></li></ul><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><ul><li>死锁的概念<ul><li>参死锁的进程至少有两个</li><li>每个参与死锁的进程均等待资源</li><li>参与死锁的进程中至少有两个进程占有资源</li><li>死锁进程是系统中当前进程集合的一个子集</li></ul></li><li>死锁产生的原因是竞争资源<ul><li>一个资源是否属于可剥夺资源，完全取决于资源本身的性质</li></ul></li><li>死锁产生的必要条件<ul><li>互斥条件</li><li>不剥夺条件</li><li>请求于保持条件：可采用预先静态分配方法</li><li>环路等待条件：可采用有序资源分配法</li></ul></li><li>处理死锁的方法：鸵鸟算法、预防死锁、避免死锁、检测及解除死锁（被动）<ul><li>死锁预防对系统加的限制条件通常很严格，对系统的并发性会产生很大的副作用</li><li>死锁避免往往在资源被分配出去之前，要计算分配之后系统是否安全</li></ul></li><li>死锁的避免<ul><li>系统在进行资源分配之前，先计算资源分配的安全性（安全序列）</li><li>并非所有不安全状态都是死锁状态，死锁是不安全状态的真子集</li><li>银行家算法</li></ul></li><li>死锁的检测和解除<ul><li>系统资源分配图（system resource allocation graph）可定义为一个二元组</li><li><code>SRAG = (V,E)</code></li><li>死锁定理：不同简化顺序将得到相同的不可简化图。系统状态 S 为死锁状态的条件是当且仅当 S 状态的资源分配图是不可完全简化的</li><li>死锁检测算法：available、allocation、request、临时变量（work与finish）</li><li>死锁解除：剥夺资源，撤销进程，进程回退</li></ul></li><li>进程与饿死<ul><li>当等待时间给进程推进和响应带来明显影响时，发生进程饥饿</li><li>当饥饿到一定程度，进程所赋予的任务即使完成也不再具有实际意义时，进程被饿死</li><li>活锁：在忙时等待条件下发生的饥饿</li><li>饥饿和饿死与资源分配策略有关，因而可从公平性方面考虑防止饥饿与饿死</li></ul></li></ul><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><h4 id="内存管理概述"><a href="#内存管理概述" class="headerlink" title="内存管理概述"></a>内存管理概述</h4><ul><li>内存管理的功能是为多道程序的运行提供良好的环境<ul><li>内存的分配和回收：记住内存空间的使用情况、实施内存的分配、回收系统或用户释放的内存空间</li><li>地址变换：将逻辑地址转换为物理地址</li><li>扩充内存：虚拟存储技术或其他自动覆盖技术</li><li>存储保护：由硬件和软件配合完成</li></ul></li><li>应用程序的编译、链接与装入<ol><li>经过编译程序将源代码编译为若干个目标模块</li><li>通过链接程序将编译好的目标模块以及所需的库函数链接在一起，形成完整的装入模块</li><li>通过装入程序将这些装入模块装入内存并执行</li></ol></li><li>源程序（名地址）-&gt; 目标程序（逻辑地址）-&gt; 可执行程序（物理地址）<ul><li>对程序设计者来说，数据的存放地址由数据名称决定，称为名地址或符号名地址，即为源程序的地址空间</li><li>当链接程序将多个模块链接为装入模块时，链接程序会按照各个模块的相对地址，将其地址构成统一的从0号单元开始编址的相对地址</li><li>当装入程序将可执行代码装入内存时，程序的逻辑地址与程序存在内存的实际地址，通常不同这就需要通过地址转换将逻辑地址转为物理地址，这个过程叫重定位</li></ul></li><li>程序链接的 3 种方式<ul><li>静态链接：在程序运行之前，先将各目标模块及所需的库函数连接成一个完整的可执行程序（装入模块），之后不再拆开</li><li>装入时动态链接：将各目标模块装入内存时，边装入边链接的链接方式</li><li>运行时动态链接：在程序执行中需要该目标模块时，才对它进行链接。其优点是物理地址便于修改和更新，便于实现对目标模块的共享</li></ul></li><li>程序装入的 3 种方式<ul><li>绝对装入：在编译时就知道程序将要驻留在内存的物理地址，编译程序产生含有物理地址的目标代码</li><li>可重定位装入：根据内存当前情况将装入模块装入到内存的适当位置，地址变换通常在装入时一次完成，容易实现，无需增加硬件地址变换机构</li><li>动态运行装入：允许程序运行时在内存中移动位置，在程序执行过程中，每当访问到相应指令或数据时，才将要访问的程序或数据的相对地址转换为物理地址，可以将程序分配到不连续的存储区中</li></ul></li><li>在重定位中通常会设一个重定位寄存器，用来存放进程分配的内存空间的地址（基址寄存器）<ul><li>当 CPU 需要访问内存时，将逻辑地址转换为物理地址</li><li>物理地址 = 基址计算器内容 + 逻辑地址</li></ul></li><li>逻辑地址和物理地址<ul><li>逻辑地址是指由程序产生的与段相关的偏移部分地址（与页无关，因为只有段对用户可见）</li><li>物理地址是指出现在 CPU 外部地址总线上的寻址物理内存的地址信号，是逻辑地址变换后的最终结果地址，物理地址空间是指内存中物理地址单元的集合</li><li>从逻辑地址到物理地址的转换过程由硬件自动完成，这个转换过程叫做地址重定位</li></ul></li><li>内存保护<ol><li>界限寄存器方法<ul><li>上、下界寄存器方法：分别存放作业的结束地址和开始地址</li><li>基址和限长寄存器方法</li></ul></li><li>存储保护键方法：给每个存储块分配一个单独的保护键</li></ol></li></ul><h4 id="交换与覆盖"><a href="#交换与覆盖" class="headerlink" title="交换与覆盖"></a>交换与覆盖</h4><ul><li>覆盖技术，就是把一个大的程序划分为一系列覆盖，每个覆盖是一个相对独立的程序单位<ul><li>把程序执行时并不要求同时装入内存的复盖组成一组，称为覆盖段</li><li>将这个覆盖段分配到同一存储区域，这个存储区域称为覆盖区</li><li>覆盖区与覆盖段一一对应</li><li>覆盖技术只能覆盖与覆盖程序段无关的程序段</li><li>为了使一个覆盖区能被相应覆盖段中每个覆盖在不同时刻共享，其大小应由覆盖段中最大覆盖来确定</li><li>覆盖技术的特点是打破了必须将一个进程的全部信息装入主存后才能运行的限制，但当同时执行程序的代码量超过主存时，程序仍然不能运行</li></ul></li><li>交换技术就是把暂时不用的某个程序及数据部分从内存移到外存中，以便腾出必要的内存空间，或把指定的程序或数据从外存读到相应的内存中，并将控制权转让给他，让其在系统上运行的一种内存扩充技术<ul><li>处理器三级调度中的中级调度就是采用了交换技术</li><li>与覆盖技术相比，交换技术不要求程序员给出程序段之间的覆盖结构，且交换主要是在进程或作业之间进行，而覆盖主要在同一个作业或进程中进行</li><li>交换进程由换出和换入两个过程组成</li><li>交换技术的特点是打破了一个程序一旦进入主存便一直运行到结束的限制，但运行的进程大小仍然受实际主存的限制</li><li>交换需要备份存储</li><li>影响交换时间的因素主要是转移时间</li><li>如果换出进程，必须确保该进程完全空闲</li><li>交换空间通常作为磁盘的一整块，且独立于文件系统</li><li>交换通常在有许多进程运行，且内存空间紧张时开始启动，而在系统负荷减轻时暂停</li></ul></li></ul><h4 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h4><ul><li>内部碎片和外部碎片<ul><li>内部碎片是指已经分配给作业，但不能被利用的内部空间</li><li>外部碎片是指系统中还没有分配给作业，但由于碎片太小而无法分配给申请内存空间的新进程的存储块</li></ul></li><li>单一连续分配：将内存分为两个连续存储区域，其中一个存储区域固定的分配给操作系统使用，通常放在内存低地址部分，另一个存储区域给用户作业使用<ul><li>通常用户作业只占用所有分配空间的一部分，剩下一部分实际上浪费掉了</li><li>单一连续分配方式采用静态分配，适合单道程序，可采用覆盖技术</li><li>作业一旦进入内存，就要等到其结束后才能释放内存，因此这种分配方式不支持虚拟存储器的实现，无法实现多道程序共享主存</li><li>单一连续分配会产生内部碎片</li></ul></li><li>固定分区分配：将内存空间划分为若干个固定大小的分区，每个分区中可以装入一道程序<ul><li>分区的大小可以不等，但事先必须确定，在运行时不能改变</li><li>当有空闲分区时，便从后备队列中选择一个适当大小的作业装入运行</li><li>固定分区分配中程序通常采用静态重定位方式装入内存</li><li>固定分区分配的优点是可用于多道程序系统最简单的存储分配，缺点是不能实现多进程共享一个主存区，利用率较低，会产生内部碎片</li></ul></li><li>动态分区分配：作业进入主存时，根据作业的大小动态的建立分区，并使分区的大小正好满足作业的需要，因此系统中分区的大小是可变的，分区数目也是可变的<ul><li>空闲分区表、空闲分区链</li><li>首次适应算法（FF）、下次适应算法（NF）、最佳适应算法（BF）、最差适应算法（WF）</li><li>分区回收</li><li>分区分配的动态管理：拼接技术、动态重定位分区分配技术</li></ul></li><li>动态分区分配的优缺点<ul><li>优点：实现了多道程序共用主存、管理方案相对简单、实现存储保护的手段比较简单</li><li>缺点：主存利用不够充分，存在外部碎片、无法实现多进程共享存储器信息、无法实现主存的扩充，进程地址空间受实际存储空间的限制</li></ul></li></ul><h4 id="非连续分配管理方式"><a href="#非连续分配管理方式" class="headerlink" title="非连续分配管理方式"></a>非连续分配管理方式</h4><ul><li>非连续分配允许一个程序分散地装入到不相邻的内存分区中</li><li>非连续分配管理方式根据分区大小是否固定为分页存储管理方式和分段存储管理方式</li><li>分页存储管理方式根据运行作业时是否需要把作业的所有页都装入内存才能运行而分为基本分页存储管理方式和请求分页存储管理方式</li><li>基本分页存储管理方式（物理单位）<ul><li>分页原理：用户作业的地址空间被划分成若干个大小相等的区域，称为页或页面</li><li>将主存的存储空间分成与页面大小相等的区域，称为块或物理块</li><li>在为作业分配存储空间时，总是以块为单位来分配，可以将作业中的任意一页放到主存的任意一块中</li><li>主存中与页面大小相等的物理块也可称为页框</li><li>为了将逻辑地址上连续的页号映射到物理内存中后成为离散分布的多个物理块，需要将每个页面和每个物理块一一对应，这种映射关系体现在页表中</li><li>每个页表项由页号和块号组成</li><li>基本地址变换机构：页表寄存器（PTR）</li><li>具有快表（TLB）的地址的地址变换机构：具有并行查找功能的高度缓冲存储器</li><li>两级页表和多级页表</li></ul></li><li>基本分页存储管理方式优缺点<ul><li>优点：内存利用率高、实现了离散分配、便于存储访问控制、无外部碎片</li><li>缺点：需要硬件支持（快表）、内存访问效率下降、共享困难、内部碎片</li></ul></li><li>基本分段存储管理方式（逻辑单位）<ul><li>逻辑地址结构由段号 S 和段内位移 W（段内偏移量）组成</li><li>段的长度不定</li><li>作业空间地址是二维的</li><li>段表及地址变换过程</li></ul></li><li>基本分段存储管理方式优缺点<ul><li>优点：便于程序模块化处理和处理变换的数据结构、便于动态链接和共享、无内部碎片</li><li>缺点：与分页类似，需要硬件支持、为满足分段的动态增长和减少外部碎片，要采用拼接手段、分段的最大尺寸受到主存可用空间的限制、有外部碎片</li></ul></li></ul><h4 id="虚拟内存的基本概念"><a href="#虚拟内存的基本概念" class="headerlink" title="虚拟内存的基本概念"></a>虚拟内存的基本概念</h4><ul><li>在真实的操作系统中，通常采用段页式存储管理，段面向用户，页面向硬件</li><li><p>虚拟内存解决的问题</p><ul><li>一次性：作业必须一次性全部装入内存后才能开始运行。这会造成两个问题：①作业很大时，不能全部装入内存，导致大作业无法运行；②当大量作业要求运行时，由于内存无法容纳所有作业，因此只有少量作业能运行，导致多道程序并发度下降</li><li>驻留性：一旦作业被装入内存，就会一直驻留在内存中，直至作业运行结束。事实上，在一个时间段内，只需要访问作业的一小部分数据即可正常运行，这就导致了内存中会驻留大量的、暂时用不到的数据，浪费了宝贵的内存资源。</li></ul></li><li><p>虚拟内存的实现：</p><ul><li>基于局部性原理，在程序装入时，可以将程序中很快会用到的部分装入内存，暂时用不到的部分留在外存，就可以让程序开始执行</li><li>在程序执行过程中，当所访问的信息不在内存时，由操作系统负责将所需信息从外存调入内存，然后继续执行程序</li><li>若内存空间不够，由操作系统负责将内存中暂时用不到的信息换出到外存。在操作系统的管理下，在用户看来似乎有一个比实际内存大得多的内存，这就是虚拟内存。</li></ul></li></ul><h4 id="请求分页管理"><a href="#请求分页管理" class="headerlink" title="请求分页管理"></a>请求分页管理</h4><ul><li>请求分页管理：在程序执行过程中，当所访问的信息不在内存时，由操作系统负责将所需信息从外存调入内存，然后继续执行程序。若内存空间不够，由操作系统负责将内存中暂时用不到的信息换出到外存</li><li>缺页中断： 在请求分页系统中，每当要访问的页面不在内存时，便产生一个缺页中断，然后由操作系统的缺页中断处理程序处理中断</li><li>缺页的进程阻塞，放入阻塞队列，调页完成后再将其唤醒，放回就绪队列。如果内存中有空闲块，则为进程分配一个空闲块，将所缺页面装入该块，并修改页表中相应的页表项。如果内存中没有空闲块，则由页面置换算法选择一个页面淘汰，同时要注意，若某个页面被换出外存，则快表中的相应表项也要删除，否则可能访问错误的页面</li><li>理解缺页，缺页就像货架上缺少了商品，需要从仓库里调取商品，就先暂停这个货架的销售，等商品调取完毕再重新出售。</li></ul><h4 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h4><ul><li>置换算法的评价指标是：缺页的次数，某种算法让缺页次数最低，调度效率最高，那就是最优的算法</li><li><p>最佳置换算法：每次淘汰的页面都是以后永久不用或最长时间不使用的页面，保证最低的缺页率。显然，这种需要预测未来的算法不可能实现。</p></li><li><p>先进先出算法FIFO：缺页时，淘汰最早进入的页面。算法简单，但局限性也明显，例如某些经常使用的页面一直被换进换出，和使用频率低的页面有相同的被换出的机会。</p></li><li><p>最近最久未使用置换算法LRU：每次淘汰的页面都是最近最久未使用的页面。需要在页面中添加一个记录项，记录上次被访问以来经历的时间t，当需要淘汰页面时，选择时间t最大的淘汰，也就是最久未使用的淘汰。算法设计虽好，但开销很大，实现困难。</p></li><li><p>时钟置换算法：时钟置换算法也可以称为最近未使用算法。是一种性能和开销均衡的算法。</p></li><li><p>简单的时钟算法实现方法：为每个页面设置一个访问位，再将内存中的页面都通过链接指针链接成一个循环队列。当某页被访问时，其访问位置为1。当需要淘汰一个页面时，只需检查页的访问位。如果是0，就选择该页换出;如果是1，则将它置为0，暂不换出，继续检查下一个页面，若第一轮扫描中所有页面都是1，则将这些页面的访问位依次置为0后，再进行第二轮扫描（第二轮扫描中一定会有访问位为0的页面，因此简单的CLOCK算法选择一个淘汰页面最多会经过两轮扫描)</p></li></ul><h3 id="I-O原理"><a href="#I-O原理" class="headerlink" title="I/O原理"></a>I/O原理</h3><h4 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h4><ul><li><p>文件可以分为两类：</p><ul><li><p>无结构文件：文件内部数据就是一系列二进制流或字符流。最典型的就是txt文件。</p></li><li><p>有结构文件：由一组相似的记录组成，又称记录式文件。典型的excel表、数据库表等。</p></li></ul></li><li><p>有结构文件的逻辑结构又分顺序文件、索引文件、索引顺序文件，注意逻辑结构是展示给用户的，是文件的组织形式，例如是一张顺序存储的excel表格，还是一张excel索引表加上excel顺序表，还是多级索引加顺序，而不是在计算机上的存储方式。</p></li><li><p>顺序文件：文件中的记录一个接一个地顺序排列（逻辑上），记录可以是定长的或可变长的。各个记录在物理上可以顺序存储或链式存储。</p></li><li><p>顺序存储即逻辑相邻的文件物理上也相邻，链式存储即在末尾添加新的文件。</p></li><li><p>记录的类型又分为可变长和不可变长记录</p></li></ul><ul><li>索引顺序文件：索引顺序文件是索引文件和顺序文件思想的结合。索引顺序文件中，同样会为文件建立一张索引表，但不同的是：并不是每个记录对应一个索引表项，而是一组记录对应一个索引表项，索引表项的地址直接指向顺序文件所在区域，再顺序查找到所需的文件，从而节省了很大的空间。(例如我们可以通过An Qi找到An Kang、An Jie等，而不用在索引表中存放这么多信息。另外索引项之间不需要有按照逻辑关系排列)</li><li>多级索引顺序文件：在索引顺序文件的基础上再增加层次深度，可以减少查找的次数(顺序查找范围缩小了)</li></ul><h4 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h4><ul><li>文件目录可以分为：单级目录结构、两级目录结构、多级目录结构(树形目录结构)</li><li><p>单极目录结构：顾名思义，所有的文件放在一个目录中，类似于一个仓库把所有文件不加整理的堆放在一起，显然效率会很低下</p></li><li><p>两级目录结构:主要分为主文件目录和用户文件目录。类似于仓库中加了几个员工货架，不同员工的货物放在不同货架，但在一个货架中文件还是采用堆砌式的存储。</p></li><li><p>多级目录结构，又称树形目录结构:我们当前主流操作系统都是多级目录结构，简而言之就是文件目录可以一级一级的延申，从而文件更有条理。</p></li><li><p>FCB(文件控制块)，首先来看一张图，如果文件目录都以这种表的形式进行信息查找，会大大降低运行效率，增加系统负担。</p></li><li><p>提出对策，其实在查找各级目录的过程中，只需要用到文件名这个信息，可以考虑让目录表瘦身来提升效率。</p></li><li><p>索引结点指针指向索引结点(文件名之外的其他信息就存放在结点中，从而按需读取，提升效率)</p></li><li><p>每一个文件都有一个FCB，记录了文件的地址、信息、权限等等属性</p></li></ul><h4 id="文件的物理结构"><a href="#文件的物理结构" class="headerlink" title="文件的物理结构"></a>文件的物理结构</h4><ul><li><p>最重要的三种物理结构：顺序、链接、索引，其中最主要使用的是索引文件，可以随机访问，同时增删效率高</p></li><li><p>文件的物理结构是文件分配在计算机存储上的分配方式。分配的基本单位是 物理块,可以构想一下，一个大文件，如一首音乐23MB，难道直接一整个塞入硬盘吗？显然可能会出现一些问题，硬盘的空间也需要不断调整，就像内存分页一样，硬盘也被分为小的物理块号方便进行调度。</p></li><li><p>连续分配</p><ul><li>优点：支持顺序访问和直接访问（即随机访问）；连续分配的文件在顺序访问时速度最快</li><li>缺点：不方便文件拓展；存储空间利用率低，会产生磁盘碎片</li></ul></li><li><p>链式分配</p><ul><li>隐式：采用链式分配（隐式链接）方式的文件，只支持顺序访问，不支持随机访问，查找效率低。另外，指向下一个盘块的指针也需要耗费少量的存储空间。</li></ul></li></ul><ul><li>显式：直观理解就是在隐式的基础上添加了一张表，从表上能看出不同物理块号的下一块的地址</li><li>结论：采用链式分配（显式链接）方式的文件，支持顺序访问，也支持随机访问（想访问i 号逻辑块时，并不需要依次访问之前的0 ~ i-1号逻辑块），由于块号转换的过程不需要访问磁盘，因此相比于隐式链接来说，访问速度快很多</li><li>显式链接也不会产生外部碎片，也可以很方便地对文件进行拓展。</li></ul><ul><li><p>索引分配</p><ul><li>索引就是文件分成不同的物理块存入磁盘，对每个物理块都有一个索引与之对应，需要读写时就通过索引表查询其物理地址进行相关操作</li></ul></li></ul><h4 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h4><ul><li><p>磁道：每一圈就是一个磁道，最内侧磁道面积最小，所以数据密度最大</p></li><li><p>扇区：磁道被划分为小的磁盘块</p></li><li><p>一个盘片可能有两个盘面;每个盘面对应一个磁头；所有磁头连在一起，共进退；每个盘面的相对位置的磁道组成柱面</p></li></ul><h4 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h4><ul><li><p>磁盘调度算法要解决的核心问题就是寻道时间，即移动磁头的时间，而其他的启动时间、传输时间都很迅速，不是最主要的时间消耗</p></li><li><p>先来先服务FCFS</p><ul><li>根据进程请求房屋内磁盘的现后顺序进行调度。符合惯性思维，但在很多时候，效果很差。</li></ul></li><li><p>最短寻找时间优先(学过数据结构与算法的话，核心思想就是贪心算法)，该算法会优先处理与当前磁头最近的磁道的需求</p><ul><li>那么很可能磁头就会如图所示的移动，也会存在饥饿问题：磁头只在一个小区域移动，而不能满足需要远距离移动的需求。例如不断有18-&gt;38，38-&gt;18的需求，那磁头就不会执行18-&gt;150的请求，从而产生饥饿</li></ul></li><li>扫描算法<ul><li>核心思想，只有磁头移动到最外侧磁道的时候才能往内侧移动，移动到最内侧的时候才能向外侧移动。这样就不会产生饥饿问题。</li></ul></li></ul><h4 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h4><ul><li>文件共享分两种链接方式，硬链接和软连接<ul><li>硬链接就是在另一个用户的目录中，索引结点指针直接指向了发送分享的用户的索引节点，从而实现了共享，count的数量代表文件正在被几个用户使用。</li><li>软连接，类似于快捷方式，记录了原文件的路径，然后层层查找。</li></ul></li></ul><h4 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a>文件保护</h4><ul><li><p>文件保护有三种方式口令、加密、访问控制</p><ul><li>口令：为文件设置一串口令，就像打开手机需要先解锁。</li></ul></li></ul><ul><li><p>加密：使用加密方法对文件加密，只有拥有正确的解密方法才能解密，有点像不同军队之间进行通信，要实现进行加密，要是想窥探敌情，就要对密文进行破解。</p></li><li><p>访问控制：每个文件的FCB或者索引结点中设置访问控制表，如windows中，设置了很多的访问权限，例如</p></li></ul><h4 id="I-O设备"><a href="#I-O设备" class="headerlink" title="I/O设备"></a>I/O设备</h4><ul><li>I/O就是输入输出，I/O设备就是可以将数据输入到计算机或将计算机数据输出的设备，常见的：鼠标、键盘、音响、显示器、打印机、话筒、摄像头等等。</li><li><p>I/O控制器:CPU无法直接控制I/O设备，需要一个电子部件去充当中间人，这个部件就是I/O控制器，CPU控制I/O控制器，I/O控制器控制I/O设备。</p></li><li><p>假如我们的CPU能够控制I/O设备，那不同的厂商、不同型号的设备，都要对应进行编码，显然是不切实际的，所以CPU要采用通用调度方式调度I/O设备从而需要I/O控制器。</p></li><li><p>Java语言中，调用System.out.Println()，这本身并不能在显示器上打印，而需要通过操作系统调用write方法，接着调用字符设备接口，命令显示器写</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学与技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>计算机组成原理是计算机专业本科教学中的重要课程，它可以帮助我们系统地理解计算机硬件系统的组织结构和工作原理、掌握计算机硬件系统的基本分析与设计方法以及建立计算机系统的整体概念，为进一步学习计算机设计实践课程、培养系统开发、调试以及设计创新能力奠定良好的基础。计组是考研的最重最难点，在408计算机学科专业基础综合考试中占有45分。</p></blockquote><span id="more"></span><h3 id="计算机系统概述"><a href="#计算机系统概述" class="headerlink" title="计算机系统概述"></a>计算机系统概述</h3><h4 id="计算机系统的多层次结构"><a href="#计算机系统的多层次结构" class="headerlink" title="计算机系统的多层次结构"></a>计算机系统的多层次结构</h4><ul><li>硬件：<ol><li>微程序机器层M0（微指令系统），由硬件直接执行微指令</li><li>传统机器M1（机器语言机器），用微程序解释机器指令</li></ol></li><li>软件：<ol><li>虚拟机器M2（操作系统机器），用机器语言解释操作系统</li><li>汇编语言M3（汇编语言机器），用汇编程序翻译成机器语言程序</li><li>虚拟机器M4（高级语言机器），用编译程序翻译成汇编语言程序</li></ol></li></ul><h4 id="冯·诺依曼机"><a href="#冯·诺依曼机" class="headerlink" title="冯·诺依曼机"></a>冯·诺依曼机</h4><ul><li>基本工作方式：控制流驱动方式</li><li>最根本的特征：采用存储程序原理，即按地址访问并顺序执行指令</li><li>指令和数据均以二进制形式存放在存储器中</li><li>CPU区分依据是：指令周期的不同阶段</li><li>冯·诺依曼计算机：以运算器为中心</li><li>现代的计算器：以存储器为中心</li><li>5大部件：存储器、运算器、控制器、输入设备、输出设备（适配器）</li><li><p>三大部分：CPU（运算器、控制器）、I/O设备（输入设备、输出设备）、主存储器</p></li><li><p>哈佛结构：将指令和数据放在两个独立的存储器，允许在一个机器周期内同时获得指令和操作数，提高了执行速度</p></li></ul><h4 id="计算机性能指标"><a href="#计算机性能指标" class="headerlink" title="计算机性能指标"></a>计算机性能指标</h4><ul><li><p>机器字长：</p><ul><li>CPU一次能处理数据的位数，通常与CPU的寄存器位数有关，字长越长，精度越高</li><li>机器的字长也会影响机器的运算速度：字长较短，运算位数多，可能需要多次运算才能完成</li><li>对硬件造价有影响：直接影响ALU、数据总线以及存储字长的位数</li></ul></li><li><p>存储容量：主存容量、辅存容量</p></li></ul><ul><li><p>运算速度：</p><ul><li>吞吐量和响应时间</li><li>主频和CPU时钟周期</li><li>CPI：执行一条指令所需的时钟周期数</li><li>CPU执行时间：指运行一个程序所花费的时间。取决于：主频、CPI、指令条数</li><li>MIPS：每秒执行多少百万条指令</li><li>MFLOPS：每秒执行多少百万次浮点运算（标志系统性能最有用参数）</li><li>GFLOPS：每秒执行多少十亿次浮点运算</li><li>TFLOPS：每秒执行多少万亿次浮点运算</li></ul></li></ul><h3 id="数据的表示和运算"><a href="#数据的表示和运算" class="headerlink" title="数据的表示和运算"></a>数据的表示和运算</h3><h4 id="汉字的编码"><a href="#汉字的编码" class="headerlink" title="汉字的编码"></a>汉字的编码</h4><ul><li>输入码（外码）：区位码、国际码、拼音码、电报码、表形码等</li><li>内码：0、1（机器码）</li><li>输出码：汉字字形码</li><li>汉字编码包括汉字的输入编码、汉字内码、汉字字形。用两个字节表示一个汉字，每个字节用七位码。区位码是4位十进制数，前2位是区码，后2位是位码</li><li>国标码是将十进制的区位码转换为十六进制后，再在每个字节上加上20H。为了方便计算机区分中文字符和英文字符，将国标码两个字节的最高位都改为“1”，这就是汉字内码（十六进制）</li></ul><h4 id="字符串的存放"><a href="#字符串的存放" class="headerlink" title="字符串的存放"></a>字符串的存放</h4><ul><li>小端模式：按先存储低位字节、后存储高位字节的顺序存放字符串的内容</li><li>大端模式：按先存储高位字节、后存储低位字节的顺序存放字符串的内容</li></ul><h4 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h4><ul><li>奇偶校验码：只能检出一位错误，不能确定出错的位置；只能检验处奇数位错误，不能检测出偶数位错误。<ul><li>奇校验码：整个校验码中“1”的个数为奇数。</li><li>偶校验码：整个校验码中“1”的个数为偶数。</li></ul></li><li>海明（汉明）检验码：可检出错位位置</li><li>循环冗余校验（CRC）码：可检出错误位置（通过除法运算）</li></ul><h4 id="原码、反码、补码、移码"><a href="#原码、反码、补码、移码" class="headerlink" title="原码、反码、补码、移码"></a>原码、反码、补码、移码</h4><ul><li>原码、补码、反码三种机器数的最高位均是符号位</li><li>当真值为正时，原码、补码、反码的表示形式均相同，即符号位用“0”表示，数值部分与真值相同</li><li>当真值为负时，原码、补码、反码的表示形式不同，但其符号位都用“1”表示，而数值部分补码是原码的“求反加1”，反码是原码的“每位求反”。</li><li>同一个真值的移码和补码仅差一个符号位。</li><li>4、不同机器数表示±0时，其形式不同。</li><li>[+0]原≠[-0]原， [+0]反≠[-0]反，[+0]补=[-0]补，[+0]移=[-0]移</li><li>当机器字长确定后，补码比原码、反码能多表示一个负数</li><li>移码只能表示整数，用它表示浮点数的阶码时，能方便地判断阶码的大小</li></ul><h4 id="补码定点数的加-减运算"><a href="#补码定点数的加-减运算" class="headerlink" title="补码定点数的加/减运算"></a>补码定点数的加/减运算</h4><ul><li>基本公式：（将符号位和数值部分一起参加运算，并且将符号位产生的进位自然丢掉即可）</li><li>加法：[A]补+[B]补=[A+B]补</li><li>减法：[A-B]补=[A]补+[-B]补（[-B]补由[B]补连同符号位在内，每位取反，末尾加1）</li></ul><h4 id="溢出判断"><a href="#溢出判断" class="headerlink" title="溢出判断"></a>溢出判断</h4><ul><li>用一位符号判断溢出：实际参加操作的两个数符号相同，结果又与原操作数的符号不同，即为溢出</li><li>用两位符号位判断溢出：当2位符号位不同时，表示溢出，否则，无溢出。不论是否发生溢出，高位（第1位）符号永远代表真正的符号。（变形补码，运算时多一位）</li><li>01正溢出（上溢）；10负溢出（下溢）</li><li>采用一位符号位根据数据位的进位情况判断溢出。如果符号位的进位与最高数位的进位不同，则表示结果溢出</li></ul><h4 id="浮点数的加-减运算"><a href="#浮点数的加-减运算" class="headerlink" title="浮点数的加/减运算"></a>浮点数的加/减运算</h4><ul><li>对阶：两个数的小数点位置对齐（使阶码相等），两个数的阶码相减求阶差，使小阶的尾数向右移位，每右移一位，阶码加1</li><li>尾数求和：将对阶后的两个尾数按定点加（减）运算规则进行运算</li><li>规格化：补码规格化形式为[S]补 00.1××××；[S]补 11.0××××<ul><li>左规：尾数出现00.0××××或11.1××××时，需左规。尾数左移一位，阶码减1</li><li>右规：尾数出现01.××××或10.××××时，表示尾数溢出，但在浮点运算中不算溢出，可通过右规处理。尾数右移一位，阶码加1</li></ul></li><li>舍入：在对阶和右规的过程中，可能会将尾数的低位丢失，引起误差，影响精度，用舍入法来提高尾数的精度<ul><li>“0舍1入”法：被移去的最高位数值位为0，则舍去；被移去的最高数值位为1，则在尾数的末位加1。又溢出时，再右规……</li><li>“恒置1”法：不论丢掉的最高数位是“1”还是“0”，都使尾数末位恒置“1”。</li><li>两种方法同样都有使尾数变大和变小两种可能</li></ul></li><li>溢出判断（是否溢出由阶码的符号决定）<ul><li>上溢：阶码[j]补=01，×××，作溢出处理</li><li>下溢：阶码[j]补=10，×××，按机器零处理</li></ul></li></ul><h4 id="浮点数的表示范围"><a href="#浮点数的表示范围" class="headerlink" title="浮点数的表示范围"></a>浮点数的表示范围</h4><ul><li><p>上溢：当浮点数阶码大于最大阶码时，上溢，机器停止运算，进行中断溢出处理。</p></li><li><p>下溢：当浮点数阶码小于最小阶码时，下溢，溢出的数绝对值很小，通常将位数各位强制为0，按机器零处理，机器可以继续运行。</p></li></ul><h4 id="8位二进制整数范围"><a href="#8位二进制整数范围" class="headerlink" title="8位二进制整数范围"></a>8位二进制整数范围</h4><ul><li>原码、反码：-127—+127</li><li>补码、移码：-128—+127</li></ul><h4 id="标准IEEE-754标准"><a href="#标准IEEE-754标准" class="headerlink" title="标准IEEE 754标准"></a>标准IEEE 754标准</h4><ul><li>现代计算机中，浮点数一般采用IEEE制定的国际标准：</li><li>常用的浮点数有三种：阶码用移码表示</li><li><p>短实数、长实数、临时实数的偏移量用十六进制数表示分别为7FH（127）、3FFH、3FFFH</p></li><li><p>尾数部分通常是用原码、规格化表示，即非“0”的有效位最高位总是“1”，但在IEEE标准中，有效位呈如下形式：1▲ff…ffff</p></li><li>其中▲表示假想的二进制小数点。在实际表示中，对短实数和长实数，这个整数位的1省略，称隐藏位；对于临时实数不采用隐藏位方案</li></ul><h3 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h3><h4 id="存储器的层次化结构"><a href="#存储器的层次化结构" class="headerlink" title="存储器的层次化结构"></a>存储器的层次化结构</h4><ul><li>存储器主要性能指标：速度、容量、每位价格（位价）</li><li><p>一般来说，速度越高，位价越高；容量越大，位价越低；容量越大，速度越低。</p></li><li><p>层次结构主要体现在缓存-主存和主存-辅存这两个层次上。</p><ul><li>缓存-主存：主要解决CPU和主存速度不匹配问题（由硬件自动完成）数据调动对任何程序员透明。</li><li>主存-辅存：主要解决存储系统的容量问题（由硬件和操作系统共同完成）数据调动对应用程序员透明</li></ul></li></ul><h4 id="动态RAM的刷新"><a href="#动态RAM的刷新" class="headerlink" title="动态RAM的刷新"></a>动态RAM的刷新</h4><ul><li>一般取2ms，对动态RAM的全部基本单元电路必作一次刷新，称为刷新周期，又称再生周期。刷新的单位是行，仅需要行地址。</li><li>集中刷新：在规定的一个刷新周期内，对全部存储单元集中一段时间逐行进行刷新，此刻必须停止读/写操作，称“死时间”或“死区”。（全部一起刷）</li><li>分散刷新：对每行存储单元的刷新分到每个存取周期内完成。优点：没有死区。缺点：存取周期加长，整个系统速度降低。（一个个刷）</li><li>异步刷新：是前两种方式的结合，既缩短“死时间”，又充分利用最大刷新时间间隔为2ms的特点。（一行行刷）</li><li>一行行刷的平均刷新时间<ul><li>行数 = 芯片容量 / 每行存储单元个数</li><li>平均刷新时间 = 间隔最长 / 行数</li></ul></li></ul><h5 id="存储容量的扩展"><a href="#存储容量的扩展" class="headerlink" title="存储容量的扩展"></a>存储容量的扩展</h5><ul><li>位扩展<ul><li>增加存储字长</li><li>例如：2片1K4位的存储芯片可组成1K8位的存储器。</li><li>注意：其中一片的数据线作为高4位D7-D4，另一片的数据线作为低4位D3-D0。</li></ul></li><li>字扩展<ul><li>增加存储器字的数量</li><li>例如：2片1K8位的存储芯片可组成一个2K8位的存储器。</li><li>注意：两片都连地址线A0-A9。（从低位连起）</li></ul></li><li>字、位扩展<ul><li>既增加存储字的数量又增加存储字长。</li></ul></li></ul><h4 id="双口RAM和多模块存储器"><a href="#双口RAM和多模块存储器" class="headerlink" title="双口RAM和多模块存储器"></a>双口RAM和多模块存储器</h4><ul><li>为了提高CPU访问存储器的速度，可以采用双端口存储器（空间并行）、多模块存储器（时间并行）等技术，都属于并行技术。</li></ul><h4 id="多模块存储器"><a href="#多模块存储器" class="headerlink" title="多模块存储器"></a>多模块存储器</h4><ul><li>为了提高访存速度（CPU速度比存储器快，同时从存储器中取出n条指令，可以充分利用CPU资源，提高运行速度）</li><li>单体多字系统<ul><li>在一个存取周期内，从同一地址取出n条指令，然后逐条将指令送至CPU执行，即每隔1/n存取周期，主存向CPU送一条指令，增大了存储器的带宽，提高了存储器的工作速度。</li><li>例如：从同一地址取出4条指令，为单体四字结构，每字W位。按地址在一个存取周期内可读出4*W位的指令或数据，使主存带宽提高到4倍。</li><li>缺点：指令和数据在主存内必须是连续存放的，一旦遇到转移指令，或者操作数不能连续存放，这种方法的效果就不明显。</li></ul></li><li>多体并行系统</li><li>采用多提模块组成的存储器。每个模块可以并行工作，也可以交叉工作。<ul><li>低位交叉编址<ul><li>程序连续存放在相邻体中（交叉存储）。低位地址表示体号，高位地址表示体内地址。<br>地址的低n为片选。</li><li>优点：相邻地址单元的数据放在不同组，各组可以并行工作，能较好提高存储器的带宽。</li><li>缺点：某一组出现故障，会影响整个存储器的正常工作。</li></ul></li><li>高位交叉编址<ul><li>按体内地址顺序存放（顺序存储）。高位地址表示体号，低位地址表示体内地址。</li><li>地址的高n位片选。</li><li>优点： 某一组的故障不影响其他组，且容易通过添加模块来扩充容量。</li><li>缺点：相邻地址单元的数据放在同一组存储单元，各组间串行工作，不利于提升存储器的带宽。</li></ul></li></ul></li></ul><h4 id="Cache中主存块之间的映射方式"><a href="#Cache中主存块之间的映射方式" class="headerlink" title="Cache中主存块之间的映射方式"></a>Cache中主存块之间的映射方式</h4><ul><li>由主存地址映射到Cache地址称为地址映射</li><li>直接映射<ul><li>主存数据只能装入Cache中的唯一位置。若这个位置已有内容，则产生块冲突，原来的块将无条件地被替换出去（无需使用替换算法）。</li><li>优点：实现简单，只需利用主存地址的某些位直接判断，即可确定所需字块是否在缓存中。</li><li>缺点：不够灵活，降低命中率。</li></ul></li><li>全相联映射<ul><li>允许主存中每一字块映射到Cache中的任何一块位置上。可以从已被占满的Cache中替换出任一旧字块。</li><li>通常采用昂贵的“按内容寻址”的相联存储器来完成。</li><li>优点：灵活，命中率高，缩小了块冲突率，空间利用率高。</li><li>缺点：地址变换速度慢，实现成本高</li></ul></li><li>组相联映射（上述两种映射的折中）<ul><li>将Cache空间分成大小相同的组，主存的一个数据块可以装入到一组内的任何一个位置（组间采取直接映射，组内采取全相联映射）。</li></ul></li></ul><h4 id="Cache中主存块的替换算法"><a href="#Cache中主存块的替换算法" class="headerlink" title="Cache中主存块的替换算法"></a>Cache中主存块的替换算法</h4><ul><li>先进先出（First-In-First-Out，FIFO）算法</li><li>近期最少使用（Least Recently Used，LRU）算法</li><li>随机法</li></ul><h4 id="磁盘存储器"><a href="#磁盘存储器" class="headerlink" title="磁盘存储器"></a>磁盘存储器</h4><ul><li>磁盘寻址的最小单位是扇区。</li><li>道密度：沿磁盘半径方向单位长度的磁道数。</li><li>位密度：单位长度磁道上记录二进制的位数。</li><li>平均寻道时间：从一个磁道转移到另一个磁道的平均时间。（全部寻道时间的一半）</li><li>平均等待时间：旋转等待的平均时间。（转一周时间的一半）</li><li>一扇区的传送时间：T=1 / (转速×扇区数)</li><li>存取一个扇区的时间：T=每个扇区位数 / (转速×扇区数)</li><li>平均存取时间=平均寻道时间 + 平均等待时间 + 传输时间</li><li>每个记录面的磁道数：K=[(外直径-内直径)/2]*磁道密度</li><li>盘组格式化容量：C = 记录面数 <em> K </em> 每个扇区字节数 * 扇区数</li><li>盘组非格式化容量：CN = 记录面数 <em> K </em> 最内圈磁道周长 * 内层位密度</li><li>WE 为写允许信号：低电平0为写，高电平1为读</li><li>CS为片选信号：低电平0有效</li><li>借位/进位C：1=结果的最高位发生了进位，0=结果的最高位未发生进位</li><li>溢出标志位V：1=溢出，0=没有溢出</li></ul><h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><h4 id="指令的寻址方式"><a href="#指令的寻址方式" class="headerlink" title="指令的寻址方式"></a>指令的寻址方式</h4><ul><li>寻址模式是大多数中央处理器 （CPU）设计中的指令集架构的一个方面</li><li>在给定指令集架构中定义的各种寻址模式决定了该架构中的机器语言指令如何识别每个指令的操作数</li><li>寻址模式指定如何通过使用寄存器中保存的信息和/或机器指令中包含的常量或其他地方包含的常量来计算操作数的有效存储器地址。</li></ul><h4 id="CISC和RISE"><a href="#CISC和RISE" class="headerlink" title="CISC和RISE"></a>CISC和RISE</h4><ul><li>从硬件角度来看CISC处理的是不等长指令集，它必须对不等长指令进行分割，因此在执行单一指令的时候需要进行较多的处理工作。而RISC执行的是等长精简指令集，CPU在执行指令的时候速度较快且性能稳定。因此在并行处理方面RISC明显优于CISC，RISC可同时执行多条指令，它可将一条指令分割成若干个进程或线程，交由多个处理器同时执行。由于RISC执行的是精简指令集，所以它的制造工艺简单且成本低廉。</li><li>从软件角度来看，CISC运行的则是我们所熟识的DOS、Windows操作系统。而且它拥有大量的应用程序。因为全世界有65%以上的软件厂商都理为基于CISC体系结构的PC及其兼容机服务的，象赫赫有名的Microsoft就是其中的一家。而RISC在此方面却显得有些势单力薄。虽然在RISC上也可运行DOS、Windows，但是需要一个翻译过程，所以运行速度要慢许多。</li></ul><h4 id="地址指令操作数物理位置的三种形式"><a href="#地址指令操作数物理位置的三种形式" class="headerlink" title="地址指令操作数物理位置的三种形式"></a>地址指令操作数物理位置的三种形式</h4><ul><li>寄存器——寄存器型（RR型）；</li><li>寄存器——存储器型指令（RS型）；</li><li>存储器——存储器型（SS型）。</li></ul><h3 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h3><h4 id="计算机工作过程"><a href="#计算机工作过程" class="headerlink" title="计算机工作过程"></a>计算机工作过程</h4><ul><li>加电——》产生reset信号——》执行程序——》停机——》停电</li><li>产生reset信号的任务<ul><li>任务一：使计算机处于初始状态</li><li>任务二：从PC中取出指令地址</li></ul></li><li>控制器作用是协调并控制计算机各部件执行程序的指令序列</li></ul><h4 id="控制器的组成"><a href="#控制器的组成" class="headerlink" title="控制器的组成"></a>控制器的组成</h4><ul><li>控制器的功能<ul><li>取指令：发出指令地址，取出指令的内容</li></ul></li><li>分析指令<ul><li>对操作码译码产生操作相应部件的控制信号</li><li>根据寻址方式形成操作数地址</li></ul></li><li>执行指令<ul><li>根据分析指令后产生控制信号、操作数地址信号序列，通过CPU及输入输出设备的执行实现每条指令的功能</li><li>结果回送存储器</li><li>形成下条指令的地址</li></ul></li><li>控制程序和数据的输入和结果输出</li><li>对异常情况和某些请求的处理<ul><li>异常情况的处理：例如算术运算的溢出、数据传送奇偶错</li><li>某些请求的处理</li><li>“中断请求”信号</li><li>DMA请求信号</li></ul></li><li>控制器的组成<ul><li>程序计数器（PC）：即地址寄存器，用来存放当前正在执行的指令地址或即将要执行的下一条指令地址</li><li>指令寄存器（IR）：用以存放当前正在执行的指令，以便在指令执行过程中控制完成一条指令的全部功能</li><li>指令译码器或操作码译码器：对指令寄存器中的操作码进行分析解释，产生相应的控制信号</li><li>脉冲源及启停线路：脉冲源参数一定评率的脉冲作为整个机器的时钟脉冲，是机器周期和工作脉冲的基准信号，在机器刚加电时，还应产生一个总清信号（reset）</li><li>时序控制信号形成部件：当程序启动后，在CLK时钟作用下，根据当前正在执行的指令的需要，产生相应的时序控制信号，并根据被控制功能部件的反馈信号调整时序控制信号<ul><li>控制存储器</li><li>微指令寄存器：控制字段+下址</li></ul></li></ul></li><li>周期概念<ul><li>指令周期：完成一条指令所需的时间，包括取指令、分析指令、执行指令</li><li>机器周期：也称为CPU周期，是CPU从内存中读取一个指令的时间，通常等于取指周期</li><li>时钟周期：称为节拍脉冲或T周期，是基准脉冲信号</li><li>三条假设<ul><li>程序是存放在主存中的，当执行完一条指令后才从主存中取下一条指令（非流水线）</li><li>指令的长度是固定的，并限制了寻址方式的多样化</li><li>在程序运行前，程序和数据都已存在主存中</li></ul></li></ul></li><li>指令执行过程（运算器和控制器配合）</li><li>组成控制器的基本电路<ul><li>具有记忆功能的触发器以及由它组成的寄存器，计数器和存储单元</li><li>没有记忆功能的门电路及由它组成的加法器，算术逻辑运算单元（ALU）和各种逻辑电路</li></ul></li><li>控制器的功能就是按每一条指令的要求产生所需的控制信号</li><li>产生控制信号的方法<ul><li>微程序控制</li><li>硬布线控制</li></ul></li></ul><h4 id="微程序控制计算机的基本工作原理"><a href="#微程序控制计算机的基本工作原理" class="headerlink" title="微程序控制计算机的基本工作原理"></a>微程序控制计算机的基本工作原理</h4><ul><li>微指令：在微程序控制的计算机中，将由同时发出的控制信号所执行的一组微操作</li><li>微命令：将指令分为若干条微指令，按次序执行这些微指令。组成微指令的操作即微命令</li><li>微程序：计算机的程序由指令序列构成，而计算机每条指令的功能均由微指令序列解释完成，这些微指令序列的集合就叫做微程序</li><li>控制存储器<ul><li>微程序一般是存放在专门的存储器中的，由于该存储器主要存放控制命令（信号）与下一条执行的微指令地址（简称下址）</li><li>存储单元内容<ul><li>微指令的控制信号——控制位</li><li>下条微指令的地址——下址字段</li></ul></li><li>存储芯片：ROM</li></ul></li><li>执行一条指令实际上就是执行一段存放在控制存储器中的微程序</li><li>实现微程序控制的基本原理<ul><li>控制信号（23条）</li><li>加法的过程</li><li>微指令格式：控制字段+下址字段</li><li>23个控制位，12个下址位——》容量为4K</li><li>取址微指令的操作对所有指令都是相同的，所以是一条公用的微指令，其下址由操作码译码产生</li></ul></li><li>微程序控制器</li><li>时序信号及工作脉冲的形成</li><li>停机和停电的区别</li><li>停机：电压稳定、存放内容保持、重启PC内容为断点指令地址</li><li>停电：电压消失、RAM的内容消失、重启PC内容为第一条指令地址</li></ul><h4 id="微程序设计技术"><a href="#微程序设计技术" class="headerlink" title="微程序设计技术"></a>微程序设计技术</h4><ul><li>如何缩短微指令字长<ul><li>直接控制法（容量太小）<ul><li>编译方法：每一位代表一个控制信号，直接送往相应的控制点</li><li>优点：控制简单</li><li>缺点：微指令字长过大</li></ul></li><li>字段直接编译法<ul><li>选出互斥的微指令</li><li>每个字段都要留出一个代码，表示本段不发出任何指令（000）</li><li>优点：节省微指令的字长</li><li>缺点：增加了额外的硬件开销</li></ul></li><li>字段间接编译法<ul><li>指令之间相互联系的情况</li><li>举例：A为0-7，B为0-3，如果是直接编译——3+2=5，如果是间接编译——3+1=4</li><li>编码方法：在字段直接编译法中，译码输出端要兼由另一字段中的某些微命令配合解释</li><li>优点：减少了微指令长度</li><li>缺点：可能削弱微指令的并行控制能力，同时增加硬件开销</li></ul></li><li>常熟源字段E</li></ul></li><li>如何减少微指令长度<ul><li>现行微指令/微地址<ul><li>现行微指令：当前正在执行的指令</li><li>现行微地址：存放现行微指令的控制器存储单元</li></ul></li><li>后继微指令/微地址<ul><li>后继微指令：下一条要执行的微指令</li><li>后继微地址：存放后继微指令的控制器存储单元</li></ul></li><li>增量与下址字段结合产生后继微指令的方法<ul><li>下址字段分成：转移控制字段BCF和转移地址字段BAF<ul><li>BCF：控制微程序的转移情况</li><li>BAF：转移后的微指令所在地址</li></ul></li><li>BAF有两种情况<ul><li>与uPC的位数相等——转移灵活，但增加微指令长度</li><li>比uPC短——转移地址收到限制，但可缩短微指令长度</li></ul></li><li>优点：微指令的下址字段很短，仅用于选择输入uPC计数器的某条线路有效</li><li>缺点：微程序转移不灵活，使得微程序在控存中的物理空间分配有困难</li></ul></li><li>多路转移方式：一条微指令存在多个转移分支的情况称为多路转移</li><li>微中断<ul><li>微中断请求信号是由程序中断请求信号引起的</li><li>在完成现行指令的微程序后响应该微中断请求</li><li>由硬件产生对应微中断处理程序在控存中的入口地址</li></ul></li></ul></li><li>如何提高微程序的执行速度<ul><li>微指令格式</li><li>水平型微指令——直接控制，字段编译（直接、间接）<ul><li>特点：在一条微指令中定义并并行执行多个微命令</li></ul></li><li>垂直型微指令<ul><li>特点：不强调实现微指令的并行控制功能</li><li>定义：采用微操作码编译法，由操作码规定微指令的功能</li></ul></li><li>微程序控制存储器<ul><li>一般采用ROM存储器</li><li>也可采用RAM，为防止断电后内容消失，则必须开机后将外存中存放的微程序调入控存RAM，然后才能执行程序。</li><li>当前为了能不断扩展指令系统，通常采用ROM+RAM</li></ul></li><li>动态微程序设计<ul><li>定义：能根据用户要求改变微程序</li><li>优点：是计算机能更灵活、有效的适应于各种不同的应用目标</li></ul></li><li>控制存储器的操作<ul><li>串行方式</li><li>并行方式——比串行多了微指令寄存器</li><li>微周期=max(取微指令时间,执行微指令时间)</li><li>由于取微指令、执行微指令同时进行，故对于某些后继微地址的产生根据处理结果而定的微指令，则延迟一个微周期再取微指令</li></ul></li></ul></li></ul><h4 id="硬布线控制的计算机（RISC）——特点快"><a href="#硬布线控制的计算机（RISC）——特点快" class="headerlink" title="硬布线控制的计算机（RISC）——特点快"></a>硬布线控制的计算机（RISC）——特点快</h4><ul><li>形成操作控制信号的逻辑框图</li><li>操作控制信号的产生<ul><li>取值周期cy1所产生的信号对所有指令都是相同的，即与当前执行的指令无关，逻辑式得到最简单的形式</li><li>通常，同一个控制控制信号在若干条指令的某些周期（或再加上一些条件）中都需要，为此需要把它们组合起来</li><li>同种类型的指令所需要的控制信号大部分是相同的，仅有少量区别</li><li>在确定指令的操作码时（即对具体指令赋予二进制操作码），为了便于逻辑表达式的化简以减少逻辑电路数量，往往给予特别关注</li></ul></li><li>设计组合逻辑电路从而产生需要的控制信号的步骤<ol><li>实际逻辑问题</li><li>真值表</li><li>公式化简</li><li>逻辑电路图</li></ol></li><li>设计目标：使用最少的电路元件达到最高的操作速度</li></ul><h4 id="流水线工作原理"><a href="#流水线工作原理" class="headerlink" title="流水线工作原理"></a>流水线工作原理</h4><ul><li>每条指令的执行时间不变</li><li>每条指令处理结果的时间缩短</li><li>流水线处理速率最高时=流水线处于满载的稳定状态</li><li>流水线处理速率最低时=流水线未满载状态</li><li>为了满足在重叠时间段不同指令的机器周期能够完成指定的操作，将时间段=操作完成的最长时间</li><li>为了保证一个周期内流水线的输入信号不变，相邻时间段之间必须设置锁存器或寄存器</li><li>除了指令执行流水线，还有运算操作流水线</li><li>流水线阻塞<ul><li>数据相关产生</li><li>假设第二条指令需要的操作数是第一条指令运算的结果，那么出现了数据相关</li><li>指令执行时间不同产生</li><li>程序转移的影响</li><li>异常情况响应中断</li></ul></li></ul><h3 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h3><h4 id="存储系统的层次结构"><a href="#存储系统的层次结构" class="headerlink" title="存储系统的层次结构"></a>存储系统的层次结构</h4><ul><li>cache-&gt;主存-&gt;辅存</li></ul><h4 id="高速缓冲存储器"><a href="#高速缓冲存储器" class="headerlink" title="高速缓冲存储器"></a>高速缓冲存储器</h4><ul><li>cache的工作原理<ul><li>局部性原理</li><li>主存地址和cache地址（P166 图7.2）</li><li>块长：块长一般取一个主存周期所能调出的信息长度（一般为16个字）</li><li>cache的容量和块的大小是影响cache的效率的重要因素</li><li>命中率：CPU所要访问的信息是否在cache中的比率，而将所要访问的信息不在cache中的比率称为失败率</li><li>一致性策略<ul><li>标志交换方式（写回法）</li><li>通过式写入（写通法）</li><li>写操作直接对主存进行，而不写入cache</li></ul></li><li>cache的平均存取时间=h*tc+(1-h)(tc+tm)</li><li>最好替换策略：按照被替换的字块是下一段时间最少使用的，由替换部件实现</li></ul></li><li>cache组织地址映像<ul><li>直接映像<ul><li>cache中许多空的位置被浪费</li><li>主存地址：主存字块标记+cache字块地址+字块内地址</li></ul></li><li>全相联映像<ul><li>成本太高而不能采用</li><li>主存地址：主存字块标记+字块内地址</li><li>优点</li><li>方式灵活，缩小了块发生冲突的概率</li><li>缺点</li><li>增加了标识位位数</li><li>增加了寻找主存块在cache中对应块的时间</li></ul></li><li>组相联映像<ul><li>直接映像和全相联映像的折衷</li><li>主存地址：主存字块标记+组地址+块内地址</li></ul></li></ul></li></ul><h4 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h4><ul><li>存储管理部件（MMU）</li><li>现代计算机一般都有辅助存储器，但具有辅存的存储系统不一定是虚拟存储系统</li><li>虚拟存储系统的特点<ul><li>允许用户程序用比主存大的多的空间来访问主存</li><li>每次访存都要进行虚实地址的转换</li></ul></li></ul><h3 id="辅助存储器"><a href="#辅助存储器" class="headerlink" title="辅助存储器"></a>辅助存储器</h3><ul><li>半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器</li></ul><h4 id="辅助存储器的种类"><a href="#辅助存储器的种类" class="headerlink" title="辅助存储器的种类"></a>辅助存储器的种类</h4><ul><li>磁表面存储器<ul><li>数字式磁记录：硬盘、软盘和磁带</li><li>模拟式磁记录：录音、录像设备</li></ul></li><li>光存储器：光盘</li></ul><h5 id="串行存储器"><a href="#串行存储器" class="headerlink" title="串行存储器"></a>串行存储器</h5><ul><li>顺序存取存储器</li><li>直接存取存储器</li></ul><h5 id="辅助存储器的技术指标"><a href="#辅助存储器的技术指标" class="headerlink" title="辅助存储器的技术指标"></a>辅助存储器的技术指标</h5><ul><li>存储密度：单位长度或单位面积磁层表面磁层所存储的二进制信息量</li><li>道密度：沿磁盘半径方向单位长度的磁道数称为道密度，单位为道/英寸tpi或道/毫米tpmm</li><li>位密度或线密度：单位长度磁道所能记录二进制信息的位数叫位密度或线密度，单位为位/英寸bpi或位/毫米bpmm</li><li>每个磁道所存储的信息量是一样的</li><li>存储容量：C = n × k × s</li><li>寻址时间：平均寻址时间Ta=平均找道时间Ts+平均等待时间Tw</li><li>数据传输率：Dr = D × V</li><li>误码率</li><li>价格</li></ul><h4 id="硬磁盘存储器的类型"><a href="#硬磁盘存储器的类型" class="headerlink" title="硬磁盘存储器的类型"></a>硬磁盘存储器的类型</h4><ul><li>固定磁头和移动磁头</li><li>可换盘和固定盘</li></ul><h4 id="磁盘存储器-1"><a href="#磁盘存储器-1" class="headerlink" title="磁盘存储器"></a>磁盘存储器</h4><ul><li>温彻斯特磁盘简称温盘</li><li>磁盘存储器由驱动器（HDD），控制器（HDC）和盘片组成</li><li>最外面的同心圆叫0磁道，最里面的同心圆假设称为n磁道</li><li>驱动器的定位驱动系统实现快速精准的磁头定位</li><li>主轴系统的作用是带动盘片按额定转速稳定旋转</li><li>数据控制系统的作用是控制数据的写入和读出，包括寻址，磁头旋转，写电流控制，读出放大，数据分离</li><li>磁盘控制器有两个方向的接口<ul><li>与主机的接口</li><li>与驱动器（设备）的接口</li></ul></li></ul><h4 id="光盘"><a href="#光盘" class="headerlink" title="光盘"></a>光盘</h4><ul><li>采用光存储技术</li><li>利用激光写入和读出</li><li>第一代光存储技术采用非磁性介质，不可擦写</li><li>第二代光存储技术，采用磁性介质，可擦写</li><li>光盘的存储原理<ul><li>只读型和只写一次型：热作用（物理或化学变化）</li><li>可擦写光盘：热磁效应</li></ul></li></ul><h3 id="输出输出（I-O）设备-系统"><a href="#输出输出（I-O）设备-系统" class="headerlink" title="输出输出（I/O）设备/系统"></a>输出输出（I/O）设备/系统</h3><h4 id="设备控制器（I-O）的基本功能"><a href="#设备控制器（I-O）的基本功能" class="headerlink" title="设备控制器（I/O）的基本功能"></a>设备控制器（I/O）的基本功能</h4><ul><li>实现主机和外部设备之间的数据传送</li><li>实现数据缓冲，以达到主机同外部设备之间的速度匹配</li><li>接受主机的命令，提供设备接口的设备，并按照主机的命令控制设备</li></ul><h4 id="I-O-编址方式"><a href="#I-O-编址方式" class="headerlink" title="I/O 编址方式"></a>I/O 编址方式</h4><ul><li>统一编址：用取数、存数指令</li><li>不统一编址：有专门的 I/O 指令</li></ul><h4 id="I-O-与主机的连接方式"><a href="#I-O-与主机的连接方式" class="headerlink" title="I/O 与主机的连接方式"></a>I/O 与主机的连接方式</h4><ul><li>辐射式连接<ul><li>每台设备都配有一套</li><li>控制线路和一组信号线</li><li>不便于增删设备</li></ul></li><li>总线连接<ul><li>便于增删设备</li></ul></li></ul><h4 id="I-O设备"><a href="#I-O设备" class="headerlink" title="I/O设备"></a>I/O设备</h4><ul><li>人机交互设备：键盘、鼠标等</li><li>计算机信息的驻留设备：硬盘、光盘等</li><li>机——机通信设备：MODEN等</li></ul><h4 id="为什么要设置接口？"><a href="#为什么要设置接口？" class="headerlink" title="为什么要设置接口？"></a>为什么要设置接口？</h4><ul><li>实现设备的选择</li><li>实现数据缓冲达到速度匹配</li><li>实现数据串 并格式转换</li><li>实现电平转换</li><li>传送控制命令</li><li>反映设备的状态（“忙”、“就绪”、“中断请求”）</li></ul><h4 id="中断服务程序的流程"><a href="#中断服务程序的流程" class="headerlink" title="中断服务程序的流程"></a>中断服务程序的流程</h4><ul><li>保护现场<ul><li>程序断点的保护</li><li>寄存器内容的保护</li></ul></li><li>中断服务<ul><li>对不同的 I/O 设备具有不同内容的设备服务</li></ul></li><li>恢复现场：出栈指令</li><li>中断返回：中断返回指令</li></ul><h4 id="单重中断和多重中断"><a href="#单重中断和多重中断" class="headerlink" title="单重中断和多重中断"></a>单重中断和多重中断</h4><ul><li>单重中断：不允许中断 现行的 中断服务程序</li><li>多重中断：允许级别更高 的中断源（现行的 中断服务程序）</li></ul><h4 id="DMA-方式"><a href="#DMA-方式" class="headerlink" title="DMA 方式"></a>DMA 方式</h4><ul><li>主存和 I/O 之间有一条直接数据通道</li><li>CPU 和 I/O 并行工作</li><li>DMA 的三种工作方式<ul><li>CPU暂停方式</li><li>CPU周期窃取方式</li><li>直接访问存储器</li></ul></li><li>DMA 接口功能<ul><li>向 CPU 申请 DMA 传送</li><li>处理总线 控制权的转交</li><li>管理 系统总线、控制 数据传送</li><li>确定 数据传送的 首地址和长度，修正 传送过程中的数据地址和长度</li><li>DMA 传送结束时，给出操作完成信号</li></ul></li><li>DMA 传送过程：预处理、数据传送、后处理</li></ul><h4 id="外设接口"><a href="#外设接口" class="headerlink" title="外设接口"></a>外设接口</h4><ul><li>设备与主机相连时，必须按照规定的物理互连特性、电气特性等进行连接，这些特性的技术规范称为接口标准</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学与技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据结构是指数据的存储结构，是带有结构特性的数据元素的集合。精心选择的数据结构可以带来更好的运行或者存储效率。数据结构是计算机科学与技术专业、软件工程专业甚至于其它电气信息类专业的重要专业基础课程，在408计算机学科专业基础综合考试中占有45分。</p></blockquote><span id="more"></span><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="C-C-语言基础"><a href="#C-C-语言基础" class="headerlink" title="C/C++语言基础"></a>C/C++语言基础</h4><ul><li>数据类型<ul><li>结构型 <code>int a[maxSize];</code></li><li>指针型 <code>int *a;</code></li><li>链表结点<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br></pre></td></tr></table></figure></li><li>二叉树结点<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">lchild</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode;</span><br></pre></td></tr></table></figure></li><li>动态申请数组空间<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p=(<span class="type">int</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br></pre></td></tr></table></figure></li></ul></li><li>函数<ul><li>函数参数的引用型定义<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ++x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">f</span>(a);</span><br></pre></td></tr></table></figure></li><li>数组作参数的引用型定义<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x[][maxSize], <span class="type">int</span> n)</span></span>&#123;···;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="算法的时间复杂度和空间复杂度"><a href="#算法的时间复杂度和空间复杂度" class="headerlink" title="算法的时间复杂度和空间复杂度"></a>算法的时间复杂度和空间复杂度</h4><ul><li>时间复杂度 <ul><li>$T(n)=O(f(n)中增长最快的项的系数)$</li><li>将最坏的情况作为算法时间复杂度的度量</li><li>$O(1)≤O(\log<em>{2}\left(n\right)≤O(n)≤O(n\log</em>{2}\left(n\right)≤O(n^2)≤O(2^n)$（常对幂指阶）</li><li>取最深层循环内的语句所描述的操作为基本操作，由循环基本执行的次数为规模n，计算函数 $f(n)$</li></ul></li><li>空间复杂度：算法在运行时所需存储空间的度量，主要考虑在算法运行过程中临时占用的存储空间大小<ul><li>空间复杂度 = 函数递归调用的深度</li></ul></li></ul><h4 id="数据结构基本概念"><a href="#数据结构基本概念" class="headerlink" title="数据结构基本概念"></a>数据结构基本概念</h4><ul><li>数据是对客观事物的符号表示</li><li>数据元素是数据的基本单位</li><li>数据对象是性质相同的数据元素的集合</li><li>数据结构是相互之间存在一种或多种特定关系的数据元素的集合<ul><li>数据的逻辑结构是对数据之间关系的描述，分为线性结构（一个数据元素的次序集合）和非线性结构（树、图）</li><li>数据的存储（物理）结构是数据的逻辑结构在计算机中的表示（映像），包括数据元素的表示和关系的表示</li></ul></li><li>数据元素之间的关系：顺序映像和非顺序映像</li><li>数据结构中常用储存方法：顺序存储（数组）、链式存储（指针）、索引存储 <code>&lt;关键字, 地址&gt;</code>、散列存储（根据结点的关键字通过散列函数直接计算出该结点的存储地址）</li></ul><h4 id="算法的基本概念"><a href="#算法的基本概念" class="headerlink" title="算法的基本概念"></a>算法的基本概念</h4><ul><li>算法的特性：有穷性、确定性、输入、输出、可行性</li><li>算法的设计目标：正确性、可读性、健壮性、高效率和低存储量需求</li></ul><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><h4 id="线性表的基本概念"><a href="#线性表的基本概念" class="headerlink" title="线性表的基本概念"></a>线性表的基本概念</h4><ul><li>线性表是具有相同特性数据元素的一个有限序列，长度 $n≥0$</li><li>线性表只有一个表头元素，一个表尾元素，除表头表尾元素外其他元素只有一个直接前驱和一个直接后继（有序性）</li><li>顺序表：随机访问特性、要求占用连续的存储空间、做插入操作要移动多个元素</li><li>链表：不支持随机访问、结点的存储空间利用率稍低、支持存储空间的动态分配</li><li>头指针指向链表的第一个结点、头结点指向带头结点链表的第一个结点</li><li>单链表、双链表、循环单链表、循环双链表、静态链表（数据元素分量+指针分量）</li></ul><h4 id="线性表的结构体定义"><a href="#线性表的结构体定义" class="headerlink" title="线性表的结构体定义"></a>线性表的结构体定义</h4><ul><li>顺序表<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> data[maxSize];   <span class="comment">//考试写这两行</span></span><br><span class="line">  <span class="type">int</span> length;         <span class="comment">//</span></span><br><span class="line">&#125;Sqlist;</span><br></pre></td></tr></table></figure></li><li>单链表<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode</span><br><span class="line"><span class="comment">//构造LNode型结点</span></span><br><span class="line">LNode *A = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br></pre></td></tr></table></figure></li><li>双链表<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DLNode</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">DLNode</span> *prior;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">DLNode</span> *next;</span><br><span class="line">&#125;DLNode;</span><br></pre></td></tr></table></figure></li></ul><h4 id="顺序表的操作"><a href="#顺序表的操作" class="headerlink" title="顺序表的操作"></a>顺序表的操作</h4><ul><li><p>插入元素</p><ul><li>1 ≤ i ≤ ListLength(L）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListInsert</span><span class="params">(SeqList *L,<span class="type">int</span> i,ElemType *e)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> k；</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;length==MAXSIZE)<span class="comment">/*顺序线性表已经满*/</span></span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  <span class="keyword">if</span>（i&lt;<span class="number">1</span> || i&gt;L-&gt;length+<span class="number">1</span>)<span class="comment">/*当 i 不在范围内时*/</span></span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;=L-&gt;length)</span><br><span class="line">  &#123;            <span class="comment">/*若插入数据位置不在表尾*/</span></span><br><span class="line">    <span class="keyword">for</span>(k=L-&gt;length<span class="number">-1</span>；k&gt;=i<span class="number">-1</span>；k--)    <span class="comment">/*将要插入位置后的数据元素向后移动一位*/</span></span><br><span class="line">      L-&gt;data[k+<span class="number">1</span>]=L-&gt;data[k];</span><br><span class="line">  &#125;</span><br><span class="line">  L-&gt;data[i<span class="number">-1</span>]=e;<span class="comment">/*将新元素插入*/</span></span><br><span class="line">  L-&gt;length++;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListDelete</span><span class="params">(SqList *L,<span class="type">int</span> i,ElemType *e)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> k;</span><br><span class="line">  <span class="keyword">if</span> (L-&gt;length==<span class="number">0</span>)<span class="comment">/*线性表为空*/</span></span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>|| i&gt;L-&gt;length)<span class="comment">/*删除位置不正确*/</span></span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  *e=L-&gt;data[i<span class="number">-1</span>];</span><br><span class="line">  <span class="keyword">if</span>(i&lt;L-&gt;<span class="number">1</span>ength)</span><br><span class="line">  &#123;    <span class="comment">/*如果删除不是最后位置*/</span></span><br><span class="line">    <span class="keyword">for</span>（k=i；k&lt;L-&gt;length;k++)<span class="comment">/*将删除位置后继元素前移*/</span></span><br><span class="line">    L-&gt;data[k<span class="number">-1</span>]=L-&gt;data[k];</span><br><span class="line">  &#125;</span><br><span class="line">  L-&gt;length--；</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查找元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findElem</span> <span class="params">(Sqlist L, <span class="type">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;L.length; ++i)</span><br><span class="line">    <span class="keyword">if</span> (e==L.data[i])</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>求指定位置元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getElem</span><span class="params">(Sqlist L, <span class="type">int</span> p, <span class="type">int</span> &amp;e)</span></span></span><br><span class="line"><span class="function">  <span class="title">if</span><span class="params">(p&lt;<span class="number">0</span>||p&gt;L.length<span class="number">-1</span>)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">return</span> 0</span>;</span><br><span class="line">  e=L.data[p];</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="单链表的操作"><a href="#单链表的操作" class="headerlink" title="单链表的操作"></a>单链表的操作</h4><ul><li><p>尾插法建立链表C</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">createlistR</span><span class="params">(LNode *&amp;C, <span class="type">int</span> a[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  LNode *s, *r;  <span class="comment">//s指向新申请结点，r指向C的终端结点</span></span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  C=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));  <span class="comment">//申请C的头结点空间</span></span><br><span class="line">  C-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">  r=C;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data=a[i];</span><br><span class="line">    r-&gt;next=s;</span><br><span class="line">    r=r-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>归并成递减的单链表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span> <span class="params">(LNode *A, LNode *B, LNode *C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  LNode *p=A-&gt;next;</span><br><span class="line">  LNode *q=B-&gt;next;</span><br><span class="line">  LNode *s;</span><br><span class="line">  C=A;</span><br><span class="line">  C-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">free</span>(B);</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;q!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;    <span class="comment">/*下面的if else体现了头插法*/</span></span><br><span class="line">    <span class="keyword">if</span>(p-&gt;data&lt;=q-&gt;data)</span><br><span class="line">    &#123;</span><br><span class="line">      s=p;p-&gt;next;</span><br><span class="line">      s-&gt;next=C-&gt;next;</span><br><span class="line">      C-next=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      s=q;q=q-&gt;next;</span><br><span class="line">      s-&gt;next=C-&gt;next;</span><br><span class="line">      C-&gt;next=s;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    s=p;</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">    s-&gt;next=C-&gt;next;</span><br><span class="line">    C-&gt;next=s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    s=q;</span><br><span class="line">    q=q-&gt;next;</span><br><span class="line">    s-&gt;next=C-&gt;next;</span><br><span class="line">    C-&gt;next=s;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单链表获取元素</p><ul><li>用 e 返回表中第 i 个数据元素的值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i,ElemType *e)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> j=<span class="number">1</span>;    <span class="comment">/*j 为计数器*/</span></span><br><span class="line">  LinkList p;    <span class="comment">/*声明一节点 p*/</span></span><br><span class="line">  p=L-&gt;next;    <span class="comment">/*p 指向链表 L 的第一个节点*/</span></span><br><span class="line">  <span class="keyword">while</span>(p &amp;&amp; j&lt;i) </span><br><span class="line">  &#123;     <span class="comment">/*当 p 不为空并且计数器不等于 i 时，循环继续*/</span></span><br><span class="line">    p=p-&gt;next； <span class="comment">/*p 指向下一个节点*/</span></span><br><span class="line">    ++j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!p || j &gt; i)</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  *e = p-&gt;data;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单链表插入元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListInsert</span><span class="params">(LinkList *L,<span class="type">int</span> i,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> j=<span class="number">1</span>；</span><br><span class="line">LinkList p,s;</span><br><span class="line">p=*L；</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j&lt;i)     <span class="comment">/*寻找第 i 个节点*/</span></span><br><span class="line">&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">++j；</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">if</span> (!p || j&gt;i)</span><br><span class="line">  <span class="keyword">return</span> ERROR;     <span class="comment">/*第 i 个元素不存在*/</span></span><br><span class="line">  s=(LinkList *) <span class="built_in">malloc</span> (<span class="built_in">sizeof</span>(Node));    <span class="comment">/*生成新节点（C 标准函数）*/</span></span><br><span class="line">  s-&gt;data=e;</span><br><span class="line">  s-&gt;next=p-&gt;next;    <span class="comment">//将 p 的后继节点赋值给 s 的后继*）</span></span><br><span class="line">  p-&gt;next=s;       <span class="comment">//将 s 赋值给 p 的后继</span></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="双链表的操作"><a href="#双链表的操作" class="headerlink" title="双链表的操作"></a>双链表的操作</h4><ul><li><p>尾插法建立双链表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">createDlistR</span><span class="params">(DLNode *&amp;L, <span class="type">int</span> a[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  DLNode *s, *r;  <span class="comment">//s指向新申请结点，r指向C的终端结点</span></span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  L=(DLNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DLNode));</span><br><span class="line">  L-&gt;prior=<span class="literal">NULL</span>;</span><br><span class="line">  L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">  r=L;    <span class="comment">//和单链表一样，r始终指向终端节点，开始头节点也是尾节点</span></span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    s=(DLNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DLNode));</span><br><span class="line">    s-&gt;data=a[i];</span><br><span class="line">    r-&gt;next=s;</span><br><span class="line">    s-&gt;prior=r;</span><br><span class="line">    r=s;</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双链表寻找结点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DLNoded* <span class="title">findNode</span><span class="params">(DLNode *C, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  DLNode *p=C-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;data==x)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;  <span class="comment">//如果找到，则P中内容是结点地址，如果没找到，则P中内容是NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双链表插入结点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s-&gt;prior = p; </span><br><span class="line">s-&gt;next = p-&gt;next; </span><br><span class="line">p-&gt;next-&gt;prior = s; </span><br><span class="line">p-&gt;next = s; </span><br></pre></td></tr></table></figure></li><li><p>双链表删除结点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;prior-&gt;next = p-&gt;next; </span><br><span class="line">p-&gt;next-&gt;prior = p-&gt;prior; </span><br><span class="line"><span class="built_in">free</span>(p)     <span class="comment">//释放空间，不要漏掉</span></span><br></pre></td></tr></table></figure></li><li><p>链表的逆置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">  ListNode* newhead = <span class="built_in">reverseList</span>(head-&gt;next);   <span class="comment">//递归到链尾</span></span><br><span class="line">  head-&gt;next-&gt;next = head;    <span class="comment">//反转链表</span></span><br><span class="line">  head-&gt;next = <span class="literal">NULL</span>;    <span class="comment">//将指针置NULL</span></span><br><span class="line">  <span class="keyword">return</span> newhead;    <span class="comment">//newhead始终指向新链表的头</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="循环链表的操作"><a href="#循环链表的操作" class="headerlink" title="循环链表的操作"></a>循环链表的操作</h4><ul><li><p>逆置循环链表</p><ul><li>只交换节点中的数据成员 data，其他的前后指针不变</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Reverse</span> <span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  LinkList * begin = _head; </span><br><span class="line">  LinkList * end = _tail; </span><br><span class="line">  <span class="keyword">while</span> (begin != end &amp;&amp; begin-&gt;_prev != end) </span><br><span class="line">  &#123; </span><br><span class="line">     <span class="built_in">swap</span>(begin-&gt;_data, end-&gt;_data); </span><br><span class="line">     begin = begin-&gt;_next; </span><br><span class="line">     end = end-&gt;_prev; </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>删除顺序表中值在 min 和 max 之间的数</p><ul><li>对顺序表进行遍历查找介于 min 与 max 之间的数然后进行删除</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(Seqlist *L,<span class="type">int</span> min,<span class="type">int</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i=<span class="number">0</span>,n=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;L-&gt;length) </span><br><span class="line">  &#123;</span><br><span class="line"><span class="keyword">if</span>(L-&gt;elem[i]&gt;=min &amp;&amp; L-&gt;elem[i]&lt;=max)</span><br><span class="line">n++; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">L-&gt;elem[i-n]=L-&gt;elem[i];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">  L-&gt;length -= n; </span><br><span class="line">  <span class="keyword">if</span>(L-&gt;length==<span class="number">0</span>)</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;the sqlist ie empty/n&quot;</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h3 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h3><h4 id="栈和队列的基本概念"><a href="#栈和队列的基本概念" class="headerlink" title="栈和队列的基本概念"></a>栈和队列的基本概念</h4><ul><li>栈是一种只能在一端进行插入或删除操作的线性表（FILO）<ul><li>栈顶（Top）动态变化，栈底固定不变</li></ul></li><li>队列为仅允许在表的一端进行插入，在表的另一端进行删除的线性表（FIFO）<ul><li>队头（Front）可进行删除，队尾（Rear）可进行插入</li></ul></li></ul><h4 id="栈和队列的结构体定义"><a href="#栈和队列的结构体定义" class="headerlink" title="栈和队列的结构体定义"></a>栈和队列的结构体定义</h4><ul><li><p>顺序栈的定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> data[maxSize];</span><br><span class="line">  <span class="type">int</span> top;</span><br><span class="line">&#125; SqStack;</span><br></pre></td></tr></table></figure></li><li><p>链栈结点的定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;  LNode;</span><br></pre></td></tr></table></figure></li><li><p>顺序队列的定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> data[maxSize];</span><br><span class="line">  <span class="type">int</span> front;</span><br><span class="line">  <span class="type">int</span> rear;</span><br><span class="line">&#125; SqQueue;</span><br></pre></td></tr></table></figure></li><li><p>链队结点的定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">QNode</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">QNode</span> *next;</span><br><span class="line">&#125; QNode;</span><br></pre></td></tr></table></figure></li><li><p>链队类型的定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  QNode *front;</span><br><span class="line">  QNode *rear;</span><br><span class="line">&#125; LiQueue;</span><br></pre></td></tr></table></figure></li></ul><h4 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h4><ul><li><p>栈空状态：<code>st.top==-1</code></p></li><li><p>栈满状态：<code>st.top==maxSize-1</code></p></li><li><p>非法状态：栈满后继续入站上溢，栈空继续出栈下溢</p></li><li><p>定义一个栈并初始化：<code>int stack[maxSize]; int top==-1</code></p></li><li><p>进栈：先移动指针再进栈</p><ul><li><code>stack[++top]=x</code>;</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">push</span><span class="params">(SqStack &amp;st,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(st.top==maxSize<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  ++(st.top);</span><br><span class="line">  st.data[st.top]=x;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>出栈：先取出元素，再移动指针</p><ul><li><code>x=stack[top--];</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">(SqStack &amp;st,<span class="type">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(st.stop==<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    <span class="comment">//栈空不能出栈</span></span><br><span class="line">  x = st.data[st.top];</span><br><span class="line">  --(st.top);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h4><ul><li>栈空状态：<code>lst-&gt;next==NULL</code></li><li>不存在栈满状态</li><li>进栈：头插法建立链表中的插入操作<ul><li><code>p-&gt;next=lst-&gt;next; lst-&gt;next=p;</code></li></ul></li><li>出栈：单链表的删除操作，出栈元素保存在 x 中<ul><li><code>p-lst-&gt;next; x=p-&gt;data; lst-&gt;next=p-&gt;next; free(p);</code></li></ul></li></ul><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><ul><li><p>解决假溢出：<code>front=(front+1)%maxSize</code></p></li><li><p>队空状态：<code>qu.rear==qu.front</code></p></li><li><p>队满状态：<code>(qu.rear+1)%maxSize==qu.front</code></p></li><li><p>初始化队列：队首和队尾指针重合，并且指向0</p><ul><li><code>qu.front=qu.rear=0;</code></li></ul></li><li><p>进队算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">enQueue</span><span class="params">(SqQueue qu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>((qu.rear+<span class="number">1</span>)%maxSize==qu.front)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  qu.rear=(qu.rear+<span class="number">1</span>)%maxSize;    <span class="comment">//先移动指针</span></span><br><span class="line">  qu.data[qu.rear]=x;    <span class="comment">//再存入元素</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>出队算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">denQueue</span><span class="params">(SqQueue &amp;qu, <span class="type">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(qu.rear==qu.front)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  qu.front=((qu.front+<span class="number">1</span>)%maxSize)    <span class="comment">//先移动指针</span></span><br><span class="line">  x=qu.data[qu.front];</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="链队（尽量避免使用）"><a href="#链队（尽量避免使用）" class="headerlink" title="链队（尽量避免使用）"></a>链队（尽量避免使用）</h4><ul><li><p>队空状态：<code>lqu-&gt;rear==NULL</code> 或者 <code>lqu-&gt;front==NULL</code></p></li><li><p>不存在队满状态</p></li><li><p>初始化链队</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">initQueue</span><span class="params">(LiQueue *&amp;lqu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  lqu=(LiQueue*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LiQueue));</span><br><span class="line">  lqu-&gt;front=lqu-&gt;rear=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进队操作：<code>lqu-&gt;rear-&gt;next=p;  lqu-&gt;rear=p;</code></p></li><li><p>出队操作：<code>p=lqu-&gt;front; lqu-&gt;front=p-&gt;next; x=p-&gt;data; free(p);</code></p></li></ul><h4 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h4><ul><li><p>入栈：push(x)，除栈顶元素：pop() — 移，获取栈顶元素：top() ，返回栈是否为空：empty()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Push element x onto stack.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  q1.<span class="built_in">push</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Removes the element on top of the stack and returns that</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> length1 =  <span class="built_in">q1size</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i<span class="number">-0</span>; i&lt; length1- <span class="number">1</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    q2.<span class="built_in">push</span>(q1.<span class="built_in">front</span>());</span><br><span class="line">    q1. <span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  data= q1.<span class="built_in">front</span>()</span><br><span class="line"><span class="type">int</span> length2= <span class="built_in">q2size</span>():</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt; length2; j++)</span><br><span class="line">  &#123;</span><br><span class="line">    q1.<span class="built_in">push</span>(q2.<span class="built_in">front</span>());</span><br><span class="line">    q2.<span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Get the top element. *</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> length1 </span>= q1.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt; length1- <span class="number">1</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    q2.<span class="built_in">push</span>(q1.<span class="built_in">front</span>());</span><br><span class="line">    q1.<span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">data= q1.<span class="built_in">front</span>();</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Returns whether the stack isempty</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(q1.<span class="built_in">empty</span>()&amp;&amp;q2.<span class="built_in">empty</span>())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="串"><a href="#串" class="headerlink" title="串"></a>串</h3><h4 id="串数据类型的定义"><a href="#串数据类型的定义" class="headerlink" title="串数据类型的定义"></a>串数据类型的定义</h4><ul><li><p>串是限定了元素为字符的线性表，<code>char str[]=&quot;abcdef&quot;;</code></p></li><li><p>空格串不是空串</p></li><li><p>串赋值：对数组中的每个元素进行逐一赋值操作</p><ul><li><code>strassign(str,&quot;cur input&quot;);</code></li></ul></li><li><p>取串长度</p><ul><li><code>return str.length;</code></li></ul></li><li><p>串比较操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">strcompare</span><span class="params">(Str s1, Str s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.length&amp;&amp;i&lt;s2.length;++i)</span><br><span class="line">  <span class="keyword">if</span>(s1.ch[i]!=s2.ch[i])</span><br><span class="line">      <span class="keyword">return</span> s1.ch[i]-s2.ch[i];</span><br><span class="line">  <span class="keyword">return</span> s1.length - s2.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="串的模式匹配算法"><a href="#串的模式匹配算法" class="headerlink" title="串的模式匹配算法"></a>串的模式匹配算法</h4><ul><li><p>KMP 算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getnext</span><span class="params">(str substr, <span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i=<span class="number">1</span>, j=<span class="number">0</span>;</span><br><span class="line">next[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;substr.length)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (j==<span class="number">0</span>||substr.ch[i]==substr.ch[j])</span><br><span class="line">    &#123;</span><br><span class="line">      ++i, ++j;</span><br><span class="line">      next[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      j=next[j];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMP</span> <span class="params">(Str str, Str substr, <span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="type">int</span> i=j=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=str.length&amp;&amp;j&lt;=substr.length)</span><br><span class="line">  &#123; </span><br><span class="line">    <span class="keyword">if</span> (j==<span class="number">0</span>||str.ch[i]==substr.ch[j])</span><br><span class="line">      ++i, ++j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      j=next[ j];</span><br><span class="line">    <span class="keyword">if</span> (j&gt;substr.length) </span><br><span class="line">      <span class="keyword">return</span> i-substr.length;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩阵与广义表"><a href="#矩阵与广义表" class="headerlink" title="矩阵与广义表"></a>矩阵与广义表</h3><h4 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h4><ul><li><p>矩阵的转置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trsmat</span><span class="params">(<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            B[j][i] = A[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>矩阵相加</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            C[i][j] = A[i][j] + B[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>矩阵相乘</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">amutmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; k;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            C[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="function"><span class="keyword">for</span> <span class="title">int</span><span class="params">(h = <span class="number">0</span>;h &lt; n;++h)</span></span></span><br><span class="line"><span class="function">                C[i][j] +</span>= A[i][j] * B[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相同的元素或者零元素在矩阵中分布存在一定规律的矩阵称为特殊矩阵，反之称为稀疏矩阵</p><ul><li>对称矩阵、三角阵、对角矩阵</li></ul></li></ul><h4 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h4><ul><li>表元素可以是原子或者广义表的一种线性表的扩展结构</li><li>广义表可以是递归定义的，长度为表最上层元素的个数，深度为表中括号的最大的层数</li><li>当广义表非空时，第一个元素为广义表的表头，其余元素组成的表是广义表的表尾</li><li>原子结点有两个域：标志域和数据域</li><li>广义表结点有三个域：标志域，头指针域与尾指针域</li></ul><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h4><ul><li>树是一种非线性的数据结构，是若干个结点的集合，由唯一的根和若干个互不相交的子树组成<ul><li>结点不仅包含数据元素，并且包含指向子树的分支</li><li>结点的度是结点拥有的子树个数或者分支个数，树的度是树中各结点度的最大值</li><li>树的高度是树中结点的最大层次，根结点的高度为树的高度</li></ul></li><li>树的双亲存储结构：<code>int tree[maxSize]</code></li><li>树的链式存储结构<ul><li>邻接表：孩子存储结构</li><li>孩子兄弟存储结构</li></ul></li></ul><h4 id="二叉树的概念和性质"><a href="#二叉树的概念和性质" class="headerlink" title="二叉树的概念和性质"></a>二叉树的概念和性质</h4><ul><li><p>二叉树的定义</p><ul><li>每个结点最多只有两颗子树，即二叉树中的结点的度只能为0、1、2</li><li>子树有左右顺序之分，不能颠倒</li></ul></li><li><p>满二叉树：在一颗二叉树中，如果所有的分支节点都有左、右孩子节点，并且叶子节点都集中在二叉树的最下一层</p></li><li><p>完全二叉树由满二叉树从右至左、从上之下挨个删除结点得到的</p></li><li><p>二叉树的主要性质</p><ol><li>非空二叉树上叶子结点数等于双分支结点数加1，$n_0=n_2+1$</li><li>在二叉树的第 $i$ 层上最多有 $2^{i-1}$个节点，$(i&gt;=1)$</li><li>二叉树中如果深度为 $k$，那么最多有 $2^{k-1}$ 个节点，$(k&gt;=1)$</li><li><p>若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点：</p><ul><li>若 i=1，则该结点是二叉树的根，无双亲，否则编号为 $\lfloor i/2\rfloor$ 的结点为其双亲结点（向下取整）</li><li>若 2i&gt;n，则该结点无左孩子，否则，编号为 2i 的结点为其左孩子结点</li><li>若 2i+1&gt;n，则该结点无右孩子，否则，编号为2i+1 的结点为其右孩子结点</li></ul></li><li>Catalan()：给定 n 个结点，能够成 $h\left( n\right) =\dfrac{C_{2n}^{n}}{n+1}$  棵不同的二叉树</li><li>在完全二叉树中，具有n个节点的完全二叉树的深度为 $\lfloor log2n\rfloor+1$</li></ol></li><li><p>二叉树的顺序存储结构最适用于完全二叉树</p></li><li><p>二叉树的链式存储结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BTNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>  data;    <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNoode</span>* lchild;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNode</span>* rchild;</span><br><span class="line">&#125; BTNode;</span><br></pre></td></tr></table></figure></li></ul><h4 id="二叉树的遍历算法"><a href="#二叉树的遍历算法" class="headerlink" title="二叉树的遍历算法"></a>二叉树的遍历算法</h4><ul><li><p>先序遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreTraverseTree2</span><span class="params">(BitNode * root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S;   <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p;   <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S);   <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;     <span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123;     <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p);    <span class="comment">//p 所指节点入栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);     <span class="comment">//相当于 visit（p）</span></span><br><span class="line">p = p-&gt;lchild ;     <span class="comment">//指向 p 的左孩子</span></span><br><span class="line"> &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;     <span class="comment">//p 所指节点为空，则出栈赋给 p，遍历右子树</span></span><br><span class="line">            <span class="built_in">StackPop</span>(S, p);</span><br><span class="line">            p = p-&gt;rchild;     <span class="comment">//若右孩子有左子树则继续 while 将左孩子入栈</span></span><br><span class="line">        &#125;    <span class="comment">//end else</span></span><br><span class="line">    &#125;    <span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;    <span class="comment">//end PreTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BiTNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中序遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverseTree2</span><span class="params">(BitNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p; <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S); <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p) &#123; <span class="comment">//如果是空树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S)) &#123; <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p); <span class="comment">//将节点入栈</span></span><br><span class="line">            p = p-&gt;lchild; <span class="comment">//指针一直向左孩子移动直到无左孩子</span></span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, p); <span class="comment">//p 左子树为空则出栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data); <span class="comment">//访问 p 节点</span></span><br><span class="line">            p = p-&gt;rchild; <span class="comment">//向右子树移动</span></span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end InOrderTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后序遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树非递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LastTraverseTree2</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; BiTNode* cur, * pre;<span class="comment">//定义一个栈指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>; S = <span class="built_in">InitStack</span>(S); <span class="comment">//cur 为当前节点指针，pre 保存上一节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    pre = <span class="literal">NULL</span>; cur = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">StackPush</span>(S, T); <span class="comment">//根节点入栈</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123; <span class="comment">//若栈非空</span></span><br><span class="line">        cur = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">StackGetTop</span>(S, cur); <span class="comment">//将栈顶节点赋给 cur</span></span><br><span class="line"><span class="comment">/*要保证根节点在左孩子和右孩子访问之后才能访问，因此对于任一节点 P，先将其入 栈。</span></span><br><span class="line"><span class="comment">如果 P 不存在左孩子和右孩子，则可以直接访问它；或者 P 存在左孩子或者右孩子，但是</span></span><br><span class="line"><span class="comment">其左孩子和右孩子都已被访问过了，则同样可以直接访问该节点。*/</span></span><br><span class="line">        <span class="keyword">if</span> ((cur-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; cur-&gt;rchild == <span class="literal">NULL</span>) ||</span><br><span class="line">            (pre != <span class="literal">NULL</span> &amp;&amp; (pre == cur-&gt;lchild || pre == cur-&gt;rchild)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, cur-&gt;data);</span><br><span class="line">            pre = cur;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, cur);</span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line"><span class="comment">//若非上述两种情况，则将 P 的右孩子和左孩子依次入栈，这样就保证了每次取栈顶元素</span></span><br><span class="line"><span class="comment">//的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根节点前面被访问。</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;rchild);</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;lchild);</span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end LastTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>层次遍历：自上而下，自左向右</p><ul><li>首先，将二叉树的祖先节点入队列</li><li>然后循环执行以下步骤，直到队列为空：节点出队列进行相应操作，该节点如果有左孩子节点，左孩子节点入队列，该节点如果有右孩子节点，右孩子节点入队</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LayerOrder</span><span class="params">(BiTreeNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LQueue Q;</span><br><span class="line">    <span class="built_in">Initiate_Queue</span>(&amp;Q);</span><br><span class="line">    BiTreeNode* p;</span><br><span class="line">    <span class="keyword">if</span> (head != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, head);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">QueueNotEmpty</span>(&amp;Q)) &#123;</span><br><span class="line">        p = <span class="built_in">QueueDelete</span>(&amp;Q);</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;LChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;LChild);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;RChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;RChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h4 id="哈夫曼树和哈夫曼编码"><a href="#哈夫曼树和哈夫曼编码" class="headerlink" title="哈夫曼树和哈夫曼编码"></a>哈夫曼树和哈夫曼编码</h4><ul><li><p>哈夫曼树又叫做最优二叉树，它的特点是带权路径最短</p><ul><li>树的路径长度是指从根到每个节点的路径长度之和</li><li>带权路径长度是从该节点到根节之间的路径长度乘以结点的权值</li><li>树的带权路径长度（WPL）是指树中所有叶子节点的带权路径长度之和</li></ul></li><li><p>求哈夫曼树的带权路径长度：WPL = 第 i 个节点的权值+ 第i个节点的长度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElemType <span class="title">WeightPathLength</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (FBT == <span class="literal">NULL</span>) <span class="comment">//空树返回0  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)<span class="comment">//访问到叶子结点  </span></span><br><span class="line">            <span class="keyword">return</span> FBT-&gt;data * len;  </span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//访问到非叶子结点，进行递归调用，返回左右子树的带权路径长度之和，len递增  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">WeightPathLength</span>(FBT-&gt;left,len+<span class="number">1</span>)+<span class="built_in">WeightPathLength</span>(FBT-&gt;right,len+<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>哈夫曼树的构造方法：根据数组 a 中 n 个权值建立一棵哈夫曼树，返回树根指针  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BTreeNode</span>* <span class="built_in">CreateHuffman</span>(ElemType a[], <span class="type">int</span> n)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> i, j;  </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTreeNode</span> **b, *q;  </span><br><span class="line">    b = <span class="built_in">malloc</span>(n*<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//初始化b指针数组，使每个指针元素指向a数组中对应的元素结点  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        b[i] = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        b[i]-&gt;data = a[i];  </span><br><span class="line">        b[i]-&gt;left = b[i]-&gt;right = <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)<span class="comment">//进行 n-1 次循环建立哈夫曼树  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">//k1表示森林中具有最小权值的树根结点的下标，k2为次最小的下标  </span></span><br><span class="line">        <span class="type">int</span> k1 = <span class="number">-1</span>, k2;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)<span class="comment">//让k1初始指向森林中第一棵树，k2指向第二棵  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span> &amp;&amp; k1 == <span class="number">-1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k1 = j;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k2 = j;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (j = k2; j &lt; n; j++)<span class="comment">//从当前森林中求出最小权值树和次最小  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k1]-&gt;data)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    k2 = k1;  </span><br><span class="line">                    k1 = j;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k2]-&gt;data)  </span><br><span class="line">                    k2 = j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//由最小权值树和次最小权值树建立一棵新树，q指向树根结点  </span></span><br><span class="line">        q = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        q-&gt;data = b[k1]-&gt;data + b[k2]-&gt;data;  </span><br><span class="line">        q-&gt;left = b[k1];  </span><br><span class="line">        q-&gt;right = b[k2];  </span><br><span class="line">  </span><br><span class="line">        b[k1] = q;<span class="comment">//将指向新树的指针赋给b指针数组中k1位置  </span></span><br><span class="line">        b[k2] = <span class="literal">NULL</span>;<span class="comment">//k2位置为空  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">free</span>(b); <span class="comment">//删除动态建立的数组b  </span></span><br><span class="line">    <span class="keyword">return</span> q; <span class="comment">//返回整个哈夫曼树的树根指针  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>哈夫曼编码</p><ul><li>每个字符对应一个二进制编码，采用不等长编码方式，构造哈夫曼树</li><li>将每个字符的出现频率作为字符结点的权值赋予叶子结点，每个分支结点的左右分支分别用0和1编码</li><li>从树根结点到每个叶子结点的路径上所经分支的0、1编码序列等于该叶子结点的二进制编码</li><li>哈夫曼编码产生的是最短前缀码</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffManCoding</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始值为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a[<span class="number">10</span>];  <span class="comment">//定义静态数组a，保存每个叶子的编码，数组长度至少是树深度减一  </span></span><br><span class="line">    <span class="keyword">if</span> (FBT != <span class="literal">NULL</span>)  <span class="comment">//访问到叶子结点时输出其保存在数组a中的0和1序列编码  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="type">int</span> i;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;结点权值为%d的编码：&quot;</span>, FBT-&gt;data);  </span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//访问到非叶子结点时分别向左右子树递归调用，并把分支上的0、1编码保存到数组a  </span></span><br><span class="line">        &#123;   <span class="comment">//的对应元素中，向下深入一层时len值增1  </span></span><br><span class="line">            a[len] = <span class="number">0</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;left, len + <span class="number">1</span>);  </span><br><span class="line">            a[len] = <span class="number">1</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;right, len + <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li></ul><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><h4 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h4><ul><li>图由结点的有穷集合的 V 和边的集合  E 组成（<code>G(V,E)</code>）</li><li>图是按照无方向和有方向分为无向图和有向图，无向边用 $(v_i,v_j)$ 表示，有向边用 $<v_i,v_j>$ 表示</v_i,v_j></li><li>路径长度：路径上边或者弧的数目</li><li>顶点的度：顶点关联边的数目<ul><li>有向图中：方向指向顶点的边为入度；方向背向顶点的边为出度</li><li>在有向图中，顶点的度就是两者之和</li><li>在无向图中，任意两个顶点是相通的就是连通图，它的极大连通子图为连通分量</li><li>在向图中，任意两个顶点间互相都存在路径的就是强连通图，它的极大强连通子图为强连通分量</li></ul></li></ul><h4 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h4><ul><li><p>邻接矩阵</p><ul><li>图的顺序存储结构</li><li>用两个数组保存数据：一个一维数组存储图中顶点信息，一个二维数组存储图中边或弧的信息</li><li>无向图中邻接矩阵是个对称矩阵</li><li>0表示无边，1表示有边</li><li>顶点的度是行内数组之和，有向图中各行之和是出度，各列之和是入度 </li><li>邻接矩阵对于边数相对顶点较少的图，就是对存储空间极大的浪费</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> no;</span><br><span class="line">  <span class="type">char</span> info;</span><br><span class="line">&#125; VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> edges[maxSize][maxSize];    <span class="comment">//有权图中int改为float</span></span><br><span class="line">  <span class="type">int</span> n,e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">  VertexType vex[maxSize];    <span class="comment">//存放结点信息</span></span><br><span class="line">&#125; MGragh;</span><br></pre></td></tr></table></figure></li><li><p>邻接表</p><ul><li>数组和链表相结合的存储方法，图的链式存储结构</li><li>图中顶点用一个一维数组存储</li><li>图中每个顶点 $V_i$ 的所有邻接点构成一个线性表</li><li>顶点表的各个结点由 data 和 Firstedge 两个域表示<ul><li>data 是数据域，存储顶点信息</li><li>firstedge 是指针域，指向边表的第一个结点，即顶点的第一个邻接点</li></ul></li><li>边表结点由 adjvex 和 next 两个域组成<ul><li>adjvex 是邻接点域，存储某顶点的邻接点在顶点表中坐标</li><li>next 存储边表中下一个结点指针</li></ul></li><li>有向图也可以用邻接表，出度表叫邻接表，入度表尾逆邻接表</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> adnex;    <span class="comment">//该边所指向的结点的位置</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ArcNode</span> * nextarc;    <span class="comment">//指向下一条边的指针</span></span><br><span class="line">    <span class="type">int</span> info;    <span class="comment">//该边的相关信息(如权值)</span></span><br><span class="line">&#125; ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data;    <span class="comment">//顶点信息</span></span><br><span class="line">    ArcNode* firstarc;    <span class="comment">//指向第一条边的指针</span></span><br><span class="line">&#125;VNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    VNode adjlist[maxSize];    <span class="comment">//邻接表</span></span><br><span class="line">    <span class="type">int</span> n, e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">&#125; AGraph;    <span class="comment">//图的邻接表类型</span></span><br></pre></td></tr></table></figure></li><li><p>十字链表</p><ul><li>在邻接表中针对有向图，分为邻接表和逆邻接表，导致无法从一个表中获取图的入读和出度的情况，有人提出了十字链表</li><li>定点表<ul><li>firstin：入边表头指针，指向顶点入边表的第一个结点</li><li>firstout：出边表头指针，指向顶点出边表第一个结点</li></ul></li><li>边表<ul><li>tailvex 是指弧起点在顶点表的下标，headvex 弧终点在顶点表的下标</li><li>headlink 入边表指针域，指向终点相同的下一条边</li><li>taillink 是指边表指针域，指向起点相同的下一条边</li></ul></li></ul></li><li><p>邻接多重表</p><ul><li>ivex 和 jvex 是与某条边依附的两个顶点在顶点表中的下标</li><li>ilink 指向依附项点 ivex 的下一条边</li><li>jlink 指向依附顶点 jvex 的下一条边</li></ul></li></ul></li></ul><h4 id="图的遍历算法"><a href="#图的遍历算法" class="headerlink" title="图的遍历算法"></a>图的遍历算法</h4><ul><li><p>深度优先遍历（DFS，Depth First Search） </p><ul><li>首先从图中某个顶点 $v_0$ 出发，访问此顶点，然后依次从 $v_0$ 相邻的顶点出发 深度优先遍历，直至图中所有与 $v_0$ 路径相通的顶点都被访问了</li><li>若此时尚有顶点未被访问， 则从中选一个顶点作为起始点，重复上述过程，直到所有的顶点都被访问</li><li>深度优先遍历是一个递归的过程，这种遍历过程类似树的先序遍历，均是先访问节点，再从该节点出发继续向下遍历</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组，为了防止重复访问</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做深度优先遍历</span></span><br><span class="line">            <span class="built_in">DFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>; <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">        <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            <span class="built_in">DFS</span>(G, w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>广度优先遍历（BFS，Breadth First Search）</p><ul><li>首先从图的某个顶点 $v_0$ 出发，访问了 $v_0$ 之后，依次访问与 $v_0$ 相邻的未被访 问的顶点</li><li>然后分别从这些顶点出发，广度优先遍历，直至所有的顶点都被访问完</li><li>BFS 遍历的方式类似于树的层次遍历</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; G.vexnum;++i)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做广度优先遍历</span></span><br><span class="line">            <span class="built_in">BFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>;    <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isEmpty</span>(Q))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q, v);</span><br><span class="line">        <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">            <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">visit</span>(w);</span><br><span class="line">                visited[w] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">EnQueue</span>(Q, w)</span><br><span class="line">            &#125;    <span class="comment">//if</span></span><br><span class="line">    &#125;    <span class="comment">//while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4></li><li><p>Prim 算法</p><ul><li>从图中仼意取出一个顶点，把它当成一棵树，然后从与这棵树相接的边中选取一条最短（权值最小）的边，并将这条边及其所连接的顶点也并入这棵树中，此时得到了一棵有两个顶点的树</li><li>然后从与这棵树相接的边中选取一条最短的边，并将这条边及其所连顶点并入当前树中，得到一棵有3个顶点的树</li><li>以此类推，直到图中所有顶点都被并入树中为止，此时得到的生成树就是最小生成树</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span> <span class="params">(G,T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = ∅;</span><br><span class="line">    U = &#123;w&#125;;</span><br><span class="line">    <span class="keyword">while</span> ((V - U) != ∅  )</span><br><span class="line">    &#123; <span class="comment">//若图中不含全部顶点</span></span><br><span class="line">        设  (u，v) 是使 u∈U 与 v∈ (V-U)，且权值最小的边;</span><br><span class="line">        T = T∪ (u，v); <span class="comment">//边归入树</span></span><br><span class="line">        U = U∪ &#123;v&#125;;     <span class="comment">//顶点归入树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Kruskal 算法</p><ul><li>将图中边按照权值从小到大排序，然后从最小边开始扫描各边，并检测当前边是否为候选边，即是否该边的并入会构成回路，如不构成回路，则将该边并入当前生成树中，直到所有边都被检测完为止</li><li>Kruskal 算法的时间复杂度主要由选取的排序算法决定，排序算法所处理数据的规模由图的边数e 决定，与顶点数无关，因此克鲁斯卡尔算法适用于稀疏图</li><li>普里姆算法和克鲁斯卡尔算法都是针对于无向图的</li><li>判断是否产生回路要用到并查集，并查集中保存了一棵或者几棵树<ul><li>通过树中一个结点，可以找到其双亲结点，进而找到根结点（可以快速地将两个含有很多元素的集合并为一个，两个集合就是并査集中的两棵树，只需找到其中一棵树的根，然后将其作为另一棵树中任何个结点的孩子结点即可，可以方便地判断两个元素是否属于同一个集合</li><li>通过这两个元素所在的结点找到它们的根结点，如果它们有相同的根，则说明它们属于同一个集合，否则属于不同集合</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> kruskal（V，T）</span><br><span class="line">&#123;</span><br><span class="line">    T = V;    <span class="comment">//初始化树，仅含顶点</span></span><br><span class="line">    numS = n;    <span class="comment">//不连分量的数目</span></span><br><span class="line">    <span class="keyword">while</span> (numS &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        从 E 中取出权值最小的边（v,u）;</span><br><span class="line">        <span class="keyword">if</span>（v 和 u 属于 T 中不同的连通分量）</span><br><span class="line">        &#123;</span><br><span class="line">            T = T∪（u，v）;<span class="comment">//将此边加入到生成树中；</span></span><br><span class="line">            numS--; <span class="comment">//不连通的分量减少 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h4></li><li><p>Dijkstra 算法</p><ul><li>通常用于求图中某一顶点到其余各顶点的最短路径</li><li>设  G=(V,E) 是一个带权有向图，把图中顶点集合 V 分成两组</li><li>第一组为已求出最短路径的顶点集合（用 S 表示，初始时 S 中只有一个源点，,以后每求得一条最短路径就将求得的顶点加入到集合 S 中，直到全部顶点都加入到 S 中）</li><li>第二组为其余未确定最短路径的顶点集合（用 U 表示），按最短路径长度的递增次序依次把第二组的顶点加入 S 中，在加入的过程中，总保持从源点 V 到 S 中各顶点的最短路径长度不大于从源点 V 到 U 中任何顶点的最短路径长度</li></ul></li><li><p>Dijkstra 算法步骤</p><ol><li>初始时，S 只包含源点，即 S＝{v}，v 的距离为 0，U 包含除 v 外的其他顶点，即:U={其 余顶点}，若 v 与 U 中顶点 u 有边，则正常有权值，若 u 不是 v 的出边邻接点，则 权值为 $∞$</li><li>从 U 中选取一个距离 v 最小的顶点 k，把 k 加入 S 中（该选定的距离就是 v 到 k 的最短路 径长度）</li><li>以 k 为新考虑的中间点，修改 U 中各顶点的距离值：若从源点 v 到顶点 u 的距离（经过顶点 k）比原来距离（不经过顶点 k）短，则修改顶点 u 的距离值，修改后的距离值为 v 到 k 的距离加上 k 到 u 的距离</li><li>重复步骤 b 和 c 直到所有顶点都包含在 S 中</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  　　<span class="type">bool</span> S[MAXNUM];                                  <span class="comment">// 判断是否已存入该点到S集合中</span></span><br><span class="line">      <span class="type">int</span> n=MAXNUM;</span><br><span class="line">  　　<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">      　　dist[i] = A[v0][i];</span><br><span class="line">      　　S[i] = <span class="literal">false</span>;                                <span class="comment">// 初始都未用过该点</span></span><br><span class="line">      　　<span class="keyword">if</span>(dist[i] == MAXINT)    </span><br><span class="line">            　　prev[i] = <span class="number">-1</span>;</span><br><span class="line"> 　　     <span class="keyword">else</span> </span><br><span class="line">            　　prev[i] = v0;</span><br><span class="line">   　　&#125;</span><br><span class="line">   　 dist[v0] = <span class="number">0</span>;</span><br><span class="line">   　 S[v0] = <span class="literal">true</span>; 　　</span><br><span class="line"> 　　 <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">       　　<span class="type">int</span> mindist = MAXINT;</span><br><span class="line">       　　<span class="type">int</span> u = v0; 　　                            <span class="comment">// 找出当前未使用的点j的dist[j]最小值</span></span><br><span class="line">      　　 <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">      　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; dist[j]&lt;mindist)</span><br><span class="line">      　　    &#123;</span><br><span class="line">         　　       u = j;                             <span class="comment">// u保存当前邻接点中距离最小的点的号码 </span></span><br><span class="line">         　 　      mindist = dist[j];</span><br><span class="line">       　　   &#125;</span><br><span class="line">       　　S[u] = <span class="literal">true</span>; </span><br><span class="line">       　　<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">       　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; A[u][j]&lt;MAXINT)</span><br><span class="line">       　　    &#123;</span><br><span class="line">           　    　<span class="keyword">if</span>(dist[u] + A[u][j] &lt; dist[j])     <span class="comment">//在通过新加入的u点路径找到离v0点更短的路径  </span></span><br><span class="line">           　    　&#123;</span><br><span class="line">                   　　dist[j] = dist[u] + A[u][j];    <span class="comment">//更新dist </span></span><br><span class="line">                   　　prev[j] = u;                    <span class="comment">//记录前驱顶点 </span></span><br><span class="line">            　　    &#125;</span><br><span class="line">        　    　&#125;</span><br><span class="line">   　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Floyd 算法</p><ul><li>Floyd-Warshall算法（Floyd-Warshall algorithm）是解决任意两点间的最短路径的一种算法，可以正确处理有向图或负权的最短路径问题，同时也被用于计算有向图的传递闭包</li><li>Floyd-Warshall 算法的时间复杂度为  $O(N^3)$，空间复杂度为  $O(N^2)$</li><li>Floyd 算法是一个经典的动态规划算法，目标是寻找从点 i 到点 j 的最短路径，假设 Dis(i,j) 为节点 u 到节点 v 的最短路径的距离</li><li>对于每一个节点 k，检查 Dis(i,k) + Dis(k,j) &lt; Dis(i,j) 是否成立，如果成立，证明从 i 到 k 再到 j 的路径比 i 直接到j的路径短，便设置 Dis(i,j) = Dis(i,k) + Dis(k,j)，这样当遍历完所有节点 k，Dis(i,j) 中记录的便是 i 到 j 的最短路径的距离</li></ul></li><li><p>Floyd 算法步骤</p><ul><li>从任意一条单边路径开始，所有两点之间的距离是边的权，如果两点之间没有边相连，则权为无穷大　　</li><li>对于每一对顶点 u 和 v，看看是否存在一个顶点 w 使得从 u 到 w 再到 v 比己知的路径更短，如果是更新它</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>;k &lt;= n;k++)</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] &gt; a[i][k] + a[k][j])</span><br><span class="line">                a[i][j] = a[i][k] + a[k][j];</span><br></pre></td></tr></table></figure><h4 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h4></li><li><p>对一个有向无环图 G 进行拓扑排序，是将 G 中所有顶点排成一个线性序列，使得图中任意一对顶点 u 和 v，若存在由 u 到 v 的路径，则在拓扑排序序列中一定是 u 出现在 v 的前边</p><ol><li>从 DAG 图中选择一个没有前驱的节点并输出</li><li>从图中删除该节点和所有以它为起点的有向边</li><li>重复上两步直到当前的 DAG 图为空或不存在无前驱的顶点为止</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topologicalSort</span><span class="params">(Graph GL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EdgeNode* e;</span><br><span class="line">    <span class="type">int</span> top = <span class="number">0</span>; <span class="comment">//用于栈指针下标 </span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 用于统计输出顶点的个数 </span></span><br><span class="line">    <span class="type">int</span>* stack; <span class="comment">// 建栈将入度为 0 的顶点入栈 </span></span><br><span class="line">    stack = (<span class="type">int</span>*)<span class="built_in">malloc</span>(GL-&gt;numVertexes * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; GL-&gt;numVertexes; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == GL-&gt;adjList[i].in) <span class="comment">//将入度为 0 的顶点入栈 </span></span><br><span class="line">            stack[++top] = i;</span><br><span class="line">    <span class="keyword">while</span> (top != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gettop = stack[top--];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, GL-&gt;adjList[gettop].data);</span><br><span class="line">        count++; <span class="comment">//输出 i 号顶点，并计数 </span></span><br><span class="line">        <span class="keyword">for</span> (e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next) &#123;</span><br><span class="line">            k = e-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span> (!(--GL-&gt;adjList[k].in))</span><br><span class="line">                <span class="comment">//将 i 顶点的邻接点入度减 1，如果减 1 后为 0，则入栈 </span></span><br><span class="line">                stack[++top] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; GL-&gt;numVertexes) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数据结构是指数据的存储结构，是带有结构特性的数据元素的集合。精心选择的数据结构可以带来更好的运行或者存储效率。数据结构是计算机科学与技术专业、软件工程专业甚至于其它电气信息类专业的重要专业基础课程，在408计算机学科专业基础综合考试中占有45分。我选择的课程是浙江大学数据结构<a href="https://www.icourse163.org/course/ZJU-93001">国家精品课</a>，以下为所记课堂笔记第二部分，包含树和图的知识总结以及所需记忆的代码，另外我在开源仓库中还保持了浙大慕课版本的<a href="https://github.com/Bezhuang/LearnCS/tree/main/%E5%90%8D%E6%A0%A1%E5%85%AC%E5%BC%80%E8%AF%BE/%E6%B5%99%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">代码</a>，可供参考。其他部分笔记详见<a href="/数据结构-上">数据结构（上）</a>和<a href="/数据结构-下">数据结构（下）</a></p></blockquote><!--more--><h3 id="矩阵与广义表-1"><a href="#矩阵与广义表-1" class="headerlink" title="矩阵与广义表"></a>矩阵与广义表</h3><h4 id="矩阵-1"><a href="#矩阵-1" class="headerlink" title="矩阵"></a>矩阵</h4><ul><li><p>矩阵的转置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trsmat</span><span class="params">(<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            B[j][i] = A[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>矩阵相加</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            C[i][j] = A[i][j] + B[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>矩阵相乘</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">amutmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; k;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            C[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="function"><span class="keyword">for</span> <span class="title">int</span><span class="params">(h = <span class="number">0</span>;h &lt; n;++h)</span></span></span><br><span class="line"><span class="function">                C[i][j] +</span>= A[i][j] * B[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相同的元素或者零元素在矩阵中分布存在一定规律的矩阵称为特殊矩阵，反之称为稀疏矩阵</p><ul><li>对称矩阵、三角阵、对角矩阵</li></ul></li></ul><h4 id="广义表-1"><a href="#广义表-1" class="headerlink" title="广义表"></a>广义表</h4><ul><li>表元素可以是原子或者广义表的一种线性表的扩展结构</li><li>广义表可以是递归定义的，长度为表最上层元素的个数，深度为表中括号的最大的层数</li><li>当广义表非空时，第一个元素为广义表的表头，其余元素组成的表是广义表的表尾</li><li>原子结点有两个域：标志域和数据域</li><li>广义表结点有三个域：标志域，头指针域与尾指针域</li></ul><h3 id="树-1"><a href="#树-1" class="headerlink" title="树"></a>树</h3><h4 id="树的基本概念-1"><a href="#树的基本概念-1" class="headerlink" title="树的基本概念"></a>树的基本概念</h4><ul><li>树是一种非线性的数据结构，是若干个结点的集合，由唯一的根和若干个互不相交的子树组成<ul><li>结点不仅包含数据元素，并且包含指向子树的分支</li><li>结点的度是结点拥有的子树个数或者分支个数，树的度是树中各结点度的最大值</li><li>树的高度是树中结点的最大层次，根结点的高度为树的高度</li></ul></li><li>树的双亲存储结构：<code>int tree[maxSize]</code></li><li>树的链式存储结构<ul><li>邻接表：孩子存储结构</li><li>孩子兄弟存储结构</li></ul></li></ul><h4 id="二叉树的概念和性质-1"><a href="#二叉树的概念和性质-1" class="headerlink" title="二叉树的概念和性质"></a>二叉树的概念和性质</h4><ul><li><p>二叉树的定义</p><ul><li>每个结点最多只有两颗子树，即二叉树中的结点的度只能为0、1、2</li><li>子树有左右顺序之分，不能颠倒</li></ul></li><li><p>满二叉树：在一颗二叉树中，如果所有的分支节点都有左、右孩子节点，并且叶子节点都集中在二叉树的最下一层</p></li><li><p>完全二叉树由满二叉树从右至左、从上之下挨个删除结点得到的</p></li><li><p>二叉树的主要性质</p><ol><li>非空二叉树上叶子结点数等于双分支结点数加1，$n_0=n_2+1$</li><li>在二叉树的第 $i$ 层上最多有 $2^{i-1}$个节点，$(i&gt;=1)$</li><li>二叉树中如果深度为 $k$，那么最多有 $2^{k-1}$ 个节点，$(k&gt;=1)$</li><li><p>若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点：</p><ul><li>若 i=1，则该结点是二叉树的根，无双亲，否则编号为 $\lfloor i/2\rfloor$ 的结点为其双亲结点（向下取整）</li><li>若 2i&gt;n，则该结点无左孩子，否则，编号为 2i 的结点为其左孩子结点</li><li>若 2i+1&gt;n，则该结点无右孩子，否则，编号为2i+1 的结点为其右孩子结点</li></ul></li><li>Catalan()：给定 n 个结点，能够成 $h\left( n\right) =\dfrac{C_{2n}^{n}}{n+1}$  棵不同的二叉树</li><li>在完全二叉树中，具有n个节点的完全二叉树的深度为 $\lfloor log2n\rfloor+1$</li></ol></li><li><p>二叉树的顺序存储结构最适用于完全二叉树</p></li><li><p>二叉树的链式存储结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BTNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>  data;    <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNoode</span>* lchild;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNode</span>* rchild;</span><br><span class="line">&#125; BTNode;</span><br></pre></td></tr></table></figure></li></ul><h4 id="二叉树的遍历算法-1"><a href="#二叉树的遍历算法-1" class="headerlink" title="二叉树的遍历算法"></a>二叉树的遍历算法</h4><ul><li><p>先序遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreTraverseTree2</span><span class="params">(BitNode * root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S;   <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p;   <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S);   <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;     <span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123;     <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p);    <span class="comment">//p 所指节点入栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);     <span class="comment">//相当于 visit（p）</span></span><br><span class="line">p = p-&gt;lchild ;     <span class="comment">//指向 p 的左孩子</span></span><br><span class="line"> &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;     <span class="comment">//p 所指节点为空，则出栈赋给 p，遍历右子树</span></span><br><span class="line">            <span class="built_in">StackPop</span>(S, p);</span><br><span class="line">            p = p-&gt;rchild;     <span class="comment">//若右孩子有左子树则继续 while 将左孩子入栈</span></span><br><span class="line">        &#125;    <span class="comment">//end else</span></span><br><span class="line">    &#125;    <span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;    <span class="comment">//end PreTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BiTNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中序遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverseTree2</span><span class="params">(BitNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p; <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S); <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p) &#123; <span class="comment">//如果是空树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S)) &#123; <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p); <span class="comment">//将节点入栈</span></span><br><span class="line">            p = p-&gt;lchild; <span class="comment">//指针一直向左孩子移动直到无左孩子</span></span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, p); <span class="comment">//p 左子树为空则出栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data); <span class="comment">//访问 p 节点</span></span><br><span class="line">            p = p-&gt;rchild; <span class="comment">//向右子树移动</span></span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end InOrderTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后序遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树非递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LastTraverseTree2</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; BiTNode* cur, * pre;<span class="comment">//定义一个栈指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>; S = <span class="built_in">InitStack</span>(S); <span class="comment">//cur 为当前节点指针，pre 保存上一节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    pre = <span class="literal">NULL</span>; cur = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">StackPush</span>(S, T); <span class="comment">//根节点入栈</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123; <span class="comment">//若栈非空</span></span><br><span class="line">        cur = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">StackGetTop</span>(S, cur); <span class="comment">//将栈顶节点赋给 cur</span></span><br><span class="line"><span class="comment">/*要保证根节点在左孩子和右孩子访问之后才能访问，因此对于任一节点 P，先将其入 栈。</span></span><br><span class="line"><span class="comment">如果 P 不存在左孩子和右孩子，则可以直接访问它；或者 P 存在左孩子或者右孩子，但是</span></span><br><span class="line"><span class="comment">其左孩子和右孩子都已被访问过了，则同样可以直接访问该节点。*/</span></span><br><span class="line">        <span class="keyword">if</span> ((cur-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; cur-&gt;rchild == <span class="literal">NULL</span>) ||</span><br><span class="line">            (pre != <span class="literal">NULL</span> &amp;&amp; (pre == cur-&gt;lchild || pre == cur-&gt;rchild)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, cur-&gt;data);</span><br><span class="line">            pre = cur;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, cur);</span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line"><span class="comment">//若非上述两种情况，则将 P 的右孩子和左孩子依次入栈，这样就保证了每次取栈顶元素</span></span><br><span class="line"><span class="comment">//的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根节点前面被访问。</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;rchild);</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;lchild);</span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end LastTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>层次遍历：自上而下，自左向右</p><ul><li>首先，将二叉树的祖先节点入队列</li><li>然后循环执行以下步骤，直到队列为空：节点出队列进行相应操作，该节点如果有左孩子节点，左孩子节点入队列，该节点如果有右孩子节点，右孩子节点入队</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LayerOrder</span><span class="params">(BiTreeNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LQueue Q;</span><br><span class="line">    <span class="built_in">Initiate_Queue</span>(&amp;Q);</span><br><span class="line">    BiTreeNode* p;</span><br><span class="line">    <span class="keyword">if</span> (head != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, head);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">QueueNotEmpty</span>(&amp;Q)) &#123;</span><br><span class="line">        p = <span class="built_in">QueueDelete</span>(&amp;Q);</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;LChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;LChild);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;RChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;RChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h4 id="哈夫曼树和哈夫曼编码-1"><a href="#哈夫曼树和哈夫曼编码-1" class="headerlink" title="哈夫曼树和哈夫曼编码"></a>哈夫曼树和哈夫曼编码</h4><ul><li><p>哈夫曼树又叫做最优二叉树，它的特点是带权路径最短</p><ul><li>树的路径长度是指从根到每个节点的路径长度之和</li><li>带权路径长度是从该节点到根节之间的路径长度乘以结点的权值</li><li>树的带权路径长度（WPL）是指树中所有叶子节点的带权路径长度之和</li></ul></li><li><p>求哈夫曼树的带权路径长度：WPL = 第 i 个节点的权值+ 第i个节点的长度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElemType <span class="title">WeightPathLength</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (FBT == <span class="literal">NULL</span>) <span class="comment">//空树返回0  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)<span class="comment">//访问到叶子结点  </span></span><br><span class="line">            <span class="keyword">return</span> FBT-&gt;data * len;  </span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//访问到非叶子结点，进行递归调用，返回左右子树的带权路径长度之和，len递增  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">WeightPathLength</span>(FBT-&gt;left,len+<span class="number">1</span>)+<span class="built_in">WeightPathLength</span>(FBT-&gt;right,len+<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>哈夫曼树的构造方法：根据数组 a 中 n 个权值建立一棵哈夫曼树，返回树根指针  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BTreeNode</span>* <span class="built_in">CreateHuffman</span>(ElemType a[], <span class="type">int</span> n)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> i, j;  </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTreeNode</span> **b, *q;  </span><br><span class="line">    b = <span class="built_in">malloc</span>(n*<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//初始化b指针数组，使每个指针元素指向a数组中对应的元素结点  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        b[i] = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        b[i]-&gt;data = a[i];  </span><br><span class="line">        b[i]-&gt;left = b[i]-&gt;right = <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)<span class="comment">//进行 n-1 次循环建立哈夫曼树  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">//k1表示森林中具有最小权值的树根结点的下标，k2为次最小的下标  </span></span><br><span class="line">        <span class="type">int</span> k1 = <span class="number">-1</span>, k2;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)<span class="comment">//让k1初始指向森林中第一棵树，k2指向第二棵  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span> &amp;&amp; k1 == <span class="number">-1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k1 = j;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k2 = j;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (j = k2; j &lt; n; j++)<span class="comment">//从当前森林中求出最小权值树和次最小  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k1]-&gt;data)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    k2 = k1;  </span><br><span class="line">                    k1 = j;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k2]-&gt;data)  </span><br><span class="line">                    k2 = j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//由最小权值树和次最小权值树建立一棵新树，q指向树根结点  </span></span><br><span class="line">        q = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        q-&gt;data = b[k1]-&gt;data + b[k2]-&gt;data;  </span><br><span class="line">        q-&gt;left = b[k1];  </span><br><span class="line">        q-&gt;right = b[k2];  </span><br><span class="line">  </span><br><span class="line">        b[k1] = q;<span class="comment">//将指向新树的指针赋给b指针数组中k1位置  </span></span><br><span class="line">        b[k2] = <span class="literal">NULL</span>;<span class="comment">//k2位置为空  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">free</span>(b); <span class="comment">//删除动态建立的数组b  </span></span><br><span class="line">    <span class="keyword">return</span> q; <span class="comment">//返回整个哈夫曼树的树根指针  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>哈夫曼编码</p><ul><li>每个字符对应一个二进制编码，采用不等长编码方式，构造哈夫曼树</li><li>将每个字符的出现频率作为字符结点的权值赋予叶子结点，每个分支结点的左右分支分别用0和1编码</li><li>从树根结点到每个叶子结点的路径上所经分支的0、1编码序列等于该叶子结点的二进制编码</li><li>哈夫曼编码产生的是最短前缀码</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffManCoding</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始值为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a[<span class="number">10</span>];  <span class="comment">//定义静态数组a，保存每个叶子的编码，数组长度至少是树深度减一  </span></span><br><span class="line">    <span class="keyword">if</span> (FBT != <span class="literal">NULL</span>)  <span class="comment">//访问到叶子结点时输出其保存在数组a中的0和1序列编码  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="type">int</span> i;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;结点权值为%d的编码：&quot;</span>, FBT-&gt;data);  </span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//访问到非叶子结点时分别向左右子树递归调用，并把分支上的0、1编码保存到数组a  </span></span><br><span class="line">        &#123;   <span class="comment">//的对应元素中，向下深入一层时len值增1  </span></span><br><span class="line">            a[len] = <span class="number">0</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;left, len + <span class="number">1</span>);  </span><br><span class="line">            a[len] = <span class="number">1</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;right, len + <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li></ul><h3 id="图-1"><a href="#图-1" class="headerlink" title="图"></a>图</h3><h4 id="图的基本概念-1"><a href="#图的基本概念-1" class="headerlink" title="图的基本概念"></a>图的基本概念</h4><ul><li>图由结点的有穷集合的 V 和边的集合  E 组成（<code>G(V,E)</code>）</li><li>图是按照无方向和有方向分为无向图和有向图，无向边用 $(v_i,v_j)$ 表示，有向边用 $<v_i,v_j>$ 表示</v_i,v_j></li><li>路径长度：路径上边或者弧的数目</li><li>顶点的度：顶点关联边的数目<ul><li>有向图中：方向指向顶点的边为入度；方向背向顶点的边为出度</li><li>在有向图中，顶点的度就是两者之和</li><li>在无向图中，任意两个顶点是相通的就是连通图，它的极大连通子图为连通分量</li><li>在向图中，任意两个顶点间互相都存在路径的就是强连通图，它的极大强连通子图为强连通分量</li></ul></li></ul><h4 id="图的存储结构-1"><a href="#图的存储结构-1" class="headerlink" title="图的存储结构"></a>图的存储结构</h4><ul><li><p>邻接矩阵</p><ul><li>图的顺序存储结构</li><li>用两个数组保存数据：一个一维数组存储图中顶点信息，一个二维数组存储图中边或弧的信息</li><li>无向图中邻接矩阵是个对称矩阵</li><li>0表示无边，1表示有边</li><li>顶点的度是行内数组之和，有向图中各行之和是出度，各列之和是入度 </li><li>邻接矩阵对于边数相对顶点较少的图，就是对存储空间极大的浪费</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> no;</span><br><span class="line">  <span class="type">char</span> info;</span><br><span class="line">&#125; VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> edges[maxSize][maxSize];    <span class="comment">//有权图中int改为float</span></span><br><span class="line">  <span class="type">int</span> n,e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">  VertexType vex[maxSize];    <span class="comment">//存放结点信息</span></span><br><span class="line">&#125; MGragh;</span><br></pre></td></tr></table></figure></li><li><p>邻接表</p><ul><li>数组和链表相结合的存储方法，图的链式存储结构</li><li>图中顶点用一个一维数组存储</li><li>图中每个顶点 $V_i$ 的所有邻接点构成一个线性表</li><li>顶点表的各个结点由 data 和 Firstedge 两个域表示<ul><li>data 是数据域，存储顶点信息</li><li>firstedge 是指针域，指向边表的第一个结点，即顶点的第一个邻接点</li></ul></li><li>边表结点由 adjvex 和 next 两个域组成<ul><li>adjvex 是邻接点域，存储某顶点的邻接点在顶点表中坐标</li><li>next 存储边表中下一个结点指针</li></ul></li><li>有向图也可以用邻接表，出度表叫邻接表，入度表尾逆邻接表</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> adnex;    <span class="comment">//该边所指向的结点的位置</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ArcNode</span> * nextarc;    <span class="comment">//指向下一条边的指针</span></span><br><span class="line">    <span class="type">int</span> info;    <span class="comment">//该边的相关信息(如权值)</span></span><br><span class="line">&#125; ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data;    <span class="comment">//顶点信息</span></span><br><span class="line">    ArcNode* firstarc;    <span class="comment">//指向第一条边的指针</span></span><br><span class="line">&#125;VNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    VNode adjlist[maxSize];    <span class="comment">//邻接表</span></span><br><span class="line">    <span class="type">int</span> n, e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">&#125; AGraph;    <span class="comment">//图的邻接表类型</span></span><br></pre></td></tr></table></figure></li><li><p>十字链表</p><ul><li>在邻接表中针对有向图，分为邻接表和逆邻接表，导致无法从一个表中获取图的入读和出度的情况，有人提出了十字链表</li><li>定点表<ul><li>firstin：入边表头指针，指向顶点入边表的第一个结点</li><li>firstout：出边表头指针，指向顶点出边表第一个结点</li></ul></li><li>边表<ul><li>tailvex 是指弧起点在顶点表的下标，headvex 弧终点在顶点表的下标</li><li>headlink 入边表指针域，指向终点相同的下一条边</li><li>taillink 是指边表指针域，指向起点相同的下一条边</li></ul></li></ul></li><li><p>邻接多重表</p><ul><li>ivex 和 jvex 是与某条边依附的两个顶点在顶点表中的下标</li><li>ilink 指向依附项点 ivex 的下一条边</li><li>jlink 指向依附顶点 jvex 的下一条边</li></ul></li></ul></li></ul><pre><code>#### 图的遍历算法- 深度优先遍历（DFS，Depth First Search）   - 首先从图中某个顶点 $v_0$ 出发，访问此顶点，然后依次从 $v_0$ 相邻的顶点出发 深度优先遍历，直至图中所有与 $v_0$ 路径相通的顶点都被访问了  - 若此时尚有顶点未被访问， 则从中选一个顶点作为起始点，重复上述过程，直到所有的顶点都被访问  - 深度优先遍历是一个递归的过程，这种遍历过程类似树的先序遍历，均是先访问节点，再从该节点出发继续向下遍历  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组，为了防止重复访问</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做深度优先遍历</span></span><br><span class="line">            <span class="built_in">DFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>; <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">        <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            <span class="built_in">DFS</span>(G, w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 广度优先遍历（BFS，Breadth First Search）  - 首先从图的某个顶点 $v_0$ 出发，访问了 $v_0$ 之后，依次访问与 $v_0$ 相邻的未被访 问的顶点  - 然后分别从这些顶点出发，广度优先遍历，直至所有的顶点都被访问完  - BFS 遍历的方式类似于树的层次遍历  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; G.vexnum;++i)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做广度优先遍历</span></span><br><span class="line">            <span class="built_in">BFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>;    <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isEmpty</span>(Q))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q, v);</span><br><span class="line">        <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">            <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">visit</span>(w);</span><br><span class="line">                visited[w] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">EnQueue</span>(Q, w)</span><br><span class="line">            &#125;    <span class="comment">//if</span></span><br><span class="line">    &#125;    <span class="comment">//while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>#### 最小生成树- Prim 算法  - 从图中仼意取出一个顶点，把它当成一棵树，然后从与这棵树相接的边中选取一条最短（权值最小）的边，并将这条边及其所连接的顶点也并入这棵树中，此时得到了一棵有两个顶点的树  - 然后从与这棵树相接的边中选取一条最短的边，并将这条边及其所连顶点并入当前树中，得到一棵有3个顶点的树  - 以此类推，直到图中所有顶点都被并入树中为止，此时得到的生成树就是最小生成树  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span> <span class="params">(G,T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = ∅;</span><br><span class="line">    U = &#123;w&#125;;</span><br><span class="line">    <span class="keyword">while</span> ((V - U) != ∅  )</span><br><span class="line">    &#123; <span class="comment">//若图中不含全部顶点</span></span><br><span class="line">        设  (u，v) 是使 u∈U 与 v∈ (V-U)，且权值最小的边;</span><br><span class="line">        T = T∪ (u，v); <span class="comment">//边归入树</span></span><br><span class="line">        U = U∪ &#123;v&#125;;     <span class="comment">//顶点归入树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- Kruskal 算法  - 将图中边按照权值从小到大排序，然后从最小边开始扫描各边，并检测当前边是否为候选边，即是否该边的并入会构成回路，如不构成回路，则将该边并入当前生成树中，直到所有边都被检测完为止  - Kruskal 算法的时间复杂度主要由选取的排序算法决定，排序算法所处理数据的规模由图的边数e 决定，与顶点数无关，因此克鲁斯卡尔算法适用于稀疏图  - 普里姆算法和克鲁斯卡尔算法都是针对于无向图的  - 判断是否产生回路要用到并查集，并查集中保存了一棵或者几棵树    - 通过树中一个结点，可以找到其双亲结点，进而找到根结点（可以快速地将两个含有很多元素的集合并为一个，两个集合就是并査集中的两棵树，只需找到其中一棵树的根，然后将其作为另一棵树中任何个结点的孩子结点即可，可以方便地判断两个元素是否属于同一个集合    - 通过这两个元素所在的结点找到它们的根结点，如果它们有相同的根，则说明它们属于同一个集合，否则属于不同集合  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> kruskal（V，T）</span><br><span class="line">&#123;</span><br><span class="line">    T = V;    <span class="comment">//初始化树，仅含顶点</span></span><br><span class="line">    numS = n;    <span class="comment">//不连分量的数目</span></span><br><span class="line">    <span class="keyword">while</span> (numS &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        从 E 中取出权值最小的边（v,u）;</span><br><span class="line">        <span class="keyword">if</span>（v 和 u 属于 T 中不同的连通分量）</span><br><span class="line">        &#123;</span><br><span class="line">            T = T∪（u，v）;<span class="comment">//将此边加入到生成树中；</span></span><br><span class="line">            numS--; <span class="comment">//不连通的分量减少 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>#### 最短路径- Dijkstra 算法  - 通常用于求图中某一顶点到其余各顶点的最短路径  - 设  G=(V,E) 是一个带权有向图，把图中顶点集合 V 分成两组  - 第一组为已求出最短路径的顶点集合（用 S 表示，初始时 S 中只有一个源点，,以后每求得一条最短路径就将求得的顶点加入到集合 S 中，直到全部顶点都加入到 S 中）  - 第二组为其余未确定最短路径的顶点集合（用 U 表示），按最短路径长度的递增次序依次把第二组的顶点加入 S 中，在加入的过程中，总保持从源点 V 到 S 中各顶点的最短路径长度不大于从源点 V 到 U 中任何顶点的最短路径长度- Dijkstra 算法步骤  1. 初始时，S 只包含源点，即 S＝&#123;v&#125;，v 的距离为 0，U 包含除 v 外的其他顶点，即:U=&#123;其 余顶点&#125;，若 v 与 U 中顶点 u 有边，则正常有权值，若 u 不是 v 的出边邻接点，则 权值为 $∞$  2. 从 U 中选取一个距离 v 最小的顶点 k，把 k 加入 S 中（该选定的距离就是 v 到 k 的最短路 径长度）  3. 以 k 为新考虑的中间点，修改 U 中各顶点的距离值：若从源点 v 到顶点 u 的距离（经过顶点 k）比原来距离（不经过顶点 k）短，则修改顶点 u 的距离值，修改后的距离值为 v 到 k 的距离加上 k 到 u 的距离  4. 重复步骤 b 和 c 直到所有顶点都包含在 S 中  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  　　<span class="type">bool</span> S[MAXNUM];                                  <span class="comment">// 判断是否已存入该点到S集合中</span></span><br><span class="line">      <span class="type">int</span> n=MAXNUM;</span><br><span class="line">  　　<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">      　　dist[i] = A[v0][i];</span><br><span class="line">      　　S[i] = <span class="literal">false</span>;                                <span class="comment">// 初始都未用过该点</span></span><br><span class="line">      　　<span class="keyword">if</span>(dist[i] == MAXINT)    </span><br><span class="line">            　　prev[i] = <span class="number">-1</span>;</span><br><span class="line"> 　　     <span class="keyword">else</span> </span><br><span class="line">            　　prev[i] = v0;</span><br><span class="line">   　　&#125;</span><br><span class="line">   　 dist[v0] = <span class="number">0</span>;</span><br><span class="line">   　 S[v0] = <span class="literal">true</span>; 　　</span><br><span class="line"> 　　 <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">       　　<span class="type">int</span> mindist = MAXINT;</span><br><span class="line">       　　<span class="type">int</span> u = v0; 　　                            <span class="comment">// 找出当前未使用的点j的dist[j]最小值</span></span><br><span class="line">      　　 <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">      　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; dist[j]&lt;mindist)</span><br><span class="line">      　　    &#123;</span><br><span class="line">         　　       u = j;                             <span class="comment">// u保存当前邻接点中距离最小的点的号码 </span></span><br><span class="line">         　 　      mindist = dist[j];</span><br><span class="line">       　　   &#125;</span><br><span class="line">       　　S[u] = <span class="literal">true</span>; </span><br><span class="line">       　　<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">       　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; A[u][j]&lt;MAXINT)</span><br><span class="line">       　　    &#123;</span><br><span class="line">           　    　<span class="keyword">if</span>(dist[u] + A[u][j] &lt; dist[j])     <span class="comment">//在通过新加入的u点路径找到离v0点更短的路径  </span></span><br><span class="line">           　    　&#123;</span><br><span class="line">                   　　dist[j] = dist[u] + A[u][j];    <span class="comment">//更新dist </span></span><br><span class="line">                   　　prev[j] = u;                    <span class="comment">//记录前驱顶点 </span></span><br><span class="line">            　　    &#125;</span><br><span class="line">        　    　&#125;</span><br><span class="line">   　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- Floyd 算法  - Floyd-Warshall算法（Floyd-Warshall algorithm）是解决任意两点间的最短路径的一种算法，可以正确处理有向图或负权的最短路径问题，同时也被用于计算有向图的传递闭包  - Floyd-Warshall 算法的时间复杂度为  $O(N^3)$，空间复杂度为  $O(N^2)$  - Floyd 算法是一个经典的动态规划算法，目标是寻找从点 i 到点 j 的最短路径，假设 Dis(i,j) 为节点 u 到节点 v 的最短路径的距离  - 对于每一个节点 k，检查 Dis(i,k) + Dis(k,j) &lt; Dis(i,j) 是否成立，如果成立，证明从 i 到 k 再到 j 的路径比 i 直接到j的路径短，便设置 Dis(i,j) = Dis(i,k) + Dis(k,j)，这样当遍历完所有节点 k，Dis(i,j) 中记录的便是 i 到 j 的最短路径的距离- Floyd 算法步骤  - 从任意一条单边路径开始，所有两点之间的距离是边的权，如果两点之间没有边相连，则权为无穷大　　  - 对于每一对顶点 u 和 v，看看是否存在一个顶点 w 使得从 u 到 w 再到 v 比己知的路径更短，如果是更新它  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>;k &lt;= n;k++)</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] &gt; a[i][k] + a[k][j])</span><br><span class="line">                a[i][j] = a[i][k] + a[k][j];</span><br></pre></td></tr></table></figure>#### 拓扑排序- 对一个有向无环图 G 进行拓扑排序，是将 G 中所有顶点排成一个线性序列，使得图中任意一对顶点 u 和 v，若存在由 u 到 v 的路径，则在拓扑排序序列中一定是 u 出现在 v 的前边  1. 从 DAG 图中选择一个没有前驱的节点并输出  2. 从图中删除该节点和所有以它为起点的有向边  3. 重复上两步直到当前的 DAG 图为空或不存在无前驱的顶点为止  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topologicalSort</span><span class="params">(Graph GL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EdgeNode* e;</span><br><span class="line">    <span class="type">int</span> top = <span class="number">0</span>; <span class="comment">//用于栈指针下标 </span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 用于统计输出顶点的个数 </span></span><br><span class="line">    <span class="type">int</span>* stack; <span class="comment">// 建栈将入度为 0 的顶点入栈 </span></span><br><span class="line">    stack = (<span class="type">int</span>*)<span class="built_in">malloc</span>(GL-&gt;numVertexes * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; GL-&gt;numVertexes; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == GL-&gt;adjList[i].in) <span class="comment">//将入度为 0 的顶点入栈 </span></span><br><span class="line">            stack[++top] = i;</span><br><span class="line">    <span class="keyword">while</span> (top != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gettop = stack[top--];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, GL-&gt;adjList[gettop].data);</span><br><span class="line">        count++; <span class="comment">//输出 i 号顶点，并计数 </span></span><br><span class="line">        <span class="keyword">for</span> (e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next) &#123;</span><br><span class="line">            k = e-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span> (!(--GL-&gt;adjList[k].in))</span><br><span class="line">                <span class="comment">//将 i 顶点的邻接点入度减 1，如果减 1 后为 0，则入栈 </span></span><br><span class="line">                stack[++top] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; GL-&gt;numVertexes) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  &gt; 数据结构是指数据的存储结构，是带有结构特性的数据元素的集合。精心选择的数据结构可以带来更好的运行或者存储效率。数据结构是计算机科学与技术专业、软件工程专业甚至于其它电气信息类专业的重要专业基础课程，在408计算机学科专业基础综合考试中占有45分。我选择的课程是浙江大学数据结构[国家精品课](https://www.icourse163.org/course/ZJU-93001)，以下为所记课堂笔记第二部分，包含树和图的知识总结以及所需记忆的代码，另外我在开源仓库中还保持了浙大慕课版本的[代码](https://github.com/Bezhuang/LearnCS/tree/main/%E5%90%8D%E6%A0%A1%E5%85%AC%E5%BC%80%E8%AF%BE/%E6%B5%99%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)，可供参考。其他部分笔记详见[数据结构（上）](/数据结构-上)和[数据结构（下）](/数据结构-下)  &lt;!--more--&gt;  ### 矩阵与广义表  #### 矩阵  - 矩阵的转置    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trsmat</span><span class="params">(<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            B[j][i] = A[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 矩阵相加    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            C[i][j] = A[i][j] + B[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 矩阵相乘    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">amutmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; k;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            C[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="function"><span class="keyword">for</span> <span class="title">int</span><span class="params">(h = <span class="number">0</span>;h &lt; n;++h)</span></span></span><br><span class="line"><span class="function">                C[i][j] +</span>= A[i][j] * B[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 相同的元素或者零元素在矩阵中分布存在一定规律的矩阵称为特殊矩阵，反之称为稀疏矩阵    - 对称矩阵、三角阵、对角矩阵  #### 广义表  - 表元素可以是原子或者广义表的一种线性表的扩展结构  - 广义表可以是递归定义的，长度为表最上层元素的个数，深度为表中括号的最大的层数  - 当广义表非空时，第一个元素为广义表的表头，其余元素组成的表是广义表的表尾  - 原子结点有两个域：标志域和数据域  - 广义表结点有三个域：标志域，头指针域与尾指针域  ### 树  #### 树的基本概念  - 树是一种非线性的数据结构，是若干个结点的集合，由唯一的根和若干个互不相交的子树组成    - 结点不仅包含数据元素，并且包含指向子树的分支    - 结点的度是结点拥有的子树个数或者分支个数，树的度是树中各结点度的最大值    - 树的高度是树中结点的最大层次，根结点的高度为树的高度  - 树的双亲存储结构：`int tree[maxSize]`  - 树的链式存储结构    - 邻接表：孩子存储结构    - 孩子兄弟存储结构  #### 二叉树的概念和性质  - 二叉树的定义    - 每个结点最多只有两颗子树，即二叉树中的结点的度只能为0、1、2    - 子树有左右顺序之分，不能颠倒  - 满二叉树：在一颗二叉树中，如果所有的分支节点都有左、右孩子节点，并且叶子节点都集中在二叉树的最下一层  - 完全二叉树由满二叉树从右至左、从上之下挨个删除结点得到的  - 二叉树的主要性质    1. 非空二叉树上叶子结点数等于双分支结点数加1，$n_0=n_2+1$    2. 在二叉树的第 $i$ 层上最多有 $2^&#123;i-1&#125;$个节点，$(i&gt;=1)$    3. 二叉树中如果深度为 $k$，那么最多有 $2^&#123;k-1&#125;$ 个节点，$(k&gt;=1)$    4. 若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点：       - 若 i=1，则该结点是二叉树的根，无双亲，否则编号为 $\lfloor i/2\rfloor$ 的结点为其双亲结点（向下取整）       - 若 2i&gt;n，则该结点无左孩子，否则，编号为 2i 的结点为其左孩子结点       - 若 2i+1&gt;n，则该结点无右孩子，否则，编号为2i+1 的结点为其右孩子结点    5. Catalan()：给定 n 个结点，能够成 $h\left( n\right) =\dfrac&#123;C_&#123;2n&#125;^&#123;n&#125;&#125;&#123;n+1&#125;$  棵不同的二叉树    6. 在完全二叉树中，具有n个节点的完全二叉树的深度为 $\lfloor log2n\rfloor+1$  - 二叉树的顺序存储结构最适用于完全二叉树  - 二叉树的链式存储结构    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BTNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>  data;    <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNoode</span>* lchild;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNode</span>* rchild;</span><br><span class="line">&#125; BTNode;</span><br></pre></td></tr></table></figure>  #### 二叉树的遍历算法  - 先序遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreTraverseTree2</span><span class="params">(BitNode * root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S;   <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p;   <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S);   <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;     <span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123;     <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p);    <span class="comment">//p 所指节点入栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);     <span class="comment">//相当于 visit（p）</span></span><br><span class="line">p = p-&gt;lchild ;     <span class="comment">//指向 p 的左孩子</span></span><br><span class="line"> &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;     <span class="comment">//p 所指节点为空，则出栈赋给 p，遍历右子树</span></span><br><span class="line">            <span class="built_in">StackPop</span>(S, p);</span><br><span class="line">            p = p-&gt;rchild;     <span class="comment">//若右孩子有左子树则继续 while 将左孩子入栈</span></span><br><span class="line">        &#125;    <span class="comment">//end else</span></span><br><span class="line">    &#125;    <span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;    <span class="comment">//end PreTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BiTNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 中序遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverseTree2</span><span class="params">(BitNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p; <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S); <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p) &#123; <span class="comment">//如果是空树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S)) &#123; <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p); <span class="comment">//将节点入栈</span></span><br><span class="line">            p = p-&gt;lchild; <span class="comment">//指针一直向左孩子移动直到无左孩子</span></span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, p); <span class="comment">//p 左子树为空则出栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data); <span class="comment">//访问 p 节点</span></span><br><span class="line">            p = p-&gt;rchild; <span class="comment">//向右子树移动</span></span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end InOrderTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 后序遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树非递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LastTraverseTree2</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; BiTNode* cur, * pre;<span class="comment">//定义一个栈指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>; S = <span class="built_in">InitStack</span>(S); <span class="comment">//cur 为当前节点指针，pre 保存上一节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    pre = <span class="literal">NULL</span>; cur = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">StackPush</span>(S, T); <span class="comment">//根节点入栈</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123; <span class="comment">//若栈非空</span></span><br><span class="line">        cur = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">StackGetTop</span>(S, cur); <span class="comment">//将栈顶节点赋给 cur</span></span><br><span class="line"><span class="comment">/*要保证根节点在左孩子和右孩子访问之后才能访问，因此对于任一节点 P，先将其入 栈。</span></span><br><span class="line"><span class="comment">如果 P 不存在左孩子和右孩子，则可以直接访问它；或者 P 存在左孩子或者右孩子，但是</span></span><br><span class="line"><span class="comment">其左孩子和右孩子都已被访问过了，则同样可以直接访问该节点。*/</span></span><br><span class="line">        <span class="keyword">if</span> ((cur-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; cur-&gt;rchild == <span class="literal">NULL</span>) ||</span><br><span class="line">            (pre != <span class="literal">NULL</span> &amp;&amp; (pre == cur-&gt;lchild || pre == cur-&gt;rchild)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, cur-&gt;data);</span><br><span class="line">            pre = cur;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, cur);</span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line"><span class="comment">//若非上述两种情况，则将 P 的右孩子和左孩子依次入栈，这样就保证了每次取栈顶元素</span></span><br><span class="line"><span class="comment">//的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根节点前面被访问。</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;rchild);</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;lchild);</span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end LastTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 层次遍历：自上而下，自左向右    - 首先，将二叉树的祖先节点入队列    - 然后循环执行以下步骤，直到队列为空：节点出队列进行相应操作，该节点如果有左孩子节点，左孩子节点入队列，该节点如果有右孩子节点，右孩子节点入队    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LayerOrder</span><span class="params">(BiTreeNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LQueue Q;</span><br><span class="line">    <span class="built_in">Initiate_Queue</span>(&amp;Q);</span><br><span class="line">    BiTreeNode* p;</span><br><span class="line">    <span class="keyword">if</span> (head != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, head);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">QueueNotEmpty</span>(&amp;Q)) &#123;</span><br><span class="line">        p = <span class="built_in">QueueDelete</span>(&amp;Q);</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;LChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;LChild);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;RChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;RChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>  #### 哈夫曼树和哈夫曼编码  - 哈夫曼树又叫做最优二叉树，它的特点是带权路径最短    - 树的路径长度是指从根到每个节点的路径长度之和    - 带权路径长度是从该节点到根节之间的路径长度乘以结点的权值    - 树的带权路径长度（WPL）是指树中所有叶子节点的带权路径长度之和  - 求哈夫曼树的带权路径长度：WPL = 第 i 个节点的权值+ 第i个节点的长度    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElemType <span class="title">WeightPathLength</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (FBT == <span class="literal">NULL</span>) <span class="comment">//空树返回0  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)<span class="comment">//访问到叶子结点  </span></span><br><span class="line">            <span class="keyword">return</span> FBT-&gt;data * len;  </span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//访问到非叶子结点，进行递归调用，返回左右子树的带权路径长度之和，len递增  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">WeightPathLength</span>(FBT-&gt;left,len+<span class="number">1</span>)+<span class="built_in">WeightPathLength</span>(FBT-&gt;right,len+<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>  - 哈夫曼树的构造方法：根据数组 a 中 n 个权值建立一棵哈夫曼树，返回树根指针      <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BTreeNode</span>* <span class="built_in">CreateHuffman</span>(ElemType a[], <span class="type">int</span> n)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> i, j;  </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTreeNode</span> **b, *q;  </span><br><span class="line">    b = <span class="built_in">malloc</span>(n*<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//初始化b指针数组，使每个指针元素指向a数组中对应的元素结点  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        b[i] = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        b[i]-&gt;data = a[i];  </span><br><span class="line">        b[i]-&gt;left = b[i]-&gt;right = <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)<span class="comment">//进行 n-1 次循环建立哈夫曼树  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">//k1表示森林中具有最小权值的树根结点的下标，k2为次最小的下标  </span></span><br><span class="line">        <span class="type">int</span> k1 = <span class="number">-1</span>, k2;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)<span class="comment">//让k1初始指向森林中第一棵树，k2指向第二棵  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span> &amp;&amp; k1 == <span class="number">-1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k1 = j;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k2 = j;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (j = k2; j &lt; n; j++)<span class="comment">//从当前森林中求出最小权值树和次最小  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k1]-&gt;data)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    k2 = k1;  </span><br><span class="line">                    k1 = j;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k2]-&gt;data)  </span><br><span class="line">                    k2 = j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//由最小权值树和次最小权值树建立一棵新树，q指向树根结点  </span></span><br><span class="line">        q = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        q-&gt;data = b[k1]-&gt;data + b[k2]-&gt;data;  </span><br><span class="line">        q-&gt;left = b[k1];  </span><br><span class="line">        q-&gt;right = b[k2];  </span><br><span class="line">  </span><br><span class="line">        b[k1] = q;<span class="comment">//将指向新树的指针赋给b指针数组中k1位置  </span></span><br><span class="line">        b[k2] = <span class="literal">NULL</span>;<span class="comment">//k2位置为空  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">free</span>(b); <span class="comment">//删除动态建立的数组b  </span></span><br><span class="line">    <span class="keyword">return</span> q; <span class="comment">//返回整个哈夫曼树的树根指针  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>  - 哈夫曼编码    - 每个字符对应一个二进制编码，采用不等长编码方式，构造哈夫曼树    - 将每个字符的出现频率作为字符结点的权值赋予叶子结点，每个分支结点的左右分支分别用0和1编码    - 从树根结点到每个叶子结点的路径上所经分支的0、1编码序列等于该叶子结点的二进制编码    - 哈夫曼编码产生的是最短前缀码    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffManCoding</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始值为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a[<span class="number">10</span>];  <span class="comment">//定义静态数组a，保存每个叶子的编码，数组长度至少是树深度减一  </span></span><br><span class="line">    <span class="keyword">if</span> (FBT != <span class="literal">NULL</span>)  <span class="comment">//访问到叶子结点时输出其保存在数组a中的0和1序列编码  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="type">int</span> i;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;结点权值为%d的编码：&quot;</span>, FBT-&gt;data);  </span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//访问到非叶子结点时分别向左右子树递归调用，并把分支上的0、1编码保存到数组a  </span></span><br><span class="line">        &#123;   <span class="comment">//的对应元素中，向下深入一层时len值增1  </span></span><br><span class="line">            a[len] = <span class="number">0</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;left, len + <span class="number">1</span>);  </span><br><span class="line">            a[len] = <span class="number">1</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;right, len + <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>  ### 图  #### 图的基本概念  - 图由结点的有穷集合的 V 和边的集合  E 组成（`G(V,E)`）  - 图是按照无方向和有方向分为无向图和有向图，无向边用 $(v_i,v_j)$ 表示，有向边用 $&lt;v_i,v_j&gt;$ 表示  - 路径长度：路径上边或者弧的数目  - 顶点的度：顶点关联边的数目    - 有向图中：方向指向顶点的边为入度；方向背向顶点的边为出度    - 在有向图中，顶点的度就是两者之和    - 在无向图中，任意两个顶点是相通的就是连通图，它的极大连通子图为连通分量    - 在向图中，任意两个顶点间互相都存在路径的就是强连通图，它的极大强连通子图为强连通分量  #### 图的存储结构  - 邻接矩阵    - 图的顺序存储结构    - 用两个数组保存数据：一个一维数组存储图中顶点信息，一个二维数组存储图中边或弧的信息    - 无向图中邻接矩阵是个对称矩阵    - 0表示无边，1表示有边    - 顶点的度是行内数组之和，有向图中各行之和是出度，各列之和是入度     - 邻接矩阵对于边数相对顶点较少的图，就是对存储空间极大的浪费    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> no;</span><br><span class="line">  <span class="type">char</span> info;</span><br><span class="line">&#125; VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> edges[maxSize][maxSize];    <span class="comment">//有权图中int改为float</span></span><br><span class="line">  <span class="type">int</span> n,e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">  VertexType vex[maxSize];    <span class="comment">//存放结点信息</span></span><br><span class="line">&#125; MGragh;</span><br></pre></td></tr></table></figure>  - 邻接表    - 数组和链表相结合的存储方法，图的链式存储结构    - 图中顶点用一个一维数组存储    - 图中每个顶点 $V_i$ 的所有邻接点构成一个线性表    - 顶点表的各个结点由 data 和 Firstedge 两个域表示      - data 是数据域，存储顶点信息      - firstedge 是指针域，指向边表的第一个结点，即顶点的第一个邻接点    - 边表结点由 adjvex 和 next 两个域组成      - adjvex 是邻接点域，存储某顶点的邻接点在顶点表中坐标      - next 存储边表中下一个结点指针    - 有向图也可以用邻接表，出度表叫邻接表，入度表尾逆邻接表    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> adnex;    <span class="comment">//该边所指向的结点的位置</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ArcNode</span> * nextarc;    <span class="comment">//指向下一条边的指针</span></span><br><span class="line">    <span class="type">int</span> info;    <span class="comment">//该边的相关信息(如权值)</span></span><br><span class="line">&#125; ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data;    <span class="comment">//顶点信息</span></span><br><span class="line">    ArcNode* firstarc;    <span class="comment">//指向第一条边的指针</span></span><br><span class="line">&#125;VNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    VNode adjlist[maxSize];    <span class="comment">//邻接表</span></span><br><span class="line">    <span class="type">int</span> n, e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">&#125; AGraph;    <span class="comment">//图的邻接表类型</span></span><br></pre></td></tr></table></figure>  - 十字链表    - 在邻接表中针对有向图，分为邻接表和逆邻接表，导致无法从一个表中获取图的入读和出度的情况，有人提出了十字链表    - 定点表      - firstin：入边表头指针，指向顶点入边表的第一个结点      - firstout：出边表头指针，指向顶点出边表第一个结点    - 边表      - tailvex 是指弧起点在顶点表的下标，headvex 弧终点在顶点表的下标      - headlink 入边表指针域，指向终点相同的下一条边      - taillink 是指边表指针域，指向起点相同的下一条边  - 邻接多重表    - ivex 和 jvex 是与某条边依附的两个顶点在顶点表中的下标    - ilink 指向依附项点 ivex 的下一条边    - jlink 指向依附顶点 jvex 的下一条边  #### 图的遍历算法  - 深度优先遍历（DFS，Depth First Search）     - 首先从图中某个顶点 $v_0$ 出发，访问此顶点，然后依次从 $v_0$ 相邻的顶点出发 深度优先遍历，直至图中所有与 $v_0$ 路径相通的顶点都被访问了    - 若此时尚有顶点未被访问， 则从中选一个顶点作为起始点，重复上述过程，直到所有的顶点都被访问    - 深度优先遍历是一个递归的过程，这种遍历过程类似树的先序遍历，均是先访问节点，再从该节点出发继续向下遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组，为了防止重复访问</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做深度优先遍历</span></span><br><span class="line">            <span class="built_in">DFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>; <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">        <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            <span class="built_in">DFS</span>(G, w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 广度优先遍历（BFS，Breadth First Search）    - 首先从图的某个顶点 $v_0$ 出发，访问了 $v_0$ 之后，依次访问与 $v_0$ 相邻的未被访 问的顶点    - 然后分别从这些顶点出发，广度优先遍历，直至所有的顶点都被访问完    - BFS 遍历的方式类似于树的层次遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; G.vexnum;++i)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做广度优先遍历</span></span><br><span class="line">            <span class="built_in">BFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>;    <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isEmpty</span>(Q))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q, v);</span><br><span class="line">        <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">            <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">visit</span>(w);</span><br><span class="line">                visited[w] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">EnQueue</span>(Q, w)</span><br><span class="line">            &#125;    <span class="comment">//if</span></span><br><span class="line">    &#125;    <span class="comment">//while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  #### 最小生成树  - Prim 算法    - 从图中仼意取出一个顶点，把它当成一棵树，然后从与这棵树相接的边中选取一条最短（权值最小）的边，并将这条边及其所连接的顶点也并入这棵树中，此时得到了一棵有两个顶点的树    - 然后从与这棵树相接的边中选取一条最短的边，并将这条边及其所连顶点并入当前树中，得到一棵有3个顶点的树    - 以此类推，直到图中所有顶点都被并入树中为止，此时得到的生成树就是最小生成树    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span> <span class="params">(G,T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = ∅;</span><br><span class="line">    U = &#123;w&#125;;</span><br><span class="line">    <span class="keyword">while</span> ((V - U) != ∅  )</span><br><span class="line">    &#123; <span class="comment">//若图中不含全部顶点</span></span><br><span class="line">        设  (u，v) 是使 u∈U 与 v∈ (V-U)，且权值最小的边;</span><br><span class="line">        T = T∪ (u，v); <span class="comment">//边归入树</span></span><br><span class="line">        U = U∪ &#123;v&#125;;     <span class="comment">//顶点归入树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - Kruskal 算法    - 将图中边按照权值从小到大排序，然后从最小边开始扫描各边，并检测当前边是否为候选边，即是否该边的并入会构成回路，如不构成回路，则将该边并入当前生成树中，直到所有边都被检测完为止    - Kruskal 算法的时间复杂度主要由选取的排序算法决定，排序算法所处理数据的规模由图的边数e 决定，与顶点数无关，因此克鲁斯卡尔算法适用于稀疏图    - 普里姆算法和克鲁斯卡尔算法都是针对于无向图的    - 判断是否产生回路要用到并查集，并查集中保存了一棵或者几棵树      - 通过树中一个结点，可以找到其双亲结点，进而找到根结点（可以快速地将两个含有很多元素的集合并为一个，两个集合就是并査集中的两棵树，只需找到其中一棵树的根，然后将其作为另一棵树中任何个结点的孩子结点即可，可以方便地判断两个元素是否属于同一个集合      - 通过这两个元素所在的结点找到它们的根结点，如果它们有相同的根，则说明它们属于同一个集合，否则属于不同集合    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> kruskal（V，T）</span><br><span class="line">&#123;</span><br><span class="line">    T = V;    <span class="comment">//初始化树，仅含顶点</span></span><br><span class="line">    numS = n;    <span class="comment">//不连分量的数目</span></span><br><span class="line">    <span class="keyword">while</span> (numS &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        从 E 中取出权值最小的边（v,u）;</span><br><span class="line">        <span class="keyword">if</span>（v 和 u 属于 T 中不同的连通分量）</span><br><span class="line">        &#123;</span><br><span class="line">            T = T∪（u，v）;<span class="comment">//将此边加入到生成树中；</span></span><br><span class="line">            numS--; <span class="comment">//不连通的分量减少 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  #### 最短路径  - Dijkstra 算法    - 通常用于求图中某一顶点到其余各顶点的最短路径    - 设  G=(V,E) 是一个带权有向图，把图中顶点集合 V 分成两组    - 第一组为已求出最短路径的顶点集合（用 S 表示，初始时 S 中只有一个源点，,以后每求得一条最短路径就将求得的顶点加入到集合 S 中，直到全部顶点都加入到 S 中）    - 第二组为其余未确定最短路径的顶点集合（用 U 表示），按最短路径长度的递增次序依次把第二组的顶点加入 S 中，在加入的过程中，总保持从源点 V 到 S 中各顶点的最短路径长度不大于从源点 V 到 U 中任何顶点的最短路径长度  - Dijkstra 算法步骤    1. 初始时，S 只包含源点，即 S＝&#123;v&#125;，v 的距离为 0，U 包含除 v 外的其他顶点，即:U=&#123;其 余顶点&#125;，若 v 与 U 中顶点 u 有边，则正常有权值，若 u 不是 v 的出边邻接点，则 权值为 $∞$    2. 从 U 中选取一个距离 v 最小的顶点 k，把 k 加入 S 中（该选定的距离就是 v 到 k 的最短路 径长度）    3. 以 k 为新考虑的中间点，修改 U 中各顶点的距离值：若从源点 v 到顶点 u 的距离（经过顶点 k）比原来距离（不经过顶点 k）短，则修改顶点 u 的距离值，修改后的距离值为 v 到 k 的距离加上 k 到 u 的距离    4. 重复步骤 b 和 c 直到所有顶点都包含在 S 中    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  　　<span class="type">bool</span> S[MAXNUM];                                  <span class="comment">// 判断是否已存入该点到S集合中</span></span><br><span class="line">      <span class="type">int</span> n=MAXNUM;</span><br><span class="line">  　　<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">      　　dist[i] = A[v0][i];</span><br><span class="line">      　　S[i] = <span class="literal">false</span>;                                <span class="comment">// 初始都未用过该点</span></span><br><span class="line">      　　<span class="keyword">if</span>(dist[i] == MAXINT)    </span><br><span class="line">            　　prev[i] = <span class="number">-1</span>;</span><br><span class="line"> 　　     <span class="keyword">else</span> </span><br><span class="line">            　　prev[i] = v0;</span><br><span class="line">   　　&#125;</span><br><span class="line">   　 dist[v0] = <span class="number">0</span>;</span><br><span class="line">   　 S[v0] = <span class="literal">true</span>; 　　</span><br><span class="line"> 　　 <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">       　　<span class="type">int</span> mindist = MAXINT;</span><br><span class="line">       　　<span class="type">int</span> u = v0; 　　                            <span class="comment">// 找出当前未使用的点j的dist[j]最小值</span></span><br><span class="line">      　　 <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">      　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; dist[j]&lt;mindist)</span><br><span class="line">      　　    &#123;</span><br><span class="line">         　　       u = j;                             <span class="comment">// u保存当前邻接点中距离最小的点的号码 </span></span><br><span class="line">         　 　      mindist = dist[j];</span><br><span class="line">       　　   &#125;</span><br><span class="line">       　　S[u] = <span class="literal">true</span>; </span><br><span class="line">       　　<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">       　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; A[u][j]&lt;MAXINT)</span><br><span class="line">       　　    &#123;</span><br><span class="line">           　    　<span class="keyword">if</span>(dist[u] + A[u][j] &lt; dist[j])     <span class="comment">//在通过新加入的u点路径找到离v0点更短的路径  </span></span><br><span class="line">           　    　&#123;</span><br><span class="line">                   　　dist[j] = dist[u] + A[u][j];    <span class="comment">//更新dist </span></span><br><span class="line">                   　　prev[j] = u;                    <span class="comment">//记录前驱顶点 </span></span><br><span class="line">            　　    &#125;</span><br><span class="line">        　    　&#125;</span><br><span class="line">   　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - Floyd 算法    - Floyd-Warshall算法（Floyd-Warshall algorithm）是解决任意两点间的最短路径的一种算法，可以正确处理有向图或负权的最短路径问题，同时也被用于计算有向图的传递闭包    - Floyd-Warshall 算法的时间复杂度为  $O(N^3)$，空间复杂度为  $O(N^2)$    - Floyd 算法是一个经典的动态规划算法，目标是寻找从点 i 到点 j 的最短路径，假设 Dis(i,j) 为节点 u 到节点 v 的最短路径的距离    - 对于每一个节点 k，检查 Dis(i,k) + Dis(k,j) &lt; Dis(i,j) 是否成立，如果成立，证明从 i 到 k 再到 j 的路径比 i 直接到j的路径短，便设置 Dis(i,j) = Dis(i,k) + Dis(k,j)，这样当遍历完所有节点 k，Dis(i,j) 中记录的便是 i 到 j 的最短路径的距离  - Floyd 算法步骤    - 从任意一条单边路径开始，所有两点之间的距离是边的权，如果两点之间没有边相连，则权为无穷大　　    - 对于每一对顶点 u 和 v，看看是否存在一个顶点 w 使得从 u 到 w 再到 v 比己知的路径更短，如果是更新它    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>;k &lt;= n;k++)</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] &gt; a[i][k] + a[k][j])</span><br><span class="line">                a[i][j] = a[i][k] + a[k][j];</span><br></pre></td></tr></table></figure>  #### 拓扑排序  - 对一个有向无环图 G 进行拓扑排序，是将 G 中所有顶点排成一个线性序列，使得图中任意一对顶点 u 和 v，若存在由 u 到 v 的路径，则在拓扑排序序列中一定是 u 出现在 v 的前边    1. 从 DAG 图中选择一个没有前驱的节点并输出    2. 从图中删除该节点和所有以它为起点的有向边    3. 重复上两步直到当前的 DAG 图为空或不存在无前驱的顶点为止    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topologicalSort</span><span class="params">(Graph GL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EdgeNode* e;</span><br><span class="line">    <span class="type">int</span> top = <span class="number">0</span>; <span class="comment">//用于栈指针下标 </span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 用于统计输出顶点的个数 </span></span><br><span class="line">    <span class="type">int</span>* stack; <span class="comment">// 建栈将入度为 0 的顶点入栈 </span></span><br><span class="line">    stack = (<span class="type">int</span>*)<span class="built_in">malloc</span>(GL-&gt;numVertexes * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; GL-&gt;numVertexes; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == GL-&gt;adjList[i].in) <span class="comment">//将入度为 0 的顶点入栈 </span></span><br><span class="line">            stack[++top] = i;</span><br><span class="line">    <span class="keyword">while</span> (top != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gettop = stack[top--];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, GL-&gt;adjList[gettop].data);</span><br><span class="line">        count++; <span class="comment">//输出 i 号顶点，并计数 </span></span><br><span class="line">        <span class="keyword">for</span> (e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next) &#123;</span><br><span class="line">            k = e-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span> (!(--GL-&gt;adjList[k].in))</span><br><span class="line">                <span class="comment">//将 i 顶点的邻接点入度减 1，如果减 1 后为 0，则入栈 </span></span><br><span class="line">                stack[++top] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; GL-&gt;numVertexes) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  &gt; 数据结构是指数据的存储结构，是带有结构特性的数据元素的集合。精心选择的数据结构可以带来更好的运行或者存储效率。数据结构是计算机科学与技术专业、软件工程专业甚至于其它电气信息类专业的重要专业基础课程，在408计算机学科专业基础综合考试中占有45分。我选择的课程是浙江大学数据结构[国家精品课](https://www.icourse163.org/course/ZJU-93001)，以下为所记课堂笔记第二部分，包含树和图的知识总结以及所需记忆的代码，另外我在开源仓库中还保持了浙大慕课版本的[代码](https://github.com/Bezhuang/LearnCS/tree/main/%E5%90%8D%E6%A0%A1%E5%85%AC%E5%BC%80%E8%AF%BE/%E6%B5%99%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)，可供参考。其他部分笔记详见[数据结构（上）](/数据结构-上)和[数据结构（下）](/数据结构-下)  &lt;!--more--&gt;  ### 矩阵与广义表  #### 矩阵  - 矩阵的转置    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trsmat</span><span class="params">(<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            B[j][i] = A[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 矩阵相加    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            C[i][j] = A[i][j] + B[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 矩阵相乘    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">amutmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; k;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            C[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="function"><span class="keyword">for</span> <span class="title">int</span><span class="params">(h = <span class="number">0</span>;h &lt; n;++h)</span></span></span><br><span class="line"><span class="function">                C[i][j] +</span>= A[i][j] * B[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 相同的元素或者零元素在矩阵中分布存在一定规律的矩阵称为特殊矩阵，反之称为稀疏矩阵    - 对称矩阵、三角阵、对角矩阵  #### 广义表  - 表元素可以是原子或者广义表的一种线性表的扩展结构  - 广义表可以是递归定义的，长度为表最上层元素的个数，深度为表中括号的最大的层数  - 当广义表非空时，第一个元素为广义表的表头，其余元素组成的表是广义表的表尾  - 原子结点有两个域：标志域和数据域  - 广义表结点有三个域：标志域，头指针域与尾指针域  ### 树  #### 树的基本概念  - 树是一种非线性的数据结构，是若干个结点的集合，由唯一的根和若干个互不相交的子树组成    - 结点不仅包含数据元素，并且包含指向子树的分支    - 结点的度是结点拥有的子树个数或者分支个数，树的度是树中各结点度的最大值    - 树的高度是树中结点的最大层次，根结点的高度为树的高度  - 树的双亲存储结构：`int tree[maxSize]`  - 树的链式存储结构    - 邻接表：孩子存储结构    - 孩子兄弟存储结构  #### 二叉树的概念和性质  - 二叉树的定义    - 每个结点最多只有两颗子树，即二叉树中的结点的度只能为0、1、2    - 子树有左右顺序之分，不能颠倒  - 满二叉树：在一颗二叉树中，如果所有的分支节点都有左、右孩子节点，并且叶子节点都集中在二叉树的最下一层  - 完全二叉树由满二叉树从右至左、从上之下挨个删除结点得到的  - 二叉树的主要性质    1. 非空二叉树上叶子结点数等于双分支结点数加1，$n_0=n_2+1$    2. 在二叉树的第 $i$ 层上最多有 $2^&#123;i-1&#125;$个节点，$(i&gt;=1)$    3. 二叉树中如果深度为 $k$，那么最多有 $2^&#123;k-1&#125;$ 个节点，$(k&gt;=1)$    4. 若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点：       - 若 i=1，则该结点是二叉树的根，无双亲，否则编号为 $\lfloor i/2\rfloor$ 的结点为其双亲结点（向下取整）       - 若 2i&gt;n，则该结点无左孩子，否则，编号为 2i 的结点为其左孩子结点       - 若 2i+1&gt;n，则该结点无右孩子，否则，编号为2i+1 的结点为其右孩子结点    5. Catalan()：给定 n 个结点，能够成 $h\left( n\right) =\dfrac&#123;C_&#123;2n&#125;^&#123;n&#125;&#125;&#123;n+1&#125;$  棵不同的二叉树    6. 在完全二叉树中，具有n个节点的完全二叉树的深度为 $\lfloor log2n\rfloor+1$  - 二叉树的顺序存储结构最适用于完全二叉树  - 二叉树的链式存储结构    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BTNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>  data;    <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNoode</span>* lchild;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNode</span>* rchild;</span><br><span class="line">&#125; BTNode;</span><br></pre></td></tr></table></figure>  #### 二叉树的遍历算法  - 先序遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreTraverseTree2</span><span class="params">(BitNode * root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S;   <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p;   <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S);   <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;     <span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123;     <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p);    <span class="comment">//p 所指节点入栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);     <span class="comment">//相当于 visit（p）</span></span><br><span class="line">p = p-&gt;lchild ;     <span class="comment">//指向 p 的左孩子</span></span><br><span class="line"> &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;     <span class="comment">//p 所指节点为空，则出栈赋给 p，遍历右子树</span></span><br><span class="line">            <span class="built_in">StackPop</span>(S, p);</span><br><span class="line">            p = p-&gt;rchild;     <span class="comment">//若右孩子有左子树则继续 while 将左孩子入栈</span></span><br><span class="line">        &#125;    <span class="comment">//end else</span></span><br><span class="line">    &#125;    <span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;    <span class="comment">//end PreTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BiTNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 中序遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverseTree2</span><span class="params">(BitNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p; <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S); <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p) &#123; <span class="comment">//如果是空树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S)) &#123; <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p); <span class="comment">//将节点入栈</span></span><br><span class="line">            p = p-&gt;lchild; <span class="comment">//指针一直向左孩子移动直到无左孩子</span></span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, p); <span class="comment">//p 左子树为空则出栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data); <span class="comment">//访问 p 节点</span></span><br><span class="line">            p = p-&gt;rchild; <span class="comment">//向右子树移动</span></span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end InOrderTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 后序遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树非递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LastTraverseTree2</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; BiTNode* cur, * pre;<span class="comment">//定义一个栈指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>; S = <span class="built_in">InitStack</span>(S); <span class="comment">//cur 为当前节点指针，pre 保存上一节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    pre = <span class="literal">NULL</span>; cur = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">StackPush</span>(S, T); <span class="comment">//根节点入栈</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123; <span class="comment">//若栈非空</span></span><br><span class="line">        cur = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">StackGetTop</span>(S, cur); <span class="comment">//将栈顶节点赋给 cur</span></span><br><span class="line"><span class="comment">/*要保证根节点在左孩子和右孩子访问之后才能访问，因此对于任一节点 P，先将其入 栈。</span></span><br><span class="line"><span class="comment">如果 P 不存在左孩子和右孩子，则可以直接访问它；或者 P 存在左孩子或者右孩子，但是</span></span><br><span class="line"><span class="comment">其左孩子和右孩子都已被访问过了，则同样可以直接访问该节点。*/</span></span><br><span class="line">        <span class="keyword">if</span> ((cur-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; cur-&gt;rchild == <span class="literal">NULL</span>) ||</span><br><span class="line">            (pre != <span class="literal">NULL</span> &amp;&amp; (pre == cur-&gt;lchild || pre == cur-&gt;rchild)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, cur-&gt;data);</span><br><span class="line">            pre = cur;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, cur);</span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line"><span class="comment">//若非上述两种情况，则将 P 的右孩子和左孩子依次入栈，这样就保证了每次取栈顶元素</span></span><br><span class="line"><span class="comment">//的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根节点前面被访问。</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;rchild);</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;lchild);</span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end LastTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 层次遍历：自上而下，自左向右    - 首先，将二叉树的祖先节点入队列    - 然后循环执行以下步骤，直到队列为空：节点出队列进行相应操作，该节点如果有左孩子节点，左孩子节点入队列，该节点如果有右孩子节点，右孩子节点入队    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LayerOrder</span><span class="params">(BiTreeNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LQueue Q;</span><br><span class="line">    <span class="built_in">Initiate_Queue</span>(&amp;Q);</span><br><span class="line">    BiTreeNode* p;</span><br><span class="line">    <span class="keyword">if</span> (head != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, head);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">QueueNotEmpty</span>(&amp;Q)) &#123;</span><br><span class="line">        p = <span class="built_in">QueueDelete</span>(&amp;Q);</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;LChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;LChild);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;RChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;RChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>  #### 哈夫曼树和哈夫曼编码  - 哈夫曼树又叫做最优二叉树，它的特点是带权路径最短    - 树的路径长度是指从根到每个节点的路径长度之和    - 带权路径长度是从该节点到根节之间的路径长度乘以结点的权值    - 树的带权路径长度（WPL）是指树中所有叶子节点的带权路径长度之和  - 求哈夫曼树的带权路径长度：WPL = 第 i 个节点的权值+ 第i个节点的长度    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElemType <span class="title">WeightPathLength</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (FBT == <span class="literal">NULL</span>) <span class="comment">//空树返回0  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)<span class="comment">//访问到叶子结点  </span></span><br><span class="line">            <span class="keyword">return</span> FBT-&gt;data * len;  </span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//访问到非叶子结点，进行递归调用，返回左右子树的带权路径长度之和，len递增  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">WeightPathLength</span>(FBT-&gt;left,len+<span class="number">1</span>)+<span class="built_in">WeightPathLength</span>(FBT-&gt;right,len+<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>  - 哈夫曼树的构造方法：根据数组 a 中 n 个权值建立一棵哈夫曼树，返回树根指针      <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BTreeNode</span>* <span class="built_in">CreateHuffman</span>(ElemType a[], <span class="type">int</span> n)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> i, j;  </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTreeNode</span> **b, *q;  </span><br><span class="line">    b = <span class="built_in">malloc</span>(n*<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//初始化b指针数组，使每个指针元素指向a数组中对应的元素结点  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        b[i] = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        b[i]-&gt;data = a[i];  </span><br><span class="line">        b[i]-&gt;left = b[i]-&gt;right = <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)<span class="comment">//进行 n-1 次循环建立哈夫曼树  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">//k1表示森林中具有最小权值的树根结点的下标，k2为次最小的下标  </span></span><br><span class="line">        <span class="type">int</span> k1 = <span class="number">-1</span>, k2;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)<span class="comment">//让k1初始指向森林中第一棵树，k2指向第二棵  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span> &amp;&amp; k1 == <span class="number">-1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k1 = j;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k2 = j;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (j = k2; j &lt; n; j++)<span class="comment">//从当前森林中求出最小权值树和次最小  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k1]-&gt;data)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    k2 = k1;  </span><br><span class="line">                    k1 = j;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k2]-&gt;data)  </span><br><span class="line">                    k2 = j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//由最小权值树和次最小权值树建立一棵新树，q指向树根结点  </span></span><br><span class="line">        q = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        q-&gt;data = b[k1]-&gt;data + b[k2]-&gt;data;  </span><br><span class="line">        q-&gt;left = b[k1];  </span><br><span class="line">        q-&gt;right = b[k2];  </span><br><span class="line">  </span><br><span class="line">        b[k1] = q;<span class="comment">//将指向新树的指针赋给b指针数组中k1位置  </span></span><br><span class="line">        b[k2] = <span class="literal">NULL</span>;<span class="comment">//k2位置为空  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">free</span>(b); <span class="comment">//删除动态建立的数组b  </span></span><br><span class="line">    <span class="keyword">return</span> q; <span class="comment">//返回整个哈夫曼树的树根指针  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>  - 哈夫曼编码    - 每个字符对应一个二进制编码，采用不等长编码方式，构造哈夫曼树    - 将每个字符的出现频率作为字符结点的权值赋予叶子结点，每个分支结点的左右分支分别用0和1编码    - 从树根结点到每个叶子结点的路径上所经分支的0、1编码序列等于该叶子结点的二进制编码    - 哈夫曼编码产生的是最短前缀码    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffManCoding</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始值为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a[<span class="number">10</span>];  <span class="comment">//定义静态数组a，保存每个叶子的编码，数组长度至少是树深度减一  </span></span><br><span class="line">    <span class="keyword">if</span> (FBT != <span class="literal">NULL</span>)  <span class="comment">//访问到叶子结点时输出其保存在数组a中的0和1序列编码  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="type">int</span> i;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;结点权值为%d的编码：&quot;</span>, FBT-&gt;data);  </span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//访问到非叶子结点时分别向左右子树递归调用，并把分支上的0、1编码保存到数组a  </span></span><br><span class="line">        &#123;   <span class="comment">//的对应元素中，向下深入一层时len值增1  </span></span><br><span class="line">            a[len] = <span class="number">0</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;left, len + <span class="number">1</span>);  </span><br><span class="line">            a[len] = <span class="number">1</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;right, len + <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>  ### 图  #### 图的基本概念  - 图由结点的有穷集合的 V 和边的集合  E 组成（`G(V,E)`）  - 图是按照无方向和有方向分为无向图和有向图，无向边用 $(v_i,v_j)$ 表示，有向边用 $&lt;v_i,v_j&gt;$ 表示  - 路径长度：路径上边或者弧的数目  - 顶点的度：顶点关联边的数目    - 有向图中：方向指向顶点的边为入度；方向背向顶点的边为出度    - 在有向图中，顶点的度就是两者之和    - 在无向图中，任意两个顶点是相通的就是连通图，它的极大连通子图为连通分量    - 在向图中，任意两个顶点间互相都存在路径的就是强连通图，它的极大强连通子图为强连通分量  #### 图的存储结构  - 邻接矩阵    - 图的顺序存储结构    - 用两个数组保存数据：一个一维数组存储图中顶点信息，一个二维数组存储图中边或弧的信息    - 无向图中邻接矩阵是个对称矩阵    - 0表示无边，1表示有边    - 顶点的度是行内数组之和，有向图中各行之和是出度，各列之和是入度     - 邻接矩阵对于边数相对顶点较少的图，就是对存储空间极大的浪费    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> no;</span><br><span class="line">  <span class="type">char</span> info;</span><br><span class="line">&#125; VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> edges[maxSize][maxSize];    <span class="comment">//有权图中int改为float</span></span><br><span class="line">  <span class="type">int</span> n,e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">  VertexType vex[maxSize];    <span class="comment">//存放结点信息</span></span><br><span class="line">&#125; MGragh;</span><br></pre></td></tr></table></figure>  - 邻接表    - 数组和链表相结合的存储方法，图的链式存储结构    - 图中顶点用一个一维数组存储    - 图中每个顶点 $V_i$ 的所有邻接点构成一个线性表    - 顶点表的各个结点由 data 和 Firstedge 两个域表示      - data 是数据域，存储顶点信息      - firstedge 是指针域，指向边表的第一个结点，即顶点的第一个邻接点    - 边表结点由 adjvex 和 next 两个域组成      - adjvex 是邻接点域，存储某顶点的邻接点在顶点表中坐标      - next 存储边表中下一个结点指针    - 有向图也可以用邻接表，出度表叫邻接表，入度表尾逆邻接表    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> adnex;    <span class="comment">//该边所指向的结点的位置</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ArcNode</span> * nextarc;    <span class="comment">//指向下一条边的指针</span></span><br><span class="line">    <span class="type">int</span> info;    <span class="comment">//该边的相关信息(如权值)</span></span><br><span class="line">&#125; ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data;    <span class="comment">//顶点信息</span></span><br><span class="line">    ArcNode* firstarc;    <span class="comment">//指向第一条边的指针</span></span><br><span class="line">&#125;VNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    VNode adjlist[maxSize];    <span class="comment">//邻接表</span></span><br><span class="line">    <span class="type">int</span> n, e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">&#125; AGraph;    <span class="comment">//图的邻接表类型</span></span><br></pre></td></tr></table></figure>  - 十字链表    - 在邻接表中针对有向图，分为邻接表和逆邻接表，导致无法从一个表中获取图的入读和出度的情况，有人提出了十字链表    - 定点表      - firstin：入边表头指针，指向顶点入边表的第一个结点      - firstout：出边表头指针，指向顶点出边表第一个结点    - 边表      - tailvex 是指弧起点在顶点表的下标，headvex 弧终点在顶点表的下标      - headlink 入边表指针域，指向终点相同的下一条边      - taillink 是指边表指针域，指向起点相同的下一条边  - 邻接多重表    - ivex 和 jvex 是与某条边依附的两个顶点在顶点表中的下标    - ilink 指向依附项点 ivex 的下一条边    - jlink 指向依附顶点 jvex 的下一条边  #### 图的遍历算法  - 深度优先遍历（DFS，Depth First Search）     - 首先从图中某个顶点 $v_0$ 出发，访问此顶点，然后依次从 $v_0$ 相邻的顶点出发 深度优先遍历，直至图中所有与 $v_0$ 路径相通的顶点都被访问了    - 若此时尚有顶点未被访问， 则从中选一个顶点作为起始点，重复上述过程，直到所有的顶点都被访问    - 深度优先遍历是一个递归的过程，这种遍历过程类似树的先序遍历，均是先访问节点，再从该节点出发继续向下遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组，为了防止重复访问</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做深度优先遍历</span></span><br><span class="line">            <span class="built_in">DFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>; <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">        <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            <span class="built_in">DFS</span>(G, w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 广度优先遍历（BFS，Breadth First Search）    - 首先从图的某个顶点 $v_0$ 出发，访问了 $v_0$ 之后，依次访问与 $v_0$ 相邻的未被访 问的顶点    - 然后分别从这些顶点出发，广度优先遍历，直至所有的顶点都被访问完    - BFS 遍历的方式类似于树的层次遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; G.vexnum;++i)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做广度优先遍历</span></span><br><span class="line">            <span class="built_in">BFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>;    <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isEmpty</span>(Q))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q, v);</span><br><span class="line">        <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">            <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">visit</span>(w);</span><br><span class="line">                visited[w] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">EnQueue</span>(Q, w)</span><br><span class="line">            &#125;    <span class="comment">//if</span></span><br><span class="line">    &#125;    <span class="comment">//while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  #### 最小生成树  - Prim 算法    - 从图中仼意取出一个顶点，把它当成一棵树，然后从与这棵树相接的边中选取一条最短（权值最小）的边，并将这条边及其所连接的顶点也并入这棵树中，此时得到了一棵有两个顶点的树    - 然后从与这棵树相接的边中选取一条最短的边，并将这条边及其所连顶点并入当前树中，得到一棵有3个顶点的树    - 以此类推，直到图中所有顶点都被并入树中为止，此时得到的生成树就是最小生成树    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span> <span class="params">(G,T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = ∅;</span><br><span class="line">    U = &#123;w&#125;;</span><br><span class="line">    <span class="keyword">while</span> ((V - U) != ∅  )</span><br><span class="line">    &#123; <span class="comment">//若图中不含全部顶点</span></span><br><span class="line">        设  (u，v) 是使 u∈U 与 v∈ (V-U)，且权值最小的边;</span><br><span class="line">        T = T∪ (u，v); <span class="comment">//边归入树</span></span><br><span class="line">        U = U∪ &#123;v&#125;;     <span class="comment">//顶点归入树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - Kruskal 算法    - 将图中边按照权值从小到大排序，然后从最小边开始扫描各边，并检测当前边是否为候选边，即是否该边的并入会构成回路，如不构成回路，则将该边并入当前生成树中，直到所有边都被检测完为止    - Kruskal 算法的时间复杂度主要由选取的排序算法决定，排序算法所处理数据的规模由图的边数e 决定，与顶点数无关，因此克鲁斯卡尔算法适用于稀疏图    - 普里姆算法和克鲁斯卡尔算法都是针对于无向图的    - 判断是否产生回路要用到并查集，并查集中保存了一棵或者几棵树      - 通过树中一个结点，可以找到其双亲结点，进而找到根结点（可以快速地将两个含有很多元素的集合并为一个，两个集合就是并査集中的两棵树，只需找到其中一棵树的根，然后将其作为另一棵树中任何个结点的孩子结点即可，可以方便地判断两个元素是否属于同一个集合      - 通过这两个元素所在的结点找到它们的根结点，如果它们有相同的根，则说明它们属于同一个集合，否则属于不同集合    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> kruskal（V，T）</span><br><span class="line">&#123;</span><br><span class="line">    T = V;    <span class="comment">//初始化树，仅含顶点</span></span><br><span class="line">    numS = n;    <span class="comment">//不连分量的数目</span></span><br><span class="line">    <span class="keyword">while</span> (numS &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        从 E 中取出权值最小的边（v,u）;</span><br><span class="line">        <span class="keyword">if</span>（v 和 u 属于 T 中不同的连通分量）</span><br><span class="line">        &#123;</span><br><span class="line">            T = T∪（u，v）;<span class="comment">//将此边加入到生成树中；</span></span><br><span class="line">            numS--; <span class="comment">//不连通的分量减少 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  #### 最短路径  - Dijkstra 算法    - 通常用于求图中某一顶点到其余各顶点的最短路径    - 设  G=(V,E) 是一个带权有向图，把图中顶点集合 V 分成两组    - 第一组为已求出最短路径的顶点集合（用 S 表示，初始时 S 中只有一个源点，,以后每求得一条最短路径就将求得的顶点加入到集合 S 中，直到全部顶点都加入到 S 中）    - 第二组为其余未确定最短路径的顶点集合（用 U 表示），按最短路径长度的递增次序依次把第二组的顶点加入 S 中，在加入的过程中，总保持从源点 V 到 S 中各顶点的最短路径长度不大于从源点 V 到 U 中任何顶点的最短路径长度  - Dijkstra 算法步骤    1. 初始时，S 只包含源点，即 S＝&#123;v&#125;，v 的距离为 0，U 包含除 v 外的其他顶点，即:U=&#123;其 余顶点&#125;，若 v 与 U 中顶点 u 有边，则正常有权值，若 u 不是 v 的出边邻接点，则 权值为 $∞$    2. 从 U 中选取一个距离 v 最小的顶点 k，把 k 加入 S 中（该选定的距离就是 v 到 k 的最短路 径长度）    3. 以 k 为新考虑的中间点，修改 U 中各顶点的距离值：若从源点 v 到顶点 u 的距离（经过顶点 k）比原来距离（不经过顶点 k）短，则修改顶点 u 的距离值，修改后的距离值为 v 到 k 的距离加上 k 到 u 的距离    4. 重复步骤 b 和 c 直到所有顶点都包含在 S 中    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  　　<span class="type">bool</span> S[MAXNUM];                                  <span class="comment">// 判断是否已存入该点到S集合中</span></span><br><span class="line">      <span class="type">int</span> n=MAXNUM;</span><br><span class="line">  　　<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">      　　dist[i] = A[v0][i];</span><br><span class="line">      　　S[i] = <span class="literal">false</span>;                                <span class="comment">// 初始都未用过该点</span></span><br><span class="line">      　　<span class="keyword">if</span>(dist[i] == MAXINT)    </span><br><span class="line">            　　prev[i] = <span class="number">-1</span>;</span><br><span class="line"> 　　     <span class="keyword">else</span> </span><br><span class="line">            　　prev[i] = v0;</span><br><span class="line">   　　&#125;</span><br><span class="line">   　 dist[v0] = <span class="number">0</span>;</span><br><span class="line">   　 S[v0] = <span class="literal">true</span>; 　　</span><br><span class="line"> 　　 <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">       　　<span class="type">int</span> mindist = MAXINT;</span><br><span class="line">       　　<span class="type">int</span> u = v0; 　　                            <span class="comment">// 找出当前未使用的点j的dist[j]最小值</span></span><br><span class="line">      　　 <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">      　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; dist[j]&lt;mindist)</span><br><span class="line">      　　    &#123;</span><br><span class="line">         　　       u = j;                             <span class="comment">// u保存当前邻接点中距离最小的点的号码 </span></span><br><span class="line">         　 　      mindist = dist[j];</span><br><span class="line">       　　   &#125;</span><br><span class="line">       　　S[u] = <span class="literal">true</span>; </span><br><span class="line">       　　<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">       　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; A[u][j]&lt;MAXINT)</span><br><span class="line">       　　    &#123;</span><br><span class="line">           　    　<span class="keyword">if</span>(dist[u] + A[u][j] &lt; dist[j])     <span class="comment">//在通过新加入的u点路径找到离v0点更短的路径  </span></span><br><span class="line">           　    　&#123;</span><br><span class="line">                   　　dist[j] = dist[u] + A[u][j];    <span class="comment">//更新dist </span></span><br><span class="line">                   　　prev[j] = u;                    <span class="comment">//记录前驱顶点 </span></span><br><span class="line">            　　    &#125;</span><br><span class="line">        　    　&#125;</span><br><span class="line">   　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - Floyd 算法    - Floyd-Warshall算法（Floyd-Warshall algorithm）是解决任意两点间的最短路径的一种算法，可以正确处理有向图或负权的最短路径问题，同时也被用于计算有向图的传递闭包    - Floyd-Warshall 算法的时间复杂度为  $O(N^3)$，空间复杂度为  $O(N^2)$    - Floyd 算法是一个经典的动态规划算法，目标是寻找从点 i 到点 j 的最短路径，假设 Dis(i,j) 为节点 u 到节点 v 的最短路径的距离    - 对于每一个节点 k，检查 Dis(i,k) + Dis(k,j) &lt; Dis(i,j) 是否成立，如果成立，证明从 i 到 k 再到 j 的路径比 i 直接到j的路径短，便设置 Dis(i,j) = Dis(i,k) + Dis(k,j)，这样当遍历完所有节点 k，Dis(i,j) 中记录的便是 i 到 j 的最短路径的距离  - Floyd 算法步骤    - 从任意一条单边路径开始，所有两点之间的距离是边的权，如果两点之间没有边相连，则权为无穷大　　    - 对于每一对顶点 u 和 v，看看是否存在一个顶点 w 使得从 u 到 w 再到 v 比己知的路径更短，如果是更新它    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>;k &lt;= n;k++)</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] &gt; a[i][k] + a[k][j])</span><br><span class="line">                a[i][j] = a[i][k] + a[k][j];</span><br></pre></td></tr></table></figure>  #### 拓扑排序  - 对一个有向无环图 G 进行拓扑排序，是将 G 中所有顶点排成一个线性序列，使得图中任意一对顶点 u 和 v，若存在由 u 到 v 的路径，则在拓扑排序序列中一定是 u 出现在 v 的前边    1. 从 DAG 图中选择一个没有前驱的节点并输出    2. 从图中删除该节点和所有以它为起点的有向边    3. 重复上两步直到当前的 DAG 图为空或不存在无前驱的顶点为止    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topologicalSort</span><span class="params">(Graph GL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EdgeNode* e;</span><br><span class="line">    <span class="type">int</span> top = <span class="number">0</span>; <span class="comment">//用于栈指针下标 </span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 用于统计输出顶点的个数 </span></span><br><span class="line">    <span class="type">int</span>* stack; <span class="comment">// 建栈将入度为 0 的顶点入栈 </span></span><br><span class="line">    stack = (<span class="type">int</span>*)<span class="built_in">malloc</span>(GL-&gt;numVertexes * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; GL-&gt;numVertexes; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == GL-&gt;adjList[i].in) <span class="comment">//将入度为 0 的顶点入栈 </span></span><br><span class="line">            stack[++top] = i;</span><br><span class="line">    <span class="keyword">while</span> (top != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gettop = stack[top--];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, GL-&gt;adjList[gettop].data);</span><br><span class="line">        count++; <span class="comment">//输出 i 号顶点，并计数 </span></span><br><span class="line">        <span class="keyword">for</span> (e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next) &#123;</span><br><span class="line">            k = e-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span> (!(--GL-&gt;adjList[k].in))</span><br><span class="line">                <span class="comment">//将 i 顶点的邻接点入度减 1，如果减 1 后为 0，则入栈 </span></span><br><span class="line">                stack[++top] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; GL-&gt;numVertexes) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  &gt; 数据结构是指数据的存储结构，是带有结构特性的数据元素的集合。精心选择的数据结构可以带来更好的运行或者存储效率。数据结构是计算机科学与技术专业、软件工程专业甚至于其它电气信息类专业的重要专业基础课程，在408计算机学科专业基础综合考试中占有45分。我选择的课程是浙江大学数据结构[国家精品课](https://www.icourse163.org/course/ZJU-93001)，以下为所记课堂笔记第二部分，包含树和图的知识总结以及所需记忆的代码，另外我在开源仓库中还保持了浙大慕课版本的[代码](https://github.com/Bezhuang/LearnCS/tree/main/%E5%90%8D%E6%A0%A1%E5%85%AC%E5%BC%80%E8%AF%BE/%E6%B5%99%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)，可供参考。其他部分笔记详见[数据结构（上）](/数据结构-上)和[数据结构（下）](/数据结构-下)  &lt;!--more--&gt;  ### 矩阵与广义表  #### 矩阵  - 矩阵的转置    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trsmat</span><span class="params">(<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            B[j][i] = A[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 矩阵相加    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            C[i][j] = A[i][j] + B[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 矩阵相乘    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">amutmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; k;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            C[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="function"><span class="keyword">for</span> <span class="title">int</span><span class="params">(h = <span class="number">0</span>;h &lt; n;++h)</span></span></span><br><span class="line"><span class="function">                C[i][j] +</span>= A[i][j] * B[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 相同的元素或者零元素在矩阵中分布存在一定规律的矩阵称为特殊矩阵，反之称为稀疏矩阵    - 对称矩阵、三角阵、对角矩阵  #### 广义表  - 表元素可以是原子或者广义表的一种线性表的扩展结构  - 广义表可以是递归定义的，长度为表最上层元素的个数，深度为表中括号的最大的层数  - 当广义表非空时，第一个元素为广义表的表头，其余元素组成的表是广义表的表尾  - 原子结点有两个域：标志域和数据域  - 广义表结点有三个域：标志域，头指针域与尾指针域  ### 树  #### 树的基本概念  - 树是一种非线性的数据结构，是若干个结点的集合，由唯一的根和若干个互不相交的子树组成    - 结点不仅包含数据元素，并且包含指向子树的分支    - 结点的度是结点拥有的子树个数或者分支个数，树的度是树中各结点度的最大值    - 树的高度是树中结点的最大层次，根结点的高度为树的高度  - 树的双亲存储结构：`int tree[maxSize]`  - 树的链式存储结构    - 邻接表：孩子存储结构    - 孩子兄弟存储结构  #### 二叉树的概念和性质  - 二叉树的定义    - 每个结点最多只有两颗子树，即二叉树中的结点的度只能为0、1、2    - 子树有左右顺序之分，不能颠倒  - 满二叉树：在一颗二叉树中，如果所有的分支节点都有左、右孩子节点，并且叶子节点都集中在二叉树的最下一层  - 完全二叉树由满二叉树从右至左、从上之下挨个删除结点得到的  - 二叉树的主要性质    1. 非空二叉树上叶子结点数等于双分支结点数加1，$n_0=n_2+1$    2. 在二叉树的第 $i$ 层上最多有 $2^&#123;i-1&#125;$个节点，$(i&gt;=1)$    3. 二叉树中如果深度为 $k$，那么最多有 $2^&#123;k-1&#125;$ 个节点，$(k&gt;=1)$    4. 若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点：       - 若 i=1，则该结点是二叉树的根，无双亲，否则编号为 $\lfloor i/2\rfloor$ 的结点为其双亲结点（向下取整）       - 若 2i&gt;n，则该结点无左孩子，否则，编号为 2i 的结点为其左孩子结点       - 若 2i+1&gt;n，则该结点无右孩子，否则，编号为2i+1 的结点为其右孩子结点    5. Catalan()：给定 n 个结点，能够成 $h\left( n\right) =\dfrac&#123;C_&#123;2n&#125;^&#123;n&#125;&#125;&#123;n+1&#125;$  棵不同的二叉树    6. 在完全二叉树中，具有n个节点的完全二叉树的深度为 $\lfloor log2n\rfloor+1$  - 二叉树的顺序存储结构最适用于完全二叉树  - 二叉树的链式存储结构    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BTNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>  data;    <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNoode</span>* lchild;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNode</span>* rchild;</span><br><span class="line">&#125; BTNode;</span><br></pre></td></tr></table></figure>  #### 二叉树的遍历算法  - 先序遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreTraverseTree2</span><span class="params">(BitNode * root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S;   <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p;   <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S);   <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;     <span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123;     <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p);    <span class="comment">//p 所指节点入栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);     <span class="comment">//相当于 visit（p）</span></span><br><span class="line">p = p-&gt;lchild ;     <span class="comment">//指向 p 的左孩子</span></span><br><span class="line"> &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;     <span class="comment">//p 所指节点为空，则出栈赋给 p，遍历右子树</span></span><br><span class="line">            <span class="built_in">StackPop</span>(S, p);</span><br><span class="line">            p = p-&gt;rchild;     <span class="comment">//若右孩子有左子树则继续 while 将左孩子入栈</span></span><br><span class="line">        &#125;    <span class="comment">//end else</span></span><br><span class="line">    &#125;    <span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;    <span class="comment">//end PreTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BiTNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 中序遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverseTree2</span><span class="params">(BitNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p; <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S); <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p) &#123; <span class="comment">//如果是空树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S)) &#123; <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p); <span class="comment">//将节点入栈</span></span><br><span class="line">            p = p-&gt;lchild; <span class="comment">//指针一直向左孩子移动直到无左孩子</span></span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, p); <span class="comment">//p 左子树为空则出栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data); <span class="comment">//访问 p 节点</span></span><br><span class="line">            p = p-&gt;rchild; <span class="comment">//向右子树移动</span></span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end InOrderTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 后序遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树非递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LastTraverseTree2</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; BiTNode* cur, * pre;<span class="comment">//定义一个栈指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>; S = <span class="built_in">InitStack</span>(S); <span class="comment">//cur 为当前节点指针，pre 保存上一节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    pre = <span class="literal">NULL</span>; cur = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">StackPush</span>(S, T); <span class="comment">//根节点入栈</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123; <span class="comment">//若栈非空</span></span><br><span class="line">        cur = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">StackGetTop</span>(S, cur); <span class="comment">//将栈顶节点赋给 cur</span></span><br><span class="line"><span class="comment">/*要保证根节点在左孩子和右孩子访问之后才能访问，因此对于任一节点 P，先将其入 栈。</span></span><br><span class="line"><span class="comment">如果 P 不存在左孩子和右孩子，则可以直接访问它；或者 P 存在左孩子或者右孩子，但是</span></span><br><span class="line"><span class="comment">其左孩子和右孩子都已被访问过了，则同样可以直接访问该节点。*/</span></span><br><span class="line">        <span class="keyword">if</span> ((cur-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; cur-&gt;rchild == <span class="literal">NULL</span>) ||</span><br><span class="line">            (pre != <span class="literal">NULL</span> &amp;&amp; (pre == cur-&gt;lchild || pre == cur-&gt;rchild)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, cur-&gt;data);</span><br><span class="line">            pre = cur;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, cur);</span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line"><span class="comment">//若非上述两种情况，则将 P 的右孩子和左孩子依次入栈，这样就保证了每次取栈顶元素</span></span><br><span class="line"><span class="comment">//的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根节点前面被访问。</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;rchild);</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;lchild);</span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end LastTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 层次遍历：自上而下，自左向右    - 首先，将二叉树的祖先节点入队列    - 然后循环执行以下步骤，直到队列为空：节点出队列进行相应操作，该节点如果有左孩子节点，左孩子节点入队列，该节点如果有右孩子节点，右孩子节点入队    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LayerOrder</span><span class="params">(BiTreeNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LQueue Q;</span><br><span class="line">    <span class="built_in">Initiate_Queue</span>(&amp;Q);</span><br><span class="line">    BiTreeNode* p;</span><br><span class="line">    <span class="keyword">if</span> (head != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, head);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">QueueNotEmpty</span>(&amp;Q)) &#123;</span><br><span class="line">        p = <span class="built_in">QueueDelete</span>(&amp;Q);</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;LChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;LChild);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;RChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;RChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>  #### 哈夫曼树和哈夫曼编码  - 哈夫曼树又叫做最优二叉树，它的特点是带权路径最短    - 树的路径长度是指从根到每个节点的路径长度之和    - 带权路径长度是从该节点到根节之间的路径长度乘以结点的权值    - 树的带权路径长度（WPL）是指树中所有叶子节点的带权路径长度之和  - 求哈夫曼树的带权路径长度：WPL = 第 i 个节点的权值+ 第i个节点的长度    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElemType <span class="title">WeightPathLength</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (FBT == <span class="literal">NULL</span>) <span class="comment">//空树返回0  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)<span class="comment">//访问到叶子结点  </span></span><br><span class="line">            <span class="keyword">return</span> FBT-&gt;data * len;  </span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//访问到非叶子结点，进行递归调用，返回左右子树的带权路径长度之和，len递增  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">WeightPathLength</span>(FBT-&gt;left,len+<span class="number">1</span>)+<span class="built_in">WeightPathLength</span>(FBT-&gt;right,len+<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>  - 哈夫曼树的构造方法：根据数组 a 中 n 个权值建立一棵哈夫曼树，返回树根指针      <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BTreeNode</span>* <span class="built_in">CreateHuffman</span>(ElemType a[], <span class="type">int</span> n)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> i, j;  </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTreeNode</span> **b, *q;  </span><br><span class="line">    b = <span class="built_in">malloc</span>(n*<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//初始化b指针数组，使每个指针元素指向a数组中对应的元素结点  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        b[i] = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        b[i]-&gt;data = a[i];  </span><br><span class="line">        b[i]-&gt;left = b[i]-&gt;right = <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)<span class="comment">//进行 n-1 次循环建立哈夫曼树  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">//k1表示森林中具有最小权值的树根结点的下标，k2为次最小的下标  </span></span><br><span class="line">        <span class="type">int</span> k1 = <span class="number">-1</span>, k2;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)<span class="comment">//让k1初始指向森林中第一棵树，k2指向第二棵  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span> &amp;&amp; k1 == <span class="number">-1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k1 = j;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k2 = j;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (j = k2; j &lt; n; j++)<span class="comment">//从当前森林中求出最小权值树和次最小  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k1]-&gt;data)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    k2 = k1;  </span><br><span class="line">                    k1 = j;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k2]-&gt;data)  </span><br><span class="line">                    k2 = j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//由最小权值树和次最小权值树建立一棵新树，q指向树根结点  </span></span><br><span class="line">        q = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        q-&gt;data = b[k1]-&gt;data + b[k2]-&gt;data;  </span><br><span class="line">        q-&gt;left = b[k1];  </span><br><span class="line">        q-&gt;right = b[k2];  </span><br><span class="line">  </span><br><span class="line">        b[k1] = q;<span class="comment">//将指向新树的指针赋给b指针数组中k1位置  </span></span><br><span class="line">        b[k2] = <span class="literal">NULL</span>;<span class="comment">//k2位置为空  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">free</span>(b); <span class="comment">//删除动态建立的数组b  </span></span><br><span class="line">    <span class="keyword">return</span> q; <span class="comment">//返回整个哈夫曼树的树根指针  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>  - 哈夫曼编码    - 每个字符对应一个二进制编码，采用不等长编码方式，构造哈夫曼树    - 将每个字符的出现频率作为字符结点的权值赋予叶子结点，每个分支结点的左右分支分别用0和1编码    - 从树根结点到每个叶子结点的路径上所经分支的0、1编码序列等于该叶子结点的二进制编码    - 哈夫曼编码产生的是最短前缀码    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffManCoding</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始值为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a[<span class="number">10</span>];  <span class="comment">//定义静态数组a，保存每个叶子的编码，数组长度至少是树深度减一  </span></span><br><span class="line">    <span class="keyword">if</span> (FBT != <span class="literal">NULL</span>)  <span class="comment">//访问到叶子结点时输出其保存在数组a中的0和1序列编码  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="type">int</span> i;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;结点权值为%d的编码：&quot;</span>, FBT-&gt;data);  </span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//访问到非叶子结点时分别向左右子树递归调用，并把分支上的0、1编码保存到数组a  </span></span><br><span class="line">        &#123;   <span class="comment">//的对应元素中，向下深入一层时len值增1  </span></span><br><span class="line">            a[len] = <span class="number">0</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;left, len + <span class="number">1</span>);  </span><br><span class="line">            a[len] = <span class="number">1</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;right, len + <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>  ### 图  #### 图的基本概念  - 图由结点的有穷集合的 V 和边的集合  E 组成（`G(V,E)`）  - 图是按照无方向和有方向分为无向图和有向图，无向边用 $(v_i,v_j)$ 表示，有向边用 $&lt;v_i,v_j&gt;$ 表示  - 路径长度：路径上边或者弧的数目  - 顶点的度：顶点关联边的数目    - 有向图中：方向指向顶点的边为入度；方向背向顶点的边为出度    - 在有向图中，顶点的度就是两者之和    - 在无向图中，任意两个顶点是相通的就是连通图，它的极大连通子图为连通分量    - 在向图中，任意两个顶点间互相都存在路径的就是强连通图，它的极大强连通子图为强连通分量  #### 图的存储结构  - 邻接矩阵    - 图的顺序存储结构    - 用两个数组保存数据：一个一维数组存储图中顶点信息，一个二维数组存储图中边或弧的信息    - 无向图中邻接矩阵是个对称矩阵    - 0表示无边，1表示有边    - 顶点的度是行内数组之和，有向图中各行之和是出度，各列之和是入度     - 邻接矩阵对于边数相对顶点较少的图，就是对存储空间极大的浪费    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> no;</span><br><span class="line">  <span class="type">char</span> info;</span><br><span class="line">&#125; VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> edges[maxSize][maxSize];    <span class="comment">//有权图中int改为float</span></span><br><span class="line">  <span class="type">int</span> n,e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">  VertexType vex[maxSize];    <span class="comment">//存放结点信息</span></span><br><span class="line">&#125; MGragh;</span><br></pre></td></tr></table></figure>  - 邻接表    - 数组和链表相结合的存储方法，图的链式存储结构    - 图中顶点用一个一维数组存储    - 图中每个顶点 $V_i$ 的所有邻接点构成一个线性表    - 顶点表的各个结点由 data 和 Firstedge 两个域表示      - data 是数据域，存储顶点信息      - firstedge 是指针域，指向边表的第一个结点，即顶点的第一个邻接点    - 边表结点由 adjvex 和 next 两个域组成      - adjvex 是邻接点域，存储某顶点的邻接点在顶点表中坐标      - next 存储边表中下一个结点指针    - 有向图也可以用邻接表，出度表叫邻接表，入度表尾逆邻接表    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> adnex;    <span class="comment">//该边所指向的结点的位置</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ArcNode</span> * nextarc;    <span class="comment">//指向下一条边的指针</span></span><br><span class="line">    <span class="type">int</span> info;    <span class="comment">//该边的相关信息(如权值)</span></span><br><span class="line">&#125; ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data;    <span class="comment">//顶点信息</span></span><br><span class="line">    ArcNode* firstarc;    <span class="comment">//指向第一条边的指针</span></span><br><span class="line">&#125;VNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    VNode adjlist[maxSize];    <span class="comment">//邻接表</span></span><br><span class="line">    <span class="type">int</span> n, e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">&#125; AGraph;    <span class="comment">//图的邻接表类型</span></span><br></pre></td></tr></table></figure>  - 十字链表    - 在邻接表中针对有向图，分为邻接表和逆邻接表，导致无法从一个表中获取图的入读和出度的情况，有人提出了十字链表    - 定点表      - firstin：入边表头指针，指向顶点入边表的第一个结点      - firstout：出边表头指针，指向顶点出边表第一个结点    - 边表      - tailvex 是指弧起点在顶点表的下标，headvex 弧终点在顶点表的下标      - headlink 入边表指针域，指向终点相同的下一条边      - taillink 是指边表指针域，指向起点相同的下一条边  - 邻接多重表    - ivex 和 jvex 是与某条边依附的两个顶点在顶点表中的下标    - ilink 指向依附项点 ivex 的下一条边    - jlink 指向依附顶点 jvex 的下一条边  #### 图的遍历算法  - 深度优先遍历（DFS，Depth First Search）     - 首先从图中某个顶点 $v_0$ 出发，访问此顶点，然后依次从 $v_0$ 相邻的顶点出发 深度优先遍历，直至图中所有与 $v_0$ 路径相通的顶点都被访问了    - 若此时尚有顶点未被访问， 则从中选一个顶点作为起始点，重复上述过程，直到所有的顶点都被访问    - 深度优先遍历是一个递归的过程，这种遍历过程类似树的先序遍历，均是先访问节点，再从该节点出发继续向下遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组，为了防止重复访问</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做深度优先遍历</span></span><br><span class="line">            <span class="built_in">DFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>; <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">        <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            <span class="built_in">DFS</span>(G, w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 广度优先遍历（BFS，Breadth First Search）    - 首先从图的某个顶点 $v_0$ 出发，访问了 $v_0$ 之后，依次访问与 $v_0$ 相邻的未被访 问的顶点    - 然后分别从这些顶点出发，广度优先遍历，直至所有的顶点都被访问完    - BFS 遍历的方式类似于树的层次遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; G.vexnum;++i)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做广度优先遍历</span></span><br><span class="line">            <span class="built_in">BFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>;    <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isEmpty</span>(Q))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q, v);</span><br><span class="line">        <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">            <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">visit</span>(w);</span><br><span class="line">                visited[w] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">EnQueue</span>(Q, w)</span><br><span class="line">            &#125;    <span class="comment">//if</span></span><br><span class="line">    &#125;    <span class="comment">//while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  #### 最小生成树  - Prim 算法    - 从图中仼意取出一个顶点，把它当成一棵树，然后从与这棵树相接的边中选取一条最短（权值最小）的边，并将这条边及其所连接的顶点也并入这棵树中，此时得到了一棵有两个顶点的树    - 然后从与这棵树相接的边中选取一条最短的边，并将这条边及其所连顶点并入当前树中，得到一棵有3个顶点的树    - 以此类推，直到图中所有顶点都被并入树中为止，此时得到的生成树就是最小生成树    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span> <span class="params">(G,T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = ∅;</span><br><span class="line">    U = &#123;w&#125;;</span><br><span class="line">    <span class="keyword">while</span> ((V - U) != ∅  )</span><br><span class="line">    &#123; <span class="comment">//若图中不含全部顶点</span></span><br><span class="line">        设  (u，v) 是使 u∈U 与 v∈ (V-U)，且权值最小的边;</span><br><span class="line">        T = T∪ (u，v); <span class="comment">//边归入树</span></span><br><span class="line">        U = U∪ &#123;v&#125;;     <span class="comment">//顶点归入树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - Kruskal 算法    - 将图中边按照权值从小到大排序，然后从最小边开始扫描各边，并检测当前边是否为候选边，即是否该边的并入会构成回路，如不构成回路，则将该边并入当前生成树中，直到所有边都被检测完为止    - Kruskal 算法的时间复杂度主要由选取的排序算法决定，排序算法所处理数据的规模由图的边数e 决定，与顶点数无关，因此克鲁斯卡尔算法适用于稀疏图    - 普里姆算法和克鲁斯卡尔算法都是针对于无向图的    - 判断是否产生回路要用到并查集，并查集中保存了一棵或者几棵树      - 通过树中一个结点，可以找到其双亲结点，进而找到根结点（可以快速地将两个含有很多元素的集合并为一个，两个集合就是并査集中的两棵树，只需找到其中一棵树的根，然后将其作为另一棵树中任何个结点的孩子结点即可，可以方便地判断两个元素是否属于同一个集合      - 通过这两个元素所在的结点找到它们的根结点，如果它们有相同的根，则说明它们属于同一个集合，否则属于不同集合    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> kruskal（V，T）</span><br><span class="line">&#123;</span><br><span class="line">    T = V;    <span class="comment">//初始化树，仅含顶点</span></span><br><span class="line">    numS = n;    <span class="comment">//不连分量的数目</span></span><br><span class="line">    <span class="keyword">while</span> (numS &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        从 E 中取出权值最小的边（v,u）;</span><br><span class="line">        <span class="keyword">if</span>（v 和 u 属于 T 中不同的连通分量）</span><br><span class="line">        &#123;</span><br><span class="line">            T = T∪（u，v）;<span class="comment">//将此边加入到生成树中；</span></span><br><span class="line">            numS--; <span class="comment">//不连通的分量减少 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  #### 最短路径  - Dijkstra 算法    - 通常用于求图中某一顶点到其余各顶点的最短路径    - 设  G=(V,E) 是一个带权有向图，把图中顶点集合 V 分成两组    - 第一组为已求出最短路径的顶点集合（用 S 表示，初始时 S 中只有一个源点，,以后每求得一条最短路径就将求得的顶点加入到集合 S 中，直到全部顶点都加入到 S 中）    - 第二组为其余未确定最短路径的顶点集合（用 U 表示），按最短路径长度的递增次序依次把第二组的顶点加入 S 中，在加入的过程中，总保持从源点 V 到 S 中各顶点的最短路径长度不大于从源点 V 到 U 中任何顶点的最短路径长度  - Dijkstra 算法步骤    1. 初始时，S 只包含源点，即 S＝&#123;v&#125;，v 的距离为 0，U 包含除 v 外的其他顶点，即:U=&#123;其 余顶点&#125;，若 v 与 U 中顶点 u 有边，则正常有权值，若 u 不是 v 的出边邻接点，则 权值为 $∞$    2. 从 U 中选取一个距离 v 最小的顶点 k，把 k 加入 S 中（该选定的距离就是 v 到 k 的最短路 径长度）    3. 以 k 为新考虑的中间点，修改 U 中各顶点的距离值：若从源点 v 到顶点 u 的距离（经过顶点 k）比原来距离（不经过顶点 k）短，则修改顶点 u 的距离值，修改后的距离值为 v 到 k 的距离加上 k 到 u 的距离    4. 重复步骤 b 和 c 直到所有顶点都包含在 S 中    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  　　<span class="type">bool</span> S[MAXNUM];                                  <span class="comment">// 判断是否已存入该点到S集合中</span></span><br><span class="line">      <span class="type">int</span> n=MAXNUM;</span><br><span class="line">  　　<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">      　　dist[i] = A[v0][i];</span><br><span class="line">      　　S[i] = <span class="literal">false</span>;                                <span class="comment">// 初始都未用过该点</span></span><br><span class="line">      　　<span class="keyword">if</span>(dist[i] == MAXINT)    </span><br><span class="line">            　　prev[i] = <span class="number">-1</span>;</span><br><span class="line"> 　　     <span class="keyword">else</span> </span><br><span class="line">            　　prev[i] = v0;</span><br><span class="line">   　　&#125;</span><br><span class="line">   　 dist[v0] = <span class="number">0</span>;</span><br><span class="line">   　 S[v0] = <span class="literal">true</span>; 　　</span><br><span class="line"> 　　 <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">       　　<span class="type">int</span> mindist = MAXINT;</span><br><span class="line">       　　<span class="type">int</span> u = v0; 　　                            <span class="comment">// 找出当前未使用的点j的dist[j]最小值</span></span><br><span class="line">      　　 <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">      　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; dist[j]&lt;mindist)</span><br><span class="line">      　　    &#123;</span><br><span class="line">         　　       u = j;                             <span class="comment">// u保存当前邻接点中距离最小的点的号码 </span></span><br><span class="line">         　 　      mindist = dist[j];</span><br><span class="line">       　　   &#125;</span><br><span class="line">       　　S[u] = <span class="literal">true</span>; </span><br><span class="line">       　　<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">       　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; A[u][j]&lt;MAXINT)</span><br><span class="line">       　　    &#123;</span><br><span class="line">           　    　<span class="keyword">if</span>(dist[u] + A[u][j] &lt; dist[j])     <span class="comment">//在通过新加入的u点路径找到离v0点更短的路径  </span></span><br><span class="line">           　    　&#123;</span><br><span class="line">                   　　dist[j] = dist[u] + A[u][j];    <span class="comment">//更新dist </span></span><br><span class="line">                   　　prev[j] = u;                    <span class="comment">//记录前驱顶点 </span></span><br><span class="line">            　　    &#125;</span><br><span class="line">        　    　&#125;</span><br><span class="line">   　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - Floyd 算法    - Floyd-Warshall算法（Floyd-Warshall algorithm）是解决任意两点间的最短路径的一种算法，可以正确处理有向图或负权的最短路径问题，同时也被用于计算有向图的传递闭包    - Floyd-Warshall 算法的时间复杂度为  $O(N^3)$，空间复杂度为  $O(N^2)$    - Floyd 算法是一个经典的动态规划算法，目标是寻找从点 i 到点 j 的最短路径，假设 Dis(i,j) 为节点 u 到节点 v 的最短路径的距离    - 对于每一个节点 k，检查 Dis(i,k) + Dis(k,j) &lt; Dis(i,j) 是否成立，如果成立，证明从 i 到 k 再到 j 的路径比 i 直接到j的路径短，便设置 Dis(i,j) = Dis(i,k) + Dis(k,j)，这样当遍历完所有节点 k，Dis(i,j) 中记录的便是 i 到 j 的最短路径的距离  - Floyd 算法步骤    - 从任意一条单边路径开始，所有两点之间的距离是边的权，如果两点之间没有边相连，则权为无穷大　　    - 对于每一对顶点 u 和 v，看看是否存在一个顶点 w 使得从 u 到 w 再到 v 比己知的路径更短，如果是更新它    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>;k &lt;= n;k++)</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] &gt; a[i][k] + a[k][j])</span><br><span class="line">                a[i][j] = a[i][k] + a[k][j];</span><br></pre></td></tr></table></figure>  #### 拓扑排序  - 对一个有向无环图 G 进行拓扑排序，是将 G 中所有顶点排成一个线性序列，使得图中任意一对顶点 u 和 v，若存在由 u 到 v 的路径，则在拓扑排序序列中一定是 u 出现在 v 的前边    1. 从 DAG 图中选择一个没有前驱的节点并输出    2. 从图中删除该节点和所有以它为起点的有向边    3. 重复上两步直到当前的 DAG 图为空或不存在无前驱的顶点为止    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topologicalSort</span><span class="params">(Graph GL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EdgeNode* e;</span><br><span class="line">    <span class="type">int</span> top = <span class="number">0</span>; <span class="comment">//用于栈指针下标 </span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 用于统计输出顶点的个数 </span></span><br><span class="line">    <span class="type">int</span>* stack; <span class="comment">// 建栈将入度为 0 的顶点入栈 </span></span><br><span class="line">    stack = (<span class="type">int</span>*)<span class="built_in">malloc</span>(GL-&gt;numVertexes * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; GL-&gt;numVertexes; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == GL-&gt;adjList[i].in) <span class="comment">//将入度为 0 的顶点入栈 </span></span><br><span class="line">            stack[++top] = i;</span><br><span class="line">    <span class="keyword">while</span> (top != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gettop = stack[top--];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, GL-&gt;adjList[gettop].data);</span><br><span class="line">        count++; <span class="comment">//输出 i 号顶点，并计数 </span></span><br><span class="line">        <span class="keyword">for</span> (e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next) &#123;</span><br><span class="line">            k = e-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span> (!(--GL-&gt;adjList[k].in))</span><br><span class="line">                <span class="comment">//将 i 顶点的邻接点入度减 1，如果减 1 后为 0，则入栈 </span></span><br><span class="line">                stack[++top] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; GL-&gt;numVertexes) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  &gt; 数据结构是指数据的存储结构，是带有结构特性的数据元素的集合。精心选择的数据结构可以带来更好的运行或者存储效率。数据结构是计算机科学与技术专业、软件工程专业甚至于其它电气信息类专业的重要专业基础课程，在408计算机学科专业基础综合考试中占有45分。我选择的课程是浙江大学数据结构[国家精品课](https://www.icourse163.org/course/ZJU-93001)，以下为所记课堂笔记第二部分，包含树和图的知识总结以及所需记忆的代码，另外我在开源仓库中还保持了浙大慕课版本的[代码](https://github.com/Bezhuang/LearnCS/tree/main/%E5%90%8D%E6%A0%A1%E5%85%AC%E5%BC%80%E8%AF%BE/%E6%B5%99%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)，可供参考。其他部分笔记详见[数据结构（上）](/数据结构-上)和[数据结构（下）](/数据结构-下)  &lt;!--more--&gt;  ### 矩阵与广义表  #### 矩阵  - 矩阵的转置    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trsmat</span><span class="params">(<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            B[j][i] = A[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 矩阵相加    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            C[i][j] = A[i][j] + B[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 矩阵相乘    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">amutmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; k;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            C[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="function"><span class="keyword">for</span> <span class="title">int</span><span class="params">(h = <span class="number">0</span>;h &lt; n;++h)</span></span></span><br><span class="line"><span class="function">                C[i][j] +</span>= A[i][j] * B[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 相同的元素或者零元素在矩阵中分布存在一定规律的矩阵称为特殊矩阵，反之称为稀疏矩阵    - 对称矩阵、三角阵、对角矩阵  #### 广义表  - 表元素可以是原子或者广义表的一种线性表的扩展结构  - 广义表可以是递归定义的，长度为表最上层元素的个数，深度为表中括号的最大的层数  - 当广义表非空时，第一个元素为广义表的表头，其余元素组成的表是广义表的表尾  - 原子结点有两个域：标志域和数据域  - 广义表结点有三个域：标志域，头指针域与尾指针域  ### 树  #### 树的基本概念  - 树是一种非线性的数据结构，是若干个结点的集合，由唯一的根和若干个互不相交的子树组成    - 结点不仅包含数据元素，并且包含指向子树的分支    - 结点的度是结点拥有的子树个数或者分支个数，树的度是树中各结点度的最大值    - 树的高度是树中结点的最大层次，根结点的高度为树的高度  - 树的双亲存储结构：`int tree[maxSize]`  - 树的链式存储结构    - 邻接表：孩子存储结构    - 孩子兄弟存储结构  #### 二叉树的概念和性质  - 二叉树的定义    - 每个结点最多只有两颗子树，即二叉树中的结点的度只能为0、1、2    - 子树有左右顺序之分，不能颠倒  - 满二叉树：在一颗二叉树中，如果所有的分支节点都有左、右孩子节点，并且叶子节点都集中在二叉树的最下一层  - 完全二叉树由满二叉树从右至左、从上之下挨个删除结点得到的  - 二叉树的主要性质    1. 非空二叉树上叶子结点数等于双分支结点数加1，$n_0=n_2+1$    2. 在二叉树的第 $i$ 层上最多有 $2^&#123;i-1&#125;$个节点，$(i&gt;=1)$    3. 二叉树中如果深度为 $k$，那么最多有 $2^&#123;k-1&#125;$ 个节点，$(k&gt;=1)$    4. 若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点：       - 若 i=1，则该结点是二叉树的根，无双亲，否则编号为 $\lfloor i/2\rfloor$ 的结点为其双亲结点（向下取整）       - 若 2i&gt;n，则该结点无左孩子，否则，编号为 2i 的结点为其左孩子结点       - 若 2i+1&gt;n，则该结点无右孩子，否则，编号为2i+1 的结点为其右孩子结点    5. Catalan()：给定 n 个结点，能够成 $h\left( n\right) =\dfrac&#123;C_&#123;2n&#125;^&#123;n&#125;&#125;&#123;n+1&#125;$  棵不同的二叉树    6. 在完全二叉树中，具有n个节点的完全二叉树的深度为 $\lfloor log2n\rfloor+1$  - 二叉树的顺序存储结构最适用于完全二叉树  - 二叉树的链式存储结构    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BTNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>  data;    <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNoode</span>* lchild;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNode</span>* rchild;</span><br><span class="line">&#125; BTNode;</span><br></pre></td></tr></table></figure>  #### 二叉树的遍历算法  - 先序遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreTraverseTree2</span><span class="params">(BitNode * root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S;   <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p;   <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S);   <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;     <span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123;     <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p);    <span class="comment">//p 所指节点入栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);     <span class="comment">//相当于 visit（p）</span></span><br><span class="line">p = p-&gt;lchild ;     <span class="comment">//指向 p 的左孩子</span></span><br><span class="line"> &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;     <span class="comment">//p 所指节点为空，则出栈赋给 p，遍历右子树</span></span><br><span class="line">            <span class="built_in">StackPop</span>(S, p);</span><br><span class="line">            p = p-&gt;rchild;     <span class="comment">//若右孩子有左子树则继续 while 将左孩子入栈</span></span><br><span class="line">        &#125;    <span class="comment">//end else</span></span><br><span class="line">    &#125;    <span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;    <span class="comment">//end PreTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BiTNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 中序遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverseTree2</span><span class="params">(BitNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p; <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S); <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p) &#123; <span class="comment">//如果是空树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S)) &#123; <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p); <span class="comment">//将节点入栈</span></span><br><span class="line">            p = p-&gt;lchild; <span class="comment">//指针一直向左孩子移动直到无左孩子</span></span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, p); <span class="comment">//p 左子树为空则出栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data); <span class="comment">//访问 p 节点</span></span><br><span class="line">            p = p-&gt;rchild; <span class="comment">//向右子树移动</span></span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end InOrderTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 后序遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树非递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LastTraverseTree2</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; BiTNode* cur, * pre;<span class="comment">//定义一个栈指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>; S = <span class="built_in">InitStack</span>(S); <span class="comment">//cur 为当前节点指针，pre 保存上一节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    pre = <span class="literal">NULL</span>; cur = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">StackPush</span>(S, T); <span class="comment">//根节点入栈</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123; <span class="comment">//若栈非空</span></span><br><span class="line">        cur = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">StackGetTop</span>(S, cur); <span class="comment">//将栈顶节点赋给 cur</span></span><br><span class="line"><span class="comment">/*要保证根节点在左孩子和右孩子访问之后才能访问，因此对于任一节点 P，先将其入 栈。</span></span><br><span class="line"><span class="comment">如果 P 不存在左孩子和右孩子，则可以直接访问它；或者 P 存在左孩子或者右孩子，但是</span></span><br><span class="line"><span class="comment">其左孩子和右孩子都已被访问过了，则同样可以直接访问该节点。*/</span></span><br><span class="line">        <span class="keyword">if</span> ((cur-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; cur-&gt;rchild == <span class="literal">NULL</span>) ||</span><br><span class="line">            (pre != <span class="literal">NULL</span> &amp;&amp; (pre == cur-&gt;lchild || pre == cur-&gt;rchild)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, cur-&gt;data);</span><br><span class="line">            pre = cur;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, cur);</span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line"><span class="comment">//若非上述两种情况，则将 P 的右孩子和左孩子依次入栈，这样就保证了每次取栈顶元素</span></span><br><span class="line"><span class="comment">//的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根节点前面被访问。</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;rchild);</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;lchild);</span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end LastTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 层次遍历：自上而下，自左向右    - 首先，将二叉树的祖先节点入队列    - 然后循环执行以下步骤，直到队列为空：节点出队列进行相应操作，该节点如果有左孩子节点，左孩子节点入队列，该节点如果有右孩子节点，右孩子节点入队    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LayerOrder</span><span class="params">(BiTreeNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LQueue Q;</span><br><span class="line">    <span class="built_in">Initiate_Queue</span>(&amp;Q);</span><br><span class="line">    BiTreeNode* p;</span><br><span class="line">    <span class="keyword">if</span> (head != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, head);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">QueueNotEmpty</span>(&amp;Q)) &#123;</span><br><span class="line">        p = <span class="built_in">QueueDelete</span>(&amp;Q);</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;LChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;LChild);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;RChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;RChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>  #### 哈夫曼树和哈夫曼编码  - 哈夫曼树又叫做最优二叉树，它的特点是带权路径最短    - 树的路径长度是指从根到每个节点的路径长度之和    - 带权路径长度是从该节点到根节之间的路径长度乘以结点的权值    - 树的带权路径长度（WPL）是指树中所有叶子节点的带权路径长度之和  - 求哈夫曼树的带权路径长度：WPL = 第 i 个节点的权值+ 第i个节点的长度    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElemType <span class="title">WeightPathLength</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (FBT == <span class="literal">NULL</span>) <span class="comment">//空树返回0  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)<span class="comment">//访问到叶子结点  </span></span><br><span class="line">            <span class="keyword">return</span> FBT-&gt;data * len;  </span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//访问到非叶子结点，进行递归调用，返回左右子树的带权路径长度之和，len递增  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">WeightPathLength</span>(FBT-&gt;left,len+<span class="number">1</span>)+<span class="built_in">WeightPathLength</span>(FBT-&gt;right,len+<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>  - 哈夫曼树的构造方法：根据数组 a 中 n 个权值建立一棵哈夫曼树，返回树根指针      <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BTreeNode</span>* <span class="built_in">CreateHuffman</span>(ElemType a[], <span class="type">int</span> n)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> i, j;  </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTreeNode</span> **b, *q;  </span><br><span class="line">    b = <span class="built_in">malloc</span>(n*<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//初始化b指针数组，使每个指针元素指向a数组中对应的元素结点  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        b[i] = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        b[i]-&gt;data = a[i];  </span><br><span class="line">        b[i]-&gt;left = b[i]-&gt;right = <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)<span class="comment">//进行 n-1 次循环建立哈夫曼树  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">//k1表示森林中具有最小权值的树根结点的下标，k2为次最小的下标  </span></span><br><span class="line">        <span class="type">int</span> k1 = <span class="number">-1</span>, k2;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)<span class="comment">//让k1初始指向森林中第一棵树，k2指向第二棵  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span> &amp;&amp; k1 == <span class="number">-1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k1 = j;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k2 = j;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (j = k2; j &lt; n; j++)<span class="comment">//从当前森林中求出最小权值树和次最小  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k1]-&gt;data)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    k2 = k1;  </span><br><span class="line">                    k1 = j;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k2]-&gt;data)  </span><br><span class="line">                    k2 = j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//由最小权值树和次最小权值树建立一棵新树，q指向树根结点  </span></span><br><span class="line">        q = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        q-&gt;data = b[k1]-&gt;data + b[k2]-&gt;data;  </span><br><span class="line">        q-&gt;left = b[k1];  </span><br><span class="line">        q-&gt;right = b[k2];  </span><br><span class="line">  </span><br><span class="line">        b[k1] = q;<span class="comment">//将指向新树的指针赋给b指针数组中k1位置  </span></span><br><span class="line">        b[k2] = <span class="literal">NULL</span>;<span class="comment">//k2位置为空  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">free</span>(b); <span class="comment">//删除动态建立的数组b  </span></span><br><span class="line">    <span class="keyword">return</span> q; <span class="comment">//返回整个哈夫曼树的树根指针  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>  - 哈夫曼编码    - 每个字符对应一个二进制编码，采用不等长编码方式，构造哈夫曼树    - 将每个字符的出现频率作为字符结点的权值赋予叶子结点，每个分支结点的左右分支分别用0和1编码    - 从树根结点到每个叶子结点的路径上所经分支的0、1编码序列等于该叶子结点的二进制编码    - 哈夫曼编码产生的是最短前缀码    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffManCoding</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始值为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a[<span class="number">10</span>];  <span class="comment">//定义静态数组a，保存每个叶子的编码，数组长度至少是树深度减一  </span></span><br><span class="line">    <span class="keyword">if</span> (FBT != <span class="literal">NULL</span>)  <span class="comment">//访问到叶子结点时输出其保存在数组a中的0和1序列编码  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="type">int</span> i;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;结点权值为%d的编码：&quot;</span>, FBT-&gt;data);  </span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//访问到非叶子结点时分别向左右子树递归调用，并把分支上的0、1编码保存到数组a  </span></span><br><span class="line">        &#123;   <span class="comment">//的对应元素中，向下深入一层时len值增1  </span></span><br><span class="line">            a[len] = <span class="number">0</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;left, len + <span class="number">1</span>);  </span><br><span class="line">            a[len] = <span class="number">1</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;right, len + <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>  ### 图  #### 图的基本概念  - 图由结点的有穷集合的 V 和边的集合  E 组成（`G(V,E)`）  - 图是按照无方向和有方向分为无向图和有向图，无向边用 $(v_i,v_j)$ 表示，有向边用 $&lt;v_i,v_j&gt;$ 表示  - 路径长度：路径上边或者弧的数目  - 顶点的度：顶点关联边的数目    - 有向图中：方向指向顶点的边为入度；方向背向顶点的边为出度    - 在有向图中，顶点的度就是两者之和    - 在无向图中，任意两个顶点是相通的就是连通图，它的极大连通子图为连通分量    - 在向图中，任意两个顶点间互相都存在路径的就是强连通图，它的极大强连通子图为强连通分量  #### 图的存储结构  - 邻接矩阵    - 图的顺序存储结构    - 用两个数组保存数据：一个一维数组存储图中顶点信息，一个二维数组存储图中边或弧的信息    - 无向图中邻接矩阵是个对称矩阵    - 0表示无边，1表示有边    - 顶点的度是行内数组之和，有向图中各行之和是出度，各列之和是入度     - 邻接矩阵对于边数相对顶点较少的图，就是对存储空间极大的浪费    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> no;</span><br><span class="line">  <span class="type">char</span> info;</span><br><span class="line">&#125; VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> edges[maxSize][maxSize];    <span class="comment">//有权图中int改为float</span></span><br><span class="line">  <span class="type">int</span> n,e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">  VertexType vex[maxSize];    <span class="comment">//存放结点信息</span></span><br><span class="line">&#125; MGragh;</span><br></pre></td></tr></table></figure>  - 邻接表    - 数组和链表相结合的存储方法，图的链式存储结构    - 图中顶点用一个一维数组存储    - 图中每个顶点 $V_i$ 的所有邻接点构成一个线性表    - 顶点表的各个结点由 data 和 Firstedge 两个域表示      - data 是数据域，存储顶点信息      - firstedge 是指针域，指向边表的第一个结点，即顶点的第一个邻接点    - 边表结点由 adjvex 和 next 两个域组成      - adjvex 是邻接点域，存储某顶点的邻接点在顶点表中坐标      - next 存储边表中下一个结点指针    - 有向图也可以用邻接表，出度表叫邻接表，入度表尾逆邻接表    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> adnex;    <span class="comment">//该边所指向的结点的位置</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ArcNode</span> * nextarc;    <span class="comment">//指向下一条边的指针</span></span><br><span class="line">    <span class="type">int</span> info;    <span class="comment">//该边的相关信息(如权值)</span></span><br><span class="line">&#125; ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data;    <span class="comment">//顶点信息</span></span><br><span class="line">    ArcNode* firstarc;    <span class="comment">//指向第一条边的指针</span></span><br><span class="line">&#125;VNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    VNode adjlist[maxSize];    <span class="comment">//邻接表</span></span><br><span class="line">    <span class="type">int</span> n, e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">&#125; AGraph;    <span class="comment">//图的邻接表类型</span></span><br></pre></td></tr></table></figure>  - 十字链表    - 在邻接表中针对有向图，分为邻接表和逆邻接表，导致无法从一个表中获取图的入读和出度的情况，有人提出了十字链表    - 定点表      - firstin：入边表头指针，指向顶点入边表的第一个结点      - firstout：出边表头指针，指向顶点出边表第一个结点    - 边表      - tailvex 是指弧起点在顶点表的下标，headvex 弧终点在顶点表的下标      - headlink 入边表指针域，指向终点相同的下一条边      - taillink 是指边表指针域，指向起点相同的下一条边  - 邻接多重表    - ivex 和 jvex 是与某条边依附的两个顶点在顶点表中的下标    - ilink 指向依附项点 ivex 的下一条边    - jlink 指向依附顶点 jvex 的下一条边  #### 图的遍历算法  - 深度优先遍历（DFS，Depth First Search）     - 首先从图中某个顶点 $v_0$ 出发，访问此顶点，然后依次从 $v_0$ 相邻的顶点出发 深度优先遍历，直至图中所有与 $v_0$ 路径相通的顶点都被访问了    - 若此时尚有顶点未被访问， 则从中选一个顶点作为起始点，重复上述过程，直到所有的顶点都被访问    - 深度优先遍历是一个递归的过程，这种遍历过程类似树的先序遍历，均是先访问节点，再从该节点出发继续向下遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组，为了防止重复访问</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做深度优先遍历</span></span><br><span class="line">            <span class="built_in">DFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>; <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">        <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            <span class="built_in">DFS</span>(G, w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 广度优先遍历（BFS，Breadth First Search）    - 首先从图的某个顶点 $v_0$ 出发，访问了 $v_0$ 之后，依次访问与 $v_0$ 相邻的未被访 问的顶点    - 然后分别从这些顶点出发，广度优先遍历，直至所有的顶点都被访问完    - BFS 遍历的方式类似于树的层次遍历    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; G.vexnum;++i)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做广度优先遍历</span></span><br><span class="line">            <span class="built_in">BFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>;    <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isEmpty</span>(Q))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q, v);</span><br><span class="line">        <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">            <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">visit</span>(w);</span><br><span class="line">                visited[w] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">EnQueue</span>(Q, w)</span><br><span class="line">            &#125;    <span class="comment">//if</span></span><br><span class="line">    &#125;    <span class="comment">//while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  #### 最小生成树  - Prim 算法    - 从图中仼意取出一个顶点，把它当成一棵树，然后从与这棵树相接的边中选取一条最短（权值最小）的边，并将这条边及其所连接的顶点也并入这棵树中，此时得到了一棵有两个顶点的树    - 然后从与这棵树相接的边中选取一条最短的边，并将这条边及其所连顶点并入当前树中，得到一棵有3个顶点的树    - 以此类推，直到图中所有顶点都被并入树中为止，此时得到的生成树就是最小生成树    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span> <span class="params">(G,T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = ∅;</span><br><span class="line">    U = &#123;w&#125;;</span><br><span class="line">    <span class="keyword">while</span> ((V - U) != ∅  )</span><br><span class="line">    &#123; <span class="comment">//若图中不含全部顶点</span></span><br><span class="line">        设  (u，v) 是使 u∈U 与 v∈ (V-U)，且权值最小的边;</span><br><span class="line">        T = T∪ (u，v); <span class="comment">//边归入树</span></span><br><span class="line">        U = U∪ &#123;v&#125;;     <span class="comment">//顶点归入树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - Kruskal 算法    - 将图中边按照权值从小到大排序，然后从最小边开始扫描各边，并检测当前边是否为候选边，即是否该边的并入会构成回路，如不构成回路，则将该边并入当前生成树中，直到所有边都被检测完为止    - Kruskal 算法的时间复杂度主要由选取的排序算法决定，排序算法所处理数据的规模由图的边数e 决定，与顶点数无关，因此克鲁斯卡尔算法适用于稀疏图    - 普里姆算法和克鲁斯卡尔算法都是针对于无向图的    - 判断是否产生回路要用到并查集，并查集中保存了一棵或者几棵树      - 通过树中一个结点，可以找到其双亲结点，进而找到根结点（可以快速地将两个含有很多元素的集合并为一个，两个集合就是并査集中的两棵树，只需找到其中一棵树的根，然后将其作为另一棵树中任何个结点的孩子结点即可，可以方便地判断两个元素是否属于同一个集合      - 通过这两个元素所在的结点找到它们的根结点，如果它们有相同的根，则说明它们属于同一个集合，否则属于不同集合    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> kruskal（V，T）</span><br><span class="line">&#123;</span><br><span class="line">    T = V;    <span class="comment">//初始化树，仅含顶点</span></span><br><span class="line">    numS = n;    <span class="comment">//不连分量的数目</span></span><br><span class="line">    <span class="keyword">while</span> (numS &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        从 E 中取出权值最小的边（v,u）;</span><br><span class="line">        <span class="keyword">if</span>（v 和 u 属于 T 中不同的连通分量）</span><br><span class="line">        &#123;</span><br><span class="line">            T = T∪（u，v）;<span class="comment">//将此边加入到生成树中；</span></span><br><span class="line">            numS--; <span class="comment">//不连通的分量减少 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  #### 最短路径  - Dijkstra 算法    - 通常用于求图中某一顶点到其余各顶点的最短路径    - 设  G=(V,E) 是一个带权有向图，把图中顶点集合 V 分成两组    - 第一组为已求出最短路径的顶点集合（用 S 表示，初始时 S 中只有一个源点，,以后每求得一条最短路径就将求得的顶点加入到集合 S 中，直到全部顶点都加入到 S 中）    - 第二组为其余未确定最短路径的顶点集合（用 U 表示），按最短路径长度的递增次序依次把第二组的顶点加入 S 中，在加入的过程中，总保持从源点 V 到 S 中各顶点的最短路径长度不大于从源点 V 到 U 中任何顶点的最短路径长度  - Dijkstra 算法步骤    1. 初始时，S 只包含源点，即 S＝&#123;v&#125;，v 的距离为 0，U 包含除 v 外的其他顶点，即:U=&#123;其 余顶点&#125;，若 v 与 U 中顶点 u 有边，则正常有权值，若 u 不是 v 的出边邻接点，则 权值为 $∞$    2. 从 U 中选取一个距离 v 最小的顶点 k，把 k 加入 S 中（该选定的距离就是 v 到 k 的最短路 径长度）    3. 以 k 为新考虑的中间点，修改 U 中各顶点的距离值：若从源点 v 到顶点 u 的距离（经过顶点 k）比原来距离（不经过顶点 k）短，则修改顶点 u 的距离值，修改后的距离值为 v 到 k 的距离加上 k 到 u 的距离    4. 重复步骤 b 和 c 直到所有顶点都包含在 S 中    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  　　<span class="type">bool</span> S[MAXNUM];                                  <span class="comment">// 判断是否已存入该点到S集合中</span></span><br><span class="line">      <span class="type">int</span> n=MAXNUM;</span><br><span class="line">  　　<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">      　　dist[i] = A[v0][i];</span><br><span class="line">      　　S[i] = <span class="literal">false</span>;                                <span class="comment">// 初始都未用过该点</span></span><br><span class="line">      　　<span class="keyword">if</span>(dist[i] == MAXINT)    </span><br><span class="line">            　　prev[i] = <span class="number">-1</span>;</span><br><span class="line"> 　　     <span class="keyword">else</span> </span><br><span class="line">            　　prev[i] = v0;</span><br><span class="line">   　　&#125;</span><br><span class="line">   　 dist[v0] = <span class="number">0</span>;</span><br><span class="line">   　 S[v0] = <span class="literal">true</span>; 　　</span><br><span class="line"> 　　 <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">       　　<span class="type">int</span> mindist = MAXINT;</span><br><span class="line">       　　<span class="type">int</span> u = v0; 　　                            <span class="comment">// 找出当前未使用的点j的dist[j]最小值</span></span><br><span class="line">      　　 <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">      　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; dist[j]&lt;mindist)</span><br><span class="line">      　　    &#123;</span><br><span class="line">         　　       u = j;                             <span class="comment">// u保存当前邻接点中距离最小的点的号码 </span></span><br><span class="line">         　 　      mindist = dist[j];</span><br><span class="line">       　　   &#125;</span><br><span class="line">       　　S[u] = <span class="literal">true</span>; </span><br><span class="line">       　　<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">       　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; A[u][j]&lt;MAXINT)</span><br><span class="line">       　　    &#123;</span><br><span class="line">           　    　<span class="keyword">if</span>(dist[u] + A[u][j] &lt; dist[j])     <span class="comment">//在通过新加入的u点路径找到离v0点更短的路径  </span></span><br><span class="line">           　    　&#123;</span><br><span class="line">                   　　dist[j] = dist[u] + A[u][j];    <span class="comment">//更新dist </span></span><br><span class="line">                   　　prev[j] = u;                    <span class="comment">//记录前驱顶点 </span></span><br><span class="line">            　　    &#125;</span><br><span class="line">        　    　&#125;</span><br><span class="line">   　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - Floyd 算法    - Floyd-Warshall算法（Floyd-Warshall algorithm）是解决任意两点间的最短路径的一种算法，可以正确处理有向图或负权的最短路径问题，同时也被用于计算有向图的传递闭包    - Floyd-Warshall 算法的时间复杂度为  $O(N^3)$，空间复杂度为  $O(N^2)$    - Floyd 算法是一个经典的动态规划算法，目标是寻找从点 i 到点 j 的最短路径，假设 Dis(i,j) 为节点 u 到节点 v 的最短路径的距离    - 对于每一个节点 k，检查 Dis(i,k) + Dis(k,j) &lt; Dis(i,j) 是否成立，如果成立，证明从 i 到 k 再到 j 的路径比 i 直接到j的路径短，便设置 Dis(i,j) = Dis(i,k) + Dis(k,j)，这样当遍历完所有节点 k，Dis(i,j) 中记录的便是 i 到 j 的最短路径的距离  - Floyd 算法步骤    - 从任意一条单边路径开始，所有两点之间的距离是边的权，如果两点之间没有边相连，则权为无穷大　　    - 对于每一对顶点 u 和 v，看看是否存在一个顶点 w 使得从 u 到 w 再到 v 比己知的路径更短，如果是更新它    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>;k &lt;= n;k++)</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] &gt; a[i][k] + a[k][j])</span><br><span class="line">                a[i][j] = a[i][k] + a[k][j];</span><br></pre></td></tr></table></figure>  #### 拓扑排序  - 对一个有向无环图 G 进行拓扑排序，是将 G 中所有顶点排成一个线性序列，使得图中任意一对顶点 u 和 v，若存在由 u 到 v 的路径，则在拓扑排序序列中一定是 u 出现在 v 的前边    1. 从 DAG 图中选择一个没有前驱的节点并输出    2. 从图中删除该节点和所有以它为起点的有向边    3. 重复上两步直到当前的 DAG 图为空或不存在无前驱的顶点为止    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topologicalSort</span><span class="params">(Graph GL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EdgeNode* e;</span><br><span class="line">    <span class="type">int</span> top = <span class="number">0</span>; <span class="comment">//用于栈指针下标 </span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 用于统计输出顶点的个数 </span></span><br><span class="line">    <span class="type">int</span>* stack; <span class="comment">// 建栈将入度为 0 的顶点入栈 </span></span><br><span class="line">    stack = (<span class="type">int</span>*)<span class="built_in">malloc</span>(GL-&gt;numVertexes * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; GL-&gt;numVertexes; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == GL-&gt;adjList[i].in) <span class="comment">//将入度为 0 的顶点入栈 </span></span><br><span class="line">            stack[++top] = i;</span><br><span class="line">    <span class="keyword">while</span> (top != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gettop = stack[top--];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, GL-&gt;adjList[gettop].data);</span><br><span class="line">        count++; <span class="comment">//输出 i 号顶点，并计数 </span></span><br><span class="line">        <span class="keyword">for</span> (e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next) &#123;</span><br><span class="line">            k = e-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span> (!(--GL-&gt;adjList[k].in))</span><br><span class="line">                <span class="comment">//将 i 顶点的邻接点入度减 1，如果减 1 后为 0，则入栈 </span></span><br><span class="line">                stack[++top] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; GL-&gt;numVertexes) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="矩阵与广义表-2"><a href="#矩阵与广义表-2" class="headerlink" title="矩阵与广义表"></a>矩阵与广义表</h3><h4 id="矩阵-2"><a href="#矩阵-2" class="headerlink" title="矩阵"></a>矩阵</h4><ul><li><p>矩阵的转置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trsmat</span><span class="params">(<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            B[j][i] = A[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>矩阵相加</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">            C[i][j] = A[i][j] + B[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>矩阵相乘</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">amutmat</span><span class="params">(<span class="type">int</span> C[][maxSize],<span class="type">int</span> A[][maxSize],<span class="type">int</span> B[][maxSize],<span class="type">int</span> m, <span class="type">int</span> n,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; k;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            C[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="function"><span class="keyword">for</span> <span class="title">int</span><span class="params">(h = <span class="number">0</span>;h &lt; n;++h)</span></span></span><br><span class="line"><span class="function">                C[i][j] +</span>= A[i][j] * B[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相同的元素或者零元素在矩阵中分布存在一定规律的矩阵称为特殊矩阵，反之称为稀疏矩阵</p><ul><li>对称矩阵、三角阵、对角矩阵</li></ul></li></ul><h4 id="广义表-2"><a href="#广义表-2" class="headerlink" title="广义表"></a>广义表</h4><ul><li>表元素可以是原子或者广义表的一种线性表的扩展结构</li><li>广义表可以是递归定义的，长度为表最上层元素的个数，深度为表中括号的最大的层数</li><li>当广义表非空时，第一个元素为广义表的表头，其余元素组成的表是广义表的表尾</li><li>原子结点有两个域：标志域和数据域</li><li>广义表结点有三个域：标志域，头指针域与尾指针域</li></ul><h3 id="树-2"><a href="#树-2" class="headerlink" title="树"></a>树</h3><h4 id="树的基本概念-2"><a href="#树的基本概念-2" class="headerlink" title="树的基本概念"></a>树的基本概念</h4><ul><li>树是一种非线性的数据结构，是若干个结点的集合，由唯一的根和若干个互不相交的子树组成<ul><li>结点不仅包含数据元素，并且包含指向子树的分支</li><li>结点的度是结点拥有的子树个数或者分支个数，树的度是树中各结点度的最大值</li><li>树的高度是树中结点的最大层次，根结点的高度为树的高度</li></ul></li><li>树的双亲存储结构：<code>int tree[maxSize]</code></li><li>树的链式存储结构<ul><li>邻接表：孩子存储结构</li><li>孩子兄弟存储结构</li></ul></li></ul><h4 id="二叉树的概念和性质-2"><a href="#二叉树的概念和性质-2" class="headerlink" title="二叉树的概念和性质"></a>二叉树的概念和性质</h4><ul><li><p>二叉树的定义</p><ul><li>每个结点最多只有两颗子树，即二叉树中的结点的度只能为0、1、2</li><li>子树有左右顺序之分，不能颠倒</li></ul></li><li><p>满二叉树：在一颗二叉树中，如果所有的分支节点都有左、右孩子节点，并且叶子节点都集中在二叉树的最下一层</p></li><li><p>完全二叉树由满二叉树从右至左、从上之下挨个删除结点得到的</p></li><li><p>二叉树的主要性质</p><ol><li>非空二叉树上叶子结点数等于双分支结点数加1，$n_0=n_2+1$</li><li>在二叉树的第 $i$ 层上最多有 $2^{i-1}$个节点，$(i&gt;=1)$</li><li>二叉树中如果深度为 $k$，那么最多有 $2^{k-1}$ 个节点，$(k&gt;=1)$</li><li><p>若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点：</p><ul><li>若 i=1，则该结点是二叉树的根，无双亲，否则编号为 $\lfloor i/2\rfloor$ 的结点为其双亲结点（向下取整）</li><li>若 2i&gt;n，则该结点无左孩子，否则，编号为 2i 的结点为其左孩子结点</li><li>若 2i+1&gt;n，则该结点无右孩子，否则，编号为2i+1 的结点为其右孩子结点</li></ul></li><li>Catalan()：给定 n 个结点，能够成 $h\left( n\right) =\dfrac{C_{2n}^{n}}{n+1}$  棵不同的二叉树</li><li>在完全二叉树中，具有n个节点的完全二叉树的深度为 $\lfloor log2n\rfloor+1$</li></ol></li><li><p>二叉树的顺序存储结构最适用于完全二叉树</p></li><li><p>二叉树的链式存储结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BTNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>  data;    <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNoode</span>* lchild;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTNode</span>* rchild;</span><br><span class="line">&#125; BTNode;</span><br></pre></td></tr></table></figure></li></ul><h4 id="二叉树的遍历算法-2"><a href="#二叉树的遍历算法-2" class="headerlink" title="二叉树的遍历算法"></a>二叉树的遍历算法</h4><ul><li><p>先序遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreTraverseTree2</span><span class="params">(BitNode * root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S;   <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p;   <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S);   <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;     <span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123;     <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p);    <span class="comment">//p 所指节点入栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);     <span class="comment">//相当于 visit（p）</span></span><br><span class="line">p = p-&gt;lchild ;     <span class="comment">//指向 p 的左孩子</span></span><br><span class="line"> &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;     <span class="comment">//p 所指节点为空，则出栈赋给 p，遍历右子树</span></span><br><span class="line">            <span class="built_in">StackPop</span>(S, p);</span><br><span class="line">            p = p-&gt;rchild;     <span class="comment">//若右孩子有左子树则继续 while 将左孩子入栈</span></span><br><span class="line">        &#125;    <span class="comment">//end else</span></span><br><span class="line">    &#125;    <span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;    <span class="comment">//end PreTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归先序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BiTNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中序遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的非递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverseTree2</span><span class="params">(BitNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; <span class="comment">//定义一个栈指针</span></span><br><span class="line">    BitNode* p; <span class="comment">//工作指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    p = root;</span><br><span class="line">    S = <span class="built_in">InitStack</span>(S); <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p) &#123; <span class="comment">//如果是空树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S)) &#123; <span class="comment">//如果树不空或者栈不空</span></span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPush</span>(S, p); <span class="comment">//将节点入栈</span></span><br><span class="line">            p = p-&gt;lchild; <span class="comment">//指针一直向左孩子移动直到无左孩子</span></span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, p); <span class="comment">//p 左子树为空则出栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data); <span class="comment">//访问 p 节点</span></span><br><span class="line">            p = p-&gt;rchild; <span class="comment">//向右子树移动</span></span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end InOrderTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树的递归中序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">        <span class="built_in">inOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后序遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树非递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LastTraverseTree2</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackNode* S; BiTNode* cur, * pre;<span class="comment">//定义一个栈指针</span></span><br><span class="line">    S = <span class="literal">NULL</span>; S = <span class="built_in">InitStack</span>(S); <span class="comment">//cur 为当前节点指针，pre 保存上一节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;树为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//end if</span></span><br><span class="line">    pre = <span class="literal">NULL</span>; cur = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">StackPush</span>(S, T); <span class="comment">//根节点入栈</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">    &#123; <span class="comment">//若栈非空</span></span><br><span class="line">        cur = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">StackGetTop</span>(S, cur); <span class="comment">//将栈顶节点赋给 cur</span></span><br><span class="line"><span class="comment">/*要保证根节点在左孩子和右孩子访问之后才能访问，因此对于任一节点 P，先将其入 栈。</span></span><br><span class="line"><span class="comment">如果 P 不存在左孩子和右孩子，则可以直接访问它；或者 P 存在左孩子或者右孩子，但是</span></span><br><span class="line"><span class="comment">其左孩子和右孩子都已被访问过了，则同样可以直接访问该节点。*/</span></span><br><span class="line">        <span class="keyword">if</span> ((cur-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; cur-&gt;rchild == <span class="literal">NULL</span>) ||</span><br><span class="line">            (pre != <span class="literal">NULL</span> &amp;&amp; (pre == cur-&gt;lchild || pre == cur-&gt;rchild)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, cur-&gt;data);</span><br><span class="line">            pre = cur;</span><br><span class="line">            <span class="built_in">StackPop</span>(S, cur);</span><br><span class="line">        &#125;<span class="comment">//end if</span></span><br><span class="line"><span class="comment">//若非上述两种情况，则将 P 的右孩子和左孩子依次入栈，这样就保证了每次取栈顶元素</span></span><br><span class="line"><span class="comment">//的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根节点前面被访问。</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;rchild);</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">StackPush</span>(S, cur-&gt;lchild);</span><br><span class="line">        &#125;<span class="comment">//end else</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">    <span class="built_in">free</span>(S);</span><br><span class="line">&#125;<span class="comment">//end LastTraverseTree2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树递归后序遍历*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(BiTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>层次遍历：自上而下，自左向右</p><ul><li>首先，将二叉树的祖先节点入队列</li><li>然后循环执行以下步骤，直到队列为空：节点出队列进行相应操作，该节点如果有左孩子节点，左孩子节点入队列，该节点如果有右孩子节点，右孩子节点入队</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LayerOrder</span><span class="params">(BiTreeNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LQueue Q;</span><br><span class="line">    <span class="built_in">Initiate_Queue</span>(&amp;Q);</span><br><span class="line">    BiTreeNode* p;</span><br><span class="line">    <span class="keyword">if</span> (head != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, head);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">QueueNotEmpty</span>(&amp;Q)) &#123;</span><br><span class="line">        p = <span class="built_in">QueueDelete</span>(&amp;Q);</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;LChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;LChild);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;RChild != <span class="literal">NULL</span>) <span class="built_in">AppendQueue</span>(&amp;Q, p-&gt;RChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h4 id="哈夫曼树和哈夫曼编码-2"><a href="#哈夫曼树和哈夫曼编码-2" class="headerlink" title="哈夫曼树和哈夫曼编码"></a>哈夫曼树和哈夫曼编码</h4><ul><li><p>哈夫曼树又叫做最优二叉树，它的特点是带权路径最短</p><ul><li>树的路径长度是指从根到每个节点的路径长度之和</li><li>带权路径长度是从该节点到根节之间的路径长度乘以结点的权值</li><li>树的带权路径长度（WPL）是指树中所有叶子节点的带权路径长度之和</li></ul></li><li><p>求哈夫曼树的带权路径长度：WPL = 第 i 个节点的权值+ 第i个节点的长度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElemType <span class="title">WeightPathLength</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (FBT == <span class="literal">NULL</span>) <span class="comment">//空树返回0  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)<span class="comment">//访问到叶子结点  </span></span><br><span class="line">            <span class="keyword">return</span> FBT-&gt;data * len;  </span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//访问到非叶子结点，进行递归调用，返回左右子树的带权路径长度之和，len递增  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">WeightPathLength</span>(FBT-&gt;left,len+<span class="number">1</span>)+<span class="built_in">WeightPathLength</span>(FBT-&gt;right,len+<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>哈夫曼树的构造方法：根据数组 a 中 n 个权值建立一棵哈夫曼树，返回树根指针  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BTreeNode</span>* <span class="built_in">CreateHuffman</span>(ElemType a[], <span class="type">int</span> n)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> i, j;  </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTreeNode</span> **b, *q;  </span><br><span class="line">    b = <span class="built_in">malloc</span>(n*<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//初始化b指针数组，使每个指针元素指向a数组中对应的元素结点  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        b[i] = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        b[i]-&gt;data = a[i];  </span><br><span class="line">        b[i]-&gt;left = b[i]-&gt;right = <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)<span class="comment">//进行 n-1 次循环建立哈夫曼树  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">//k1表示森林中具有最小权值的树根结点的下标，k2为次最小的下标  </span></span><br><span class="line">        <span class="type">int</span> k1 = <span class="number">-1</span>, k2;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)<span class="comment">//让k1初始指向森林中第一棵树，k2指向第二棵  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span> &amp;&amp; k1 == <span class="number">-1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k1 = j;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                k2 = j;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (j = k2; j &lt; n; j++)<span class="comment">//从当前森林中求出最小权值树和次最小  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (b[j] != <span class="literal">NULL</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k1]-&gt;data)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    k2 = k1;  </span><br><span class="line">                    k1 = j;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (b[j]-&gt;data &lt; b[k2]-&gt;data)  </span><br><span class="line">                    k2 = j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//由最小权值树和次最小权值树建立一棵新树，q指向树根结点  </span></span><br><span class="line">        q = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> BTreeNode));  </span><br><span class="line">        q-&gt;data = b[k1]-&gt;data + b[k2]-&gt;data;  </span><br><span class="line">        q-&gt;left = b[k1];  </span><br><span class="line">        q-&gt;right = b[k2];  </span><br><span class="line">  </span><br><span class="line">        b[k1] = q;<span class="comment">//将指向新树的指针赋给b指针数组中k1位置  </span></span><br><span class="line">        b[k2] = <span class="literal">NULL</span>;<span class="comment">//k2位置为空  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">free</span>(b); <span class="comment">//删除动态建立的数组b  </span></span><br><span class="line">    <span class="keyword">return</span> q; <span class="comment">//返回整个哈夫曼树的树根指针  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>哈夫曼编码</p><ul><li>每个字符对应一个二进制编码，采用不等长编码方式，构造哈夫曼树</li><li>将每个字符的出现频率作为字符结点的权值赋予叶子结点，每个分支结点的左右分支分别用0和1编码</li><li>从树根结点到每个叶子结点的路径上所经分支的0、1编码序列等于该叶子结点的二进制编码</li><li>哈夫曼编码产生的是最短前缀码</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffManCoding</span><span class="params">(<span class="keyword">struct</span> BTreeNode* FBT, <span class="type">int</span> len)</span><span class="comment">//len初始值为0  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a[<span class="number">10</span>];  <span class="comment">//定义静态数组a，保存每个叶子的编码，数组长度至少是树深度减一  </span></span><br><span class="line">    <span class="keyword">if</span> (FBT != <span class="literal">NULL</span>)  <span class="comment">//访问到叶子结点时输出其保存在数组a中的0和1序列编码  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FBT-&gt;left == <span class="literal">NULL</span> &amp;&amp; FBT-&gt;right == <span class="literal">NULL</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="type">int</span> i;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;结点权值为%d的编码：&quot;</span>, FBT-&gt;data);  </span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//访问到非叶子结点时分别向左右子树递归调用，并把分支上的0、1编码保存到数组a  </span></span><br><span class="line">        &#123;   <span class="comment">//的对应元素中，向下深入一层时len值增1  </span></span><br><span class="line">            a[len] = <span class="number">0</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;left, len + <span class="number">1</span>);  </span><br><span class="line">            a[len] = <span class="number">1</span>;  </span><br><span class="line">            <span class="built_in">HuffManCoding</span>(FBT-&gt;right, len + <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li></ul><h3 id="图-2"><a href="#图-2" class="headerlink" title="图"></a>图</h3><h4 id="图的基本概念-2"><a href="#图的基本概念-2" class="headerlink" title="图的基本概念"></a>图的基本概念</h4><ul><li>图由结点的有穷集合的 V 和边的集合  E 组成（<code>G(V,E)</code>）</li><li>图是按照无方向和有方向分为无向图和有向图，无向边用 $(v_i,v_j)$ 表示，有向边用 $<v_i,v_j>$ 表示</v_i,v_j></li><li>路径长度：路径上边或者弧的数目</li><li>顶点的度：顶点关联边的数目<ul><li>有向图中：方向指向顶点的边为入度；方向背向顶点的边为出度</li><li>在有向图中，顶点的度就是两者之和</li><li>在无向图中，任意两个顶点是相通的就是连通图，它的极大连通子图为连通分量</li><li>在向图中，任意两个顶点间互相都存在路径的就是强连通图，它的极大强连通子图为强连通分量</li></ul></li></ul><h4 id="图的存储结构-2"><a href="#图的存储结构-2" class="headerlink" title="图的存储结构"></a>图的存储结构</h4><ul><li><p>邻接矩阵</p><ul><li>图的顺序存储结构</li><li>用两个数组保存数据：一个一维数组存储图中顶点信息，一个二维数组存储图中边或弧的信息</li><li>无向图中邻接矩阵是个对称矩阵</li><li>0表示无边，1表示有边</li><li>顶点的度是行内数组之和，有向图中各行之和是出度，各列之和是入度 </li><li>邻接矩阵对于边数相对顶点较少的图，就是对存储空间极大的浪费</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> no;</span><br><span class="line">  <span class="type">char</span> info;</span><br><span class="line">&#125; VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> edges[maxSize][maxSize];    <span class="comment">//有权图中int改为float</span></span><br><span class="line">  <span class="type">int</span> n,e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">  VertexType vex[maxSize];    <span class="comment">//存放结点信息</span></span><br><span class="line">&#125; MGragh;</span><br></pre></td></tr></table></figure></li><li><p>邻接表</p><ul><li>数组和链表相结合的存储方法，图的链式存储结构</li><li>图中顶点用一个一维数组存储</li><li>图中每个顶点 $V_i$ 的所有邻接点构成一个线性表</li><li>顶点表的各个结点由 data 和 Firstedge 两个域表示<ul><li>data 是数据域，存储顶点信息</li><li>firstedge 是指针域，指向边表的第一个结点，即顶点的第一个邻接点</li></ul></li><li>边表结点由 adjvex 和 next 两个域组成<ul><li>adjvex 是邻接点域，存储某顶点的邻接点在顶点表中坐标</li><li>next 存储边表中下一个结点指针</li></ul></li><li>有向图也可以用邻接表，出度表叫邻接表，入度表尾逆邻接表</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> adnex;    <span class="comment">//该边所指向的结点的位置</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ArcNode</span> * nextarc;    <span class="comment">//指向下一条边的指针</span></span><br><span class="line">    <span class="type">int</span> info;    <span class="comment">//该边的相关信息(如权值)</span></span><br><span class="line">&#125; ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data;    <span class="comment">//顶点信息</span></span><br><span class="line">    ArcNode* firstarc;    <span class="comment">//指向第一条边的指针</span></span><br><span class="line">&#125;VNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    VNode adjlist[maxSize];    <span class="comment">//邻接表</span></span><br><span class="line">    <span class="type">int</span> n, e;    <span class="comment">//顶点数和边数</span></span><br><span class="line">&#125; AGraph;    <span class="comment">//图的邻接表类型</span></span><br></pre></td></tr></table></figure></li><li><p>十字链表</p><ul><li>在邻接表中针对有向图，分为邻接表和逆邻接表，导致无法从一个表中获取图的入读和出度的情况，有人提出了十字链表</li><li>定点表<ul><li>firstin：入边表头指针，指向顶点入边表的第一个结点</li><li>firstout：出边表头指针，指向顶点出边表第一个结点</li></ul></li><li>边表<ul><li>tailvex 是指弧起点在顶点表的下标，headvex 弧终点在顶点表的下标</li><li>headlink 入边表指针域，指向终点相同的下一条边</li><li>taillink 是指边表指针域，指向起点相同的下一条边</li></ul></li></ul></li><li><p>邻接多重表</p><ul><li>ivex 和 jvex 是与某条边依附的两个顶点在顶点表中的下标</li><li>ilink 指向依附项点 ivex 的下一条边</li><li>jlink 指向依附顶点 jvex 的下一条边</li></ul></li></ul><h4 id="图的遍历算法-1"><a href="#图的遍历算法-1" class="headerlink" title="图的遍历算法"></a>图的遍历算法</h4><ul><li><p>深度优先遍历（DFS，Depth First Search） </p><ul><li>首先从图中某个顶点 $v_0$ 出发，访问此顶点，然后依次从 $v_0$ 相邻的顶点出发 深度优先遍历，直至图中所有与 $v_0$ 路径相通的顶点都被访问了</li><li>若此时尚有顶点未被访问， 则从中选一个顶点作为起始点，重复上述过程，直到所有的顶点都被访问</li><li>深度优先遍历是一个递归的过程，这种遍历过程类似树的先序遍历，均是先访问节点，再从该节点出发继续向下遍历</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组，为了防止重复访问</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做深度优先遍历</span></span><br><span class="line">            <span class="built_in">DFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>; <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">        <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            <span class="built_in">DFS</span>(G, w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>广度优先遍历（BFS，Breadth First Search）</p><ul><li>首先从图的某个顶点 $v_0$ 出发，访问了 $v_0$ 之后，依次访问与 $v_0$ 相邻的未被访 问的顶点</li><li>然后分别从这些顶点出发，广度优先遍历，直至所有的顶点都被访问完</li><li>BFS 遍历的方式类似于树的层次遍历</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[Max_Vex];    <span class="comment">//定义访问标记数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; G.vexnum;++i)</span><br><span class="line">        visited[v] = <span class="literal">false</span>;    <span class="comment">//初始化标记数组</span></span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; G.vexnum;++v)</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])    <span class="comment">//如果 v 未被访问，那么从 v 起，开始做广度优先遍历</span></span><br><span class="line">            <span class="built_in">BFS</span>(G, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = <span class="literal">true</span>;    <span class="comment">//定义为已访问</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isEmpty</span>(Q))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q, v);</span><br><span class="line">        <span class="keyword">for</span> (w = <span class="built_in">FirstNeighbor</span>(G, v);w &gt;= <span class="number">0</span>;w = <span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">            <span class="keyword">if</span> (!visited[w])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">visit</span>(w);</span><br><span class="line">                visited[w] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">EnQueue</span>(Q, w)</span><br><span class="line">            &#125;    <span class="comment">//if</span></span><br><span class="line">    &#125;    <span class="comment">//while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="最小生成树-1"><a href="#最小生成树-1" class="headerlink" title="最小生成树"></a>最小生成树</h4><ul><li><p>Prim 算法</p><ul><li>从图中仼意取出一个顶点，把它当成一棵树，然后从与这棵树相接的边中选取一条最短（权值最小）的边，并将这条边及其所连接的顶点也并入这棵树中，此时得到了一棵有两个顶点的树</li><li>然后从与这棵树相接的边中选取一条最短的边，并将这条边及其所连顶点并入当前树中，得到一棵有3个顶点的树</li><li>以此类推，直到图中所有顶点都被并入树中为止，此时得到的生成树就是最小生成树</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span> <span class="params">(G,T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = ∅;</span><br><span class="line">    U = &#123;w&#125;;</span><br><span class="line">    <span class="keyword">while</span> ((V - U) != ∅  )</span><br><span class="line">    &#123; <span class="comment">//若图中不含全部顶点</span></span><br><span class="line">        设  (u，v) 是使 u∈U 与 v∈ (V-U)，且权值最小的边;</span><br><span class="line">        T = T∪ (u，v); <span class="comment">//边归入树</span></span><br><span class="line">        U = U∪ &#123;v&#125;;     <span class="comment">//顶点归入树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Kruskal 算法</p><ul><li>将图中边按照权值从小到大排序，然后从最小边开始扫描各边，并检测当前边是否为候选边，即是否该边的并入会构成回路，如不构成回路，则将该边并入当前生成树中，直到所有边都被检测完为止</li><li>Kruskal 算法的时间复杂度主要由选取的排序算法决定，排序算法所处理数据的规模由图的边数e 决定，与顶点数无关，因此克鲁斯卡尔算法适用于稀疏图</li><li>普里姆算法和克鲁斯卡尔算法都是针对于无向图的</li><li>判断是否产生回路要用到并查集，并查集中保存了一棵或者几棵树<ul><li>通过树中一个结点，可以找到其双亲结点，进而找到根结点（可以快速地将两个含有很多元素的集合并为一个，两个集合就是并査集中的两棵树，只需找到其中一棵树的根，然后将其作为另一棵树中任何个结点的孩子结点即可，可以方便地判断两个元素是否属于同一个集合</li><li>通过这两个元素所在的结点找到它们的根结点，如果它们有相同的根，则说明它们属于同一个集合，否则属于不同集合</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> kruskal（V，T）</span><br><span class="line">&#123;</span><br><span class="line">    T = V;    <span class="comment">//初始化树，仅含顶点</span></span><br><span class="line">    numS = n;    <span class="comment">//不连分量的数目</span></span><br><span class="line">    <span class="keyword">while</span> (numS &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        从 E 中取出权值最小的边（v,u）;</span><br><span class="line">        <span class="keyword">if</span>（v 和 u 属于 T 中不同的连通分量）</span><br><span class="line">        &#123;</span><br><span class="line">            T = T∪（u，v）;<span class="comment">//将此边加入到生成树中；</span></span><br><span class="line">            numS--; <span class="comment">//不连通的分量减少 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="最短路径-1"><a href="#最短路径-1" class="headerlink" title="最短路径"></a>最短路径</h4><ul><li><p>Dijkstra 算法</p><ul><li>通常用于求图中某一顶点到其余各顶点的最短路径</li><li>设  G=(V,E) 是一个带权有向图，把图中顶点集合 V 分成两组</li><li>第一组为已求出最短路径的顶点集合（用 S 表示，初始时 S 中只有一个源点，,以后每求得一条最短路径就将求得的顶点加入到集合 S 中，直到全部顶点都加入到 S 中）</li><li>第二组为其余未确定最短路径的顶点集合（用 U 表示），按最短路径长度的递增次序依次把第二组的顶点加入 S 中，在加入的过程中，总保持从源点 V 到 S 中各顶点的最短路径长度不大于从源点 V 到 U 中任何顶点的最短路径长度</li></ul></li><li><p>Dijkstra 算法步骤</p><ol><li>初始时，S 只包含源点，即 S＝{v}，v 的距离为 0，U 包含除 v 外的其他顶点，即:U={其 余顶点}，若 v 与 U 中顶点 u 有边，则正常有权值，若 u 不是 v 的出边邻接点，则 权值为 $∞$</li><li>从 U 中选取一个距离 v 最小的顶点 k，把 k 加入 S 中（该选定的距离就是 v 到 k 的最短路 径长度）</li><li>以 k 为新考虑的中间点，修改 U 中各顶点的距离值：若从源点 v 到顶点 u 的距离（经过顶点 k）比原来距离（不经过顶点 k）短，则修改顶点 u 的距离值，修改后的距离值为 v 到 k 的距离加上 k 到 u 的距离</li><li>重复步骤 b 和 c 直到所有顶点都包含在 S 中</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  　　<span class="type">bool</span> S[MAXNUM];                                  <span class="comment">// 判断是否已存入该点到S集合中</span></span><br><span class="line">      <span class="type">int</span> n=MAXNUM;</span><br><span class="line">  　　<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">      　　dist[i] = A[v0][i];</span><br><span class="line">      　　S[i] = <span class="literal">false</span>;                                <span class="comment">// 初始都未用过该点</span></span><br><span class="line">      　　<span class="keyword">if</span>(dist[i] == MAXINT)    </span><br><span class="line">            　　prev[i] = <span class="number">-1</span>;</span><br><span class="line"> 　　     <span class="keyword">else</span> </span><br><span class="line">            　　prev[i] = v0;</span><br><span class="line">   　　&#125;</span><br><span class="line">   　 dist[v0] = <span class="number">0</span>;</span><br><span class="line">   　 S[v0] = <span class="literal">true</span>; 　　</span><br><span class="line"> 　　 <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">       　　<span class="type">int</span> mindist = MAXINT;</span><br><span class="line">       　　<span class="type">int</span> u = v0; 　　                            <span class="comment">// 找出当前未使用的点j的dist[j]最小值</span></span><br><span class="line">      　　 <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">      　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; dist[j]&lt;mindist)</span><br><span class="line">      　　    &#123;</span><br><span class="line">         　　       u = j;                             <span class="comment">// u保存当前邻接点中距离最小的点的号码 </span></span><br><span class="line">         　 　      mindist = dist[j];</span><br><span class="line">       　　   &#125;</span><br><span class="line">       　　S[u] = <span class="literal">true</span>; </span><br><span class="line">       　　<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">       　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; A[u][j]&lt;MAXINT)</span><br><span class="line">       　　    &#123;</span><br><span class="line">           　    　<span class="keyword">if</span>(dist[u] + A[u][j] &lt; dist[j])     <span class="comment">//在通过新加入的u点路径找到离v0点更短的路径  </span></span><br><span class="line">           　    　&#123;</span><br><span class="line">                   　　dist[j] = dist[u] + A[u][j];    <span class="comment">//更新dist </span></span><br><span class="line">                   　　prev[j] = u;                    <span class="comment">//记录前驱顶点 </span></span><br><span class="line">            　　    &#125;</span><br><span class="line">        　    　&#125;</span><br><span class="line">   　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Floyd 算法</p><ul><li>Floyd-Warshall算法（Floyd-Warshall algorithm）是解决任意两点间的最短路径的一种算法，可以正确处理有向图或负权的最短路径问题，同时也被用于计算有向图的传递闭包</li><li>Floyd-Warshall 算法的时间复杂度为  $O(N^3)$，空间复杂度为  $O(N^2)$</li><li>Floyd 算法是一个经典的动态规划算法，目标是寻找从点 i 到点 j 的最短路径，假设 Dis(i,j) 为节点 u 到节点 v 的最短路径的距离</li><li>对于每一个节点 k，检查 Dis(i,k) + Dis(k,j) &lt; Dis(i,j) 是否成立，如果成立，证明从 i 到 k 再到 j 的路径比 i 直接到j的路径短，便设置 Dis(i,j) = Dis(i,k) + Dis(k,j)，这样当遍历完所有节点 k，Dis(i,j) 中记录的便是 i 到 j 的最短路径的距离</li></ul></li><li><p>Floyd 算法步骤</p><ul><li>从任意一条单边路径开始，所有两点之间的距离是边的权，如果两点之间没有边相连，则权为无穷大　　</li><li>对于每一对顶点 u 和 v，看看是否存在一个顶点 w 使得从 u 到 w 再到 v 比己知的路径更短，如果是更新它</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>;k &lt;= n;k++)</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] &gt; a[i][k] + a[k][j])</span><br><span class="line">                a[i][j] = a[i][k] + a[k][j];</span><br></pre></td></tr></table></figure></li></ul><h4 id="拓扑排序-1"><a href="#拓扑排序-1" class="headerlink" title="拓扑排序"></a>拓扑排序</h4><ul><li><p>对一个有向无环图 G 进行拓扑排序，是将 G 中所有顶点排成一个线性序列，使得图中任意一对顶点 u 和 v，若存在由 u 到 v 的路径，则在拓扑排序序列中一定是 u 出现在 v 的前边</p><ol><li>从 DAG 图中选择一个没有前驱的节点并输出</li><li>从图中删除该节点和所有以它为起点的有向边</li><li>重复上两步直到当前的 DAG 图为空或不存在无前驱的顶点为止</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topologicalSort</span><span class="params">(Graph GL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EdgeNode* e;</span><br><span class="line">    <span class="type">int</span> top = <span class="number">0</span>; <span class="comment">//用于栈指针下标 </span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 用于统计输出顶点的个数 </span></span><br><span class="line">    <span class="type">int</span>* stack; <span class="comment">// 建栈将入度为 0 的顶点入栈 </span></span><br><span class="line">    stack = (<span class="type">int</span>*)<span class="built_in">malloc</span>(GL-&gt;numVertexes * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; GL-&gt;numVertexes; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == GL-&gt;adjList[i].in) <span class="comment">//将入度为 0 的顶点入栈 </span></span><br><span class="line">            stack[++top] = i;</span><br><span class="line">    <span class="keyword">while</span> (top != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gettop = stack[top--];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, GL-&gt;adjList[gettop].data);</span><br><span class="line">        count++; <span class="comment">//输出 i 号顶点，并计数 </span></span><br><span class="line">        <span class="keyword">for</span> (e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next) &#123;</span><br><span class="line">            k = e-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span> (!(--GL-&gt;adjList[k].in))</span><br><span class="line">                <span class="comment">//将 i 顶点的邻接点入度减 1，如果减 1 后为 0，则入栈 </span></span><br><span class="line">                stack[++top] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; GL-&gt;numVertexes) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="排序的基本概念"><a href="#排序的基本概念" class="headerlink" title="排序的基本概念"></a>排序的基本概念</h4><ul><li>排序：将原本无序的序列重新排列成有序序列的过程，这个序列中的每一项可能是单独的数据元素，也可能是一条记录</li><li>记录由多个数据元素组成的，既可以按照记录的主关键字排序（主关键字唯一标识一条记录），也可以按照记录的次关键字排序</li><li>稳定性：当待排序序列中有两个或两个以上相同的关键字时，排序前和排序后这些关键字的相对位置，如果没有发生变化就是稳定的，否则就是不稳定的</li><li>排序算法的分类<ul><li>插入类的排序：直接插入、折半插入、希尔排序</li><li>交换类的排序：冒泡排序、快速排序</li><li>选择类的排序：简单选择、堆选择</li><li>归并类的排序：二路归并</li><li>基数类的排序：多关键字排序</li></ul></li></ul><h4 id="插入类的排序"><a href="#插入类的排序" class="headerlink" title="插入类的排序"></a>插入类的排序</h4><ul><li><p>插入排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertSort</span><span class="params">(<span class="type">int</span>* h, <span class="type">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(len&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="comment">//i是次数，也即排好的个数;j是继续排</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;len;++i)</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&gt;<span class="number">0</span>;--j)</span><br><span class="line">            <span class="keyword">if</span>(h[j]&lt;h[j<span class="number">-1</span>]) <span class="built_in">Swap</span>(h[j],h[j<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>希尔排序</p><ul><li>缩小增量排序：把记录按下标的一定增量分组，对每组使用直接插入排序算法排序</li><li>随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShellSort</span><span class="params">(<span class="type">int</span>* h, <span class="type">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(len&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> div=len/<span class="number">2</span>;div&gt;=<span class="number">1</span>;div/=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;div;++k)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=div+k;i&lt;len;i+=div)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i;j&gt;k;j-=div)</span><br><span class="line">                    <span class="keyword">if</span>(h[j]&lt;h[j-div]) <span class="built_in">Swap</span>(h[j],h[j-div]);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="交换类的排序"><a href="#交换类的排序" class="headerlink" title="交换类的排序"></a>交换类的排序</h4><ul><li><p>快速排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(SeqList R，<span class="type">int</span> low，<span class="type">int</span> high)</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//对 R[low..high]快速排序 </span></span><br><span class="line">    <span class="type">int</span> pivotpos； <span class="comment">//划分后的基准记录的位置 </span></span><br><span class="line">        <span class="keyword">if</span> (low &lt; high) &#123; <span class="comment">//仅当区间长度大于 1 时才须排序 </span></span><br><span class="line">            pivotpos = <span class="built_in">Partition</span>(R，low，high)； <span class="comment">//对 R[low..high]做划分 </span></span><br><span class="line">                <span class="built_in">QuickSort</span>(R，low，pivo t   pos<span class="number">-1</span>)； <span class="comment">//对左区间递归排序 </span></span><br><span class="line">                <span class="built_in">QuickSort</span>(R，pivotp o s+<span class="number">1</span>，high)； <span class="comment">//对右区间递归排序 </span></span><br><span class="line">        &#125;</span><br><span class="line">&#125; <span class="comment">//QuickSort</span></span><br></pre></td></tr></table></figure></li><li><p>冒泡排序</p><ul><li>通过依次交换相邻两个顺序不合法的元素位置，从而将当前最小（大）元素放到合适的位置</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="type">int</span>* h, <span class="type">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(len&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//i是次数，j是具体下标</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>-i;++j)</span><br><span class="line">            <span class="keyword">if</span>(h[j]&gt;h[j+<span class="number">1</span>])</span><br><span class="line">                <span class="built_in">Swap</span>(h[j],h[j+<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="选择类的排序"><a href="#选择类的排序" class="headerlink" title="选择类的排序"></a>选择类的排序</h4><ul><li><p>选择排序</p><ul><li>初始时在序列中找到最小（大）元素，放到序列的起始位置作为已排序序列，然后，再从剩余未排序元素中继续寻找最小（大）元素，放到已排序序列的末尾。以此类推，直到所有元素均排序完毕</li><li>每遍历一次都记住了当前最小（大）元素的位置，最后仅需一次交换操作即可将其放到合适的位置</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="type">int</span>* h, <span class="type">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(len&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> minindex,i,j;</span><br><span class="line">    <span class="comment">//i是次数，也即排好的个数;j是继续排</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        minindex=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;len;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(h[j]&lt;h[minindex]) minindex=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Swap</span>(h[i],h[minindex]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>堆排序</p><ul><li>堆实际上是一棵完全二叉树，堆的每一个父节点都大于（或小于）其子节点，堆的每个左子树和右子树也是一个堆</li><li>最大堆（大顶堆）：堆的每个父节点都大于其孩子节点；最小堆（小顶堆）：堆的每个父节点都小于其孩子节点</li><li>堆的第一个元素要么是最大值（大顶堆），要么是最小值（小顶堆），这样在排序的时候（假设共 n 个节点），直接将第一个元素和最后一个元素进行交换，然后从第一个元素开始进行向下调整至第 n-1 个元素。所以，如果需要升序，就建一个大堆，需要降序，就建一个小堆</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapSort</span><span class="params">(SeqIAst R)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//对 R[1..n]进行堆排序，不妨用 R[0]做暂存单元 </span></span><br><span class="line">    <span class="type">int</span> i；</span><br><span class="line">        <span class="built_in">BuildHeap</span>(R)； <span class="comment">//将 R[1-n]建成初始堆 </span></span><br><span class="line">        <span class="keyword">for</span> (i = n;i &gt; <span class="number">1</span>；  i  -)</span><br><span class="line">        &#123; <span class="comment">//对当前无序区 R[1..i]进行堆排序，共做 n-1 趟</span></span><br><span class="line">            R[<span class="number">0</span>] = R[<span class="number">1</span>];</span><br><span class="line">            R[<span class="number">1</span>] = R[i];</span><br><span class="line">            R[i] = R[<span class="number">0</span>];<span class="comment">//将堆顶和堆中最后一个记录交换 </span></span><br><span class="line">            <span class="built_in">Heapify</span>(R，<span class="number">1</span> ，i<span class="number">-1</span>); <span class="comment">//将 R[1..i-1]重新调整为堆，仅有 R[1]可能违反堆性质 </span></span><br><span class="line">        &#125; <span class="comment">//endfor </span></span><br><span class="line">&#125; <span class="comment">//HeapSort</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="二路归并排序"><a href="#二路归并排序" class="headerlink" title="二路归并排序"></a>二路归并排序</h4><ul><li><p>MERGE-SORT：利用归并的思想实现的排序方法，采用经典的分治（divide-and-conquer）策略</p></li><li><p>递归拆分子序列，将两个已经有序的子序列合并成一个有序序列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSortDC</span><span class="params">(SeqList R，<span class="type">int</span> low，<span class="type">int</span> high)</span> </span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//用分治法对 R[low..high]进行二路归并排序 </span></span><br><span class="line"> <span class="type">int</span> mid； </span><br><span class="line"> <span class="keyword">if</span>(low&lt;high)&#123; <span class="comment">//区间长度大于 1 </span></span><br><span class="line"> mid=(low+high)/<span class="number">2</span>； <span class="comment">//分解 </span></span><br><span class="line"> <span class="built_in">MergeSortDC</span>(R，low，mid); <span class="comment">//递归地对 R[low..mid]排序 </span></span><br><span class="line"> <span class="built_in">MergeSortDC</span>(R，mid+<span class="number">1</span>，high)； <span class="comment">//递归地对 R[mid+1..high]排序 </span></span><br><span class="line"> <span class="built_in">Merge</span>(R，low，mid，high)； <span class="comment">//组合，将两个有序区归并为一个有序区 </span></span><br><span class="line"> &#125; </span><br><span class="line">&#125;<span class="comment">//MergeSortDC </span></span><br></pre></td></tr></table></figure></li></ul><h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4><ul><li><p>不需要比较关键字的大小，根据关键字中各位的值，通过对排序的N个元素进行若干趟分配与收集来实现排序的</p></li><li><p>时间复杂度为 $O\left( d\left( n+r_{d}\right) \right)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetMaxDight</span><span class="params">(<span class="type">int</span>* h, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(len&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max=h[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(h[i]&gt;max) max=h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> digit=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(max/<span class="number">10</span>!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        max/=<span class="number">10</span>;</span><br><span class="line">        ++digit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> digit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetReminder</span><span class="params">(<span class="type">int</span> value,<span class="type">int</span> digit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> div=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;digit;++i)</span><br><span class="line">        div*=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> value/div%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RadixSort_LSD</span><span class="params">(<span class="type">int</span>* h, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(len&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> digit=<span class="built_in">GetMaxDight</span>(h,len);</span><br><span class="line">    <span class="comment">//printf(&quot;MaxDigit:%d\n&quot;, digit);</span></span><br><span class="line">    <span class="type">int</span> count[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *tmp=(<span class="type">int</span>*)<span class="built_in">calloc</span>(len,<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> d=<span class="number">1</span>;d&lt;=digit;++d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(count,<span class="number">0</span>,<span class="built_in">sizeof</span>(count));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            count[<span class="built_in">GetReminder</span>(h[i],d)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//求右边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            count[i]+=count[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> r=<span class="built_in">GetReminder</span>(h[i],d);</span><br><span class="line">            <span class="type">int</span> index=count[r];</span><br><span class="line">            tmp[index<span class="number">-1</span>]=h[i];</span><br><span class="line">            count[r]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(h,tmp,len*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RadixSort_LSD_Reverse</span><span class="params">(<span class="type">int</span>* h, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(len&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> digit=<span class="built_in">GetMaxDight</span>(h,len);</span><br><span class="line">    <span class="comment">//printf(&quot;MaxDigit:%d\n&quot;, digit);</span></span><br><span class="line">    <span class="type">int</span> count[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *tmp=(<span class="type">int</span>*)<span class="built_in">calloc</span>(len,<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> d=<span class="number">1</span>;d&lt;=digit;++d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(count,<span class="number">0</span>,<span class="built_in">sizeof</span>(count));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            count[<span class="built_in">GetReminder</span>(h[i],d)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//printf(&quot;haha\n&quot;);</span></span><br><span class="line">        <span class="comment">//求右边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">8</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        &#123;</span><br><span class="line">            count[i]+=count[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> r=<span class="built_in">GetReminder</span>(h[i],d);</span><br><span class="line">            <span class="type">int</span> index=count[r];</span><br><span class="line">            tmp[index<span class="number">-1</span>]=h[i];</span><br><span class="line">            count[r]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(h,tmp,len*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="排序知识点总结"><a href="#排序知识点总结" class="headerlink" title="排序知识点总结"></a>排序知识点总结</h4><ul><li>快速排序、希尔排序、归并排序、堆排序的平均时间复杂度都是 $O\left( n\log _{2}n\right)$，其他都是 $O(n^2)$</li><li>快速排序的空间复杂度为 $O\left( \log <em>{2}n\right)$，归并排序的空间复杂度为 $O\left( n\right)$，基数排序的空间复杂度为 $O\left( r</em>{d}\right)$，其他都是 $O(1)$</li><li>快速排序、希尔排序、简单选择排序、堆排序是不稳定的，其他都是稳定的</li><li>交换类和选择类的排序，经过一趟排序能够保证一个关键字到达最终位置</li><li>简单选择排序和折半插入排序的关键字比较次数和原始序列无关</li><li>交换类的排序趟数和原始序列有关</li><li>直接插入按顺序查找的方式，而折半插入按折半查找的方式排序</li><li>借助于比较进行排序的算法在最坏情况下的时间复杂度至少为 $O\left( n\log _{2}n\right)$</li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h4 id="查找的基本概念"><a href="#查找的基本概念" class="headerlink" title="查找的基本概念"></a>查找的基本概念</h4><ul><li><p>给定一个值 K，在含有 n 个记录的表中找出关键字等于 K 的记录叫查找，记录即为关键字</p></li><li><p>通常把查找过程中对关键字的平均比较次数（也称平均查找长度）作为衡量一个查找算法优劣的标准</p></li><li><p>平均查找长度 $ASL=\sum ^{n}<em>{i=1}p</em>{i}\times c_{i}$</p><ul><li>$p<em>{i}$ 为查找第 i 个记录的概率，$c</em>{i}$ 为找到第 i 个记录所需要进行比较的次数（查找长度）</li></ul></li><li><p>顺序查找</p><ul><li>用待查找的关键字和给定序列中的各元素的关键字从左到右（或从右到左）依次进行比较，直到成功或失败</li><li>存储结构通常是顺序结构，也可是链式结构</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//顺序表的查找（不带监视哨）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqSearch</span><span class="params">(SSTable S, DataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; s.length &amp; S.list[i].key != x.key)</span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span> (s.list[i].key == x.key)</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顺序表的查找（带监视哨）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqSearch2</span><span class="params">(SSTable S, DataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = S.length;</span><br><span class="line">    <span class="comment">//将关键字存放在0位置处,防止越界</span></span><br><span class="line">    <span class="comment">/*哨兵的主要作用就是在查找循环中监视下标i是否越界</span></span><br><span class="line"><span class="comment">      一旦越界(i=0),因为可以和自己进行比较,循环判定条件</span></span><br><span class="line"><span class="comment">      不成立就使得查找循环结束,就可以达到忽略判定边界条件的目的*/</span></span><br><span class="line">    s.list[o].key = x.key;</span><br><span class="line">    <span class="keyword">while</span> (s.list[i].key != x.key)</span><br><span class="line">        i--;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">    <span class="comment">// 实际上,一切为简化边界条件而引入的附加结点(元素)均可称为哨兵</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顺序表的查找（链表实现）</span></span><br><span class="line"><span class="function">Node* <span class="title">Search</span><span class="params">(Lnode* head, <span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LNode* p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != NUll)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (P-&gt;data == key)</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二分查找</p><ul><li>要求线性表是有序的</li><li>在给定序列是有序表的前提下，将表中间位置处的关键字和查找关键字比较，相 等则查找成功</li><li>否则从中间位置将表分成前后两个子表，如果中间位置处的关键字大于 查找关键字，则进一步查找前子表，否则查找后子表</li><li>重复以上过程，直到找到满足条件的记录，此时查找成功，或直到子表不存在为止，表示查找失败</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">BSearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid == key])</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; key)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="二叉排序树（BST）"><a href="#二叉排序树（BST）" class="headerlink" title="二叉排序树（BST）"></a>二叉排序树（BST）</h4><ul><li><p>二叉排序树要么是空树,要么是满足下列要求的树</p><ul><li>若它的左子树不空，则左子树上所有的关键字的值均小于根节点关键字值</li><li>若它的右子树不空，则右子树上所有的关键字的值均大于根节点关键字值</li><li>左右子树又各是一棵二叉排序树</li></ul></li><li><p>Binary Search Tree 又被叫做二叉搜索树 or 二叉查找树</p></li><li><p>在对某个关键字进行查找的时候，首先和二叉排序树的根节点进行比较，若相等则査找成功</p></li><li><p>由于二叉排序树本身的性质，若该关键字小于根节点值，则再与其左子树进行比较,否则和其右子树进行比较，直到找到与之相等的节点，则查找成功</p></li><li><p>若待比较的位置来到空指针处，则表示査找失败，返回失败的标记</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归算法</span></span><br><span class="line"><span class="function">BTNode* <span class="title">BSTSearch</span><span class="params">(BTNode* p, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == p-&gt;key)</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; p-&gt;key)</span><br><span class="line">            p = p-&gt;lChild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = p-&gt;rChild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归算法</span></span><br><span class="line"><span class="function">BTNode* <span class="title">BSTSearch2</span><span class="params">(BTNode* p, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == p-&gt;key)</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; p-&gt;key)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">BSTSearch2</span>(p-&gt;lChild, key);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">BSTSearch2</span>(p-&gt;rChild, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="平衡二叉树（AVL-树）"><a href="#平衡二叉树（AVL-树）" class="headerlink" title="平衡二叉树（AVL 树）"></a>平衡二叉树（AVL 树）</h4><ul><li>平衡二叉树是一种特殊的二叉排序树，其左右子树都是平衡二叉树且左右子树高度之差的绝对值不超过1</li><li>一个节点的平衡因子为其左子树的高度减去右子树的高度，对于平衡二叉树，树中所有结点的平衡因子取值只可能是-1、0、1</li><li>若向平衡二叉树中插入一个新结点后破坏了平衡二叉树的平衡性，则首先要找出插入新节点后失去平衡的最小子树，然后再调整这颗子树使之成为平衡子树</li><li>当失去平衡的最小子树被调整为平衡子树后，无需调整原有其他所有的不平衡子树</li><li>最小不平衡子树：是以距离插入结点最近且以平衡因子绝对值大于1的结点作为跟的子树，又称为失去平衡的最小子树</li></ul><h4 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h4><ul><li><p>Hash：根据给定的关键字来计算出关键字在表中的地址</p></li><li><p>Hash table（哈希表）：是根据关键码值（Key value）而直接进行访问的数据结构，=通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度，这个映射函数叫做散列函数，存放记录的数组叫做散列表</p></li><li><p>给定表 M，存在函数 f(key)，对任意给定的关键字值 key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表 M 为哈希表，函数 f(key) 为哈希函数</p></li><li><p>键（key）：又称为关键字。唯一的标示要存储的数据，可以是数据本身或者数据的一部分</p></li><li><p>槽（slot/bucket）：哈希表中用于保存数据的一个单元，也就是数据真正存放的容器</p></li><li><p>哈希函数（hash function）：将 key 映射 map 到数据应该存放的槽 slot 所在位置的函数</p></li><li><p>哈希冲突（hash collision）：哈希函数将两个不同的键映射到同一个索引的情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">h1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (x%<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">h2</span><span class="params">(<span class="type">char</span>* x)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i,sum;</span><br><span class="line">  <span class="keyword">for</span>(sum=<span class="number">0</span>, i=<span class="number">0</span>; x[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">    sum += (<span class="type">int</span>)x[i];</span><br><span class="line">  <span class="keyword">return</span> (sum%<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ELFhash</span><span class="params">(<span class="type">char</span>*key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> h=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*key)</span><br><span class="line">    &#123;</span><br><span class="line">        h = (h &lt;&lt; <span class="number">4</span>) + *key++;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> g = h &amp; <span class="number">0xF0000000</span>L;</span><br><span class="line">        <span class="keyword">if</span>(g)</span><br><span class="line">            h ^= g &gt;&gt; <span class="number">24</span>;</span><br><span class="line">        h &amp;= ~g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h % MOD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>散列表的性能分析（查找成功时的平均查找长度）：找到表中已有表项的平均次数</p></li><li><p>装填因子是关键字个数和表长度的比值</p></li></ul><h3 id="常用算法补充"><a href="#常用算法补充" class="headerlink" title="常用算法补充"></a>常用算法补充</h3><ul><li><p>动态规划算法</p><ul><li>处理多阶段决策问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态</li><li>这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线（通常是求最优的活动路线）</li><li>动态规划往往可以用递归程序来实现，不过因为递推可以充分利用前面保存的子问题的解来减少重复计算，所以对于大规模问题来说，有递归不可比拟的优势，这也是动态规划算法的核心之处</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; j = j + <span class="number">1</span>) <span class="comment">// 第一个阶段</span></span><br><span class="line">    xn[j] = 初始值;</span><br><span class="line"><span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt; = <span class="number">1</span>; i = i - <span class="number">1</span>)<span class="comment">// 其他n-1个阶段</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &gt;= <span class="built_in">f</span>(i); j = j + <span class="number">1</span>)<span class="comment">//f(i)与i有关的表达式</span></span><br><span class="line">        xi[j] = j = max&#123; <span class="built_in">g</span>(xi - <span class="number">1</span>[j1:j2]), ...... ,  <span class="built_in">g</span>(xi - <span class="number">1</span>[jk:jk + <span class="number">1</span>]) &#125;;</span><br><span class="line">t = <span class="built_in">g</span>(x1[j1:j2]); <span class="comment">// 由子问题的最优解求解整个问题的最优解的方案</span></span><br><span class="line"><span class="built_in">print</span>(x1[j1]);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; i = i + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    t = t - xi - <span class="number">1</span>[ji];</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &gt;= <span class="built_in">f</span>(i); j = j + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (t = xi[ji])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>贪心算法</p><ul><li>在对问题求解时，总是做出在当前看来是最好的选择，局部最优解</li><li>整个问题的最优解一定由在贪心策略中存在的子问题的最优解得来的</li><li>贪心算法建立哈夫曼树</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>  data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTreeNode</span>* left;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BTreeNode</span>* right;</span><br><span class="line">&#125;btreenode;</span><br><span class="line"><span class="comment">//建立哈夫曼树</span></span><br><span class="line"><span class="function">btreenode *<span class="title">CreateHuffman</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">btreenode *s[n+<span class="number">1</span>], *ss;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    s[i] = <span class="keyword">new</span> btreenode;  <span class="comment">//初始化s指针数组，使每个指针元素指向a数组中对应的元素结点</span></span><br><span class="line">    s[i]-&gt;data = a[i];   <span class="comment">//将树拆成森林，每棵树都只有一个根节点</span></span><br><span class="line">    s[i]-&gt;left = s[i]-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i  = <span class="number">1</span>;i&lt;n;i++)&#123;        <span class="comment">//进行 n-1次循环建立哈夫曼树</span></span><br><span class="line">       <span class="type">int</span> k = <span class="number">-1</span>,t;           <span class="comment">//k表示森林中具有最小权值的树根结点的下标，t为次最小的下标</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;n;j++)&#123;   <span class="comment">//k初始指向森林中第一棵树，t指向第二棵</span></span><br><span class="line">            <span class="keyword">if</span>(s[j]&amp;&amp;k==<span class="number">-1</span>)&#123;</span><br><span class="line">                   k = j;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[j])&#123;</span><br><span class="line">            t =  j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = t;i&lt;n;i++)&#123;   <span class="comment">//从当前森林中求出最小权值树和次最小 ；</span></span><br><span class="line">        <span class="keyword">if</span>(s[i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]-&gt;data&lt;s[k]-&gt;data)&#123;        <span class="comment">//比最小树小</span></span><br><span class="line">                t = k;</span><br><span class="line">                k = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]-&gt;data&lt;s[t]-&gt;data)&#123;  <span class="comment">//比次小树小</span></span><br><span class="line">                t = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">       <span class="comment">//由最小权值树和次最小权值树建立一棵新树，ss指向树根结点(以后依次建立)</span></span><br><span class="line">       ss  = <span class="keyword">new</span> btreenode;     <span class="comment">//ss = (btreenode *)malloc(sizeof(btreenode))</span></span><br><span class="line">       ss-&gt;data =   s[k]-&gt;data+s[t]-&gt;data;</span><br><span class="line">       ss-&gt;left =   s[k];</span><br><span class="line">       ss-&gt;right =  s[t];</span><br><span class="line">       s[k] =  ss;  <span class="comment">//关键点:将ss赋给s[k](k为上述找到的最小树下标,但这是s[k]代表的值已改变，同时把s[t]失效的置空,</span></span><br><span class="line">                   <span class="comment">//在这里起向下一个判断的作用if(s[j])&#123;t = j;break;&#125;</span></span><br><span class="line">       s[t] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">free</span>(s);   <span class="comment">//释放分配空间</span></span><br><span class="line"><span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求哈夫曼树的带权路径长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">WeightPathLength</span><span class="params">(btreenode* FBT, <span class="type">int</span> len)</span></span>&#123;          <span class="comment">//参数len为树的层数</span></span><br><span class="line"><span class="keyword">if</span>(!FBT)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(FBT-&gt;left ==<span class="literal">NULL</span>&amp;&amp;FBT-&gt;right ==<span class="literal">NULL</span>)<span class="comment">//访问到叶子结点</span></span><br><span class="line">        <span class="keyword">return</span> FBT-&gt;data*len;</span><br><span class="line">    <span class="keyword">else</span>&#123;               <span class="comment">//访问到非叶子结点，进行递归调用，返回左右子树的带权路径长度之和，len递增</span></span><br><span class="line">        <span class="keyword">return</span>  <span class="built_in">WeightPathLength</span>(FBT-&gt;left,len+<span class="number">1</span>)+<span class="built_in">WeightPathLength</span>(FBT-&gt;right,len+<span class="number">1</span>);<span class="comment">//一定要记得加1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//哈夫曼编码</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffManCoding</span><span class="params">(btreenode* FBT, <span class="type">int</span> len)</span></span>&#123;   <span class="comment">//参数len为树的层数</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a[<span class="number">20</span>];    <span class="comment">//定义静态数组a，保存每个叶子的编码，数组长度至少是树深度减1</span></span><br><span class="line"><span class="keyword">if</span>(FBT)&#123; <span class="comment">//访问到叶子结点时输出其保存在数组a中的0和1序列编码</span></span><br><span class="line">    <span class="keyword">if</span>(FBT-&gt;left == <span class="literal">NULL</span>&amp;&amp;FBT-&gt;right == <span class="literal">NULL</span>)&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;结点权值为%d的编码:&quot;</span>,FBT-&gt;data);</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;    <span class="comment">//访问到非叶子结点时分别向左右子树递归调用，并把分支上的0、1编码保存到数组</span></span><br><span class="line">            <span class="comment">//a的对应元素中，向下深入一层时len值增1</span></span><br><span class="line">           a[len] = <span class="number">0</span>;</span><br><span class="line">           <span class="built_in">HuffManCoding</span>(FBT-&gt;left,len+<span class="number">1</span>);</span><br><span class="line">           a[len] = <span class="number">1</span>;</span><br><span class="line">           <span class="built_in">HuffManCoding</span>(FBT-&gt;right,len+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">btreenode *s;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;从键盘输入待构造的哈夫曼树中带权叶子结点数n：&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-------输入不合法,请重新输入!!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *a = (<span class="type">int</span> *)<span class="built_in">malloc</span>(n *<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;从键盘输入%d个整数作为权值:&quot;</span>,n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">s = <span class="built_in">CreateHuffman</span>(a,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;哈夫曼树的带权路径长度：&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">WeightPathLength</span>(s, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;树中每个叶子结点的哈夫曼编码：\n&quot;</span>);</span><br><span class="line"><span class="built_in">HuffManCoding</span>(s,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学与技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>白话机器学习算法</title>
      <link href="/%E7%99%BD%E8%AF%9D%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/"/>
      <url>/%E7%99%BD%E8%AF%9D%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>机器学习算法是数据科学的力量之源，它和数据一起产生极其宝贵的知识并且帮助我们以新的方式利用已有信息。<a href="https://book.douban.com/subject/30442187/">白话机器学习算法</a>一书用通俗易懂的语言以及大量有趣的示例和插图讲解10多种前沿的机器学习算法。内容涵盖k均值聚类、主成分分析、关联规则、社会网络分析等无监督学习算法，以及回归分析、k最近邻、支持向量机、决策树、随机森林、神经网络等监督学习算法，并概述强化学习算法的思想。</p></blockquote><span id="more"></span><h3 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h3><p>我们为何需要数据科学？因为借助现代计算机和高级算法，我们能够从大型数据集中发现隐藏的趋势，能够充分利用发现的趋势做预测，能够计算每种结果出现的概率，能够快速获取准确结果。</p><p>数据科学的研究有 4 个主要步骤：</p><ol><li>准备待分析的数据。</li><li>根据研究需求挑选合适的算法，为数据建立模型。</li><li>对算法的参数进行调优，优化模型。</li><li>根据准确度评价模型。</li></ol><h4 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h4><p>数据格式：数据点、数据集。</p><p>变量（variable）：用于描述数据点，又叫属性、特征或维度，变量选择是一个试错的过程，需要根据反馈结果不断更换变量，选取那些最有希望的变量，以待进一步分析。</p><ul><li>二值变量（binary variable）：最简单的变量类型，只有2个可选值</li><li>分类变量（categorical variable）：用来表示有2个以上选择的情况</li><li>整型变量（integer variable）：用来表示整数</li><li>连续变量（continuous variable）：用来表示小数</li></ul><p>特征工程（feature engineering）是将原始数据转化成更好的表达问题本质的特征的过程，使得将这些特征运用到预测模型中能提高对不可见数据的模型预测精度。</p><p>解决数据缺失的方法：近似、计算、移除。</p><h4 id="选择算法"><a href="#选择算法" class="headerlink" title="选择算法"></a>选择算法</h4><p>无监督学习（unsupervised learning）是依靠算法从数据中找出隐藏的模式，主要有 k 均值聚类、主成分分析、关联规则、社会网络分。通过间接手段，可以对无监督学习模型输出的结果进行验证。</p><p>监督学习（supervised learning）是基于数据中已有的模式做预测，主要有回归分析、k 最近邻、支持向量机、决策树、随机森林（random forest）、神经网络等。</p><p>强化学习（reinforcement learning）使用数据中的模式做预测，并根据越来越多的反馈结果不断改进。</p><p>我们除了要了解算法使用的任务类型外，还要了解各种算法对不同数据类型的分析能力，以及结果的本质。</p><h4 id="参数调优（parameter-tuning）"><a href="#参数调优（parameter-tuning）" class="headerlink" title="参数调优（parameter tuning）"></a>参数调优（parameter tuning）</h4><p>不同的算法有不同的调节参数，即便是同一个算法，如果参数调的不一样，所产生的结果也各不相同。</p><p>过拟合模型：过度敏感，把数据中的随机波动当成持久模式，对当前数据有着很高的预测准确度，但是对未知数据的预测准确度较差（泛化能力不强）。</p><p>欠拟合模型（underfitting）：过于愚钝，很可能会忽视数据中的重要趋势，这会导致模型对当前数据和未知数据的预测准确度下降。</p><p>理想拟合：算法能在识别主要趋势和忽视微小变化之间找到平衡，使最终得到的模型非常适合做预测。</p><p>对于大多数模型而言，过拟合（overfitting）是常见问题，所以增加预测模型的复杂度能最大限度的减少预测误差，但容易出现预测边界过度复杂。可以通过正则化（regularization）引入惩罚参数，通过人为增大预测误差，对模型复杂度的增加进行惩罚，从而使算法同时考虑复杂度和准确度使模型保持简单，有助于提高模型的泛化能力。</p><h4 id="评价模型"><a href="#评价模型" class="headerlink" title="评价模型"></a>评价模型</h4><p>使用一些评价指标来比较模型的预测准确度：预测准确率、混淆矩阵和均方根误差（root mean squared error）</p><p>分类指标（classification）</p><ul><li>预测准确率：正确预测所占的比率，无法通过预测准确率得知预测误差是如何产生的</li><li>混淆矩阵（confusion matrix）：在预测准确率的基础上添加假正类型和假负类型，辨别预测误差数</li></ul><p>回归指标：由于回归预测使用连续值，因此误差一般被量化成预测值和实际值之差，惩罚随误差大小而不同。</p><ul><li>均方根误差：将每个误差都取平方，放大大误差，这使得均方根误差对异常值极其敏感，对这些值的惩罚力度也更大，避免较大的误差。</li></ul><p>验证：评估模型对新数据的预测准确度，避免过拟合模型在面对当前数据表现良好而面对新数据时可能表现糟糕的情况。在评估模型时并不一定非要使用新数据，而是可以把当前的数据集划分成训练集（training dataset）和测试集（test dataset）。训练集用来生成和调整预测模型，测试集用来充当新数据并评估模型的预测准确度，最好的模型针对测试集所做的预测一定是最准确的。为了使验证（validation）过程行之有效，需要不带偏差的把数据点随机分派到数据集和测试集中。</p><p>交叉验证（cross-validation）：使用同一个数据集进行训练和测试，避免因为原始数据集很小而无法留出足够的数据形成测试集的情况。把数据集划分成若干组用来对模型进行反复测试，在单次迭代中除了某一组外其他各组都被用来训练预测模型，然后留下来的那组被用来测试模型，这个过程重复进行直到每一个组都测试过模型，并且只测试过一次。</p><h3 id="二、k-均值聚类（k-means-clustering）"><a href="#二、k-均值聚类（k-means-clustering）" class="headerlink" title="二、k 均值聚类（k-means clustering）"></a>二、k 均值聚类（k-means clustering）</h3><h4 id="定义群组"><a href="#定义群组" class="headerlink" title="定义群组"></a>定义群组</h4><p>群组数量要足够大，以便提取有意义的模式用作商业决策参考，还要足够小，能够确保各个群组之间有明显的区别。</p><p>使用陡坡图（scree plot）确定合适的群组数量，陡坡图可以展现群组内散度随群组数量增加而降低的过程。陡坡图曲线的拐弯处表示最佳群组数量，此处的群组内散度较为合理。</p><p>通过检查群组成员与群组中心点的距离判断该群组的有效性，群组最好由密集的数据点组成。</p><ol><li>猜测每个群组的中心点，因为暂时不能确定通过猜测得到的中心点是否正确，所以称它们为伪中心点。</li><li>把每个数据点分配给最近的伪中心点。</li><li>根据群组成员的分布调整为中心点的位置。</li><li>重复步骤 2 和步骤 3 直至群组成员不再发生变化。</li></ol><p>聚类也可以在更多的维度上进行，虽然多维度分析很难进行可视化，但是可以借助程序计算数据点和群组中心点在多维度情形下的距离。</p><h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><p>每个数据点只能属于一个群组：恰好位于两个群组中间的数据点无法确定应属于哪个群组。</p><p>群组被假定是正圆形的：若群组的实际形状是椭圆形，那么位于椭圆两端的数据点可能被划入邻近的其他群组。</p><p>群组被假定是离散的：k 均值聚类既不允许群组重叠，也不允许它们相互嵌套。</p><p>弥补局限性的方法：先用 k 均值聚类方法大致了解数据结构，再综合运用其他更高级的方法进行深入分析。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>k 均值聚类用于把相似的数据点划入同一个群组，群组数量 k 必须事先指定。给数据点分组时，首先把各个数据点分配到距离最近的群组中，然后调整群组中心点的位置，重复这2个步骤直到群组中的成员不再发生变化。k 均值聚类最适用于正圆形、非重叠的群组。</p><h3 id="三、主成分分析（principal-component-analysis）"><a href="#三、主成分分析（principal-component-analysis）" class="headerlink" title="三、主成分分析（principal component analysis）"></a>三、主成分分析（principal component analysis）</h3><h4 id="主成分"><a href="#主成分" class="headerlink" title="主成分"></a>主成分</h4><p>主成分分析用于找出最能区分数据点的变量，这种变量被称为主成分，数据点会沿着主成分的维度最大限度地分散开。主成分可以用已有的一个或多个变量表示。标准化（standardization）类似于使用百分位数表示每个变量，以此将所有变量统一到一个标准尺度上。采用主成分分析之后，可以不再通过试错法组合变量，而是通过精确计算各个变量的权重来获得最优变量组合。</p><h4 id="确定主成分数量"><a href="#确定主成分数量" class="headerlink" title="确定主成分数量"></a>确定主成分数量</h4><p>由于主成分来源于原始变量，因此用来区分数据点的可用信息会受到原始变量个数的制约，为了让结果更简单、更通用，应该只选择前几个主成分进行可视化和后续分析。将主成分按照其对数据点的区分效果进行排列，随着主成分个数增多，区分数据点的效果会变差，陡坡图曲线的拐弯处往往体现了最佳主成分数量。对当前的数据样本进行解释时，使用的主成分越少，泛化能力就越强。</p><h4 id="局限性-1"><a href="#局限性-1" class="headerlink" title="局限性"></a>局限性</h4><p>散度最大化：主成分分析有个重要假设，即数据点最分散的维度是最有用的</p><p>解释成分：主成分分析必须对其产生的成分进行解释，但有时可能很难解释变量按某种方式进行组合的原因</p><p>正交成分：主成分分析算法成分之间存在正交关系，然而真实信息维度之间可能不存在正交关系</p><p>弥补局限性的方法：独立成分分析（不需要假设正交关系，在确定成分时还无需考虑数据的散度）</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>主成分分析是一种降维技巧，它使得我们可以使用较小的变量来描述数据，这些变量即为主成分。每个主成分都是原始变量的某种加权组合，最好的主成分可以用来改进数据分析和可视化。当信息最丰富的几个维度拥有最大的数据散度，并且彼此正交时，主成分分析能有最佳效果。</p><h3 id="四、关联规则（association-rule）"><a href="#四、关联规则（association-rule）" class="headerlink" title="四、关联规则（association rule）"></a>四、关联规则（association rule）</h3><h4 id="支持度、置信度和提升度"><a href="#支持度、置信度和提升度" class="headerlink" title="支持度、置信度和提升度"></a>支持度、置信度和提升度</h4><p>识别关联规则的常用指标有3个：支持度、置信度和提升度。支持度是某个项集出现的频率，可以人为设定一个支持度阈值，当某个项集的支持度高于这个阈值时，就把它称为频繁项集。置信度是当 X 项出现时 Y 项同时出现的频率，记为 {X-&gt;Y} ，但它可能会错估某个关联规则的重要性。提升度是 X 项和 Y 项一同出现的频率，同时考虑这两项各自出现的频率。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;X-&gt;Y&#125; 的提升度 = &#123;X-&gt;Y&#125; 的置信度 / &#123;Y&#125; 的支持度</span><br></pre></td></tr></table></figure><h4 id="先验原则（apriori-principal）"><a href="#先验原则（apriori-principal）" class="headerlink" title="先验原则（apriori principal）"></a>先验原则（apriori principal）</h4><p>先验原则是指如果某个项集出现的不频繁那么包含它的任何更大的项集必定也出现的不频繁。</p><p>寻找具有高支持度的项集：</p><ol><li>列出只包含一个元素的项集。</li><li>计算每个项集的支持度，保留那些满足最小支持度阈值条件的项集，淘汰不满足的项集。</li><li>项候选项集中增加一个元素，并利用在步骤2中保留下来的项集产生所有可能的组合。</li><li>重复步骤2和步骤3，为越来越大的项集确定支持度，直到没有待检查的新项集。</li></ol><p>寻找具有高置信度或高提升度的关联规则：因为置信度和提升度都是基于支持度计算出来的，因此一旦识别出具有高支持度的项集，寻找关联规则就不会那么费劲了。</p><h4 id="局限性-2"><a href="#局限性-2" class="headerlink" title="局限性"></a>局限性</h4><p>计算成本高：当库存量很大或者支持度阈值很低时，候选项集仍然会很多。</p><p>假关联：当元素的数量很大时，偶尔会出现假关联，为了确保所发现的关联规则具有普遍性，应该对他们进行验证。</p><p>弥补局限性的方法：使用高级数据结构对候选项集进行更高效的分类，从而减少比较的次数。</p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>关联规则用于揭示某一元素出现的频率以及它与其他元素的关系。</p><p>识别关联规则的常用指标有3个：</p><ol><li>{X} 的支持度表示 X 项出现的频率。</li><li>{X-&gt;Y} 的置信度表示当 X 项出现时，Y 项同时出现的频率。</li><li>{X-&gt;Y} 的提升度表示 X 项和 Y 项一同出现的频率，并且考虑每项各自出现的频率。</li></ol><p>利用先验原则可以淘汰一大部分非频繁项集，从而大大地加快搜索频繁相机的速度。</p><h3 id="五、社会网络分析"><a href="#五、社会网络分析" class="headerlink" title="五、社会网络分析"></a>五、社会网络分析</h3><h4 id="Louvain-方法（Louvain-method）"><a href="#Louvain-方法（Louvain-method）" class="headerlink" title="Louvain 方法（Louvain method）"></a>Louvain 方法（Louvain method）</h4><p>通过对节点分组可以找出网络中存在的群组，研究这些群组有助于理解网络各部分的区别和联系。</p><p>Louvain 方法用来在网络中找出群组，它会尝试使用不同的聚类配置来做如下两种事：</p><ol><li>同一群组中各个节点间的边数和强度最大化。</li><li>把属于不同群组的节点间的边数和强度最小化。</li></ol><p>模块度用于表示上述两件事的完成程度，模块度越高，群组越理想。</p><p>为了获得理想的聚类配置，Louvain 方法会不断迭代：</p><ol><li>把每个节点看作一个群组，即一开始群组数和节点数相同。</li><li>把一个节点重新分配给对提高模块度有最大帮助的群组，如果无法进一步提高，模块度节点保持不动，针对每个节点重复这个过程直到不能再分配。</li><li>把步骤2中发现的每个群组作为一个节点构建出一个粗粒度网络，并且把以前的群间边合并成连接新结点且带权重的边。</li><li>重复步骤2和步骤3直到无法再重新分配和合并。</li></ol><p>Louvain 方法先发现小群组，然后在适当的情况下合并它们，帮助我们找出更重要的群组，但它有一定的局限性。</p><ul><li>重要但较小的群组可能会被合并：需要检查在中间迭代阶段被发现的群组，如果有必要就把它们保留下来。</li><li>有多种可能的聚类配置：若网络中包含重叠或嵌套的群组，需要依据其他信息源对群组予以验证。</li></ul><h4 id="PageRank-算法（PageRank-algorithm）"><a href="#PageRank-算法（PageRank-algorithm）" class="headerlink" title="PageRank 算法（PageRank algorithm）"></a>PageRank 算法（PageRank algorithm）</h4><p>虽然群组可以反映出相互作用高度集中的区域，但是这些相互作用可能受占主导地位的节点支配，群组则围绕着这些主导节点形成，为了找出占主导地位的节点，需要对节点进行排序。PageRank 算法是谷歌公司最初用来为网页排名的算法之一，以 Larry Page 的姓氏命名。</p><p>在PageRank 算法中，决定一个网页排名的因素有如下3个：</p><ol><li>链接数量：被其他网页链接的次数越多，该网页的访问者可能就越多</li><li>链接强度：这些链接被访问的次数越多，该网页的流量就越大</li><li>链接来源：如果被其他有较高排名的网页链接，那么该网页的排名也会升高</li></ol><p>尽管 PageRank 算法易于使用，但它有偏向于旧节点的局限性：如果一个新网页包含非常棒的内容但一开始访问者人数很少，那么它的排名就比较低，可以定期更新 PageRank 值，让新网页随着自身知名度的提高获得提高排名的机会。</p><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><p>社会网络分析可用于绘制和分析多个实体之间的关系。Louvain 方法用于在一个网络中找出群组，具体做法是将群组内部的相互作用最大化，同时把群组之间的相互作用最小化，当群组大小相同且相互分离时，该方法的效果最佳。PageRank 算法根据链接的数量强度以及来源对网络中的节点进行排序，这个算法有助于找出网络中占主导地位的节点，但对链接数不太多的新节点并不友好。</p><h3 id="六、回归分析（regression-analysis）"><a href="#六、回归分析（regression-analysis）" class="headerlink" title="六、回归分析（regression analysis）"></a>六、回归分析（regression analysis）</h3><h4 id="趋势线"><a href="#趋势线" class="headerlink" title="趋势线"></a>趋势线</h4><p>趋势线是做预测时常用的工具，他们很容易生成，也很容易理解。一般的趋势往往只涉及单个预测变量，这个变量用来产生预测结果，不过通过添加更多预测变量可以改善预测结果。回归分析不但可以通过考虑更多预测变量改善预测结果，还可以比较各个预测变量的强弱。</p><h4 id="梯度下降法（gradient-decent）"><a href="#梯度下降法（gradient-decent）" class="headerlink" title="梯度下降法（gradient decent）"></a>梯度下降法（gradient decent）</h4><p>在回归分析中预测变量的权重是主要参数，通过解方程可以求得最优权重。梯度下降法先初步猜测合适的权重组合，再通过一个迭代过程，把这些权重应用于每个数据点做预测，然后调整权重以减少整体预测误差。这个过程类似于一步步走到山底下，每走一步梯度下降法都要判断从哪个方向下是最陡峭的，然后朝着那个方向重新校准权重，最终到达最低点，这个点的预测误差最小（经过优化的回归趋势线与梯度上的最低点相对应）。除了回归之外，梯度下降法也能用来优化其他模型中的参数，比如支持向量机和神经网络。</p><p>梯度下降法的结果可能会受到初始参数值（下山起点）的影响，若起点下方恰好有一个小凹坑，那么梯度下降法可能会将其误认为是最优点，为了降低陷入这种凹坑的风险，可以使用随机梯度下降法，每次迭代并不是采用所有的数据点，而是只从其中选取一个来调整参数，引入多变性，有助于算法逃离凹坑。</p><h4 id="回归系数"><a href="#回归系数" class="headerlink" title="回归系数"></a>回归系数</h4><p>在为回归预测变量求得最佳权重之后，需要对它们进行解释。回归系数是回归预测变量权重，它表示某个预测变量相比于其他预测变量的影响大小。预测变量的度量单位不同也会影响对回归系数的解释，因此应该在做回归分析之前先对预测变量的度量单位进行标准化，经过标准化之后预测变量的系数被称为标准化回归系数。</p><h4 id="相关系数（correlation-coefficient）"><a href="#相关系数（correlation-coefficient）" class="headerlink" title="相关系数（correlation coefficient）"></a>相关系数（correlation coefficient）</h4><p>相关系数：当只存在一个预测变量时，该预测变量的标准化回归系数。</p><p>关联方向：相关系数为正表示预测变量和结果变化的方向一致，为负则表示两者变化方向相反。</p><p>关联强度：r 值越接近于 -1 或 1，预测变量的作用就越大，若值为 0 则表示预测变量和结果之间不存在关系。</p><p>因为相关系数表示单个预测变量的绝对强度，所以相比于回归系数，相关系数在对预测变量进行排序时更可靠。</p><h4 id="局限性-3"><a href="#局限性-3" class="headerlink" title="局限性"></a>局限性</h4><p>对异常值敏感：回归分析平等地对待所有的数据点，只要存在几个有异常值的数据点，就会给趋势线造成很大的影响，因此在做进一步分析之前，可以先使用散点图找出异常值。</p><p>多重共线性问题（multicollinearity）：如果回归模型包含高度相关的预测变量，就会造成相关预测变量权重失真，因此可以使用更高级的技术，如套索回归或岭回归。</p><p>弯曲的趋势：需要对预测变量的值进行转换，或使用支持向量机等其他算法。</p><p>并不说明存在因果关系。</p><h4 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h4><p>回归分析用于寻找最佳拟合线（best-fit line），使得尽可能多的数据点位于这条线上或附近，趋势线由带权重的组合预测变量得到，这些权重被称为回归系数，表示某个预测变量相对于其他预测变量的影响强度。</p><p>以下情况下，回归分析的效果最好：</p><ol><li>预测变量之间的关系不强</li><li>无异常值</li><li>趋势可以用直线表示</li></ol><h3 id="七、k-最近邻算法（k-Nearest-Neighbors）和异常检测"><a href="#七、k-最近邻算法（k-Nearest-Neighbors）和异常检测" class="headerlink" title="七、k 最近邻算法（k-Nearest Neighbors）和异常检测"></a>七、k 最近邻算法（k-Nearest Neighbors）和异常检测</h3><h4 id="k-最近邻算法"><a href="#k-最近邻算法" class="headerlink" title="k 最近邻算法"></a>k 最近邻算法</h4><p>k 最近邻算法根据周围数据点的类型对某个数据点进行分类（物以类聚，人以群分）。在 k 最近邻算法中，参数 k 表示周围数据点的个数，选择 k 值的过程叫做参数调优，它对预测的准确度起着至关重要的作用；</p><p>使用不同的 k 值进行拟合：如果 k 值太小，数据点只与最近的邻居匹配，并且随机造成所产生的误差也会被放大；如果 k 值太大，数据点会尝试与更远的邻居匹配，其中隐含的模式会被忽略；只有当 k 值恰到好处时，数据点才会参考合适数量的邻居，使得误差相互抵消，有利于揭示数据中隐藏的趋势。</p><p>为实现理想拟合并把误差降到最低，可以使用交叉验证法对参数 k 进行调优，对于二分类问题，可以把 k 设置成一个奇数，以避免出现平局的情况，除了用来为数据点分类，k 最近邻算法还可以通过合计周围数据点的值来预测连续值，通过使用加权平均值，能够进一步改善预测结果，离数据点越近的邻居，其值越能反映该数据点的真实值，因此赋给它的权重应该更大。</p><h4 id="异常检测"><a href="#异常检测" class="headerlink" title="异常检测"></a>异常检测</h4><p>k 最近邻算法不仅可以用来预测数据点的类别和取值，还可以用来识别异常，比如检测欺诈行为。在异常检测的过程中还可能会有新发现，比如发现之前被忽略的预测变量。</p><p>事实上任何能够产生预测模型的算法都可以用来检测异常，比如在回归分析中，如果某个数据点明显偏离最佳拟合线，那么就会被识别为异常点。异常数据点既可能因缺失预测变量所致，也可能因预测模型缺少足够的训练数据所致。一旦找到异常数据点，就要将它们从数据集中移除，然后再训练预测模型，减少数据中包含的噪声，进而提高模型的准确度。</p><h4 id="局限性-4"><a href="#局限性-4" class="headerlink" title="局限性"></a>局限性</h4><p>类别不平衡：可以使用加权投票法来取代少数服从多数原则，确保较近数据点类别的权重比较远的更大。</p><p>预测变量过多：在多个维度上识别和处理近邻会导致你计算量大增，需要降维（dimension reduction）。</p><h4 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h4><p>k 最近邻算法根据周围数据点的类型对某个数据点进行分类，k 表示用作参考的数据点的个数，可以使用交叉验证法来确定。当预测变量数目不多，并且类别大小差别不大时，k 最近邻算法才能产生非常好的效果。不准确的分类可能会被标记为潜在异常。</p><h3 id="八、支持向量机（support-vector-machine）"><a href="#八、支持向量机（support-vector-machine）" class="headerlink" title="八、支持向量机（support vector machine）"></a>八、支持向量机（support vector machine）</h3><h4 id="勾画最佳分界线"><a href="#勾画最佳分界线" class="headerlink" title="勾画最佳分界线"></a>勾画最佳分界线</h4><p>支持向量机的主要目标是得到一条能用于分组的最佳分界线，需要注意的是，能用于分组的分界线可能有很多条。为了找出最佳分界线，首先需要从一组中找出距离另一组最近的外围数据点，然后在两组的外围数据点之间画出最佳分界线，由于这些外围数据点在寻找最佳分界线的过程中起了支持作用，因此叫做支持向量。</p><p>支持向量机的一个优点是计算速度很快，仅依靠外围数据点就能找到决策边界，这种对数据点子集的依赖也有缺点，这是因为决策边界对支持向量的位置比较敏感，选取不同的数据点作为训练数据，相应支持向量的位置也不同。</p><p>支持向量机算法有一个关键特征——缓冲带，缓冲带允许一定数量的训练数据点位于错误的一边，由此得到一条更软的分界线。缓冲带对异常值有更强的耐扰性，因此对新数据有更强的泛化能力。缓冲带通过调整惩罚参数得到，这个参数决定了对分类误差的宽容度，惩罚参数越大，宽容度就越大，缓冲带也就越宽。为了让模型对当前数据和新数据有较高的预测准确度，可以使用交叉验证法求得最佳惩罚参数。</p><p>支持向量机的另一个强项是找到决策边界的凸弧，它在发现错综复杂的凸弧时有着更出众的计算效率。支持向量机的秘诀是核技巧（kernel trick），支持向量机不会直接在在数据平面上绘制有凸弧的分界线，而是会首先把数据映射到高维空间，然后在高维空间中将数据点用直线分开，这些直线容易计算，并且当映射回低维空间时，也很容易转化成曲线。</p><p>支持向量机具备在高维空间操纵数据的能力，使得它在分析有多个变量的数据集时大受欢迎。常见应用场景包括遗传信息破译以及文本情感分析。</p><h4 id="局限性-5"><a href="#局限性-5" class="headerlink" title="局限性"></a>局限性</h4><p>小数据集：由于支持向量机依靠支持向量确定决策边界，因此样本量少，用来对分界线进行准确定位的数据也少。</p><p>多组数据：支持向量机每次只能对两组进行分类，如果存在2个以上的组，则需要对每一组都应用支持向量机（多类支持向量机）。</p><p>两组之间存在大量重叠：靠近边界的数据点可能更容易发生分类错误，而且支持向量机没有给出每个数据点遭遇错误分类的概率，但可以通过数据点到决策边界的距离来估计其被正确分类的可能性。</p><h4 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h4><p>支持向量机用来把数据点分为两组，其方法是在两组的外围数据点（支持向量）的中间画一条分界线，支持向量机对异常值有较好的容忍度，它通过一个缓冲带允许少量数据点位于错误的一边，此外他还通过核技巧高效地求得带凸弧的决策边界。当需要把大样本中的数据点分为两组时，支持向量机能够发挥最佳作用。</p><h3 id="九、决策树（decision-tree）"><a href="#九、决策树（decision-tree）" class="headerlink" title="九、决策树（decision tree）"></a>九、决策树（decision tree）</h3><h4 id="生成决策树"><a href="#生成决策树" class="headerlink" title="生成决策树"></a>生成决策树</h4><p>递归拆分（recursive partitioning）：</p><ol><li>确定一个二元选择题，它能够把数据点拆分成两组，并最大限度地提高每组数据点的同质性。</li><li>针对每个叶结点重复步骤1，直到满足终止条件。</li></ol><p>终止条件可能有多个，可以使用交叉验证法进行选取：每个叶节点的数据全属于同一类或有相同的值，叶节点包含的数据点少于5个，进一步分支会超出阈值并且不能提高同质性。</p><p>由于递归拆分只用最佳二元选择题来生成决策树，因此不显著的变量并不会影响结果，而且二元选择题往往围绕着最重要的值划分数据点，所以决策树对异常值有较强的耐扰性。决策树易于可视化，使我们更容易评估预测变量及其相互作用。</p><h4 id="局限性-6"><a href="#局限性-6" class="headerlink" title="局限性"></a>局限性</h4><p>不稳定：决策树是通过把数据点分组生成的，数据中的细微变化可能影响拆分结果，并导致生成的决策树截然不同。</p><p>容易产生过拟合：决策树每次拆分数据点时都力求找到最佳拆分方式。</p><p>不准确：一开始就是用最佳二元选择题拆分数据点并不能保证结果最准确。</p><p>弥补局限性的方法：每次拆分时可以不采用最佳拆分方式，而是尽量让决策树多样化，然后综合不同的决策树产生的预测结果，让最终预测结果具有更好的稳定性和准确性。</p><h4 id="决策树的多样化方法"><a href="#决策树的多样化方法" class="headerlink" title="决策树的多样化方法"></a>决策树的多样化方法</h4><p>随机森林：随机选择不同的二元选择题，生成多棵决策树，然后综合这些决策树的预测结果。</p><p>梯度提升（gradient boosting）：有策略地选择二元选择题，以逐步提高决策树的预测准确度，然后将所有的预测结果的加权平均数作为最终结果。</p><p>虽然随机森林的和梯度提升能够产生更准确的预测结果，但是它们往往比较复杂并且很难进行可视化（黑盒）。</p><h4 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h4><p>决策树通过询问一系列二元选择题来做预测，若想生成决策树，就要不断拆分数据样本以获得同质组，直到满足终止条件，这个过程被称为递归拆分。虽然决策树易于使用和理解，但是容易造成过拟合问题，导致出现不一致的结果，为了尽量避免出现这种情况，可以采用随机森林等替代方法。</p><h3 id="十、随机森林"><a href="#十、随机森林" class="headerlink" title="十、随机森林"></a>十、随机森林</h3><h4 id="集成模型"><a href="#集成模型" class="headerlink" title="集成模型"></a>集成模型</h4><p>集成方法（ensembling）：通过组合有不同优缺点的模型来提高预测准确度的方法。</p><p>集成模型：通过组合许多模型的预测结果得到的预测模型，在组合模型时，既可以遵循少数服从多数的原则，也可以取平均值。随机森林是决策树的集成模型。</p><p>相比于子模型，集成模型的预测准确度更高，这是因为准确的预测模型会彼此强化，错误的则会彼此抵消，为了达到这种效果，集成模型的子模型一定不能犯同类错误，换言之，子模型必须是不相关的。</p><h4 id="自助聚集法（bootstrap-aggregating）"><a href="#自助聚集法（bootstrap-aggregating）" class="headerlink" title="自助聚集法（bootstrap aggregating）"></a>自助聚集法（bootstrap aggregating）</h4><p>自助聚集法是用来生成数千棵不相关的决策树的系统化方法，这些树彼此有明显的不同。为使决策树之间的关联度最小化，每棵树都由训练数据集的一个随机子集产生，并且使用的是预测变量的一个随机子集，这让生成的决策树各不相同，但仍然保留了一定的预测能力。通过限制每次拆分时所用的预测变量，能够生成各不相同的决策树，从而避免发生过拟合问题。为进一步降低发生过拟合问题的可能性，可以增加随机森林中决策树的数量，使模型更通用、更准确。</p><h4 id="局限性-7"><a href="#局限性-7" class="headerlink" title="局限性"></a>局限性</h4><p>随机森林由随机生成的决策树组成，并不存在明确的预测规则，这种不可解释性可能会带来一些伦理问题，因此随机森林适用于那些预测准确度比可解释性更重要的场合。</p><h4 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h4><p>随机森林的预测结果往往比单棵决策树更准确，这是因为它充分利用了两种技术：自助聚集法和集成方法。自助聚集法通过随机限制数据拆分过程所用的变量来生成一系列不相关的决策树，集成方法则把决策树的预测结果组合在一起。虽然随机森林的预测结果不具有可解释性，但仍然可以根据对预测结果的贡献度大小对各个预测变量进行排序。</p><h3 id="十一、神经网络（neural-network）"><a href="#十一、神经网络（neural-network）" class="headerlink" title="十一、神经网络（neural network）"></a>十一、神经网络（neural network）</h3><h4 id="神经网络的诞生"><a href="#神经网络的诞生" class="headerlink" title="神经网络的诞生"></a>神经网络的诞生</h4><p>数据存储和共享技术取得进步，为训练神经网络提供了海量数据，有助于改善神经网络的性能。计算能力越来越强大，GPU的运行速度最快能达到CPU的150倍，能为在大数据集上训练神经网络提供强大的支持。算法获得改进。</p><h4 id="神经网络的构成"><a href="#神经网络的构成" class="headerlink" title="神经网络的构成"></a>神经网络的构成</h4><p>输入层：该层处理输入图像的每个像素。为提高预测准确度，可以使用卷积层。卷积层并不处理单个像素，而是识别像素组合的特征，这种分析只关注特征是否出现而不关注出现的位置。所以即使某些关键特征偏离了中心，神经网络仍然能够正确识别，这种特性叫做平移不变性（translational invariance）。</p><p>隐藏层：在像素进入神经网络之后，通过层层转换不断提高和那些标签已知的图像的相似度。标签已知是指神经网络以前见过这些图像，虽然转换得越多，预测准确度就会越高，但是处理时间就会明显增加，一般来说几个隐藏层就足够了/每层的神经元数量要和图像的像素数成比例。</p><p>输出层：该层产生最终预测结果，在这一层中神经元可以只有一个，也可以和结果一样多。</p><p>损失层：该层通常位于最后，并提供有关输入是否识别正确的反馈，如果不正确则给出误差量。在训练神经网络的过程中，损失层至关重要，若预测准确，来自于损失层的反馈会强化产生该预测结果的激活路径。若预测错误，则错误会沿着路径逆向返回，这条路径上的神经元的激活条件就会被重新调整，以减少错误，这个过程称为反向传播（back propagation）。</p><p>通过不断重复这个训练过程，神经网络会学习输入信号和正确输出标签之间的联系，并且把这些联系作为激活规则（activation rule）编入每个神经元，因此为了提高神经网络的预测准确度，需要调整管理激活规则的部件。</p><h4 id="激活规则"><a href="#激活规则" class="headerlink" title="激活规则"></a>激活规则</h4><p>为了产生预测结果，需要沿着一条路径依次激活神经元，每个神经元的激活过程都由其激活规则所控制，激活规则指定了输入信号的来源和强度，在神经网络的训练过程中激活规则会不断调整。良好的激活规则有助于产生准确的预测结果，其关键在于确定合适的权重和阈值，另外神经网络的其他参数也需要调整，比如隐藏层的数量、每层的神经元数量等。可以使用梯度下降法优化这些参数。</p><h4 id="局限性-8"><a href="#局限性-8" class="headerlink" title="局限性"></a>局限性</h4><p>需要大样本：神经网络的复杂性使之能够识别带有复杂特征的输入，但前提是我们能为他提供大量训练数据，如果训练集太小就会出现过拟合问题。可以通过以下方法降低过拟合风险：</p><ul><li>二次取样（subsampling）：为了降低神经元对噪声的敏感度，需要对神经网络的输入进行平滑化处理，即针对信号样本取平均值。</li><li>畸变：当缺少训练数据时，可以通过向每幅图像引入畸变，来产生更多数据，每幅畸变图像都可以作为新的输入，以此扩大训练数据的规模，畸变应该能够反映原数据集的特征（弹性变形）。</li><li>丢弃（dropout）：为解决小的神经元集群之间彼此产生过度依赖，可以在训练期间随机丢弃一半的神经元，这些遭丢弃的神经元将处于未激活的状态，剩下的神经元则正常工作，下一次训练丢弃一组不同的神经元，迫使不同的神经元协同工作，从而揭示训练样本所包含的更多特征。</li></ul><p>计算成本高：训练一个由几千个神经元组成的神经网络可能需要很长时间，一个简单的解决方法是升级硬件另一个解决方法是调整算法，用稍低一些的预测准确度换取更快的处理速度：</p><ul><li>随机梯度下降法：为了更新某一个参数，经典的梯度下降法在一次迭代中使用所有的训练样本，当数据集很大时这样做会耗时，随机梯度下降法是在每次迭代中只用一个训练样本来更新参数，虽然使用这个方法得到的最终参数可能不是最优的，但是准确度不会太低。</li><li>小批次梯度下降法：虽然使用随机梯度下降法能够提升速度，但最终参数可能不准确，算法也可能无法收敛，导致某个参数上下波动，小批次梯度下降法是每次迭代使用训练样本的一个子集。</li><li>全连接层：随着加入的神经元越来越多，路径的数量呈指数增长，为避免查看所有可能的组合，可以使初始层（处理更小、更低级的特征）的神经元部分连接，只有最后几层（处理更大、更高级的特征）才对相邻层的神经元进行全连接。</li></ul><p>不可解释：神经网络由多层组成，每层都有几百个神经元，这些神经元有不同的激活规则控制，这使得我们很难准确地找到产生正确预测结果的输入信号组合。但和回归分析不同，回归分析能明确地识别重要的预测变量，并比较它们的强度，神经网络的特性使之难以证明其使用得当，在涉及伦理问题时尤其如此。</p><p>尽管存在上述局限性，但是神经网络本身拥有的强大能力，使之得以应用于虚拟助手、自动驾驶等前沿领域，随着算法不断改进以及计算能力不断提升，神经网络将在物联网时代发挥关键作用。</p><h4 id="小结-9"><a href="#小结-9" class="headerlink" title="小结"></a>小结</h4><p>神经网络由多个神经元组成，训练期间，第1层的神经元首先被输入数据激活，然后将激活状态传播到后续各层的神经元，最终在输出层产生预测结果。一个神经元是否被激活取决于输入信号的来源和强度，这由其激活规则指定，激活规则会根据预测结果的反馈不断调整，这个过程被称为反向传播。在大数据集和先进的计算硬件可用的情况下，神经网络的表现最好，然而预测结果在大部分的时候都是无法解释的。</p><h3 id="十二、A-B-测试（A-B-testing）和多臂老虎机（multi-arm-bandit-problem）"><a href="#十二、A-B-测试（A-B-testing）和多臂老虎机（multi-arm-bandit-problem）" class="headerlink" title="十二、A/B 测试（A/B testing）和多臂老虎机（multi-arm bandit problem）"></a>十二、A/B 测试（A/B testing）和多臂老虎机（multi-arm bandit problem）</h3><h4 id="A-B-测试的局限性"><a href="#A-B-测试的局限性" class="headerlink" title="A/B 测试的局限性"></a>A/B 测试的局限性</h4><p>测试结果具有偶然性：为提高测试结果的可信度可以增加受测人数，但是会导致另一个问题。</p><p>潜在的收入损失：如果把受测顾客增加一倍，那么看到糟糕广告的人数也会增加一倍，这有流失的顾客的风险。</p><p>这两个问题体现了 A/B 测试中的两个权衡因素：探索和利用。</p><h4 id="epsilon-递减策略（epsilon-decreasing-strategy）"><a href="#epsilon-递减策略（epsilon-decreasing-strategy）" class="headerlink" title="epsilon 递减策略（epsilon-decreasing strategy）"></a>epsilon 递减策略（epsilon-decreasing strategy）</h4><p>epsilon 指的是探索时间与总时间的比例，随着对效果较好的广告越来越有信心，我们使 epsilon 值递减，这个方法属于强化学习的范畴。</p><p>A/B 测试由探索和利用前后两个阶段组成，而在 epsilon 递减策略中，探索阶段和利用阶段是分散的，并且一开始时探索得多一些，越接近尾声，探索得越少。</p><h4 id="多臂老虎机"><a href="#多臂老虎机" class="headerlink" title="多臂老虎机"></a>多臂老虎机</h4><p>假设有两台老虎机 A 和 B 可供选择，玩2000个回合，每个回合要么赢1美元，要么没有收益，老虎机 A 的返还率为50%，老虎机 B 的则为40%，但我们事先并不知道这些信息，问要怎么玩才能多赢钱？</p><ol><li>全探索：如果随机选择老虎机，平均会赢900美元。</li><li>A/B 测试：用前200个回合探索哪台老虎机的返还率更高，然后在剩下的1800个回合中选择这台老虎机，平均会赢976美元，但由于两台老虎机的返还率接近，由此存在误判的可能性（误判概率8%）。</li><li>为降低误判的风险，可以把A/B 测试的探索范围扩大到500个回合，这样做可以把误判概率降到1%，但是平均中奖金额也会减少到963美元。</li><li>epsilon 递减策略：如果采用 epsilon 递减策略边探索边利用，平均会赢984美元，并且误判概率为4%，通过增加探索比例（增加 epsilon 值）能够降低误判概率，但仍会减少平均中奖金额。</li><li>全利用：如果一开始就掌握内部消息并选择返还率最高的老虎机 A，平均会赢1000美元，但这个假设不现实。</li></ol><p>由此看到，在不掌握内部消息的情况下，采用 epsilon 递减策略的收益最高，而且由于存在收敛性这一数学特征，由此 epsilon 递减策略能确保在回合数足够多的情况下找出返还率最高的老虎机。</p><p>胜者为先：范加尔在曼联采用了一个非常规策略来决定罚点球的球员，第一个被指定罚点球的球员会负责到底，除非他没有打进球，接下来新换的球员继续负责罚点球，如果没有罚进就再换一名球员，依此类推。</p><p>频繁地换老虎机，会导致探索过多而利用过少，只比随机选择老虎机稍好一些，而且胜者为先策略只根据上一次的结果来评估老虎机，这忽略了老虎机之前的表现。</p><h4 id="epsilon-递减策略的局限性"><a href="#epsilon-递减策略的局限性" class="headerlink" title="epsilon 递减策略的局限性"></a>epsilon 递减策略的局限性</h4><p>采用 epsilon 递减策略的关键在于控制好 epsilon 值，如果 epsilon 值递减的过慢，就会失去利用老虎机的机会，而如果递减得过快，就可能会选错老虎机。epsilon 值的最佳递减速度主要取决于两台老虎机返还率的相似程度，采用汤普森取样方法，可以计算 epsilon 值。</p><p>epsilon 递减策略还依赖于如下假设：返还率恒定不变；返还率与上一次游戏无关；玩游戏和观察返还率之间的延迟极小。</p><h4 id="小结-10"><a href="#小结-10" class="headerlink" title="小结"></a>小结</h4><p>多臂老虎机问题的实质是如何以最佳方式分配资源。一种策略是先探索可用选项，然后把所有剩余资源分配给表现最佳的选项，这个策略叫做 A/B 测试，另一个策略是给表现最佳的选项，逐渐分配更多的资源，这个策略叫做 epsilon 递减策略。虽然 epsilon 递减策略在大多数情况下能够提供比 A/B 测试更高的回报，但是确定资源分配的最佳更新速度并非易事。</p><h3 id="十三、更多评价指标"><a href="#十三、更多评价指标" class="headerlink" title="十三、更多评价指标"></a>十三、更多评价指标</h3><h4 id="分类指标"><a href="#分类指标" class="headerlink" title="分类指标"></a>分类指标</h4><p>接受者操作特征曲线下面积（曲线下面积）：这个指标允许我们在最大化正例率和最小化假正例率之间做权衡</p><ul><li>正例率：被模型正确预测为正类别的样本所占的比例</li><li>正例率 = 正例数 / ( 正例数 + 假负例数 )</li><li>假正例率：被模型错误预测为正类别的样本所占的比例</li><li>假正例率 = 假正例数 / ( 假正例数 + 负例数 )</li><li>在极端情况下，可以把所有样本全部预测为正类别，以此实现正例率最大化（正例率为1），虽然这样做可以避免出现假负例但会明显增加假正例</li><li>接受者操作特征曲线（ROC 曲线）体现了最大化正例率和最小化假正例率之间的权衡</li><li>模型性能通过 ROC 曲线下方的面积来衡量，所以该指标被称为曲线下面积，模型的准确度越高，曲线越靠近左上角</li><li>完美的预测模型会产生一条曲线下面积为1的曲线（曲线下面积等于整个图形的面积）</li></ul><p>对数损失指标利用置信度来校正其对预测误差的惩罚，具体来说，模型对错误预测的置信度越高，惩罚就越重，由于对数损失指标根据对预测结果的置信度来调整惩罚程度，因此它通常用于错误预测极其有害的情况。</p><h4 id="回归指标"><a href="#回归指标" class="headerlink" title="回归指标"></a>回归指标</h4><p>平均绝对误差：平等的惩罚所有预测误差，具体做法是对所有数据点的预测值和实际值之差取平均值。除了考虑误差大小之外，还可以通过均方根对数误差把误差方向纳入考虑范围。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>开发团队调度软件实现</title>
      <link href="/%E5%BC%80%E5%8F%91%E5%9B%A2%E9%98%9F%E8%B0%83%E5%BA%A6%E8%BD%AF%E4%BB%B6/"/>
      <url>/%E5%BC%80%E5%8F%91%E5%9B%A2%E9%98%9F%E8%B0%83%E5%BA%A6%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在学习完 <a href="/Java基础">Java 基础编程</a>的全部知识点后，为了更加熟悉 Java 面向对象的高级特性，进一步掌握编程技巧和调试技巧，实现模拟一个基于文本界面的开发团队调度软件，并以文档的形式记录软件设计结构、实现方法和一些疑难之处，主要涉及类的继承性和多态性、对象的值传递和接口、static 和 final 修饰符、特殊类的使用（包装类、抽象类、内部类）、异常处理等知识点。</p></blockquote><span id="more"></span><h3 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h3><ul><li>软件启动时，根据给定的数据创建公司部分成员列表（数组）</li><li>根据菜单提示，基于现有的公司成员，组建一个开发团队以开发一个新的项目</li><li>组建过程包括将成员插入到团队中，或从团队中删除某成员，还可以列出团队中现有成员的列表</li><li>开发团队成员包括架构师、设计师和程序员</li></ul><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><ul><li>软件采用单级菜单方式工作，当软件运行时，主界面显示公司成员的列表</li><li>当选择“添加团队成员”菜单时，将执行从列表中添加指定（通过 ID）成员到开发团队的功能</li><li>如果添加操作因某种原因失败，将显示失败信息（失败原因视具体原因而不同）</li><li>当选择“删除团队成员”菜单时，将执行从开发团队中删除指定（通过 TeamID）成员的功能</li><li>当选择“团队列表”菜单时，将列出开发团队中的现有成员</li></ul><h3 id="软件设计结构"><a href="#软件设计结构" class="headerlink" title="软件设计结构"></a>软件设计结构</h3><ul><li>软件由 view、service、domain 三个模块组成<ul><li><code>com.atguigu.team.view</code> 模块为主控模块，负责菜单的显示和处理用户操作</li><li><code>com.atguigu.team.service</code> 模块为实体对象（Employee 及其子类如程序员等）的管理模块，<code>NameListService</code> 和 <code>TeamService</code> 类分别用各自的数组来管理公司员工和开发团队成员对象</li><li>domain 模块为 Employee 及其子类等 JavaBean 类所在的包</li></ul></li><li><code>com.atguigu.team.domain</code> 模块中包含了所有实体类<ul><li>其中 Programmer 及其子类，均会领用 Equipment</li></ul></li></ul><h3 id="创建项目基本组件"><a href="#创建项目基本组件" class="headerlink" title="创建项目基本组件"></a>创建项目基本组件</h3><ol><li>创建 <code>TeamSchedule</code> 项目，按照设计要求创建所有包，将项目提供的几个类复制到相应的包中<ul><li>view 包中：TSUtility.java</li><li>service包中：Data.java</li></ul></li><li>按照设计要求，在 com.atguigu.team.domain 包中，创建 Equipment 接口及其各实现子类代码</li><li>按照设计要求，在 com.atguigu.team.domain 包中，创建 Employee 类及其各子类代码</li><li>检验代码的正确性</li></ol><h4 id="键盘访问的实现"><a href="#键盘访问的实现" class="headerlink" title="键盘访问的实现"></a>键盘访问的实现</h4><ul><li>项目 view 包中提供了 TSUtility.java 类，提供了以下静态方法，可用来方便地实现键盘访问<ul><li>public static char readMenuSelection()：该方法读取键盘，如果用户键入’1’-’4’中的任意字符，则方法返回。返回值为用户键入字符</li><li>public static void readReturn()：该方法提示并等待，直到用户按回车键后返回</li><li>public static int readInt()：该方法从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值</li><li>public static char readConfirmSelection()：从键盘读取‘Y’或’N’，并将其作为方法的返回值</li></ul></li></ul><h4 id="Equipment-接口及其实现子类的设计"><a href="#Equipment-接口及其实现子类的设计" class="headerlink" title="Equipment 接口及其实现子类的设计"></a>Equipment 接口及其实现子类的设计</h4><ul><li>根据需要提供各属性的 get/set 方法以及重载构造器</li><li>实现类实现接口的方法，返回各自属性的信息</li></ul><h4 id="Employee-类及其子类的设计"><a href="#Employee-类及其子类的设计" class="headerlink" title="Employee 类及其子类的设计"></a>Employee 类及其子类的设计</h4><ul><li>memberId 用来记录成员加入开发团队后在团队中的 ID</li><li>Status 是项目 service 包下自定义的类，声明三个对象属性，分别表示成员的状态<ol><li>FREE-空闲</li><li>BUSY-已加入开发团队</li><li>VOCATION-正在休假</li></ol></li><li>equipment 表示该成员领用的设备</li><li>bonus 表示奖金</li><li>stock 表示公司奖励的股票数量</li><li>可根据需要为类提供各属性的 get/set 方法以及重载构造器</li></ul><h4 id="Status-类"><a href="#Status-类" class="headerlink" title="Status 类"></a>Status 类</h4><ul><li><p>Status 枚举类位于 com.atguigu.team.service 包中，封装员工的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.team.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Status</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String NAME;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Status</span><span class="params">(String name)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.NAME = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Status</span> <span class="variable">FREE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Status</span>(<span class="string">&quot;FREE&quot;</span>);</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Status</span> <span class="variable">VOCATION</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Status</span>(<span class="string">&quot;VOCATION&quot;</span>); </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Status</span> <span class="variable">BUSY</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Status</span>(<span class="string">&quot;BUSY&quot;</span>);</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getNAME</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> NAME;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> NAME;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="实现-service-包中的类"><a href="#实现-service-包中的类" class="headerlink" title="实现 service 包中的类"></a>实现 service 包中的类</h3><ol><li>按照设计要求编写 NameListService 类</li><li>在 NameListService 类中临时添加一个 main 方法中，作为单元测试方法</li><li>在方法中创建 NameListService 对象，然后分别用模拟数据调用该对象的各个方法，以测试是否正确<ul><li>测试应细化到包含了所有非正常的情况，以确保方法完全正确</li></ul></li><li>重复以上3步，完成 TeamService 类的开发</li></ol><h4 id="NameListService-类的设计"><a href="#NameListService-类的设计" class="headerlink" title="NameListService 类的设计"></a>NameListService 类的设计</h4><ul><li>负责将 Data 中的数据封装到 Employee[] 数组中，同时提供相关操作 Employee[] 的方法</li><li>employees 用来保存公司所有员工对象</li><li>NameListService() 构造器<ul><li>根据项目提供的 Data 类构建相应大小的 employees 数组</li><li>再根据 Data 类中的数据构建不同的对象，包括 Employee、Programmer、Designer 和 Architect 对象，以及相关联的 Equipment 子类的对象</li><li>将对象存于数组中</li><li>Data类位于 com.atguigu.team.service 包中</li></ul></li><li>getAllEmployees()：获取当前所有员工<ul><li>返回：包含所有员工对象的数组</li></ul></li><li>getEmployee(id : int)：获取指定ID的员工对象<ul><li>参数：指定员工的 ID</li><li>返回：指定员工对象</li><li>异常：找不到指定的员工</li></ul></li><li>在 service 子包下提供自定义异常类：TeamException</li><li>另外，可根据需要自行添加其他方法或重载构造器</li></ul><h4 id="TeamService-类的设计"><a href="#TeamService-类的设计" class="headerlink" title="TeamService 类的设计"></a>TeamService 类的设计</h4><ul><li>关于开发团队成员的管理：添加、删除等</li><li>counter 为静态变量，用来为开发团队新增成员自动生成团队中的唯一 ID，即 memberId（应使用增1的方式）</li><li>MAX_MEMBER：表示开发团队最大成员数</li><li>team数组：用来保存当前团队中的各成员对象</li><li>total：记录团队成员的实际人数</li><li>getTeam() ：返回当前团队的所有对象<ul><li>返回：包含所有成员对象的数组，数组大小与成员人数一致</li></ul></li><li>addMember(e: Employee)：向团队中添加成员<ul><li>参数：待添加成员的对象</li><li>异常：添加失败，TeamException 中包含了失败原因</li></ul></li><li>removeMember(memberId: int)：从团队中删除成员<ul><li>参数：待删除成员的 memberId</li><li>异常：找不到指定 memberId 的员工，删除失败</li></ul></li><li>另外，可根据需要自行添加其他方法或重载构造器</li></ul><h3 id="实现-view-包中类"><a href="#实现-view-包中类" class="headerlink" title="实现 view 包中类"></a>实现 view 包中类</h3><ol><li>按照设计要求编写 TeamView 类，逐一实现各个方法，并编译</li><li>执行 main 方法中，测试软件全部功能</li></ol><h4 id="TeamView-类的设计"><a href="#TeamView-类的设计" class="headerlink" title="TeamView 类的设计"></a>TeamView 类的设计</h4><ul><li>listSvc 和 teamSvc 属性：供类中的方法使用</li><li>enterMainMenu()：主界面显示及控制方法</li><li>以下方法仅供 enterMainMenu() 调用：<ul><li>listAllEmployees()：以表格形式列出公司所有成员</li><li>getTeam()：显示团队成员列表操作</li><li>addMember()：实现添加成员操作</li><li>deleteMember()：实现删除成员操作</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从 2020 年的视角看线性代数</title>
      <link href="/%E4%BB%8E2020%E7%9A%84%E8%A7%86%E8%A7%92%E7%9C%8B%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
      <url>/%E4%BB%8E2020%E7%9A%84%E8%A7%86%E8%A7%92%E7%9C%8B%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2020 年 MIT 数学教授 Gilbert Strang 录制了一个关于线性代数的学习和教学的一个新的、启发性的课程，从矩阵 A 的列空间和组合这些列的乘法 Ax 开始，包括了线性代数的概览、正交向量、特征值和特征向量、以及奇异值和奇异向量等方面的内容。</p></blockquote><span id="more"></span><h3 id="矩阵的列空间"><a href="#矩阵的列空间" class="headerlink" title="矩阵的列空间"></a>矩阵的列空间</h3><h4 id="常用矩阵"><a href="#常用矩阵" class="headerlink" title="常用矩阵"></a>常用矩阵</h4><p>$A_{0}=\begin{bmatrix}<br>1 &amp; 3 &amp; 2 \<br>4 &amp; 12 &amp; 8 \<br>2 &amp; 6 &amp; 4<br>\end{bmatrix}$</p><ul><li>$A_{0}$ 所有的行向量在同一个方向并且所有的列向量在同一个方向</li></ul><p>$A_{1}=\begin{bmatrix}<br>1 &amp; 4 &amp; 2 \<br>4 &amp; 1 &amp; 3 \<br>5 &amp; 5 &amp; 5<br>\end{bmatrix}$</p><ul><li>$A_{1}$ 第一行加第二行等于第三行</li></ul><p>对称矩阵</p><ul><li><p>$S_{2}=\begin{bmatrix}<br>2 &amp; -1 \<br>-1 &amp; 2<br>\end{bmatrix}$</p></li><li><p>$S_{3}=\begin{bmatrix}<br>1 &amp; -1 &amp; 0 \<br>-1 &amp; 2 &amp; -1 \<br>0 &amp; -1 &amp; 1<br>\end{bmatrix}$</p></li><li><p>$S_{4}=\begin{bmatrix}<br>2 &amp; -1 &amp; 0 \<br>-1 &amp; 2 &amp; -1 \<br>0 &amp; -1 &amp; 2<br>\end{bmatrix}$</p></li></ul><p>正交矩阵</p><ul><li>$Q_{5}=\begin{bmatrix}<br>\cos \theta  &amp; -\sin \theta  \<br>sin\theta  &amp; \cos \theta<br>\end{bmatrix}$</li></ul><p>$A_{6}=\begin{bmatrix}<br>3 &amp; 0 \<br>4 &amp; 5<br>\end{bmatrix}$</p><h4 id="A-的列空间（列的所有线性组合）"><a href="#A-的列空间（列的所有线性组合）" class="headerlink" title="A 的列空间（列的所有线性组合）"></a>A 的列空间（列的所有线性组合）</h4><p>将矩阵乘以向量</p><ul><li><p>$Ax=\begin{bmatrix} 1 &amp; 4 &amp; 5 \ 3 &amp; 2 &amp; 5 \ 2 &amp; 1 &amp; 3 \end{bmatrix}\begin{bmatrix} x<em>{1} \ x</em>{2} \ x<em>{3} \end{bmatrix}=\begin{bmatrix} 1 \ 3 \ 2 \end{bmatrix}x</em>{1}+\begin{bmatrix} x \ 2 \ 1 \end{bmatrix}x<em>{2}+\begin{bmatrix} 5 \ 5 \ 3 \end{bmatrix}x</em>{3}$</p></li><li><p>$Ax$ 为一种特殊的列的线性组合</p></li><li><p>$A$ 的列空间 = $C(A)$ = 所有 $Ax$ 向量 = 各列的所有线性组合</p></li><li><p>$C(A)$ 是一个平面</p></li></ul><h4 id="列空间的基"><a href="#列空间的基" class="headerlink" title="列空间的基"></a>列空间的基</h4><p>$A=CR=\begin{bmatrix}<br>1 &amp; 4 \<br>3 &amp; 2 \<br>2 &amp; 1<br>\end{bmatrix}\begin{bmatrix}<br>1 &amp; 0 &amp; 1 \<br>0 &amp; 1 &amp; 1<br>\end{bmatrix}$</p><ul><li><p>行秩 = 列秩 = r = 2</p></li><li><p>C 是平面的两个独立列向量，而 R 则表示了 A 是如何通过 C 中的两个向量重组 A 的</p></li><li><p>R 的 r 行是行空间的一组基</p></li></ul><p>$A = CR$ 表明 A 的行秩等于列秩 </p><ul><li>C 的 r 列相互线性独立（由定义可知）</li><li>A 的每一列都是（C 的）这 r 列的线性组合（因为 A = CR）</li><li>R 的 r 行相互线性独立（这 r 列包含了 r × r 的矩阵 I ）</li><li>A 的每一行都是（C 的）这 r 行的线性组合（因为 A = CR）</li></ul><p>核心内容 </p><ul><li>C 的 r 列组成了 A 的列空间的基：维度 r </li><li>R 的 r 列组成了 A 的行空间的基：维度 r</li></ul><p>基包含两个向量 </p><ul><li>A 的秩等于 r = 2 </li><li>$n − r = 3 − 2 = 1$</li></ul><p>计数定理 </p><ul><li>$Ax = 0$ 有一组解 $x = (1, 1, −1)$ 有 $n − r$ 组独立解可使 $Ax = 0$ 成立</li></ul><h4 id="秩为-1-的矩阵-A"><a href="#秩为-1-的矩阵-A" class="headerlink" title="秩为 1 的矩阵 A"></a>秩为 1 的矩阵 A</h4><p>如果 A 的任意一列均为第一列的若干倍，那么 A 的每一行均为某行的若干倍</p><p>用 A = CR 来证明</p><ul><li>C 当中的一列 $v$ ⇒ R 当中的一行 $w$</li><li>$A=\left[ v\right] ^{\left[ w\right] }$ ⇒ 每一行都是 $w$ 的倍数</li></ul><h4 id="A-CR-的优良性质"><a href="#A-CR-的优良性质" class="headerlink" title="A = CR 的优良性质"></a>A = CR 的优良性质</h4><p>C 的列直接来源于 A：体现了此公式的内涵</p><p>R 变成了A 的行化简阶梯形</p><p>“行秩 = 列秩”这一结论变得显然：C = 列的基，R = 行的基</p><h4 id="A-CR-不好的性质"><a href="#A-CR-不好的性质" class="headerlink" title="A = CR 不好的性质"></a>A = CR 不好的性质</h4><p>C 和 R 可能是病态矩阵</p><p>如果 A 是可逆的，则有 C = A 和 R = I ⇒ A = AI，原地打转</p><h3 id="线性代数概览"><a href="#线性代数概览" class="headerlink" title="线性代数概览"></a>线性代数概览</h3><h4 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h4><p>若 $Ax = 0$ 则有 $\begin{bmatrix} 1 \ \vdots \ m \end{bmatrix}\left[ x\right]=\begin{bmatrix} 0 \ \vdots \ 0 \end{bmatrix}$，x 与 A 的各列均正交</p><ul><li>每个处于 A 的零空间当中的 x 都与 A 的行空间正交 </li><li>每个处于 $A^T$ 的零空间当中的 y 都与 A 的列空间正交</li></ul><p>$N\left( A\right) \bot C\left( A^{T}\right) $ 与 $N\left( A^{T}\right) \bot C\left( A\right) $</p><ul><li>两对正交子空间，其中一对子空间的维度之和等于 n，另一对等于 m</li></ul><h4 id="宏观视角下的线性代数"><a href="#宏观视角下的线性代数" class="headerlink" title="宏观视角下的线性代数"></a>宏观视角下的线性代数</h4><p><img src="https://blog.zhuangzhihao.top/img/%E4%BB%8E2020%E7%9C%8B%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B001.png" style="zoom:67%;"></p><p>一对子空间处于 $R<em>{n}$ 之中，另一对处于$R</em>{m}$ 当中</p><p>从行空间变换为列空间——由此可知 A 是可逆的</p><h4 id="列与行相乘（六组因式）"><a href="#列与行相乘（六组因式）" class="headerlink" title="列与行相乘（六组因式）"></a>列与行相乘（六组因式）</h4><p>A = BC = 秩为 1 的矩阵之和（列乘以行：外积）</p><p>对矩阵相乘的全新理解（高层次），每次拿一列乘以一行是低层次的</p><ul><li><img src="https://blog.zhuangzhihao.top/img/%E4%BB%8E2020%E7%9C%8B%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B002.png" style="zoom:67%;"></li></ul><p>$A=\begin{bmatrix} 2 &amp; 3 \ 4 &amp; 7 \end{bmatrix}=\begin{bmatrix} 1 &amp; 0 \ 2 &amp; 1 \end{bmatrix}\begin{bmatrix} 2 &amp; 3 \ 0 &amp; 1 \end{bmatrix}=LU$ （将矩阵拆分成上下两个三角矩阵）</p><ul><li>$2x+3y=7$ ， $4x+7y=15$  ⇒ $x=2,y=1$</li><li>若两行发生交换，则 $PA = LU$ （P 指的是排列矩阵）</li></ul><h4 id="用消元来解Ax-b（因式-A-LU）"><a href="#用消元来解Ax-b（因式-A-LU）" class="headerlink" title="用消元来解Ax = b（因式 A = LU）"></a>用消元来解Ax = b（因式 A = LU）</h4><p>下三角矩阵 L 乘以上三角矩阵 U</p><p><img src="https://blog.zhuangzhihao.top/img/%E4%BB%8E2020%E7%9C%8B%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B003.png" style="zoom:67%;"></p><h3 id="正交向量"><a href="#正交向量" class="headerlink" title="正交向量"></a>正交向量</h3><h4 id="正交向量-–-矩阵-–-子空间"><a href="#正交向量-–-矩阵-–-子空间" class="headerlink" title="正交向量 – 矩阵 – 子空间"></a>正交向量 – 矩阵 – 子空间</h4><p>$X^{T}y=0,y^{T}x=0,\left( x+y\right) ^{T}\left( x+y\right)=x^{T}<em>{x}+y^{T}</em>{y}$ （直角三角形）</p><p><img src="https://blog.zhuangzhihao.top/img/%E4%BB%8E2020%E7%9C%8B%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B004.png" style="zoom:67%;"></p><p>$Q=\dfrac{1}{3}\begin{bmatrix} -1 &amp; 2 \ 2 &amp; -1 \ 2 &amp; 2 \end{bmatrix}$ ，$Q^{T}Q=I,QQ^{T}\neq I$ ，$QQ^TQQ^T = QQ^T$</p><h4 id="正交矩阵"><a href="#正交矩阵" class="headerlink" title="正交矩阵"></a>正交矩阵</h4><h3 id="特征值和特征向量"><a href="#特征值和特征向量" class="headerlink" title="特征值和特征向量"></a>特征值和特征向量</h3><h3 id="奇异值和奇异向量"><a href="#奇异值和奇异向量" class="headerlink" title="奇异值和奇异向量"></a>奇异值和奇异向量</h3>]]></content>
      
      
      <categories>
          
          <category> 慕课MOOC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微分学重点</title>
      <link href="/%E5%BE%AE%E5%88%86%E5%AD%A6%E9%87%8D%E7%82%B9/"/>
      <url>/%E5%BE%AE%E5%88%86%E5%AD%A6%E9%87%8D%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>微分学重点的十二章关于导数的课程深入挖掘了微积分的子领域，“微分”。 与微积分重点的课程一样，MIT 数学教授 Gilbert Strang 解释了每个主题如何应用于现实生活中，是对微积分重点的补充，以下为所记课堂笔记，笔记以中文形式记录，方便理解，可供参考。</p></blockquote><span id="more"></span><h3 id="极限和连续"><a href="#极限和连续" class="headerlink" title="极限和连续"></a>极限和连续</h3><p>极限定义：当 $n\rightarrow \infty$ 时，$a_{n}\rightarrow A$</p><p>洛必达法则：假设 $f(x)$ 和 $g(x)$ 都收敛于 0</p><script type="math/tex; mode=display">\dfrac{f\left( x\right) }{g\left( x\right) }=\dfrac{\dfrac{\Delta f}{\Delta x}}{\dfrac{\Delta g}{\Delta x}}\rightarrow \dfrac{s}{t}</script><p>可导必然连续，连续不一定可导</p><p>连续定义：对任取 $\varepsilon$，都能找到 $\delta$，满足如果 $\left| x-a\right| &lt;\delta$，则 $\left| f\left( x\right) -f\left( a\right) \right| &lt;\varepsilon$</p><h3 id="sinx-和-cosx-的导数"><a href="#sinx-和-cosx-的导数" class="headerlink" title="$sinx$ 和 $cosx$ 的导数"></a>$sinx$ 和 $cosx$ 的导数</h3><p>用 $sin$ 和 $cos$ 表示勾股定理</p><ul><li><p>$a^2+b^2=c^2$ $\rightarrow$ $\dfrac{a^{2}}{c^{2}}+\dfrac{b^{2}}{c^{2}}=1$ </p></li><li><p>$\left( \cos \theta \right) ^{2}+\left( \sin \theta \right) ^{2}=1$</p></li></ul><script type="math/tex; mode=display">\dfrac{d}{dx}\sin x=\dfrac{\Delta \left( \sin x\right) }{\Delta x}=\dfrac{\sin \left( x+\Delta x\right) -\sin x}{\Delta x}</script><ul><li><p>因为 $\sin \left( x+\Delta x\right) =\sin x\cos \Delta x+\cos x\sin \Delta x$</p></li><li><p>所以原式 = $\dfrac{sinx\left( \cos \Delta x-1\right) }{\Delta x}+\dfrac{\cos x\sin \Delta x}{\Delta x}$</p></li><li><p>又因为 $\dfrac{\cos \left( \Delta x-1\right) }{\Delta x}\rightarrow 0$ 且 $\dfrac{\sin \Delta x}{\Delta x}\rightarrow 1$</p></li><li><p>所以 $\dfrac{d}{dx}\sin x=\cos x$</p></li></ul><script type="math/tex; mode=display">\dfrac{d}{dx}\cos x=\dfrac{\Delta \left( \cos x\right) }{\Delta x}=\dfrac{\cos \left( x+\Delta x\right) -\cos x}{\Delta x}</script><ul><li><p>因为 $\cos \left( x+\Delta x\right) =\cos x\cos \Delta x-\sin x\sin \Delta x$</p></li><li><p>所以原式 = $\dfrac{cos\left( \cos \Delta x-1\right) }{\Delta x}-\dfrac{\sin x\sin \Delta x}{\Delta x}$</p></li><li><p>所以 $\dfrac{d}{dx}\cos x=-\sin x$</p></li></ul><p>$sinx$ 和 $cosx$ 的导数</p><ul><li><p>$\dfrac{d}{dx}\sin x=\cos x$</p></li><li><p>$\dfrac{d}{dx}\cos x=-\sin x$</p></li></ul><h3 id="乘法法则和除法法则"><a href="#乘法法则和除法法则" class="headerlink" title="乘法法则和除法法则"></a>乘法法则和除法法则</h3><script type="math/tex; mode=display">p(x)=f(x)g(x)</script><ul><li><p>$\dfrac{\Delta p}{\Delta x}=\dfrac{f\Delta g}{\Delta x}+\dfrac{g\Delta f}{\Delta x}+\dfrac{\Delta f{\Delta }g}{\Delta x}$</p></li><li><p>乘法法则：$\dfrac{dp}{dx}=f\left( x\right) \dfrac{dg}{dx}+g\left( x\right) \dfrac{df}{dx}$</p></li><li><p>$\dfrac{d}{dx}x^{n}=nx^{n-1}$</p></li><li><p>$y=x^2sinx$：$\dfrac{dy}{dx}=x^{2}\cos x+2xsinx$</p></li></ul><script type="math/tex; mode=display">q(x)=\dfrac{f(x)}{g(x)}</script><ul><li><p>$f(x)=g(x)q(x)$</p></li><li><p>$\dfrac{df}{dx}=g\left( x\right) \dfrac{dq}{dx}+q\left( x\right) \dfrac{dg}{dx}=g\left( x\right) \dfrac{dq}{dx}+\dfrac{f\left( x\right) }{g\left( x\right) }\dfrac{dg}{dx}$</p></li><li><p>$g\left( x\right) \dfrac{df}{dx}-f\left( x\right) \dfrac{dg}{dx}=g(x)^{2}\dfrac{dq}{dx}$</p></li><li><p>除法法则：$\dfrac{dq}{dx}=\dfrac{g\left( x\right) \dfrac{df}{dx}-f\left( x\right) \dfrac{dg}{dx}}{g\left( x\right) ^{2}}$</p></li></ul><h3 id="链式法则"><a href="#链式法则" class="headerlink" title="链式法则"></a>链式法则</h3><p>函数链（复合函数）：$y=g(x)$，$z=f(y)$</p><ul><li>求导：$\dfrac{dz}{dx}=\dfrac{dz}{dy}\dfrac{dy}{dx}$</li></ul><p>$sin(3x)$ 的导数：$3cos(3x)$</p><p>$\dfrac{1}{\sqrt{1-x^{2}}}$ 的导数：$\left( -\dfrac{1}{2}\left( 1-x^{2}\right) ^{-3}\right) -2x=x\left( 1-x^{2}\right) ^{-\dfrac{3}{2}}$</p><p>$e^{-\dfrac{x^{2}}{2}}$ 的导数：$-x\cdot e^{-\dfrac{x^{2}}{2}}$</p><ul><li>二阶导数：$\left( -x\right) \left( -xe^{-\dfrac{x^{2}}{2}}\right) +\left( e^{-\dfrac{x^{2}}{2}}\right) \left( -1\right)=(x^2-1)\cdot e^{-\dfrac{x^{2}}{2}}$</li></ul><h3 id="反函数-f-1-left-y-right-与对数函数-x-lny"><a href="#反函数-f-1-left-y-right-与对数函数-x-lny" class="headerlink" title="反函数 $f^{-1}\left( y\right)$ 与对数函数 $x=lny$"></a>反函数 $f^{-1}\left( y\right)$ 与对数函数 $x=lny$</h3><p>$y=f(x)$ 的反函数：$x=f^{-1}(y)$，原函数和反函数关于 $y=x$ 对称</p><p>$y=e^{x}$ 的反函数：$x=lny$</p><p>对数函数的性质</p><ul><li><p>$\ln(xy) =\ln x+\ln y$</p></li><li><p>$ln(y^n)=nlny$</p></li></ul><p>$\dfrac{d}{dy}\left( \ln y\right) =\dfrac{1}{y}$</p><h3 id="对数函数-lny-和反三角函数-sin-1-y-的导数"><a href="#对数函数-lny-和反三角函数-sin-1-y-的导数" class="headerlink" title="对数函数 $lny$ 和反三角函数 $sin^{-1}(y)$ 的导数"></a>对数函数 $lny$ 和反三角函数 $sin^{-1}(y)$ 的导数</h3><p>令 $y=e^x$</p><ul><li><p>$\ln \left( e^{x}\right) =x$ 两边求导 $\dfrac{d}{dy}\left( \ln y\right) e^{x}=1$</p></li><li><p>$\dfrac{d}{dy}\left( \ln y\right) =\dfrac{1}{e^{x}}=\dfrac{1}{y}$</p></li></ul><p>$x=\sin ^{-1}y=\arcsin y$</p><ul><li><p>$y=\sin \left( \sin ^{-1}y\right)$ 两边求导 $1=\cos \left( \sin ^{-1}y\right) \dfrac{d\sin ^{-1}y}{dy}$</p></li><li><p>$1=\sqrt{1-y^{2}}\dfrac{d}{dy}\sin ^{-1}y$</p></li><li><p>$\dfrac{d}{dy}\sin ^{-1}y=\dfrac{1}{\sqrt{1-y^{2}}}$</p></li></ul><p>同理：$\dfrac{d}{dy}\cos ^{-1}y=\dfrac{-1}{\sqrt{1-y^{2}}}$，$\dfrac{d}{dy}\tan ^{-1}\left( y\right) =\dfrac{1}{1+y^{2}}$</p><h3 id="增长率和对数图"><a href="#增长率和对数图" class="headerlink" title="增长率和对数图"></a>增长率和对数图</h3><p>线性增长：$cx,x^{2},x^{3},\ldots$</p><p>指数增长：$2^{x},e^{x},10^{x},\ldots$</p><p>阶乘：$2^{x},e^{x},10^{x},\ldots$</p><p>对数图</p><ul><li><img src="https://blog.zhuangzhihao.top/img/微积分重点04.png" style="zoom: 50%;"></li></ul><p>线性拟合</p><ul><li><p>$y=Ax^{n}\rightarrow \log y=\log A+n\log x$</p></li><li><p>$y=B\cdot 10^{cx}\rightarrow \log y=\log B+cx$</p></li></ul><h3 id="线性近似和牛顿法"><a href="#线性近似和牛顿法" class="headerlink" title="线性近似和牛顿法"></a>线性近似和牛顿法</h3><p>取 $x=a$，已知 $\dfrac{df}{dx}=f’\left( a\right) =\lim _{x\rightarrow a}\dfrac{f\left( x\right) -f\left( a\right) }{x-a}$，求 $f(x)$</p><p>线性近似：函数在 a 点一阶泰勒展开</p><ul><li><p>$f’\left( a\right) \approx \dfrac{f\left( x\right) -f\left( a\right) }{x-a}$</p></li><li><p>$f\left( x\right) \approx f\left( a\right) +\left( x-a\right) f’\left( a\right)$</p></li></ul><p>牛顿法</p><ul><li><p>令 $F(x)=0$</p></li><li><p>$x-a\approx \dfrac{-F\left( a\right) }{F’\left( a\right) }$</p></li></ul><p>近似法求 $\sqrt{9.06}$</p><ul><li><p>$f\left( x\right) =\sqrt{x}=x^{\dfrac{1}{2}}$</p></li><li><p>$f’\left( x\right) =\dfrac{1}{2}x^{-\dfrac{1}{2}}=\dfrac{1}{\sqrt[2] {x}}$</p></li><li><p>取 $a=9$，$f(a)=\sqrt9=3$，$f’(a)=\dfrac{1}{6}$</p></li><li><p>$\sqrt{9.06}\approx 3+\left( 9.06-9\right) \dfrac{1}{6}=3.01$</p></li></ul><p>近似法求 $e^{0.01}$</p><ul><li><p>$f\left( x\right) =e^{x}$（$x=0.01$）</p></li><li><p>取 $a=0$，$f(a)=e^0=1$，$f’(a)=e^0=1$</p></li><li><p>$e^{x}=e^{0=01}=1+\left( 0.d-0\right) \cdot 1=1.01=1+x$</p></li></ul><p>牛顿法求 $\sqrt{9.06}$</p><ul><li><p>$F\left( x\right) =x^{2}-9.06=0$</p></li><li><p>取 $a=3$，$F(a)=9-9.06=-0.06$，$F’(a)=2a=6$</p></li><li><p>$x-3\approx \dfrac{0.06}{6}=0.01$</p></li></ul><h3 id="幂级数和欧拉公式"><a href="#幂级数和欧拉公式" class="headerlink" title="幂级数和欧拉公式"></a>幂级数和欧拉公式</h3><p>泰勒级数：$f\left( x\right) =f\left( 0\right) +f’\left( 0\right) \dfrac{x}{1}+f’’\left( 0\right) \dfrac{x^{2}}{2}+\ldots +f^{\left( n\right) }\left( 0\right) \dfrac{x^{n}}{n!}$</p><ul><li>$x^n$ 的 n 阶导：$n!$</li></ul><p>使用泰勒级数展开的幂级数</p><ul><li><p>$e^{x}=1+x+\dfrac{1}{2}x^{2}+\dfrac{1}{6}x^{3}+\ldots +\dfrac{1}{n!}x^{n}$</p></li><li><p>$\sin x=x-\dfrac{x^{3}}{3!}+\dfrac{x^{5}}{5!}\ldots$ 奇级数</p></li><li><p>$\cos x=1-\dfrac{x^{2}}{2!}+\dfrac{x^{4}}{4!}\ldots$ 偶级数</p></li></ul><p>欧拉公式：将 $e^x$ 级数中的 $x$ 考虑为虚数 $i$</p><ul><li><p>$e^{ix}=1+ix+\dfrac{1}{2!}\left( ix\right) ^{2}+\dfrac{1}{3!}\left( ix\right) ^{3}+\ldots$</p></li><li><p>实数、虚数分离：$e^{ix}=\left( 1-\dfrac{1}{2!}x^{2}+\ldots \right) +i\left( x-\dfrac{1}{3!}x^{3}+\ldots \right)$</p></li><li><p>因此：$e^{ix}=\cos x+i\sin x$</p></li><li><p>同理：$e^{-ix}=\cos x-i\sin x$</p></li></ul><p>几何级数：$\dfrac{1}{1-x}=1+x+x^{2}+x^{3}+\ldots ( \left| x\right| &lt; 1)$</p><p>将几何级数逐项积分：$-ln \left( 1-x\right) =x+\dfrac{x^{2}}{2}+\dfrac{x^{3}}{3}+\dfrac{x^{4}}{4}+\ldots ( \left| x\right| &lt; 1)$</p><h3 id="关于运动的微分方程"><a href="#关于运动的微分方程" class="headerlink" title="关于运动的微分方程"></a>关于运动的微分方程</h3><p>微分方程就是函数的导数和函数本身之间存在的关系</p><p>常系数二阶线性微分方程：$m\dfrac{d^{2}y}{dt^{2}}+2r\dfrac{dy}{dt}+ky=0$</p><ul><li><p>$m=0$ 时，$\dfrac{dy}{dt}=ay\rightarrow y=ce^{at}$</p></li><li><p>$r=0$ 时，$\dfrac{d^{2}y}{dt^{2}}=-\omega ^{2}y$ （$\omega ^{2}= \dfrac{k}{m}$）$\rightarrow y=C\cos \omega t+D\sin \omega t$</p></li><li><p><img src="https://blog.zhuangzhihao.top/img/%E5%BE%AE%E7%A7%AF%E5%88%86%E9%87%8D%E7%82%B905.png" style="zoom: 50%;"></p></li></ul><p>令 $y=e^{\lambda t}$ 满足方程 $m\lambda ^{2}e^{\lambda t}+2r\lambda e^{\lambda t}+ke^{\lambda t}=0$</p><ul><li><p>$m\lambda ^{2}+2r\lambda +k=0$</p></li><li><p>$\lambda =\dfrac{-r\pm \sqrt{r^{2}-km}}{m}$</p></li><li><p>$y=Ce^{\lambda <em>{1}t}+De^{\lambda </em>{2}t}$</p></li><li><p>若 $\lambda <em>{1}=\lambda </em>{2}$，$y=Ce^{\lambda t}+Dte^{\lambda t}$</p></li></ul><p>当 $m=1,r=3,k=10$ 时，$1y’’+6y’+10y=0$</p><ul><li><p>$\lambda ^{2}+6\lambda +10=0$</p></li><li><p>$\lambda =-3\pm i$</p></li><li><p>$y\left( t\right) =Ce^{\left( -3+i\right) t}+De^{\left( -3-i\right) t}$</p></li><li><p>由欧拉公式：$y\left( t\right) =Ae^{-3t}\cos t+Be^{-3t}\sin t$</p></li></ul><h3 id="关于增长的微分方程"><a href="#关于增长的微分方程" class="headerlink" title="关于增长的微分方程"></a>关于增长的微分方程</h3><p>微分方程 $\dfrac{dy}{dt}=cy$，对于任意 A 有解 $y\left( t\right) =Ae^{ct}$</p><ul><li>$y\left( t\right) =y\left( 0\right) e^{ct}$</li></ul><p>增加初始常数：$\dfrac{dy}{dt}=cy+s$</p><ul><li><p>$\dfrac{d}{dt}\left( y+\dfrac{s}{c}\right) =c\left( y+\dfrac{s}{c}\right)$</p></li><li><p>$y\left( t\right) =-\dfrac{s}{c}+\left( y\left( 0\right) +\dfrac{s}{c}\right) e^{ct}$</p></li></ul><p>人口增长方程：$\dfrac{dP}{dt}=cP-sP^{2}$，$c$ 为增长率而 $s$ 为竞争因素</p><ul><li><p><img src="https://blog.zhuangzhihao.top/img/%E5%BE%AE%E7%A7%AF%E5%88%86%E9%87%8D%E7%82%B906.png" style="zoom: 50%;"></p></li><li><p>令 $y=\dfrac{1}{P}$，$\dfrac{dy}{dt}=-\dfrac{\dfrac{dP}{dt}}{P^{2}}=\dfrac{\left( cP+sP^{2}\right) }{P^{2}}=s-cP=s-cy$</p></li><li><p>$y\left( t\right) =\dfrac{s}{c}+Ae^{-ct}=\dfrac{s}{c}+\left( y\left( 0\right) -\dfrac{s}{c}\right) e^{-ct}$</p></li><li><p>$\dfrac{1}{p\left( t\right) }-\dfrac{s}{c}=\left( \dfrac{1}{p(0)}-\dfrac{s}{c}\right) e^{-ct}$</p></li></ul><p>人口增长方程二阶导数：$\dfrac{d^{2}P}{dt^{2}}=\dfrac{d}{dt}\left( cP-sP^{2}\right) =\left( c-2sP\right) \dfrac{dP}{dt}$</p><ul><li>$p=\dfrac{c}{2s}$ 时，$\dfrac{d^{2}P}{dt^{2}}=0$（拐点，增长率开始放缓）</li></ul><h3 id="微分学总结"><a href="#微分学总结" class="headerlink" title="微分学总结"></a>微分学总结</h3><h4 id="六函数"><a href="#六函数" class="headerlink" title="六函数"></a>六函数</h4><div class="table-container"><table><thead><tr><th style="text-align:center">积分</th><th style="text-align:center"></th><th style="text-align:center">导数</th></tr></thead><tbody><tr><td style="text-align:center">$\dfrac{x^{n+1}}{\left( n+1\right) },n\neq -1$</td><td style="text-align:center">$x^n$</td><td style="text-align:center">$nx^{n-1}$</td></tr><tr><td style="text-align:center">$-cosx$</td><td style="text-align:center">$sinx$</td><td style="text-align:center">$cosx$</td></tr><tr><td style="text-align:center">$sinx$</td><td style="text-align:center">$cosx$</td><td style="text-align:center">$-sinx$</td></tr><tr><td style="text-align:center">$\dfrac{e^{cx}}{c}$</td><td style="text-align:center">$e^{cx}$</td><td style="text-align:center">$ce^{cx}$</td></tr><tr><td style="text-align:center">$x\ln x-x$</td><td style="text-align:center">$lnx$</td><td style="text-align:center">$\dfrac{1}{x}$</td></tr><tr><td style="text-align:center">斜坡函数</td><td style="text-align:center">分段函数</td><td style="text-align:center">$\delta$ 函数</td></tr></tbody></table></div><h4 id="六法则"><a href="#六法则" class="headerlink" title="六法则"></a>六法则</h4><p>加法法则：和的导数等于导数的和</p><ul><li>$af\left( x\right) +bg\left( x\right) \rightarrow a\dfrac{df}{dx}+b\dfrac{dg}{dx}$</li></ul><p>乘法法则：上乘下导加下乘上导</p><ul><li>$f\left( x\right) g\left( x\right) \rightarrow f\left( x\right) \dfrac{dg}{dx}+g\left( x\right) \dfrac{df}{dx}$</li></ul><p>除法法则：下平方分之下乘上导减上乘下导</p><ul><li>$\dfrac{f\left( x\right) }{g\left( x\right) }\rightarrow  \dfrac{g\left( x\right) \dfrac{df}{dx}-f\left( x\right) \dfrac{dg}{dx}}{g\left( x\right) ^{2}}$</li></ul><p>链式法则</p><ul><li>$f\left( g\left( x\right) \right) \rightarrow \dfrac{df}{dy}\dfrac{dy}{dx}$</li></ul><p>反函数的导数等于原函数的导数分之一</p><ul><li>$x=f^{-1}\left( y\right) \rightarrow \dfrac{dx}{dy}=\dfrac{1}{\dfrac{dy}{dx}}$</li></ul><p>洛必达法则：$\dfrac{0}{0}$ 或 $\dfrac{\infty }{\infty }$</p><ul><li>$\dfrac{f\left( x\right) }{g\left( x\right) }\rightarrow \dfrac{\dfrac{dt}{dx}}{\dfrac{dg}{dx}}$</li></ul><h4 id="六定理"><a href="#六定理" class="headerlink" title="六定理"></a>六定理</h4><p>微积分基本定理</p><ul><li><p>如果函数 $f(x)=\int _{a}^{x}s\left( t\right) dt$，那么函数的导数为 $\dfrac{df}{dx}=s\left( x\right) $</p></li><li><p>如果函数的导数为 $\dfrac{df}{dx}=s\left( x\right) $，那么导数的积分（原函数）为 $\int _{a}^{b}s\left( x\right) dx=f\left( b\right) -f\left( a\right) $</p></li></ul><p>介值定理（全值定理）</p><ul><li><p>对于 $a\leq x\leq b$ 区间上的连续函数</p></li><li><p>一定能取到最大值 $M$ 和最小值 $m$，使得 $[M,m]$ 中的任意值都存在函数上的点与之对应</p></li><li><p>连续函数的一个区间内的函数值肯定介于最大值 $M$ 和最小值 $m$之间</p></li></ul><p>中值定理</p><ul><li>如果函数 $f(x)$ 在闭区间 $[a,b]$ 上连续，在开区间 $(a,b)$ 内可导，那么在 $(a,b)$ 内至少有一点 $\varepsilon $，使 $f\left( b\right) -f\left( a\right) =f\left( \varepsilon \right) \left( b-a\right) $ 成立</li></ul><p>泰勒级数</p><ul><li><p>$f\left( x\right) =f\left( a\right) +f’\left( a\right) \left( x-a\right) +\dfrac{1}{2}f’’\left( a\right) \left( x-a\right) ^{2}+\ldots =\sum ^{\infty }_{n=0}\dfrac{1}{n!}f^{\left( n\right) }\left( a\right) \left( x-a\right) ^{n}$</p></li><li><p>若级数截断于 $\left( x-a\right) ^{n}$ 项，余项为：$\dfrac{1}{\left( n+1\right) !}f^{\left( n+1\right) }\left( c\right) \left( x-a\right) ^{\left( n+1\right) }$</p></li><li><p>当 $a=0$ 时，$f\left( x\right)=\sum ^{\infty }_{n=0}\dfrac{1}{n!}f^{\left( n\right) }\left( 0\right) \left( x\right) ^{n}$</p></li></ul><p>二项式定理</p><ul><li><p>帕斯卡三角：<img src="https://blog.zhuangzhihao.top/img/%E5%BE%AE%E7%A7%AF%E5%88%86%E9%87%8D%E7%82%B907.png" style="zoom:80%;"></p></li><li><p>$(1+x)^p=1+px+\dfrac{P\left( p-1\right) }{\left( 2\right) \left( 1\right) }x^{2}+\dfrac{p\left( p-1\right) \left( p-2\right) }{\left( 3\right) \left( 2\right) \left( 1\right) }x^{3}+\ldots $</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 慕课MOOC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微积分重点</title>
      <link href="/%E5%BE%AE%E7%A7%AF%E5%88%86%E9%87%8D%E7%82%B9/"/>
      <url>/%E5%BE%AE%E7%A7%AF%E5%88%86%E9%87%8D%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>微积分重点（Highlights of Calculus）是 MIT 数学教授 Gilbert Strang 对于微积分中的精华和重点出的一个生动、简短的课程，帮助我们重新审视微积分，课程主要涉及单变量微积分的总览。</p></blockquote><span id="more"></span><h3 id="一、微积分总览"><a href="#一、微积分总览" class="headerlink" title="一、微积分总览"></a>一、微积分总览</h3><p>微积分是函数（1）和函数（2）之间的桥梁，例如距离<script type="math/tex">f\left( t\right)</script>和速度<script type="math/tex">\dfrac{df}{dt}</script>；高度<script type="math/tex">y\left( x\right)</script>和斜率<script type="math/tex">\dfrac{dy}{dx}</script>。</p><p>匀速情况下，<script type="math/tex">速度=\dfrac{距离}{时间}</script>，即<script type="math/tex">斜率=\dfrac{垂直}{水平}</script>，即<script type="math/tex">s=\dfrac{f}{t}</script>。若要求中间一段时间或距离的速度，<script type="math/tex">s=\dfrac{\Delta f}{\Delta t}</script>。</p><p>匀变速情况下，函数图像均为曲线，微分学就是已知<script type="math/tex">距离-时间</script>函数求<script type="math/tex">速度-时间</script>函数，积分学就是已知<script type="math/tex">速度-时间</script>函数求<script type="math/tex">距离-时间</script>函数。</p><p><script type="math/tex">速度-时间</script>函数<script type="math/tex">s=at</script>下面积<script type="math/tex">\dfrac{1}{2}t\left( at\right)</script>就是<script type="math/tex">距离-时间</script>函数<script type="math/tex">\dfrac{1}{2}at^{2}</script>，速度<script type="math/tex">s=\dfrac{df}{dt}</script>就是<script type="math/tex">f=\int s\left( t\right) dt</script>的导数。</p><h3 id="二、导数总览"><a href="#二、导数总览" class="headerlink" title="二、导数总览"></a>二、导数总览</h3><p>已知距离<script type="math/tex">f\left( t\right)</script>如何求速度<script type="math/tex">\dfrac{df}{dt}</script>，即已知高度<script type="math/tex">y\left( x\right)</script>如何求斜率 <script type="math/tex">\dfrac{dy}{dx}</script>？</p><p>三个重要函数的斜率：</p><ol><li><p>幂函数<script type="math/tex">y=x^{n}</script>的斜率是<script type="math/tex">\dfrac{dy}{dx}=nx^{n-1}</script>；</p></li><li><p>三角函数<script type="math/tex">y=\sin x</script>的斜率是<script type="math/tex">\dfrac{dy}{dx}=\cos x</script>；</p></li><li><p>指数函数<script type="math/tex">y=e^{x}</script>的斜率是<script type="math/tex">\dfrac{dy}{dx}=e^{x}</script>。</p></li></ol><p><script type="math/tex">y=x^2</script>斜率的平均斜率是$\dfrac{\left( \Delta x\right) ^{2}}{\Delta x}$，即$\dfrac{\Delta y}{\Delta x}$，瞬时斜率是$\dfrac{dy}{dx}$；$\dfrac{\Delta y}{\Delta x}=\dfrac{\left( x+\Delta x\right) ^{2}}{\Delta x}\dfrac{-x^{2}}{}=\dfrac{2xax+\left( \Delta x\right) ^{2}}{\Delta x}=2x+\Delta x$。</p><p>求导：$\dfrac{dy}{dx}=\lim\dfrac{\Delta y}{\Delta x}=2x$。</p><p>任意 $x$ 处，$y=\sin x 的斜率\rightarrow \dfrac{dy}{dx}=\cos x$。</p><h3 id="三、极值及二阶导数"><a href="#三、极值及二阶导数" class="headerlink" title="三、极值及二阶导数"></a>三、极值及二阶导数</h3><p>二阶导数：导数的导数。一阶导数用于确认极值点，二阶导数表明曲线弯曲方向。</p><p>二阶导数的例子：加速度</p><ul><li><p>距离 $f\left( t\right)$ 、速度 $\dfrac{df}{dt}$、加速度 $\dfrac{d^{2}f}{dt^{2}}$。</p></li><li><p>高度 $y=x^2$ 、斜率 $\dfrac{dy}{dx}=2x$、弯曲性 $\dfrac{d^{2}f}{dt^{2}}=2$。</p></li><li><p>$sinx$ 的二阶导数为 $-sinx$。</p></li></ul><p>凸函数和凹函数：$f’’ &gt;0$ 为凸，表示向上弯曲，相对的凹为 $f’’ &lt;0$。</p><p>拐点：二阶导数为 0 的点，表示弯曲方向改变。</p><p>对于函数 $y=x^{3}-x^{2}$ $\rightarrow$ $y’=3x^{2}-2x$，$y’’=6x-2$：</p><ul><li><p>求极值点：令 $y’=3x^{2}-2x=0$，$x= 0或x=\dfrac{2}{3}$。</p></li><li><p>$x=0$ 处，二阶导数为负，取局部最大值（极大值）。</p></li><li><p>$x=\dfrac{2}{3}$ 处，二阶导数为正，取局部最小值（极小值）。</p></li></ul><p>应用：求上班的最短时间。设高速总长 $b$，家垂直上高速距离为 $a$，没走的高速距离为 $x$。</p><p><img src="https://blog.zhuangzhihao.top/img/%E5%BE%AE%E7%A7%AF%E5%88%86%E9%87%8D%E7%82%B901.png" style="zoom: 33%;"></p><ul><li>$时间t=\dfrac{b-x}{60}+\dfrac{\sqrt{a^{2}+x^{2}}}{30}$，取时间方程的导数，然后令导数为 0 来求最小值。</li><li>$f’=-\dfrac{1}{60}+\dfrac{1}{30}\cdot \dfrac{1}{2}\cdot \dfrac{2x}{\sqrt{a^{2}+x^{2}}}=0$ $\rightarrow$ $x=\dfrac{a}{\sqrt{3}}$。</li></ul><p>最值的一般求法：比较所有驻点（$f’=0$）处及边界点函数值，得到最大或最小值即函数最值。</p><p>$f’’$ 的符号可通过 $f’$ 的单调性求出：$x&gt;0$ 时，$f’(x)&gt;f’(0)$ ，斜率变化率为正，$f’’&gt;0$。</p><h3 id="四、指数函数-e-x"><a href="#四、指数函数-e-x" class="headerlink" title="四、指数函数 $e^x$"></a>四、指数函数 $e^x$</h3><p>最简单的微分方程：$y=\dfrac{dy}{dx}$。</p><p>指数函数：通过微积分构造的函数。</p><ul><li><p>重要性质一：指数函数的导数就是其自身</p></li><li><p>函数初始点：$y=e^{0}=1$</p></li><li><p>$\dfrac{x^{n}}{n!}$ 斜率的导数为 $\dfrac{x^{n-1}}{\left( n-1\right) !}$</p></li><li><p>指数级数：$e^{x}=1+x+\dfrac{x^{2}}{2!}+\dfrac{x^{3}}{3!}+\ldots +\dfrac{x^{n}}{n!}+\ldots$</p></li><li><p>重要性质二：$e^{x}\cdot e^{X}=e^{x+X}$</p></li><li><p>$e$ 等于 $x=1$ 时指数级数的值：$e=1+1+\dfrac{1}{2}+\dfrac{1}{6}+\ldots \dfrac{1}{n!}+\ldots\approx 2.71828\ldots$</p></li></ul><p>指数函数的图像：</p><ul><li><p>由重要性质二可得：$e^{-x}=\dfrac{1}{e^{x}}$</p><p>  <img src="https://blog.zhuangzhihao.top/img/%E5%BE%AE%E7%A7%AF%E5%88%86%E9%87%8D%E7%82%B902.png" style="zoom:50%;"></p></li></ul><p>应用：计算存款复利，假设利率为 100%，1 美元存一年得到 2 美元或更多，将一年分为 n 份付利息，得到 $\left( 1+\dfrac{1}{n}\right) ^{n}$，$n\rightarrow \infty$ 时最终趋近于 $e$。</p><ul><li>解常微分方程：$\dfrac{dy}{dx}=cy$ $\rightarrow$ $y\left( x\right) =e^{cx}$</li></ul><h3 id="五、积分总览"><a href="#五、积分总览" class="headerlink" title="五、积分总览"></a>五、积分总览</h3><p>函数二 $\dfrac{dy}{dx}=nx^{n-1}$ 是函数一 $y=x^{n}$ 的导数，函数一 $y=\dfrac{x^{n+1}}{n+1}$ 是函数二 $\dfrac{dy}{dx}=x^{n}$ 的积分。</p><p>求原函数：$y\left( x\right) =\int s\left( x\right) dx$。</p><p>求积分方法A：反过来看什么函数的导数能得到要积分的函数。</p><p>例：通过代数方法求函数一：</p><p><img src="https://blog.zhuangzhihao.top/img/%E5%BE%AE%E7%A7%AF%E5%88%86%E9%87%8D%E7%82%B903.png" style="zoom:67%;"></p><p>相加求和：<script type="math/tex">\sum \Delta y=y_{终}-y_{始}</script>。</p><p>例：通过微积分方法求函数一：同时乘除 $\Delta x$：<script type="math/tex">\sum \left( \dfrac{\Delta y}{\Delta x}\right) \Delta x=y_{终}-y_{始}</script>。</p><ul><li>在 $\Delta x\rightarrow 0$ 的极限情况下，求和转化为积分：$\int \dfrac{dy}{dx}dx$。</li></ul><p>求积分方法B：$积分=函数一=函数二图像下的面积$：斜率为 $s=2-2x$，对应的高度 $y=2x-x^2$。</p>]]></content>
      
      
      <categories>
          
          <category> 慕课MOOC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于 Python 和 OpenCV 实现人脸识别</title>
      <link href="/Python-OpenCV%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
      <url>/Python-OpenCV%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Open Source Computer Vision Library（OpenCV）是一个跨平台的计算机视觉库，可用于开发实时的图像处理、计算机视觉以及模式识别程序。OpenCV 用 C++ 语言编写，但本次实战项目使用的是 <code>python-opencv</code> 库实现的，主要是为了初步了解人脸识别的步骤和算法后面的原理。源代码保存在 <a href="https://github.com/Bezhuang/Learn-CS/tree/main/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/Python-OpenCV">Github 仓库 </a>中。</p></blockquote><span id="more"></span><h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><h4 id="人脸识别介绍"><a href="#人脸识别介绍" class="headerlink" title="人脸识别介绍"></a>人脸识别介绍</h4><p>对人类来说，人脸识别很容易：我们的大脑有专门的神经细胞针对不同的场景或运动特征作出反应，视觉皮层再以某种方式把不同的信息来源转化成可用的模型。</p><p>自动人脸识别就是研究如何从一幅图像中提取有意义的特征，形成可用的模型，然后对他们进行一些分类，因此基于几何特征的人脸的人脸识别可能是最直观的识别人脸的方法。但即使是使用最先进的算法，标记点的确定也是很复杂的，单靠几何特征不能提供足够的信息用于人脸识别。</p><p>特征脸方法：把面部图像看作是一个点，从高维图像空间找到它在低维空间的表示，使用主元分析（Principal Component Analysis，PCA）可以找拥有最大方差的轴，但轴的最大方差不一定包含任何有鉴别性的信息。</p><p>使用线性鉴别（Linear Discriminant Analysis，LDA）的特定类投影方法：使类内方差最小的同时，使类外方差最大。</p><p>仅仅使用的局部特征描述图像的方法避免输入的图像的高维数据：提取的特征对于局部遮挡、光照变化、小样本等情况更强健。如：盖伯小波：Gabor Waelets，离散傅立叶变换：Discrete Cosinus Transform（DCT），局部二值模式：Local Binary Patterns（LBP）。</p><h4 id="OpenCV-介绍"><a href="#OpenCV-介绍" class="headerlink" title="OpenCV 介绍"></a>OpenCV 介绍</h4><p>从 OpenCV 2.4 开始，加入了新的类 FaceRecognizer，可以使用它便捷地进行人脸识别实验。</p><p>FaceRecognizer 类目前包含三种人脸识别方法：</p><ol><li>基于 PCA 变换的人脸识别：EigenFaceRecognizer。</li><li>基于 Fisher 变换的人脸识别：FisherFaceRecognizer。</li><li>基于局部二值模式的人脸识别：LBPHFaceRecognizer。</li></ol><p>特征脸（Eigenfaces）：图像表示的问题是他的高维问题，如果数据有任何差异，可以通过寻找主元来知道主要信息，把一些可能相关的变量转换成一个更小的不相关的子集。</p><p>一个高维数据集经常被相关变量表示，因此只有一些的维上数据才是有意义的（包含最多的信息），PCA 方法寻找数据中拥有最大方差的方向（主成分）。计算特征值和对应的特征向量，对特征值进行递减排序，特征向量和它顺序一致。</p><p>k 个主成分也就是 k 个最大的特征值对应的特征向量。</p><p>把所有的训练数据投影到 PCA 子空间 -&gt; 把待识别图像投影到 PCA 子空间 -&gt; 找到训练数据投影后的向量和待识别图像投影后的向量最近的那个。</p><p>FisherFaces：基于线性判别分析（Linear Discriminant Analysis，LDA）理论，在降维的同时考虑类别信息，基于特征脸的方法，找到使数据中最大方差的特征线性组合。在低维表示下，相同的类应该紧紧的聚在一起，而不同的类别尽量距离越远。</p><p>局部二值模式直方图（Local Binary Patterns Histograms）：不把整个图像看成一个高维向量，仅用局部特征来描述一个物体，通过这种方式提取特征，获得一个低维隐式。对图像的像素和它局部周围像素进行对比后的结果进行求和，把这个像素作为中心，对相邻像素进行阈值比较。如果中心像素的亮度大于等于他的相邻像素，标记为 1，否则标记为 0（用二进制数字来表示每个像素）。</p><h3 id="OpenCV-的基本使用"><a href="#OpenCV-的基本使用" class="headerlink" title="OpenCV 的基本使用"></a>OpenCV 的基本使用</h3><h4 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img=cv.imread(<span class="string">&#x27;lena.jpg&#x27;</span>)    <span class="comment">#加载图片路径中不能有中文</span></span><br><span class="line"><span class="comment">#显示图片</span></span><br><span class="line">cv.imshow(<span class="string">&#x27;read_img&#x27;</span>,img)</span><br><span class="line"><span class="comment">#等待键盘输入 单位毫秒  传入0 则就是无限等待</span></span><br><span class="line">cv.waitKey(<span class="number">3000</span>)</span><br><span class="line"><span class="comment">#释放内存  由于OpenCV底层是C++编写的</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="图片灰度转换"><a href="#图片灰度转换" class="headerlink" title="图片灰度转换"></a>图片灰度转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">img=cv.imread(<span class="string">&#x27;lena.jpg&#x27;</span>)</span><br><span class="line">cv.imshow(<span class="string">&#x27;BGR_img&#x27;</span>,img)</span><br><span class="line"><span class="comment">#将图片灰度转换</span></span><br><span class="line">gray_img=cv.cvtColor(img,cv.COLOR_BGR2GRAY)</span><br><span class="line">cv.imshow(<span class="string">&#x27;gray_img&#x27;</span>,gray_img)</span><br><span class="line"><span class="comment">#保存图片</span></span><br><span class="line">cv.imwrite(<span class="string">&#x27;gray_lena.jpg&#x27;</span>,gray_img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="修改图片尺寸"><a href="#修改图片尺寸" class="headerlink" title="修改图片尺寸"></a>修改图片尺寸</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">img=cv.imread(<span class="string">&#x27;lena.jpg&#x27;</span>)</span><br><span class="line">cv.imshow(<span class="string">&#x27;img&#x27;</span>,img)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原来图片的形状&#x27;</span>,img.shape)</span><br><span class="line"><span class="comment"># 修改图片尺寸</span></span><br><span class="line">resize_img=cv.resize(img,dsize=(<span class="number">600</span>,<span class="number">560</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改后图片的形状：&#x27;</span>,resize_img.shape)</span><br><span class="line">cv.imshow(<span class="string">&#x27;resize_img&#x27;</span>,resize_img) </span><br><span class="line"><span class="comment">#输入q时退出</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>)==cv.waitKey(<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">img=cv.imread(<span class="string">&#x27;lena.jpg&#x27;</span>)</span><br><span class="line"><span class="comment">#绘制矩形，左上角坐标(x,y) 矩形的宽度和高度(w,h)</span></span><br><span class="line">x,y,w,h=<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span></span><br><span class="line">cv.rectangle(img,(x,y,x+w,y+h),color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),thickness=<span class="number">3</span>) <span class="comment">#BGR</span></span><br><span class="line"><span class="comment">#绘制圆形，圆点的坐标center，半径radius</span></span><br><span class="line">x,y,r=<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span></span><br><span class="line">cv.circle(img,center=(x,y),radius=r,color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),thickness=<span class="number">2</span>)</span><br><span class="line"><span class="comment">#显示图片</span></span><br><span class="line">cv.imshow(<span class="string">&#x27;rectangle_img&#x27;</span>,img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="人脸检测"><a href="#人脸检测" class="headerlink" title="人脸检测"></a>人脸检测</h3><h4 id="Haarcascades"><a href="#Haarcascades" class="headerlink" title="Haarcascades"></a>Haarcascades</h4><p>提取出图像的细节对产生稳定分类结果和跟踪结果很有用，这些提取的结果被称为特征。</p><p>虽然任意像素都可以能影响多个特征，但特征应该比像素少得多，两个图像的相似程度可以通过它们对应特征的欧氏距离来度量。</p><p>Haar 特征是一种用于实现实时人脸跟踪的特征，每一个 Haar 特征都描述了相邻图像区域的对比模式，如边、顶点和细线都能生成具有判别性的特征。</p><h4 id="官方-demo"><a href="#官方-demo" class="headerlink" title="官方 demo"></a>官方 demo</h4><p>下载：<a href="https://sourceforge.net/projects/opencvlibrary/files/4.5.3/opencv-4.5.3-vc14_vc15.exe/download。">https://sourceforge.net/projects/opencvlibrary/files/4.5.3/opencv-4.5.3-vc14_vc15.exe/download。</a></p><p>build 中是 OpenCV 使用时要用到的一些库文件。</p><p>sources 中是 OpenCV 官方提供的 demo 示例源码。</p><p>sources/data/haarcascades 文件夹包含了所有 OpenCV 的人脸检测的 XML 文件，可用于检测静止图像、视频和摄像头所得到图像中的人脸。</p><h4 id="静态人脸检测"><a href="#静态人脸检测" class="headerlink" title="静态人脸检测"></a>静态人脸检测</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">face_detect_demo</span>():</span><br><span class="line">    <span class="comment">#将图片转换为灰度图片</span></span><br><span class="line">    gray=cv.cvtColor(img,cv.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment">#加载特征数据</span></span><br><span class="line">    face_detector=cv.CascadeClassifier(<span class="string">&#x27;opencv/sources/data/haarcascades/haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line">    faces=face_detector.detectMultiScale(gray)</span><br><span class="line">    <span class="keyword">for</span> x,y,w,h <span class="keyword">in</span> faces:</span><br><span class="line">        cv.rectangle(img,(x,y),(x+w,y+h),color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),thickness=<span class="number">2</span>)</span><br><span class="line">    cv.imshow(<span class="string">&#x27;result&#x27;</span>,img)</span><br><span class="line"><span class="comment">#加载图片</span></span><br><span class="line">img=cv.imread(<span class="string">&#x27;lena.jpg&#x27;</span>)</span><br><span class="line">face_detect_demo()</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="检测多张人脸"><a href="#检测多张人脸" class="headerlink" title="检测多张人脸"></a>检测多张人脸</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">face_detect_demo</span>():</span><br><span class="line">    <span class="comment">#将图片灰度</span></span><br><span class="line">    gray=cv.cvtColor(img,cv.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment">#加载特征数据</span></span><br><span class="line">    face_detector = cv.CascadeClassifier(</span><br><span class="line">        <span class="string">&#x27;opencv/sources/data/haarcascades/haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line">    faces = face_detector.detectMultiScale(gray)</span><br><span class="line">    <span class="keyword">for</span> x,y,w,h <span class="keyword">in</span> faces:</span><br><span class="line">        <span class="built_in">print</span>(x,y,w,h)</span><br><span class="line">        cv.rectangle(img,(x,y),(x+w,y+h),color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),thickness=<span class="number">2</span>)</span><br><span class="line">        cv.circle(img,center=(x+w//<span class="number">2</span>,y+h//<span class="number">2</span>),radius=w//<span class="number">2</span>,color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),thickness=<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#显示图片</span></span><br><span class="line">    cv.imshow(<span class="string">&#x27;result&#x27;</span>,img)</span><br><span class="line"><span class="comment">#加载图片</span></span><br><span class="line">img=cv.imread(<span class="string">&#x27;face3.jpg&#x27;</span>)</span><br><span class="line"><span class="comment">#调用人脸检测方法</span></span><br><span class="line">face_detect_demo()</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="检测视频中的人脸"><a href="#检测视频中的人脸" class="headerlink" title="检测视频中的人脸"></a>检测视频中的人脸</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">face_detect_demo</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="comment">#将图片灰度</span></span><br><span class="line">    gray=cv.cvtColor(img,cv.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment">#加载特征数据</span></span><br><span class="line">    face_detector = cv.CascadeClassifier(<span class="string">&#x27;opencv/sources/data/haarcascades/haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line">    faces = face_detector.detectMultiScale(gray)</span><br><span class="line">    <span class="keyword">for</span> x,y,w,h <span class="keyword">in</span> faces:</span><br><span class="line">        cv.rectangle(img,(x,y),(x+w,y+h),color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),thickness=<span class="number">2</span>)</span><br><span class="line">        cv.circle(img,center=(x+w//<span class="number">2</span>,y+h//<span class="number">2</span>),radius=(w//<span class="number">2</span>),color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),thickness=<span class="number">2</span>)</span><br><span class="line">    cv.imshow(<span class="string">&#x27;result&#x27;</span>,img)</span><br><span class="line"><span class="comment">#读取视频</span></span><br><span class="line">cap=cv.VideoCapture(<span class="string">&#x27;video.mp4&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    flag,frame=cap.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;flag:&#x27;</span>,flag,<span class="string">&#x27;frame.shape:&#x27;</span>,frame.shape)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    face_detect_demo(frame)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>) == cv.waitKey(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br><span class="line">cap.release()</span><br></pre></td></tr></table></figure><h3 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h3><p>用一系列分好类的图像来训练程序，并基于这些图像来进行识别，每个识别都具有转置信（confidence）评分，因此可在实际应用中通过对其设置阈值来进行筛选。</p><h4 id="训练数据"><a href="#训练数据" class="headerlink" title="训练数据"></a>训练数据</h4><p><code>train()</code> 函数中有两个参数：图像数组和标签数组，这些标签表示进行识别时候某人人脸的ID 。</p><p>需要安装 <code>opencv-contrib-python</code> 模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getImageAndLabels</span>(<span class="params">path</span>):</span><br><span class="line">    facesSamples=[]</span><br><span class="line">    ids=[]</span><br><span class="line">    imagePaths=[os.path.join(path,f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(path)]</span><br><span class="line">    <span class="comment">#检测人脸</span></span><br><span class="line">    face_detector = cv.CascadeClassifier(</span><br><span class="line">        <span class="string">&#x27;opencv/sources/data/haarcascades/haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line">    <span class="comment">#遍历列表中的图片</span></span><br><span class="line">    <span class="keyword">for</span> imagePath <span class="keyword">in</span> imagePaths:</span><br><span class="line">        <span class="comment">#打开图片</span></span><br><span class="line">        PIL_img=Image.<span class="built_in">open</span>(imagePath).convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">        <span class="comment">#将图像转换为数组</span></span><br><span class="line">        img_numpy=np.array(PIL_img,<span class="string">&#x27;uint8&#x27;</span>)</span><br><span class="line">        faces = face_detector.detectMultiScale(img_numpy)</span><br><span class="line">        <span class="comment">#获取每张图片的id</span></span><br><span class="line">        <span class="built_in">id</span>=<span class="built_in">int</span>(os.path.split(imagePath)[<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> x,y,w,h <span class="keyword">in</span> faces:</span><br><span class="line">            facesSamples.append(img_numpy[y:y+h,x:x+w])</span><br><span class="line">            ids.append(<span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">return</span> facesSamples,ids</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#图片路径</span></span><br><span class="line">    path=<span class="string">&#x27;./data/jm/&#x27;</span></span><br><span class="line">    <span class="comment">#获取图像数组和id标签数组</span></span><br><span class="line">    faces,ids = getImageAndLabels(path)</span><br><span class="line">    <span class="comment">#获取训练对象</span></span><br><span class="line">    recognizer = cv.face.LBPHFaceRecognizer_create()</span><br><span class="line">    recognizer.train(faces,np.array(ids))</span><br><span class="line">    <span class="comment">#保存文件</span></span><br><span class="line">    recognizer.write(<span class="string">&#x27;trainer/trainer.yml&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="基于-LBPH-的人脸识别"><a href="#基于-LBPH-的人脸识别" class="headerlink" title="基于 LBPH 的人脸识别"></a>基于 LBPH 的人脸识别</h4><p>LBPH（Local Binary Pattern Histogram）将检测到的人脸分为小单元，并将其与模型中的对应单元进行比较，对每个区域的匹配值产生一个直方图。由于这种方法的灵活性，LBPH 是唯一允许模型样本人脸和检测到的人脸在形状、大小上可以不同的人脸识别算法。</p><p>调整后的区域中调用 <code>predict()</code>函数，该函数返回两个元素的数组：第一个元素是所识别个体的标签，第二个是置信度评分。</p><p>所有的算法都有一个置信度评分阈值，置信度评分用来衡量所识别人脸与原模型的差距，0 表示完全匹配，可能有时不想保留所有的识别结果，则需要进一步处理，因此可用自己的算法来估算识别的置信度评分。</p><p>一个好的 LBPH 识别参考值要低于50，任何高于80的参考值都会被认为是低的置信度评分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载训练数据集文件</span></span><br><span class="line">recognizer = cv.face.LBPHFaceRecognizer_create()</span><br><span class="line">recognizer.read(<span class="string">&#x27;trainer/trainer.yml&#x27;</span>)</span><br><span class="line"><span class="comment"># 准备识别的图片</span></span><br><span class="line">faceCascade = cv.CascadeClassifier(</span><br><span class="line">    <span class="string">&#x27;opencv/sources/data/haarcascades/haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line">font = cv.FONT_HERSHEY_SIMPLEX</span><br><span class="line"><span class="built_in">id</span> = <span class="number">0</span></span><br><span class="line">img = cv.imread(<span class="string">&#x27;19.pgm&#x27;</span>)</span><br><span class="line">gray_img=cv.cvtColor(img,cv.COLOR_BGR2GRAY)</span><br><span class="line">faces = faceCascade.detectMultiScale(gray_img)</span><br><span class="line"><span class="keyword">for</span> x, y, w, h <span class="keyword">in</span> faces:</span><br><span class="line">    cv.rectangle(img, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 人脸识别</span></span><br><span class="line">    <span class="built_in">id</span>, confidence = recognizer.predict(gray_img[y:y + h, x:x + w])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;标签id:&#x27;</span>, <span class="built_in">id</span>, <span class="string">&#x27;置信评分：&#x27;</span>, confidence)</span><br><span class="line">cv.imshow(<span class="string">&#x27;result&#x27;</span>, img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="摄像头人脸识别"><a href="#摄像头人脸识别" class="headerlink" title="摄像头人脸识别"></a>摄像头人脸识别</h3><h4 id="摄像头调试"><a href="#摄像头调试" class="headerlink" title="摄像头调试"></a>摄像头调试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入opencv模块</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment">#捕捉帧，笔记本摄像头设置为0即可</span></span><br><span class="line">capture = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#循环显示帧</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    ret, frame = capture.read()</span><br><span class="line">    <span class="comment">#显示窗口第一个参数是窗口名，第二个参数是内容</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;frame&#x27;</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):      <span class="comment">#按q退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="摄像头人脸识别-1"><a href="#摄像头人脸识别-1" class="headerlink" title="摄像头人脸识别"></a>摄像头人脸识别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">face_cascade = cv2.CascadeClassifier(    <span class="string">&quot;opencv\sources\data\haarcascades\haarcascade_frontalface_default.xml&quot;</span>)</span><br><span class="line">eye_cascade = cv2.CascadeClassifier(<span class="string">&quot;opencv\sources\data\haarcascades\haarcascade_eye.xml&quot;</span>)</span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, img = cap.read()</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    faces = face_cascade.detectMultiScale(gray, <span class="number">1.1</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(faces) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> faceRect <span class="keyword">in</span> faces:</span><br><span class="line">            x, y, w, h = faceRect</span><br><span class="line">            cv2.rectangle(img, (x, y), (x + w, y + h), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">            roi_gray = gray[y:y + h // <span class="number">2</span>, x:x + w]</span><br><span class="line">            roi_color = img[y:y + h // <span class="number">2</span>, x:x + w]</span><br><span class="line">            eyes = eye_cascade.detectMultiScale(roi_gray, <span class="number">1.1</span>, <span class="number">1</span>, cv2.CASCADE_SCALE_IMAGE, (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">            <span class="keyword">for</span> (ex, ey, ew, eh) <span class="keyword">in</span> eyes:</span><br><span class="line">                cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;img&quot;</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>偶然刷到一篇名为<a href="https://www.cnblogs.com/techflow/p/13998832.html">《一半人写不出冒泡排序，你的同龄人都躺下了》</a>的文章，其中提到轮子哥毕业去参加面试的时候，第一轮笔试考察冒泡排序，结果现场的一半学生都没写出来。冒泡排序（Bubble Sort），是一种最基础的、最简单直观的交换排序，之所以叫做冒泡排序，是因为越小的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样。</p></blockquote><span id="more"></span><h3 id="一、冒泡排序的思想"><a href="#一、冒泡排序的思想" class="headerlink" title="一、冒泡排序的思想"></a>一、冒泡排序的思想</h3><p>从头开始两两比较，把较大的元素与较小的元素进行交换，每轮把当前最大的一个元素存入到数组当前的末尾。每一趟比较只能确定将一个数归位，如果有 n 个数进行排序，要进行 n-1 趟操作。算法时间复杂度复杂度 <code>O(n)</code> 。</p><h3 id="二、冒泡排序的实现步骤"><a href="#二、冒泡排序的实现步骤" class="headerlink" title="二、冒泡排序的实现步骤"></a>二、冒泡排序的实现步骤</h3><ol><li>定义一个外部循环控制冒泡的轮数（<code>数组.length-1</code>）</li><li>定义一个内部循环控制每轮依次往后比较几个位置（<code>数组.length-i-1</code>）</li><li>如果当前位置的元素值 <code>&gt;</code> 后一个位置的元素值，两者交换</li></ol><h3 id="三、Java-版代码实现"><a href="#三、Java-版代码实现" class="headerlink" title="三、Java 版代码实现"></a>三、Java 版代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、Python-版代码实现"><a href="#四、Python-版代码实现" class="headerlink" title="四、Python 版代码实现"></a>四、Python 版代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(arr) - i):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j + <span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 实现双色球系统</title>
      <link href="/%E5%8F%8C%E8%89%B2%E7%90%83/"/>
      <url>/%E5%8F%8C%E8%89%B2%E7%90%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>双色球是最常见的一种彩票。双色球投注区分为红球号码区和蓝球号码区，红球号码范围为01～33，蓝球号码范围为01～16。双色球每期从33个红球中开出6个号码，从16个蓝球中开出1个号码作为中奖号码，双色球玩法即是竞猜开奖号码的6个红球号码和1个蓝球号码，顺序不限。</p></blockquote><span id="more"></span><h3 id="一、系统原理和设计"><a href="#一、系统原理和设计" class="headerlink" title="一、系统原理和设计"></a>一、系统原理和设计</h3><p>随机一组中奖号码：中奖号码由6个红球和1个蓝球组成。定义随机方法用于返回一组中奖号码（7个数据），返回的形式是一个整型数组。</p><p>随机的6个中奖的红球号码不能重复：每次随机一个红球号码后去数组中判断是否存在，如果存在则需要重新随机一个数字直到不重复为止。</p><p>用户输入一组双色球号码：定义一个方法录入用户输入的6个红球和1个蓝球号码，该方法最终需要返回一个数组，数组中就是用户录入的号码（7位）。</p><p>中奖情况判断：定义一个方法接收中奖号码的数组，用户选号的数组，根据命中红球数和篮球数判断最终的中奖情况并输出详情和中奖金额。</p><p>统计红球的命中数量：遍历用户的每个选号，然后遍历中奖号码的数组，看当前选号是否在中奖号码中存在，存在则命中数量加1。</p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleChromosphere</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 随机6个红球号码（1-33，不能重复），随机一个蓝球号码（1-16），用数组装起来作为中奖号码</span></span><br><span class="line">        <span class="type">int</span>[] luckNumbers = createLuckNumber();</span><br><span class="line">        <span class="comment">// printArray(luckNumbers);</span></span><br><span class="line">        <span class="comment">// 录入用户选中的号码</span></span><br><span class="line">        <span class="type">int</span>[] userNumbers = userInputNumbers();</span><br><span class="line">        <span class="comment">// 判断中奖情况</span></span><br><span class="line">        judge(luckNumbers, userNumbers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">judge</span><span class="params">(<span class="type">int</span>[] luckNumbers, <span class="type">int</span>[] userNumbers )</span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否中奖      </span></span><br><span class="line">        <span class="comment">// 定义2个变量分别存储红球命中的个数，以及蓝球命中的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">redHitNumbers</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">blueHitNumbers</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 判断红球命中了几个，开始统计</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; userNumbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; luckNumbers.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 每次找到了相等了，意味着当前号码命中了</span></span><br><span class="line">                <span class="keyword">if</span>(userNumbers[i] == luckNumbers[j])&#123;</span><br><span class="line">                    redHitNumbers ++ ;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 蓝球号码是否命中</span></span><br><span class="line">        blueHitNumbers = luckNumbers[<span class="number">6</span>] == userNumbers[<span class="number">6</span>] ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;中奖号码是：&quot;</span>  );</span><br><span class="line">        printArray(luckNumbers);</span><br><span class="line">        System.out.println(<span class="string">&quot;您投注号码是：&quot;</span>  );</span><br><span class="line">        printArray(userNumbers);</span><br><span class="line">        System.out.println(<span class="string">&quot;您命中了几个红球：&quot;</span> + redHitNumbers);</span><br><span class="line">        System.out.println(<span class="string">&quot;您是否命中蓝球：&quot;</span> + ( blueHitNumbers == <span class="number">1</span> ? <span class="string">&quot;是&quot;</span>: <span class="string">&quot;否&quot;</span> ) );</span><br><span class="line">        <span class="comment">// 判断中奖情况</span></span><br><span class="line">        <span class="keyword">if</span>(blueHitNumbers == <span class="number">1</span> &amp;&amp; redHitNumbers &lt; <span class="number">3</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜您，中了5元小奖！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(blueHitNumbers == <span class="number">1</span> &amp;&amp; redHitNumbers == <span class="number">3</span></span><br><span class="line">                || blueHitNumbers == <span class="number">0</span> &amp;&amp; redHitNumbers == <span class="number">4</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜您，中了10元小奖！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(blueHitNumbers == <span class="number">1</span> &amp;&amp; redHitNumbers == <span class="number">4</span></span><br><span class="line">                || blueHitNumbers == <span class="number">0</span> &amp;&amp; redHitNumbers == <span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜您，中了200元！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(blueHitNumbers == <span class="number">1</span> &amp;&amp; redHitNumbers == <span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜您，中了3000元大奖！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(blueHitNumbers == <span class="number">0</span> &amp;&amp; redHitNumbers == <span class="number">6</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜您，中了500万超级大奖！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(blueHitNumbers == <span class="number">1</span> &amp;&amp; redHitNumbers == <span class="number">6</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜您，中了1000万巨奖！可以开始享受人生，诗和远方！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;感谢您为福利事业做出的突出贡献！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] userInputNumbers()&#123;</span><br><span class="line">        <span class="comment">// 动态初始化一个数组，长度为7</span></span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请您输入第&quot;</span>+(i + <span class="number">1</span>)+<span class="string">&quot;个红球号码（1-33、不重复）：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            numbers[i] = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 录入一个蓝球号码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请您输入一个蓝球号码（1-16）：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        numbers[numbers.length - <span class="number">1</span>] = data;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] createLuckNumber()&#123;</span><br><span class="line">        <span class="comment">// 定义一个动态初始化的数组，存储7个数字</span></span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];  </span><br><span class="line">        <span class="comment">// 遍历数组，为每个位置生成对应的号码。(注意：遍历前6个位置，生成6个不重复的红球号码，范围是1-33)</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 为当前位置找出一个不重复的1-33之间的数字</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> r.nextInt(<span class="number">33</span>) + <span class="number">1</span>; </span><br><span class="line">                <span class="comment">// 注意：必须判断当前随机的这个号码之前是否出现过，出现过要重新随机一个，直到不重复为止，才可以存入数组中去</span></span><br><span class="line">                <span class="comment">// 定义一个flag变量，默认认为data是没有重复的</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(numbers[j] == data) &#123;</span><br><span class="line">                        <span class="comment">// data当前这个数据之前出现过，不能用</span></span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                    <span class="comment">// data这个数据之前没有出现过，可以使用了</span></span><br><span class="line">                    numbers[i] = data;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 为第7个位置生成一个1-16的号码作为蓝球号码</span></span><br><span class="line">        numbers[numbers.length - <span class="number">1</span>] = r.nextInt(<span class="number">16</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 基础编程总结</title>
      <link href="/Java%E5%9F%BA%E7%A1%80/"/>
      <url>/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java 语言是 SUN (Stanford University Network) 公司于1995年推出的一门高级编程语言，舍弃了 C 语言中容易引起错误的指针（以引用取代）、运算符重载（operator overloading）、多重继承 （以接口取代）等特性，增加了垃圾回收器等功能，具有面向对象、健壮性、跨平台性等特性。我选择的 Java课程为<a href="https://www.bilibili.com/video/BV1Kb411W75N">尚学堂 Java 零基础入门教程</a>，但由于我个人不是零基础入门，所以这篇笔记不含编程入门和语言概述，仅包含 Java 基础编程知识的总结。</p></blockquote><span id="more"></span><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><h4 id="Java-虚拟机"><a href="#Java-虚拟机" class="headerlink" title="Java 虚拟机"></a>Java 虚拟机</h4><ul><li>JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器</li><li>对于不同的平台，有不同的虚拟机，只有某平台提供了对应的 Java 虚拟机，Java 程序才可在此平台运行</li><li>Java 虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</li></ul><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><ul><li>Java 语言消除了程序员回收无用内存空间的责任：提供一种系统级线程跟踪存储空间的分配情况，并在 JVM 空闲时，检查并释放那些可被释放的存储空间</li><li>垃圾回收在 Java 程序运行过程中自动进行，程序员无法精确控制和干预</li></ul><h4 id="JRE-与-JDK"><a href="#JRE-与-JDK" class="headerlink" title="JRE 与 JDK"></a>JRE 与 JDK</h4><ul><li>Java Development Kit 是提供给 Java 开发人员使用的 Java 开发工具包，其中包含了 Java 的开发工具，也包括了 JRE</li><li>Java Runtime Environment 包括 Java 虚拟机（Java Virtual Machine）和 Java 程序所需的核心类库等，如果想要运行一个开发好的 Java 程序，计算机中只需要安装 JRE 即可</li><li>JDK = JRE + 开发工具集（例如 Javac 编译工具等），JRE = JVM + Java SE 标准类库</li></ul><h4 id="通过-javac-命令编译-Java-文件"><a href="#通过-javac-命令编译-Java-文件" class="headerlink" title="通过 javac 命令编译 Java 文件"></a>通过 javac 命令编译 Java 文件</h4><ul><li><p>通过编译器将 Java 源文件编译成 JVM 可以识别的字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Test.java  <span class="comment">//此时有了可执行的 java 程序</span></span><br></pre></td></tr></table></figure></li><li><p>通过 java 命令运行生成的 class 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Test  <span class="comment">//通过运行工具 java.exe 对字节码文件进行执行</span></span><br></pre></td></tr></table></figure></li><li><p>一个源文件可以声明多个 class，但最多只能有一个 public 类，而且 public 类名必须与文件名相同</p></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>被注释的文字不会被 JVM 解释执行，多行注释里面不允许有多行注释嵌套</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/* 多行注释/*</span></span><br></pre></td></tr></table></figure></li><li><p>文档注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  java程序的作者**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>  源文件的版本**</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>注释内容可以被 JDK 提供的 javadoc 所解析，生成该程序的说明文档</p></li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li>标识符（Identifier）不可以数字开头，不能包含空格，严格区分大小写，长度无限制</li><li>包名：所有字母都小写</li><li>类名、接口名：所有单词的首字母大写</li><li>变量名、方法名：第一个单词首字母小写，第二个单词开始每个单词首字母大写</li><li>常量名：所有字母都大写，每个单词用下划线连接</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>变量是程序中最基本的存储单元，包含变量类型、变量名和存储的值</li><li>先声明，后使用：<code>&lt;数据类型&gt; &lt;变量名称&gt;</code></li><li>赋值：<code>&lt;变量名称&gt; = &lt;值&gt;</code>，<code>&lt;数据类型&gt;&lt;变量名&gt;= &lt;初始化值&gt;</code></li><li>成员变量：在类体内，方法体外声明的变量<ul><li>以 static 修饰的是类变量，不以 static 修饰的是实例变量</li></ul></li><li>局部变量：在方法体内部声明的变量<ul><li>方法、构造器中定义的变量成为实参</li><li>局部变量除形参外，都需显式初始化</li></ul></li><li>基本数据类型<ul><li>整型：byte \ short \ int \ long（整型常量默认为 int 型，声明 long 型常量须后加 l 或 L）</li><li>浮点型：float \ double（浮点型常量默认为双精度，声明 float 型常量须后加 f 或 F）</li><li>字符型：char（使用 Unicode 编码，<code>‘\uXXXX’</code>）</li><li>布尔型：boolean（true 用1表示，false 用0表示）</li></ul></li><li>引用数据类型<ul><li>类：class</li><li>接口：interface</li><li>字符串：String（<code>“aaaa”</code>）</li><li>数组：array</li></ul></li><li>数据类型转换<ul><li>byte、short、char之间不会相互转换，在计算时首先转换为 int 类型</li><li>boolean 类型不能与其它数据类型运算，不可以转换为其它的数据类型</li><li>任何基本数据类型的值和 String 进行连接运算时，基本数据类型的值将自动转化为 String 类型</li><li>强制转换符：<code>(byte)(a+b)</code></li><li>通过基本类型对应的包装类则可以实现把字符串转换成基本类型：<code>String a = “43”; inti= Integer.parseInt(a);</code></li></ul></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>算术运算符</li><li>赋值运算符<ul><li>当 <code>=</code> 两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理</li><li>支持连续赋值</li><li>扩展赋值运算符：<code>+=, -=, *=, /=, %=</code></li></ul></li><li>比较运算符（关系运算符）<ul><li>比较运算符的结果都是 boolean 型</li></ul></li><li>逻辑运算符<ul><li><code>&amp;</code>：逻辑与，<code>|</code>：逻辑或，<code>！</code>：逻辑非</li><li><code>&amp;&amp;</code> ：短路与，<code>||</code>：短路或，<code>^</code> ：逻辑异或</li><li>单<code>&amp;</code>时，左边无论真假右边都进行运算；双<code>&amp;</code>时，如果左边为假，那么右边不参与运算</li><li><code>||</code>时：当左边为真，右边不参与运算</li></ul></li><li>位运算符<ul><li>位运算符操作的都是整型的数据变量</li><li><code>&lt;&lt;</code> : 在一定范围内，每向左移一位，相当于 <code>\* 2</code></li><li><code>&gt;&gt;</code> : 在一定范围内，每向右移一位，相当于 <code>/ 2</code></li><li><code>&gt;&gt;&gt;</code>：无符号右移</li><li><code>&amp;</code>：与运算，<code>|</code>：或运算，<code>^</code> ：异或运算，<code>~</code>：取反运算</li></ul></li><li>三元运算符<ul><li><code>(条件)？a : b</code></li><li>条件表达式的结果为 boolean 类型</li><li>三元运算符是可以嵌套的</li></ul></li><li>只有单目运算符、三元运算符、赋值运算符是从右向左运算的</li></ul><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h4><ul><li><p><code>if-else</code> 条件表达式</p><ul><li>必须是布尔表达式（关系表达式或逻辑表达式）、布尔变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">执行表达式<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>&#123;</span><br><span class="line">执行表达式<span class="number">2</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">执行表达式<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">执行表达式n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输入语句</p><ol><li>导包：<code>import java.util.Scanner;</code> </li><li>Scanner 的实例化</li><li>调用 Scanner 类的相关方法来获取指定的变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScannerTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//声明一个Scanner</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scan.nextInt();      <span class="comment">//获取变量</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>switch-case</code> 结构</p><ul><li>switch 结构中的表达式只能是如下的六种数据类型：<code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>、<code>枚举类型</code> （JDK5.0）、<code>String类型</code>（JDK7.0）</li><li>case 之后只能声明常量，不能声明范围</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">执行语句<span class="number">1</span>;</span><br><span class="line"><span class="comment">//break;     //break关键字是可选的</span></span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">执行语句<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">执行语句n:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><ul><li><p>for 循环</p><ul><li>初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔</li><li>可以有多个变量更新，用逗号分隔</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 循环条件; 迭代)｛</span><br><span class="line">    循环体;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure></li><li><p>while 循环</p><ul><li>for 循环和 while 循环可以相互转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化</span><br><span class="line"><span class="keyword">while</span>(循环条件)｛</span><br><span class="line">    循环体;</span><br><span class="line">    迭代;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do-while 循环</p><ul><li>至少执行一次循环体</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环体;</span><br><span class="line">迭代;</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br></pre></td></tr></table></figure></li><li><p><code>for</code>、<code>while</code>、<code>do…while</code> 均可以作为外层循环或内层循环</p></li><li><code>break</code> 用于终止某个语句块的执行，<code>continue</code> 用于跳过其所在循环语句块的一次执行，继续下一次循环<ul><li><code>break</code> 只能用于 <code>switch</code> 语句和循环语句中，<code>continue</code> 只能用于循环语句中</li><li><code>continue</code> 出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环</li></ul></li><li>与 <code>break</code> 和 <code>continue</code> 不同的是，<code>return</code> 直接结束整个方法</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>数组属于引用类型的变量，数组的元素既可以是基本数据类型，也可以是引用数据类型</p></li><li><p>创建数组对象会在内存中开辟一整块连续的空间，数组的长度一旦确定就不能修改</p></li><li><p>数组是有序排列的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态初始化：数组的初始化和数组元素的赋值操作同时进行</span></span><br><span class="line">ids = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>&#125;;</span><br><span class="line"><span class="comment">//动态初始化：数组的初始化和数组元素的赋值操作分开进行</span></span><br><span class="line">String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>]; </span><br><span class="line"><span class="comment">//通过角标的方式调用数组指定位置的元素</span></span><br><span class="line">names[<span class="number">0</span>] = <span class="string">&quot;张学良&quot;</span>;    <span class="comment">//如果数组超过角标会通过编译，运行失败</span></span><br><span class="line"><span class="comment">//获取数组的长度</span></span><br><span class="line">Syst遍历数组em.out.println(names.length);</span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; names.length;i++)&#123;</span><br><span class="line">System.out.println(names[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><ul><li><p>从数组底层的运行机制来看，其实没有多维数组，可以看作 array1 作为 array2 的元素而存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="type">int</span>[][] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//动态初始化</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>][];</span><br><span class="line"><span class="comment">//调用数组的指定位置的元素</span></span><br><span class="line">System.out.println(arr1[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//获取数组的长度</span></span><br><span class="line">System.out.println(arr4.length);</span><br><span class="line">System.out.println(arr4[<span class="number">0</span>].length);</span><br><span class="line"><span class="comment">//遍历二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr4.length;i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr4[i].length;j++)&#123;</span><br><span class="line">    System.out.print(arr4[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="类与对象的创建"><a href="#类与对象的创建" class="headerlink" title="类与对象的创建"></a>类与对象的创建</h4><ul><li><p>属性：类中的成员变量，行为：类中的成员方法</p></li><li><p>Field = 属性 = 成员变量 = 域、字段，Method = 成员方法 = 函数</p></li><li><p>创建类 = 类的实例化 = 实例化类</p></li><li><p>如果创建类一个类的多个对象，则每个对象都独立的拥有一套非 static 的类的属性</p></li><li><p>所有的对象实例以及数组都要在堆（Heap）上分配：此内存区域的唯一目的就是存放对象实例</p></li><li><p>虚拟机栈（Stack）用于存储局部变量：局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不等同于对象本身，是对象在堆内存的首地址），方法执行完，自动释放</p></li><li><p>方法区（MethodArea）用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的正文要用&#123; &#125;括起来</span></span><br><span class="line">修饰符 class 类名&#123;        <span class="comment">//修饰符为 public：类可以被任意访问</span></span><br><span class="line"> 属性声明;</span><br><span class="line"> 方法()声明;</span><br><span class="line">&#125;        </span><br><span class="line"><span class="comment">//调用属性</span></span><br><span class="line">对象.属性;</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">对象.方法();</span><br></pre></td></tr></table></figure></li></ul><h4 id="类中属性的使用"><a href="#类中属性的使用" class="headerlink" title="类中属性的使用"></a>类中属性的使用</h4><ul><li>属性（成员变量）和局部变量<ul><li>属性直接定义在类的一对 <code>&#123;&#125;</code> 内 。局部变量声明在方法内、方法形参、构造器形参、构造器内部</li><li>在声明属性时可以使用权限修饰符指明其权限（private、public、缺省、protected），局部变量不可以使用权限修饰符</li><li>类的属性都有默认初始化值，局部变量没有默认初始化值，在调用局部变量之前，一定要显式赋值（形参在调用时，赋值即可）</li><li>属性加载到堆空间中（非 static），局部变量加载到栈空间</li></ul></li></ul><h4 id="类中方法的使用"><a href="#类中方法的使用" class="headerlink" title="类中方法的使用"></a>类中方法的使用</h4><ul><li><p>Math类：<code>sqrt()、random()</code></p></li><li><p>Scanner类：<code>nextXxx()</code></p></li><li><p>Arrays类：<code>sort()、binarySearch()、toString()、equals()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法的声明</span></span><br><span class="line">权限修饰符 返回值类型 方法名(形参列表)&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果方法有返回值，则必须在方法声明时指定返回值的类型，在方法中使用 return 关键字来返回指定类型的变量或常量</p></li></ul><h4 id="匿名对象的使用"><a href="#匿名对象的使用" class="headerlink" title="匿名对象的使用"></a>匿名对象的使用</h4><ul><li>创建对象时，没有显式的赋值给一个变量名，即为匿名对象</li><li>匿名对象只能调用一次，换行直接销毁匿名对象</li></ul><h4 id="方法重载（overload）"><a href="#方法重载（overload）" class="headerlink" title="方法重载（overload）"></a>方法重载（overload）</h4><ul><li><p>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可</p></li><li><p>判断是否重载与方法的返回值类型、权限修饰符、形参变量名、方法体都无关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与 void show(int a,char b,double c)&#123;&#125; 构成重载</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> a,<span class="type">double</span> c,<span class="type">char</span> b)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> a,<span class="type">double</span> c,<span class="type">char</span> b)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//void show(int a,double c,char b)&#123;&#125; 不与上方构成重载，因为参数类型相同</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="可变个数的形参"><a href="#可变个数的形参" class="headerlink" title="可变个数的形参"></a>可变个数的形参</h4><ul><li><p>JavaSE 5.0 中提供了 Varargs (variable number of arguments) 机制，允许直接定义能和多个实参相匹配的形参，从而可以用一种更简单的方式来传递个数可变的实参</p></li><li><p>可变个数形参的格式：<code>数据类型 ... 变量名</code></p><ul><li><p>可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载。</p></li><li><p>可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载（二者不可共存）</p></li><li><p>可变个数形参在方法中的形参中，必须声明在末尾</p></li><li><p>可变个数形参在方法中的形参中，最多只能声明一个可变形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String... strs)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">System.out.println(strs[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//public void show(String[] strs)&#123;&#125; 与上一方法不可共存</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="方法参数的值传递机制"><a href="#方法参数的值传递机制" class="headerlink" title="方法参数的值传递机制"></a>方法参数的值传递机制</h4><ul><li><p>如果变量是基本数据类型，此时实参赋值给形参的是实参真是存储的数据值</p></li><li><p>如果变量是引用数据类型，此时实参赋值给形参的是实参存储数据的地址值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayPrint</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;  <span class="comment">//传进去的是一个Object的对象</span></span><br><span class="line">System.out.println(arr);    <span class="comment">//地址值</span></span><br><span class="line"><span class="type">char</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;  <span class="comment">//传进去的是一个数组，里面遍历数据了   </span></span><br><span class="line">    System.out.println(arr1);    <span class="comment">//abc</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="递归（recursion）方法"><a href="#递归（recursion）方法" class="headerlink" title="递归（recursion）方法"></a>递归（recursion）方法</h4><ul><li><p>一个方法体内调用它自身</p></li><li><p>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制</p></li><li><p>递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环</p></li></ul><h4 id="属性赋值的过程"><a href="#属性赋值的过程" class="headerlink" title="属性赋值的过程"></a>属性赋值的过程</h4><ol><li>默认初始化值</li><li>显式初始化</li><li>构造器中赋值</li><li>通过 <code>对象.方法</code> 或 <code>对象.属性</code> 的方式赋值</li></ol><h3 id="封装与隐藏"><a href="#封装与隐藏" class="headerlink" title="封装与隐藏"></a>封装与隐藏</h3><ul><li><p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉</p></li><li><p>低耦合：仅对外暴露少量的方法用于使用</p></li><li><p>将类的属性私有化（private），同时提供 public 方法来 get 和 set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">a.name = <span class="string">&quot;大黄&quot;</span>;</span><br><span class="line">a.show();</span><br><span class="line">a.setLegs(-<span class="number">6</span>);</span><br><span class="line">a.show();</span><br><span class="line">System.out.println(a.name);</span><br><span class="line">System.out.println(a.getLegs());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类的设置</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> legs;</span><br><span class="line"><span class="comment">//对于属性的设置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLegs</span><span class="params">(<span class="type">int</span> l)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l &gt;= <span class="number">0</span> &amp;&amp; l % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    legs = l;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    legs = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对于属性的获取</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLegs</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> legs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;动物进食&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;,age = &quot;</span> + age + <span class="string">&quot;,legs = &quot;</span> + legs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//提供关于属性 age 的 get 和 set 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>权限修饰符 <code>public、protected、default（缺省）、private</code>  置于类的成员定义前，用来限定对象对该类成员的访问权限</p><ul><li>对于 class 的权限修饰只可以用 public 和 default</li><li>public 类可以在任意地方被访问，default 类只可以被同一个包内部的类访问</li></ul></li></ul><h3 id="构造器（constructor）"><a href="#构造器（constructor）" class="headerlink" title="构造器（constructor）"></a>构造器（constructor）</h3><ul><li><p>构造器的作用：初始化类的对象（属性），并返回对象的地址</p></li><li><p>如果没有显示的定义类的构造器的话，则系统默认提供一个空参的构造器</p></li><li><p>无参数构造器：初始化的对象时，成员变量的数据均采用默认值</p></li><li><p>有参数构造器：在初始化对象的时候，同时可以为对象进行赋值</p><ul><li>一旦定义了有参数构造器，无参数构造器就没有了，此时就需要自己写无参数构造器了</li></ul></li><li><p>一个类中至少会有一个构造器，一个类中若定义多个构造器，则彼此构成重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">权限修饰符  类名(形参列表) &#123; &#125;</span><br><span class="line"><span class="comment">//创建类的对象：new + 构造器</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="JavaBean-的使用"><a href="#JavaBean-的使用" class="headerlink" title="JavaBean 的使用"></a>JavaBean 的使用</h4><ul><li><p>JavaBean 是一种 Java 语言写成的可重用组件</p></li><li><p>JavaBean 符合如下标准：类是公共的、有一个无参的公共的构造器 、有属性，且有对应的 get、set 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">id = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h4><p><img src="https://blog.zhuangzhihao.top/img/UML类图.png" alt></p><ul><li><code>+</code> 表示 public 类型，<code>-</code> 表示 private 类型，<code>#</code> 表示 protected 类型</li></ul><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><ul><li>this 用来修饰和调用属性、方法、构造器</li><li>在类的方法中，可以使用 <code>this.属性</code> 或 <code>this.方法</code> 调用当前对象属性和方法（通常情况下选择省略），特殊情况下，如果方法的形参和类的属性同名必须显式使用 <code>this.变量</code> ，表明此变量是属性而非形参</li><li>在类的构造器中，可以使用 <code>this.属性</code> 或 <code>this.方法</code> 调用当前对象属性和方法（通常情况下选择省略），特殊情况下，如果构造器的形参和类的属性同名必须显式使用 <code>this.变量</code> ，表明此变量是属性而非形参</li><li>this 调用构造器<ul><li>可以在类的构造器中，显式使用 <code>this(形参列表)</code> 调用本类中重载的其他的构造器</li><li>构造器中不能通过 <code>this(形参列表)</code> 的方式调用自己。</li><li>如果一个类中声明了 n 个构造器，则最多有 n -1 个构造器中使用了<code>this(形参列表)</code></li><li><code>this(形参列表)</code> 必须声明在类的构造器的首行</li><li>在类的一个构造器中，最多只能声明一个 <code>this(形参列表)&quot;</code></li></ul></li></ul><h3 id="package-关键字"><a href="#package-关键字" class="headerlink" title="package 关键字"></a>package 关键字</h3><ul><li><p>为了更好的实现项目中类的管理，提供包的概念</p><ul><li><p>使用 package 声明类或接口所属的包，声明在源文件的首行</p></li><li><p>每 <code>“.”</code> 一次就代表一层文件目录。</p></li><li><p>同一个包下，不能命名同名接口或同名类；不同包下，可以命名同名的接口、类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang  <span class="comment">//包含一些 Java 语言的核心类，如 String、Math、Integer、System 和 Thread，提供常用功能</span></span><br><span class="line">java.net  <span class="comment">//包含执行与网络相关的操作的类和接口</span></span><br><span class="line">java.io  <span class="comment">//包含能提供多种输入/输出功能的类</span></span><br><span class="line">java.util  <span class="comment">//包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数</span></span><br><span class="line">java.text  <span class="comment">//包含了一些 java 格式化相关的类</span></span><br><span class="line">java.sql  <span class="comment">//包含了 java 进行 JDBC 数据库编程的相关类/接口</span></span><br><span class="line">java.awt  <span class="comment">//包含了构成抽象窗口工具集（abstractwindowtoolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。B/S  C/S</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="MVC-设计模式"><a href="#MVC-设计模式" class="headerlink" title="MVC 设计模式"></a>MVC 设计模式</h4><ul><li><p>MVC 是常用的设计模式之一，将整个程序分为三个层次：视图模型层，控制器层，数据模型层</p></li><li><p>这种将程序输入输出、数据处理以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程序的耦合性</p></li><li><p>模型层 model 主要处理数据</p><ul><li>数据对象封装 model bean/domain</li><li>数据库操作类 model.dao</li><li>数据库 model. db</li></ul></li><li><p>控制层 controller 处理业务逻辑</p><ul><li>应用界面相关 controller.activity</li><li>存放 fragment/controller.fragment</li><li>显示列表的适配器 controller.adapter</li><li>服务相关的 controller.service</li><li>抽取的基类 controller.base</li></ul></li><li><p>视图层 vieW 显示数据</p><ul><li>相关工具类 view.utils</li><li>自定义 vIew/view.ul</li></ul></li></ul><h4 id="import-关键字"><a href="#import-关键字" class="headerlink" title="import 关键字"></a>import 关键字</h4><ul><li>在源文件中显式的使用 import 结构导入指定包下的类、接口，声明在包的声明和类的声明之间</li><li>如果导入的类或接口是 <code>java.lang</code> 包下的，或者是当前包下的，则可以省略此 import 语句<ul><li>如果在代码中使用不同包下的同名的类，需要使用类的全类名的方式指明调用的是哪个类</li><li>已经导入 <code>java.a</code> 包下的类时，如果需要使用 a 包的子包下的类的话，仍然需要导</li><li>import static：调用指定类或接口下的静态的属性或方法</li></ul></li></ul><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><ul><li><p>一旦子类 A 继承父类以后，子类 A 中就获取了父类 B 中声明的结构（属性、方法）</p><ul><li><p>如果父类中声明为 private 的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构，只有因为封装性的影响，使得子类不能直接调用父类的结构而已</p></li><li><p>子类继承父类以后，还可以声明自己特有的属性或方法，实现功能的拓展</p></li><li><p>子类和父类的关系不同于子集与集合的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;&#125;</span><br><span class="line"><span class="comment">//A：子类、派生类、subclass</span></span><br><span class="line"><span class="comment">//B：父类、超类、基类、superclass</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Java 中关于继承性的规定</p><ul><li>一个类可以被多个类继承</li><li>类的单继承性：一个类只能有一个父类</li><li>子父类是相对的概念。</li><li>子类直接继承的父类，称为直接父类。间接继承的父类，称为间接父类。</li><li>子类继承父类后，就获取了直接父类以及所有间接父类中声明的属性和方法</li><li>如果没有显式的声明一个类的父类的话，则此类继承于 <code>java.lang.Object</code> 类</li><li>所有的 java 类具有 <code>java.lang.Object</code> 类声明的功能（直接或间接继承）</li></ul></li></ul><h3 id="方法的重写（override-overwrite）"><a href="#方法的重写（override-overwrite）" class="headerlink" title="方法的重写（override/overwrite）"></a>方法的重写（override/overwrite）</h3><ul><li><p>重写：子类继承父类以后，可以对父类中的方法进行覆盖操作</p></li><li><p>重写以后，当创建子类对象以后，通过子类对象去调用子父类中同名同参数方法时，执行的是子类重写父类的方法（即在程序执行时，子类的方法将覆盖父类的方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">权限修饰符 返回值类型 方法名(形参列表)&#123;</span><br><span class="line"><span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类重写的方法的方法名和形参列表必须和父类被重写的方法的方法名、形参列表相同</p></li><li><p>子类重写的方法使用的访问权限不能小于父类被重写的方法的访问权限</p></li><li><p>子类不能重写父类中声明为 private 权限的方法</p></li><li><p>子类方法抛出的异常不能大于父类被重写的方法抛出的异常</p></li><li><p>子类与父类中同名同参数的方法必须同时声明为非 static 的（即为重写），或者同时声明为 static 的（不是重写），因为 static 方法是属于类的，子类无法覆盖父类的方法</p></li><li><p>方法的重载与重写</p><ul><li>方法的重写 Overriding 和重载 Overloading 是 Java 多态性的不同表现</li><li>重写 Overriding 是父类与子类之间多态性的一种表现，重载 Overloading 是一个类中多态性的一种表现</li><li>如果在子类中定义某方法与其父类有相同的名称和参数，该方法被重写 Overriding</li><li>子类的对象使用这个方法时，将调用子类中的定义，对它而言父类中的定义被屏蔽了</li><li><p>如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载 Overloading</p></li><li><p>返回值类型</p></li><li>父类被重写的方法的返回值类型是 void，则子类重写的方法的返回值类型只能是 void</li><li>父类被重写的方法的返回值类型是 A 类型，则子类重写的方法的返回值类型可以是 A 类或 A 类的子类</li><li>父类被重写的方法的返回值类型如果是基本数据类型，则子类重写的方法的返回值类型必须是相同的基本数据类型</li></ul></li></ul><h3 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h3><ul><li>super：父类的，可以用来调用属性、方法、构造器 </li><li>可以在子类的方法或构造器中，通过 <code>super.属性</code> 或 <code>super.方法</code> 显式的调用父类中声明的属性或方法（通常情况下省略这个）</li><li>当子类和父类中定义了同名的属性时，要想在子类中调用父类中声明的属性，则必须显式的使用 <code>super.属性</code>  表明调用的是父类中声明的属性</li><li>当子类重写了父类中的方法后，想在子类的方法中调用父类中被重写的方法时，必须显式的使用 <code>super.方法</code>  表明调用的是父类中被重写的方法</li><li>super 调用构造器<ul><li>可以在子类的构造器中显式的使用 <code>super(形参列表)</code> 调用父类中声明的指定的构造器</li><li><code>super(形参列表)</code> 的使用必须声明在子类构造器的首行</li><li>在类的构造器中，针对于 <code>this(形参列表)</code> 或 <code>super(形参列表)</code> 只能二选一，不能同时出现</li><li>在构造器的首行，既没有显式的声明 <code>this(形参列表)</code> 或 <code>super(形参列表)</code> 则默认的调用的是父类中的空参构造器 <code>super()</code></li><li>在类的多个构造器中，至少有一个类的构造器使用了 <code>super(形参列表)</code> 调用父类中的构造器</li></ul></li></ul><h3 id="子类对象实例化过程"><a href="#子类对象实例化过程" class="headerlink" title="子类对象实例化过程"></a>子类对象实例化过程</h3><ul><li>从结果上看<ul><li>子类继承父类以后，就获取了父类中声明的属性或方法</li><li>创建子类的对象中，在堆空间中，就会加载所有父类中声明的属性</li><li>从过程上看</li><li>通过子类的构造器创建子类对象时，一定会直接或间接的调用其父类构造器， 直到调用了 <code>java.lang.Object</code> 类中空参的构造器为止</li><li>正因为加载过所有的父类结构，所以才可以看到内存中有父类中的结构，子类对象可以考虑进行调用</li><li>虽然创建子类对象时调用了父类的构造器，但自始至终就创建过一个对象，即为 <code>new</code> 的子类对象</li></ul></li></ul><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><ul><li>父类的引用指向子类的对象（或子类的对象赋值给父类的引用）</li><li>多态的使用：当调用子父类同名同参数方法时，实际调用的是子类重写父类的方法（虚拟方法调用）</li><li>有了对象多态性以后，在编译期，只能调用父类声明的方法，但在执行期实际执行的是子类重写父类的方法<ul><li>编译时，看左边，看的是父类的引用（父类中不具备子类特有的方法）</li><li>运行时，看右边，看的是子类的对象（实际运行的是子类重写父类的方法）</li></ul></li><li>多态性的使用前提：类的继承关系、方法的重写<ul><li>对象的多态性只适用于方法，不适用于属性（编译和运行都看左边）</li></ul></li><li>多态是运行时行为</li></ul><h4 id="虚拟方法"><a href="#虚拟方法" class="headerlink" title="虚拟方法"></a>虚拟方法</h4><ul><li><p>重载是指允许存在多个同名方法，而这些方法的参数不同，编译器根据方法不同的参数表，对同名方法的名称做修饰</p></li><li><p>对于编译器而言，这些同名方法就成了不同的方法，它们的调用地址在编译期就绑定了</p></li><li><p>Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。所以对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为早绑定或静态绑定</p></li><li><p>而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为晚绑定或动态绑定</p><blockquote><p>不要犯傻，如果它不是晚绑定，它就不是多态。—— Bruce Eckel</p></blockquote></li></ul><h4 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h4><ul><li><p>使用强制类型转换符调用子类所特有的属性和方法</p></li><li><p>可能出现 ClassCastException 异常</p></li><li><p>进行向下转型之前，先进行 <code>instanceof</code> 的判断，返回 true 就进行向下转型，返回 false 不进行向下转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p2 <span class="keyword">instanceof</span> Man) &#123;</span><br><span class="line"><span class="type">Man</span> <span class="variable">m2</span> <span class="operator">=</span> (Man) p2;</span><br><span class="line">m2.earnMoney();</span><br><span class="line">System.out.println(<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Object-类的使用"><a href="#Object-类的使用" class="headerlink" title="Object 类的使用"></a>Object 类的使用</h3><ul><li><p>Object 类是所有 Java 类的根父类</p></li><li><p>如果在类的声明中未使用 extends 关键字指明其父类，则默认父类为 <code>java.lang.Object</code>  类</p></li><li>Object 类中的功能（属性、方法）具有通用性<ul><li>方法：<code>equals()、toString()、getClass()、hashCode()、clone()、finalize()、wait() 、notify()、notifyAll()</code></li><li>Object类只声明了一个空参的构造器</li></ul></li></ul><h4 id="final、finally、finalize的区别"><a href="#final、finally、finalize的区别" class="headerlink" title="final、finally、finalize的区别"></a>final、finally、finalize的区别</h4><ul><li>被 final 修饰符（关键字）修饰的类，不能再派生出新的子类，不能作为父类而被子类继承<ul><li>一个类不能既被 abstract 声明，又被 final 声明</li><li>将变量或方法声明为 final，可以保证他们在使用的过程中不被修改</li><li>被声明为 final 的变量必须在声明时给出变量的初始值，而在以后的引用中只能读取</li><li>被 final 声明的方法也同样只能使用，即不能被子类重写</li><li>final 修饰局部变量（尤其是使用 final 修饰形参）时，表明此形参是一个常量，当我们调用此方法时，给常量形参赋一个实参，一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值</li><li>static final 用来修饰全局常量</li></ul></li><li>finally 是在异常处理时提供 finally 块来执行任何清除操作，不管有没有异常被抛出、捕获，finally块都会被执行<ul><li>try 块中的内容是在无异常时执行到结束</li><li>catch 块中的内容是在 try 块内容发生 catch 所声明的异常时跳转到 catch 块中执行</li><li>finally 块则是无论异常是否发生都会执行 finally 块的内容，所以在代码逻辑中有需要无论发生什么都必须执行的代码，就可以放在 finally 块中</li></ul></li><li>Java技术允许使用 <code>finalize()</code> 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作<ul><li>这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的</li><li>它是在 object 类中定义的，因此所有的类都继承了它，子类覆盖 <code>finalize()</code> 方法以整理系统资源或者被执行其他清理工作</li><li><code>finalize()</code> 方法是在垃圾收集器删除对象之前对这个对象调用的</li></ul></li></ul><h4 id="操作符与-equals-方法"><a href="#操作符与-equals-方法" class="headerlink" title="== 操作符与 equals 方法"></a>== 操作符与 equals 方法</h4><ul><li><p>== 运算符可以使用在基本数据类型变量和引用数据类型变量中</p><ul><li>如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等（类型不一定要相同）</li><li>如果比较的是引用数据类型变量：比较两个对象的地址值是否相同（两个引用是否指向同一个对象实体）</li></ul></li><li><p><code>equals()</code> 是一个方法，而非运算符，只能适用于引用数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;        <span class="comment">//Object 类中 equals() 的定义，和 == 的作用相同</span></span><br></pre></td></tr></table></figure></li><li><p>重写 equals() 方法</p><ul><li>对称性、自反性、传递性、一致性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">Customer</span> <span class="variable">other</span> <span class="operator">=</span> (Customer) obj;</span><br><span class="line"><span class="keyword">if</span> (age != other.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.name != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;        <span class="comment">//重写原则，比较两个对象的实体内容（name和age）是否相同</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><ul><li><p>输出一个引用对象时，实际上就是调用当前对象的 <code>toString()</code></p></li><li><p>自定义类如果重写 <code>toString()</code> 方法：当调用此方法时，返回对象的实体内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="包装类（Wrapper）"><a href="#包装类（Wrapper）" class="headerlink" title="包装类（Wrapper）"></a>包装类（Wrapper）</h3><h4 id="JUnit-单元测试"><a href="#JUnit-单元测试" class="headerlink" title="JUnit 单元测试"></a>JUnit 单元测试</h4><ul><li>选中当前项目工程 -&gt; 右键 build path-&gt; add libraries-&gt;  JUnit 4<ul><li>创建一个 Java 类进行单元测试。</li><li>此时的Java类要求：此类是公共的、此类提供一个公共的无参构造器、此类中声明单元测试方法</li><li>此时的单元测试方法：方法的权限是 public，没有返回值，没有形参</li><li>此单元测试方法上需要声明注解：<code>@Test</code> 并在单元测试类中调用：<code>import org.junit.Test;</code></li><li>声明好单元测试方法以后，就可以在方法体内测试代码</li><li>写好代码后 -&gt; 双击单元测试方法名 -&gt; 右键 run as -&gt; JUnit Test</li><li>如果执行结果无错误，则显示是一个绿色进度条，反之，错误即为红色进度条</li></ul></li></ul><h4 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h4><ul><li>Java提供了8种基本数据类型对应的包装类，使得基本数据类型的变量具有类的特征</li><li>byte -&gt; Byte，short -&gt; Short，int -&gt; Integer，long -&gt; Long，float -&gt; Float，double -&gt; Double，boolean -&gt; Boolean，char -&gt; Character</li><li>其中 Byte、Short、Integer、Long、Float、Double 的父类是 Number</li></ul><h4 id="包装类与基本数据类型相互转换"><a href="#包装类与基本数据类型相互转换" class="headerlink" title="包装类与基本数据类型相互转换"></a>包装类与基本数据类型相互转换</h4><ul><li>基本数据类型 -&gt; 包装类（装箱）<ul><li>通过构造器：<code>Integer t = new Integer(11);</code></li><li>通过字符串参数：<code>Float f = new float(&quot;32.1F&quot;);</code></li><li>自动装箱</li></ul></li><li>包装类 -&gt; 基本数据类型（拆箱）<ul><li>调用包装类的方法：<code>xxxValue()</code></li><li>自动拆箱</li></ul></li><li>String 类 -&gt; 基本数据类型<ul><li>调用相应的包装类的 <code>parseXxx(String)</code> 静态方法</li><li>通过包装类构造器: <code>boolean b = new Boolean (&quot;true&quot;);</code></li></ul></li><li>基本数据类型 -&gt; String 类<ul><li>String 类的 <code>valueof (3.4f)</code> 方法 2.23.4+””</li></ul></li><li>包装类 -&gt; String 类<ul><li>包装类对象的 <code>toString()</code> 方法</li><li>调用包装类的 <code>toString(形参)</code> 方法</li></ul></li><li>String 类 -&gt; 包装类：装箱</li></ul><h3 id="Static-关键字"><a href="#Static-关键字" class="headerlink" title="Static 关键字"></a>Static 关键字</h3><h4 id="static-的使用"><a href="#static-的使用" class="headerlink" title="static 的使用"></a>static 的使用</h4><ul><li><p>使用 static 修饰属性：静态变量（类变量）</p><ul><li><p>实例变量：创建类的多个对象，每个对象都独立的拥有了一套类中的非静态属性，当修改其中一个非静态属性时，不会导致其他对象中同样的属性值的修饰</p><ul><li>静态变量：创建类的多个对象，多个对象共享同一个静态变量，当通过静态变量去修改某一个变量时，会导致其他对象调用此静态变量时，是修改过的</li></ul></li><li><p>静态变量随着类的加载而加载，可以通过 <code>类.静态变量</code> 的方式进行调用</p></li><li><p>静态变量的加载要早于对象的创建，由于类只会加载一次，则静态变量在内存中也只会存在一次，存在方法区的静态域中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.Math.PI;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="static-修饰方法"><a href="#static-修饰方法" class="headerlink" title="static 修饰方法"></a>static 修饰方法</h4><ul><li>使用 static 修饰方法：静态方法</li><li>静态方法中，只能调用静态的方法或属性，非静态的方法中，可以调用所有的方法或属性</li><li>在静态的方法内，不能使用 this 关键字、super 关键字</li><li>操作静态属性的方法，通常设置为 static ，工具类中的方法，习惯上声明为 static （Math、Arrays、Collections）</li></ul><h4 id="单例（Singleton）设计模式"><a href="#单例（Singleton）设计模式" class="headerlink" title="单例（Singleton）设计模式"></a>单例（Singleton）设计模式</h4><ul><li>取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例</li><li>饿汉式：对象加载时间过长，但线程安全的</li><li>懒汉式：延迟对象的创建</li><li>由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决</li><li>Singleton 设计模式的应用场景<ul><li>网站的计数器</li><li>应用程序的日志应用，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加</li><li>数据库连接池，因为数据库连接是一种数据库资源。</li><li>项目中读取配置文件的类，一般也只有一个对象，没有必要每次使用配置文件数据，都生成一个对象去读取</li><li>Application、Windows 的 Task Manager、Recycle Bin</li></ul></li></ul><h3 id="代码块（初始化块）"><a href="#代码块（初始化块）" class="headerlink" title="代码块（初始化块）"></a>代码块（初始化块）</h3><ul><li>用来初始化类、对象</li><li>代码块如果有修饰的话，只能使用 static</li><li>静态代码块：初始化类的信息<ul><li>内部可以有输出语句</li><li>随着类的加载而执行，而且只执行一次</li><li>如果一个类中，定义了多个静态代码块，则按照声明的先后顺序执行</li><li>静态代码块的执行，优先于非静态代码块的执行</li><li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li></ul></li><li>非静态代码块：可以在创建对象时，对对象的属性等进行初始化<ul><li>内部可以有输出语句</li><li>随着对象的创建而执行</li><li>每创建一个对象，就执行一次非静态代码块</li><li>如果一个类中，定义了多个非静态代码块，则按照声明的先后顺序执行</li><li>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</li></ul></li><li>对属性可以赋值的位置<ul><li>默认初始化、显式初始化、构造器中初始化</li><li>有了对象以后，可以通过 <code>对象.属性</code> 或 <code>对象.方法</code> 的方式进行赋值</li><li>在代码块中赋值</li></ul></li></ul><h3 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h3><ul><li>Java 允许类设计者指定超类声明一个方法但不提供实现，该方法的实现由子类提供</li><li>这样的方法称为抽象方法，有一个或更多抽象方法的类称为抽象类</li></ul><h4 id="abstract-关键字的使用"><a href="#abstract-关键字的使用" class="headerlink" title="abstract 关键字的使用"></a>abstract 关键字的使用</h4><ul><li>abstract 修饰抽象类<ul><li>此类不能实例化<ul><li>抽象类中一定有构造器，便于子类实例化时调用</li><li>开发中都会提供抽象类的子类，让子类对象实例化，实现相关的操作</li></ul></li><li>abstract 修饰抽象方法<ul><li>抽象方法：只有方法的声明，没有方法体</li><li>包含抽象方法的类，一定是一个抽象类，但抽象类中可以没有抽象方法</li></ul></li><li>abstract 不能用来修饰变量、代码块、构造器</li><li>abstract 不能用来修饰私有方法、静态方法、final 的方法、final 的类</li></ul></li></ul><h4 id="模板方法设计模式（TemplateMethod）"><a href="#模板方法设计模式（TemplateMethod）" class="headerlink" title="模板方法设计模式（TemplateMethod）"></a>模板方法设计模式（TemplateMethod）</h4><ul><li>抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式</li><li>模板模式：在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了，但是某些部分易变，易变部分可以抽象出来，供不同子类实现</li><li>常见的模板方法设计模式<ul><li>数据库访问的封装</li><li>Junit 单元测试</li><li>JavaWeb 的 Servlet 中关于 doGet/doPost 方法调用</li><li>Hibernate 中模板程序</li><li>Spring 中 JDBCTemlate、HibernateTemplate 等</li></ul></li></ul><h3 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h3><ul><li>接口是抽象方法和常量值定义的集合，用 interface 来定义</li><li>接口中的所有成员变量都默认是由 <code>public static final</code> 修饰的，接口中的所有抽象方法都默认是由 <code>public abstract</code> 修饰的</li><li>接口中没有构造器，意味着接口不可以实例化</li><li>JDK8 后除了全局常量和抽象方法之外，还可以定义静态方法、默认方法</li><li>接口和类是并列的两个结构</li><li>接口通过让类去实现 implements 使用，如果实现类覆盖了接口中的所有方法，则此实现类就可以实例化，如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</li><li>Java 类可以实现多个接口 ，弥补了 Java 单继承性的局限性，接口与接口之间是继承,而且可以多继承</li><li>接口的具体使用，体现多态性 ，主要用途就是被实现类实现，实际可以看作是一种规范</li></ul><h4 id="代理模式（Proxy）"><a href="#代理模式（Proxy）" class="headerlink" title="代理模式（Proxy）"></a>代理模式（Proxy）</h4><ul><li>代理设计就是为其他对象提供一种代理以控制对这个对象的访问</li><li>分类<ul><li>静态代理（静态定义代理类）</li><li>动态代理（动态生成代理类）：JDK 自带的动态代理</li></ul></li><li>应用场景<ul><li>安全代理：屏蔽对真实角色的直接访问。</li><li>远程代理：通过代理类处理远程方法调用（RMI）</li><li>延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象</li></ul></li></ul><h4 id="接口和抽象类之间的对比"><a href="#接口和抽象类之间的对比" class="headerlink" title="接口和抽象类之间的对比"></a>接口和抽象类之间的对比</h4><div class="table-container"><table><thead><tr><th>区别点</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>定义</td><td>包含抽象方法的类</td><td>主要是抽象方法和全局常量的集合</td></tr><tr><td>组成</td><td>构造方法、抽象方法、普通方法、常量、变量</td><td>常量、抽象方法、默认方法、静态方法</td></tr><tr><td>使用</td><td>子类继承抽象类（extends）</td><td>子类实现接口（implements）</td></tr><tr><td>关系</td><td>抽象类可以实现多个接口</td><td>接口不能继承抽象类，但允许继承多个接口</td></tr><tr><td>常见设计模式</td><td>模板方法</td><td>简单工厂、工厂方法、代理模式</td></tr><tr><td>对象</td><td>都通过对象的多态性产生实例化对象</td><td></td></tr><tr><td>局限</td><td>抽象类有单继承的局限</td><td>接口没有此局限</td></tr><tr><td>实际</td><td>作为一个模板</td><td>是作为一个标准或是表示一种能力</td></tr><tr><td>选择</td><td>如果抽象类和接口都可以使用的话，优先使用接口，因为避免单继承的局限</td></tr></tbody></table></div><h4 id="Java-8-中关于接口的改进"><a href="#Java-8-中关于接口的改进" class="headerlink" title="Java 8 中关于接口的改进"></a>Java 8 中关于接口的改进</h4><ul><li>静态方法<ul><li>使用 static 关键字修饰，可以通过接口直接调用静态方法，并执行其方法体</li><li>经常在相互一起使用的类中使用静态方法，可以在标准库中找到像 Collection/Collections 或者 Path/Paths 这样成对的接口和类</li></ul></li><li>默认方法<ul><li>默认方法使用 default 关键字修饰，可以通过实现类对象来调用</li><li>在已有的接口中提供新方法的同时，还保持了与旧版本代码的兼容性，如：java 8 API 中对 Collection、List、Comparator 等接口提供了丰富的默认方法</li></ul></li></ul><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><ul><li>Java 中允许将一个类 A 声明在另一个类 B 中，则类 A 就是内部类，类 B 就是外部类</li><li>成员内部类<ul><li>作为外部类的成员，调用外部类的结构，可以被static修饰，可以被4种不同的权限修饰</li><li>作为一个类，类内可以定义属性、方法、构造器等，可以被 final 修饰，表示此类不能被继承。言外之意，不使用 final，就可以被继承，可以 abstract 修饰</li></ul></li></ul><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><ul><li><p>匿名内部类不能定义任何静态成员、方法和类，只能创建匿名内部类的一个实例</p></li><li><p>一个匿名内部类一定是在 new 的后面，用其隐含实现一个接口或实现一个类</p></li><li><p>匿名内部类必须继承父类或实现接口 ，=只能有一个对象，匿名内部类对象只能使用多态形式引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类构造器（实参列表）|实现接口()&#123;</span><br><span class="line"> <span class="comment">//匿名内部类的类体部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><ul><li>方法内、代码块内、构造器内</li><li>局部内部类的方法中（如：show）如果调用局部内部类所声明的方法（如：method）中的局部变量（如：num）的话，要求此局部变量声明为 final 的</li><li>jdk 8及之后的版本可以省略 final 的声明</li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul><li>将程序执行中发生的不正常情况称为异常，开发过程中的语法错误和逻辑错误不是异常</li><li>Error：Java 虚拟机无法解决的严重问题，如：JVM系统内部错误、资源耗尽等严重情况<ul><li>StackOverflowError 和 OutOfMemoryError：一般不编写针对性的代码进行处理</li></ul></li><li>Exception：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理<ul><li>空指针访问、试图读取不存在的文件、网络连接中断、数组角标越界</li></ul></li><li>解决方法：遇到错误就终止程序的运行，或在编写程序时，就考虑到错误的检测、错误消息的提示，以及错误的处理</li><li>捕获错误最理想的是在编译期间，但有的错误只有在运行时才会发生，如：除数为0，数组下标越界等</li></ul><h4 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h4><ul><li>运行时异常<ul><li>编译器不要求强制处置的异常，一般是指编程时的逻辑错误，是程序员应该积极避免其出现的异常</li><li><code>java.lang.RuntimeException</code> 类及它的子类都是运行时异常</li><li>对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响</li></ul></li><li>编译时异常<ul><li>编译器要求必须处置的异常，即程序在运行时由于外界因素造成的一般性异常</li><li>编译器要求 Java 程序必须捕获或声明所有编译时异常</li><li>对于这类异常，如果程序不处理，可能会带来意想不到的后果</li></ul></li></ul><h4 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h4><ul><li><p>try</p><ul><li>用 try{…} 语句块选定捕获异常的范围，将可能出现异常的代码放在 try 语句块中</li></ul></li><li><p>catch(Exceptiontypee)</p><ul><li>在 catch 语句块中是对异常对象进行处理的代码，每个 try 语句块可以伴随一个或多个 catch 语句，用于处理可能产生的不同类型的异常对象</li><li>捕获异常的有关信息与其它对象一样，可以访问一个异常对象的成员变量或调用它的方法</li><li>getMessage() 获取异常信息，返回字符串</li><li>printStackTrace() 获取异常类名和异常信息，以及异常出现在程序中的位置，返回值 void</li></ul></li><li><p>finally</p><ul><li>通过 finally 语句为异常处理提供一个统一的出口，使得在控制流转到程序的其它部分以前，能够对程序的状态作统一的管理</li><li>不论在 try 代码块中是否发生了异常事件、catch 语句是否执行、catch语 句是否有异常、catch 语句中是否有 return，finally 块中的语句都会被执行</li><li>像数据库连接、输入输出流、网络编程 Socket 等资源，JVM 是不能自动的回收的，我们需要自己手动的进行资源的释放，此时的资源释放，就需要声明在 finally 中</li><li>finally 语句和 catch 语句是任选的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 变量名<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//处理异常的方式1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 变量名<span class="number">2</span>)&#123;</span><br><span class="line"> <span class="comment">//处理异常的方式2</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//一定会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h4><ul><li>声明抛出异常是 Java 中处理异常的第二种方式<ul><li>如果一个方法中的语句执行时可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理</li><li>在方法声明中用 throws 语句可以声明抛出异常的列表，throws 后面的异常类型可以是方法中产生的异常类型，也可以是它的父类</li></ul></li><li><code>throws + 异常类型</code> 写在方法的声明处，指明此方法执行时，可能会抛出的异常类型</li></ul><h4 id="用户自定义异常类"><a href="#用户自定义异常类" class="headerlink" title="用户自定义异常类"></a>用户自定义异常类</h4><ul><li>一般用户自定义异常类都是 <code>RuntimeException</code> 的子类</li><li>自定义异常类通常需要编写几个重载的构造器，需要提供 serialVersionUID</li><li>自定义的异常通过throw抛出</li><li>如何自定义异常类<ol><li>继承于现有的异常结构：RuntimeException 、Exception</li><li>提供全局常量：serialVersionUID</li><li>提供重载的构造器</li></ol></li></ul><h3 id="课程代码"><a href="#课程代码" class="headerlink" title="课程代码"></a>课程代码</h3><ul><li>课程代码已上传 <a href="https://github.com/Bezhuang/LearnCS/tree/main/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B">Github 仓库</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Data Science Methodology</title>
      <link href="/Data-Science-Methodology/"/>
      <url>/Data-Science-Methodology/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Despite the recent increase in computing power and access to data over the last couple of decades, our ability to use the data within the decision making process is either lost or not maximized at all too often, we don’t have a solid understanding of the questions being asked and how to apply the data correctly to the problem at hand. This course provided by IBM shares a methodology that can be used within data science, to ensure that the data used in problem solving is relevant and properly manipulated to address the question at hand. The following are the notes I took during this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Data-Science-Methodology.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/pdf/Introduction-to-DS.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Data-Science-Methodologies"><a href="#Data-Science-Methodologies" class="headerlink" title="Data Science Methodologies"></a>Data Science Methodologies</h3><ul><li>Methodology: a system of methods used in a particular area of study.</li><li>CRISP-DM: the Cross Industry Process for Data Mining methodology.<ul><li>The CRISP-DM methodology is a process aimed at increasing the use of data mining over a wide variety of business applications and industries. </li><li>The intent is to take case specific scenarios and general behaviors to make them domain neutral. </li><li>CRISP-DM is comprised of six steps with an entity that has to implement in order to have a reasonable chance of success.</li><li>Business Understanding、Data Understanding、Data Preparation、Modeling、Evaluation、Deployment</li><li>CRISP-DM is a highly flexible and cyclical model. Flexibility is required at each step along with communication to keep the project on track. </li><li>At any of the six stages, it may be necessary to revisit an earlier stage and make changes. The key point of this process is that it’s cyclical.</li></ul></li></ul><h3 id="From-Problem-to-Approach"><a href="#From-Problem-to-Approach" class="headerlink" title="From Problem to Approach"></a>From Problem to Approach</h3><ul><li>Business Understanding<ul><li>Establishing a clearly defined question starts with understanding the goal of the person asking the question</li><li>Seek clarification (where is the goal) -&gt; Support the goal -&gt; Get stakeholder “buy-in” and support</li><li>Case Study: Apply concepts, Define Goals and objectives, Pilot project kickoff, Identify the business requirements</li></ul></li><li>Analytic Approach<ul><li>Once a strong understanding of the question is established, the analytic approach can be selected. This means identifying what type of patterns will be needed to address the question most effectively</li><li>The correct approach depends on business requirements for the model</li><li>If the question is to determine probabilities of an action, Use a predictive model </li><li>If the question is to show relationships, Use a descriptive model</li><li>if the question requires a yes/no answer, Use a classification model</li><li>It is only when the problem to be addressed is defined, that the appropriate analytic approach for the problem can be selected in the context of the business requirements</li><li>Case Study: Decision tree classification (Predictive model)</li></ul></li></ul><h3 id="From-Requirements-to-Collection"><a href="#From-Requirements-to-Collection" class="headerlink" title="From Requirements to Collection"></a>From Requirements to Collection</h3><ul><li>Data Requirements<ul><li>The Data Requirements stage of the data science methodology involves identifying the necessary data content, formats and sources for initial data collection.</li><li>Prior to undertaking the data collection and data preparation stages of the methodology, it’s vital to define the data requirements for decision-tree classification. This includes identifying the necessary data content, formats and sources for initial data collection</li><li>Case Study: Select the cohort, Define the data</li></ul></li><li>Data Collection<ul><li>Once the data ingredients are collected, then in the data collection stage, the data scientist will have a good understanding of what they will be working with</li><li>Techniques such as descriptive statistics and visualization can be applied to the data set, to assess the content, quality, and initial insights about the data. Gaps in data will be identified and plans to either fill or make substitutions will have to be made</li><li>When collecting data, it is alright to defer decisions about unavailable data, and attempt to acquire it at a later stage</li><li>Case Study: Gather available data, Merge data</li></ul></li></ul><h3 id="From-Understanding-to-Preparation"><a href="#From-Understanding-to-Preparation" class="headerlink" title="From Understanding to Preparation"></a>From Understanding to Preparation</h3><ul><li>Data Understanding<ul><li>Descriptive statistics: Univariate statistics, Pairwise correlations, Histogram</li><li>Data quality: Missing value, Invalid or misleading values</li><li>Iterative data collection and understanding: Refined definition of “CHF admission”</li><li>Data understanding is iterative; you learn more about your data the more you study it</li><li>Sorting data is not part of the Data Understanding stage</li></ul></li><li>Data Preparation<ul><li>Cleansing data</li><li>Transforming data</li><li>Feature engineering is the process of using domain knowledge of the data to create features that make the machine learning algorithms work</li><li>Feature engineering is critical when machine learning tools are being applied to analyze the data</li><li>The Data Preparation stage is in fact the most time-consuming phase of a data science project</li><li>Using training sets</li></ul></li></ul><h3 id="From-Modeling-to-Evaluation"><a href="#From-Modeling-to-Evaluation" class="headerlink" title="From Modeling to Evaluation"></a>From Modeling to Evaluation</h3><ul><li>Modeling<ul><li>Descriptive Analytics</li><li>Predictive Analytics</li><li>A training set is used to build a predictive model</li><li>Understand the question at hand -&gt; Select an analytic approach or method to solve the problem -&gt; Obtain, understand, prepare and model the data</li></ul></li><li>Evaluation<ul><li>Diagnostic measures: Predictive model, Descriptive model, Statistical significance</li><li>Diagnostic tool for classification model evaluation<ul><li>Classification model performance </li><li>True-Positive Rate <code>vs</code> False-Positive Rate</li><li>Optimal model at maximum separation</li></ul></li><li>Model evaluation can have two main phases: a diagnostic measures phase and statistical significance testing</li></ul></li><li>The purpose of statistical significance tests: Modeling and evaluation are iterative processes</li></ul><h3 id="From-Deployment-to-Feedback"><a href="#From-Deployment-to-Feedback" class="headerlink" title="From Deployment to Feedback"></a>From Deployment to Feedback</h3><ul><li>Deployment<ul><li>Understand the results</li><li>Gather application requirements</li><li>After the model is evaluated and the data scientist is confident it will work, it is deployed and put to the ultimate test</li><li>The refined model must be redeployed</li><li>This process should be repeated as often as necessary</li></ul></li><li>Feedback<ul><li>Assessing model performance</li><li>Refine model: Review and refine intervention actions</li><li>Redeployment: Continue modeling, deployment, feedback and refinement throughout the life of the Intervention program</li><li>The data science methodology is highly iterative, ensuring the refinement at each stage in the game</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 的配置与使用总结</title>
      <link href="/IDEA%E9%85%8D%E7%BD%AE/"/>
      <url>/IDEA%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>IntelliJ IDEA 被公认为是最好的 Java 开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE 支持、Ant、JUnit、CVS 整合、代码审查、创新的GUI 设计等方面的功能可以说是超常的。相较于 Eclipse 而言，IDEA 增加了强大的整合能力、好用的快捷键和代码模板以及精准搜索，一些新的特性非常有必要学习熟悉。我目前使用的是 IDEA Ultimate 2021.2 版本，本篇笔记也是对最新版 IDEA 项目的创建、模板的使用、断点调试、数据库的关联、插件的下载、Maven及版本控制工具的配置等内容的一些总结。</p></blockquote><span id="more"></span><h3 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h3><ul><li><code>bin</code>：容器，执行文件和启动参数等<ul><li><code>idea.exe.vmoptions</code>：VM 配置文件</li><li><code>idea.properties</code>：IDEA 属性配置文件</li></ul></li><li><code>help</code>：快捷键文档和其他帮助文档</li><li><code>jre64</code>：64 位 java 运行环境 </li><li><code>lib</code>：IDEA 依赖的类库 </li><li><code>license</code>：各个插件许可 </li><li><code>plugin</code>：插件</li></ul><h3 id="设置目录"><a href="#设置目录" class="headerlink" title="设置目录"></a>设置目录</h3><h4 id="config-目录"><a href="#config-目录" class="headerlink" title="config 目录"></a>config 目录</h4><ul><li>IDE 主要配置功能、自定义的代码模板、自定义的文件模板、自定义的快捷键、Project 的 tasks 记录等个性化配置</li></ul><h4 id="system-目录"><a href="#system-目录" class="headerlink" title="system 目录"></a>system 目录</h4><ul><li>缓存、索引、容器文件输出等</li></ul><h3 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h3><ul><li>IntelliJ IDEA 没有类似 Eclipse 的工作空间的概念（ Workspaces），最大单元就是 Project</li><li>Eclipse 中 Workspace 相当于 IDEA 中的 Project</li><li>Project 下的 <code>src</code> 类似于 Eclipse 下的 <code>src</code> 目录，用于存放代码</li><li>Project 下的 <code>.idea</code> 和 <code>projectname.iml</code> 文件都是 IDEA 工程特有的，类似于 Eclipse 工程下的 <code>.settings</code>、<code>.classpath</code>、<code>.project</code> 等</li></ul><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><ul><li>Eclipse 中 Project 相当于 IDEA 中的 Module</li><li>在 IntelliJ IDEA 中 Project 是最顶级的级别，次级别是 Module</li><li>一个 Project 可以有多个 Module。目前主流的大型项目都是分布式部署的， 结构都是类似这种多 Module 结构</li></ul><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><ul><li><p>Editor -&gt; General</p><ul><li>Change font size with <code>Ctrl</code> + Mouse Wheel</li></ul></li><li><p>Editor -&gt; General -&gt; Auto Import</p><ul><li><p>Add unambiguous imports on the fly</p></li><li><p>Optimize imports on the fly</p></li></ul></li><li><p>Editor -&gt; General -&gt; Appearance</p><ul><li>Show line numbers</li><li>Show method separators</li></ul></li><li><p>Editor -&gt; General -&gt; Code Completion</p><ul><li>取消 Match Case</li></ul></li><li><p>Editor -&gt; General -&gt; Editor Tabs</p><ul><li>取消 Show tabs in one row </li></ul></li><li><p>Editor -&gt; File and Code Templates -&gt; Includes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> Bezhuang</span></span><br><span class="line"><span class="comment"><span class="doctag">@create</span> $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;TIME&#125; </span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure></li><li><p>Editor -&gt; File Encodings</p><ul><li>Global / Project / Default encoding: <code>UTF-8</code></li><li>Transparent native-to-ascii conversion</li></ul></li><li><p>Build, Execution, Deployment -&gt; Compiler</p><ul><li>Build project automatically（如果电脑带不动取消）</li><li>Compile independent modules in parallel</li></ul></li></ul><h3 id="Keymap"><a href="#Keymap" class="headerlink" title="Keymap"></a>Keymap</h3><div class="table-container"><table><thead><tr><th>快捷键</th><th>实现效果</th></tr></thead><tbody><tr><td>Ctrl + X</td><td>删除当前行</td></tr><tr><td>Ctrl +D</td><td>复制当前行</td></tr><tr><td>Alt+Insert（右键Generate）</td><td>get、set方法，构造函数等</td></tr><tr><td>Ctrl+Alt+T</td><td><code>try catch</code>（Alt+enter选择）</td></tr><tr><td>CTRL+ALT+T</td><td>把选中的代码放在 <code>TRY&#123;&#125;</code> <code>IF&#123;&#125;</code> <code>ELSE&#123;&#125;</code> 里</td></tr><tr><td>Ctr+shift+U</td><td>大小写之间转化</td></tr><tr><td>ALT+回车</td><td>导入包，自动修正</td></tr><tr><td>CTRL+ALT+L</td><td>格式化代码</td></tr><tr><td>CTRL+ALT+I</td><td>自动缩进</td></tr><tr><td>CTRL+E</td><td>最近更改的代码</td></tr><tr><td>Alt + 左右键</td><td>多窗口</td></tr><tr><td>Ctrl + 鼠标点击</td><td>快速找到成员变量的出处</td></tr><tr><td>Shift+F6</td><td>重构/重命名 (包、类、方法、变量、甚至注释等)</td></tr><tr><td>CTRL+Q</td><td>查看当前方法的声明</td></tr><tr><td>Ctrl+Alt+V</td><td><code>new 对象();</code>（自动创建变量）</td></tr><tr><td>Ctrl+O</td><td>重写方法</td></tr><tr><td>Ctrl+I</td><td>实现方法</td></tr><tr><td>ALT+/</td><td>代码提示</td></tr><tr><td>Ctrl+Shift+R</td><td>在当前项目中替换指定内容</td></tr><tr><td>Ctrl+E</td><td>最近编辑的文件列表</td></tr><tr><td>Ctrl+P</td><td>显示方法参数信息</td></tr><tr><td>Ctrl+Shift+Insert</td><td>查看历史复制记录</td></tr></tbody></table></div><h3 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h3><ul><li><p>Live Templates 可以自定义，而 Postfix Completion 不可以</p></li><li><p>psvm -&gt; <code>public static void main(String[] args)</code></p></li><li><p>sout -&gt; <code>System.out.println()</code> </p><ul><li>soutp -&gt; <code>System.out.println(&quot;方法形参名 = &quot; + 形参名);</code></li><li>soutv -&gt; <code>System.out.println(&quot;变量名 = &quot; + 变量);</code></li><li>soutm -&gt; <code>System.out.println(&quot;当前类名.当前方法&quot;);</code></li><li>“abc”.sout -&gt; <code>System.out.println(&quot;abc&quot;);</code></li></ul></li><li><p>fori -&gt; for 循环</p><ul><li>iter -&gt; 增强 for 循环</li><li>itar -&gt; 普通 for 循环</li></ul></li><li><p>list -&gt; <code>List&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p><ul><li>list.for -&gt; <code>for(String s:list)&#123;&#125;</code></li></ul></li></ul><ul><li>list.fori -&gt; 正序遍历</li><li>list.forr -&gt; 倒序遍历</li></ul><ul><li><p>ifn -&gt; <code>if(xxx = null)</code></p><ul><li>inn -&gt; <code>if(xxx != null)</code></li><li>xxx.nn</li><li>xxx.null</li></ul></li><li><p>prsf -&gt; <code>private static final</code></p><ul><li>psf -&gt; <code>public static final</code></li><li>psfi -&gt; <code>public static final int</code></li><li>psfs -&gt; <code>public static final String</code></li></ul></li></ul><h3 id="创建-Java-Web"><a href="#创建-Java-Web" class="headerlink" title="创建 Java Web"></a>创建 Java Web</h3><ul><li>Module 右键 -&gt; add Framework Support</li><li>配置本地 Tomcat 环境变量<ul><li>系统环境变量中新建 <code>CATALINA_HOME</code> 环境变量</li><li>修改 <code>Path</code> ： <code>%CATALINA_HOME%\lib</code>、<code>%CATALINA_HOME%\bin</code>、<code>%CATALINA_HOME%\lib\servlet-api.jar</code></li><li>Tomcat 文件夹下打开 Terminal：<code>catalina run</code> 启动 Tomcat</li></ul></li></ul><h3 id="关联数据库"><a href="#关联数据库" class="headerlink" title="关联数据库"></a>关联数据库</h3><ul><li>IDEA 的 Database 对于常使用的 ORM 框架，如 Hibernate、 Mybatis有很好的支持，比如配置好了 Database 之后，IDEA 会自动识别 domain 对象与数据表的关系，也可以通过 Database 的数据表直接生成 domain 对象等</li></ul><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul><li>IntelliJ IDEA 对版本控制的支持是以插件化的方式来实现的</li><li>IntelliJ IDEA 自带了 Github 插件，方便 Checkout 和管理 Github 项目</li><li>File -&gt; Setting -&gt; VCS (version control system)</li><li>VCS -&gt; Get from Version Control</li></ul><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><h4 id="Debug-的设置"><a href="#Debug-的设置" class="headerlink" title="Debug 的设置"></a>Debug 的设置</h4><ul><li>File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Debugger<ul><li>Java -&gt; Transport: Shared memory</li></ul></li></ul><h4 id="断点调试快捷键"><a href="#断点调试快捷键" class="headerlink" title="断点调试快捷键"></a>断点调试快捷键</h4><ul><li>step over：进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li><li>step into：进入下一步，如果当前行断点是一个方法，则进入当前方法体内</li><li>force step into：进入下一步，如果当前行断点是一个方法，则进入当前方法体内</li><li>step out：跳出</li><li>resume program：恢复程序运行，但如果该断点下面代码还有断点则停在下一个断点上</li><li>stop：停止</li><li>mute breakpoints：点中，使得所有的断点失效</li><li>view breakpoints：查看所有断点</li></ul><h4 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h4><ul><li>调试的时候，在循环里增加条件判断，可以极大的提高效率</li><li>在断点处右击调出条件断点，可以在满足某个条件下，实施断点</li><li>选择行后 CTRL + u，可以在查看框中输入编写代码时的其他方法</li></ul><h3 id="配置-Maven"><a href="#配置-Maven" class="headerlink" title="配置 Maven"></a>配置 Maven</h3><ul><li>自动化构建工具：Make -&gt; Ant -&gt; Maven -&gt; Gradle </li><li>Maven 使用了一个标准的目录结构和一个默认的构建生命周期，用于自动化构建和依赖管理</li><li>构建环节<ul><li>清理：表示在编译代码前将之前生成的内容删除</li><li>编译：将源代码编译为字节码</li><li>测试：运行单元测试用例程序</li><li>报告：测试程序的结果</li><li>打包：将 java 项目打成 jar 包，或将 Web 项目打成 war 包</li><li>安装：将 jar 或 war 生成到 Maven 仓库中</li><li>部署：将 jar 或 war 从 Maven 仓库中部署到 Web 服务器上运行</li></ul></li><li>File -&gt; Settings -&gt; Maven：选择自己Maven 的目录和 settings 文件，然后配置自己的本地仓库 repository</li><li>Maven 目录下有对应的生命周期，其中常用的是：clean、compile、package、install</li></ul><h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3><ul><li>生成 javadoc<ul><li>Tools -&gt; Generate JavaDoc</li><li>Locale（输入语言类型）：zh_CN </li><li>Other command line arguments: <code>-encoding UTF-8 -charset UTF-8</code></li></ul></li><li>缓存和索引的清理<ul><li>IntelliJ IDEA 首次加载项目的时候，都会创建索引，而创建索引的时间跟项目的文件多少成正比</li><li>IntelliJ IDEA 的缓存和索引主要是用来加快文件查询，从而加快各种查找、代码提示等操作的速度</li><li>某些特殊条件下，IntelliJ IDEA 的缓存和索引文件也是会损坏的，可以清理缓存和索引</li><li>File -&gt; Invalidate Caches / Restart</li></ul></li><li>插件<ul><li>File -&gt; Settings -&gt; Plugins</li><li><a href="https://plugins.jetbrains.com/">https://plugins.jetbrains.com/</a> </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tools for Data Science</title>
      <link href="/Tools-for-Data-Science/"/>
      <url>/Tools-for-Data-Science/</url>
      
        <content type="html"><![CDATA[<blockquote><p>In this course provided by IBM, I learned about Jupyter Notebooks, JupyterLab, RStudio IDE, Git, GitHub, and Watson Studio, what each tool is used for, what programming languages they can execute, their features and limitations. With the tools hosted in the cloud on Skills Network Labs, I can now run simple code in Python, R or Scala. The following are the notes I took during this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Tools-for-Data-Science.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Languages-of-Data-Science"><a href="#Languages-of-Data-Science" class="headerlink" title="Languages of Data Science"></a>Languages of Data Science</h3><ul><li>Python<ul><li>General Purpose language with Large standard library</li><li>Scientific computing libraries like Pandas, NumPy, SciPy and Matplotlib</li><li>For artificial intelligence it has PyTorch, TensorFlow, Keras and Scikit-learn</li><li>Python can be used for Natural Language Processing (NLP) using the Natural Language Toolkit (NLTK)</li></ul></li><li>R Language<ul><li>Python is Open Source, R is Free Software</li><li>Open Source Initiative (OSI) champions open source while the Free Software Foundation (FSF) defines free software</li><li>Open Source is more business focused while Free Software is more focused on a set of values</li><li>R is most often used by statisticians, mathematicians and data miners for developing statistical software, graphing and data analysis</li><li>The array-oriented syntax makes it easier to translate from math to code</li><li>R has become the world’s largest repository of statistical knowledge</li><li>Common mathematical operations like matrix multiplication work straight out of the box</li><li>R has stronger object-oriented programming facilities than most statistical computing languages </li></ul></li><li>SQL (Structured Query Language)<ul><li>SQL = </li><li>SQL was initially developed at IBM, first appeared in 1974</li><li>Useful in handling structured data, i.e. data incorporating relations among entities and variables</li><li>The SQL language is subdivided into several language elements, including clauses, expressions, predicates, queries, and statements</li><li>Knowing SQL will help you do many different jobs in data science, including business and data analyst, and it’s a must in data engineering. </li><li>When performing operations with SQL, you access the data directly ( without any need to copy it beforehand). This can speed up workflow executions considerably.</li><li>SQL is the interpreter between you and the database</li><li>SQL is an American National Standards Institute, or “ANSI,” standard, which means if you learn SQL and use it with one database, you will be able to easily apply that SQL knowledge to many other databases.</li><li>MySQL, IBM Db2, PostgreSQL, Apache OpenOffice Base, SQLite, Oracle, MariaDB, Microsoft SQL Server</li></ul></li><li>Java<ul><li>Java is a tried and true general purpose object oriented programming language</li><li>Huge adoption in the enterprise space, designed to be fast and scalable</li><li>Java applications are compiled to bytecode and run on JVM</li><li>Tools include Weka (data mining), Java-ML (ml library), Apache MLlib (scalable ml) and Deeplearning4j</li><li>Hadoop manages data processing and storage for big data applications running in clustered systems</li></ul></li><li>Scala<ul><li>Scala is a general purpose programming language that provides support for functional programming</li><li>Designed as an extension to Java, it is inter-operable with Java as it also runs on JVM</li><li>The name Scala comes from “Scalable Language”</li><li>Apache Spark is a fast and general-purpose cluster computing system. It provides APIs that make parallel jobs easy to write, and an optimized engine that supports general computation graphs.</li><li>Spark includes Shark, which is a query engine; MLlib, for machine learning; GraphX, for graph processing; and Spark Streaming. </li><li>Apache Spark was designed to be faster than Hadoop</li></ul></li><li>C++<ul><li>Another general purpose language, C++ is an extension of C</li><li>Improve processing speed, enables system programming and gives you broader control over the application</li><li>Many organizations rely on C++ to develop programs that feed data to customers in real-time</li><li>TensorFlow is a deep learning library</li><li>MongoDB is a NoSQL database for big data management</li><li>Caffe is a deep learning algorithm repository</li></ul></li><li>Javascript<ul><li>A core technology for the WWW, A general purpose language that extended beyond the browser with Node.js and other server side approaches</li><li>TensorFlow.js makes machine learning and deep learning possible in Node.js and in the browser, It is adopted by other open source libraries including brain.js and machinelearn.js</li><li>R-js makes linear algebra possible in Typescript</li></ul></li><li>Julia<ul><li>Designed at MIT for high-performance numerical analysis and computational science</li><li>Same speedy development like Python or R while producing programs that run as fast as C or Fortran programs would</li><li>It’s compiled, calls C, Go, Java, MATLAB, R, Fortran and Python libraries and has refined parallelism</li><li>A young language with a lot of promise in the data science industry</li><li>JuliaDB is a particularly useful application of Julia for data science. It’s a package for working with large persistent data sets.</li></ul></li></ul><h3 id="Data-Science-Tools"><a href="#Data-Science-Tools" class="headerlink" title="Data Science Tools"></a>Data Science Tools</h3><ul><li>Data Management tools: persisting and retrieving data<ul><li>Open Source: MySQL, PostgreSQL, MongoDB, Apache CouchDB, Apache Cassandra, Hadoop File System, Ceph(Cloud File systems), Elasticsearch</li><li>Commercial: Oracle Database, Microsoft SQL Server, IBM Db2</li><li>SaaS(cloud based): Amazon DynamoDB, Cloudant(based on CouchDB), Db2</li></ul></li><li>Data Integration and Transformation tools: ETL(extract, transform, load)<ul><li>Open Source: Apache AirFlow, KubeFlow, Apache Kafka, Apache Nifi, Apache SparkSQL, NodeRED</li><li>Commercial: Informatica, IBM InfoSphere DataStage, Talend</li><li>Cloud Based(ELT): Informatica, IBM Data Refinery</li></ul></li><li>Data Visualization tools<ul><li>Open Source: Hue, Kibana, Apache Superset</li><li>Commercial: Tableau, Microsoft Power BI, IBM Cognos Analytics</li><li>Cloud Based: Datameer, IBM Cognos Analytics</li></ul></li><li>Model Building: creating a machine learning or deep learning model using an appropriate algorithm<ul><li>Commercial: SPSS Modeler, SAS Enterprise Miner</li><li>Cloud Based: IBM Watson Machine Learning, Google Cloud</li></ul></li><li>Model Deployment tools: make machine learning or deep learning model consumable<ul><li>Open Source: Apache PredictionIO, Seldon, Mleap, TensorFlow Service, TensorFlow lite</li><li>Commercial: SPSS Collaboration and Deployment Service</li></ul></li><li>Model Monitoring and Assessment tools: keep track of prediction performance<ul><li>Open Source: ModelDB, Prometheus, IBM AI Fairness 360 open source toolkit, IBM Adversarial Robustness 360 Toolbox, IBM AI Explainability 360 Toolkit</li><li>Cloud Based: Amazon SageMaker Model Monitor, Watson OpenScale</li></ul></li><li>Code Asset Management tools: versioning and other collaborative features to facilitate teamwork<ul><li>Open Source: git, Github, GitLab, Bitbucket</li></ul></li><li>Data Asset Management tools: supports replication, backup, and access right management<ul><li>Open Source: Apache Atlas, ODPi Egeria, Kylo</li><li>Commercial: Informatica, IBM InfoSphere Information Governance</li></ul></li><li>Development Environments (IDE): help data scientistd to implement, execute, test and deploy their work<ul><li>Open Source: Jupyter notebook, Jupyter lab, Apache Zeppelin, R Studio, Spyder</li></ul></li><li>Execution Environments: where data processing, model training and deployment take place<ul><li>Open Source: Apache Spark, Apache Flink, Ray</li></ul></li><li>Fully Integrated Visual Tools<ul><li>Open Source: KNIME, Orange</li><li>Cloud Based: Watson Studio, Open Scale, Azure Machine Learning, H2O Driverless AI</li></ul></li></ul><h3 id="Packages-APIs-Data-Sets-and-Models"><a href="#Packages-APIs-Data-Sets-and-Models" class="headerlink" title="Packages, APIs, Data Sets and Models"></a>Packages, APIs, Data Sets and Models</h3><ul><li>Libraries for Data Science<ul><li>Scientifics Computing Libraries: Pandas, NumPy</li><li>Visualization Libraries: Matplotlib, Seaborn</li><li>Machine Learning and Deep Learning: Scikit-learn, Keras</li><li>Deep Learning Libraries: TensorFlow, PyTorch</li><li>Apache Spark</li><li>Scala-Libraries: Vegas(statistical data visualization), BigDL</li><li>R-Libraries: Ggplot2</li></ul></li><li>Application Programming Interfaces (API)<ul><li>REST APIs (Representational, State, Transfer): used to interact with web services</li><li>REST APIs have a set of rules regarding communication, input or request, output or response</li></ul></li><li>Data Sets<ul><li>A data set is a structured collection of data</li><li>Tabular data: CSV (comma separated values)</li><li>Hierarchical data, Network data</li><li>Raw files: images and audio</li></ul></li><li>Data Ownership<ul><li>Private data: Confidential, Private or personal information, Commercially sensitive</li><li>Open data: Scientific institutions, Governments, Organizations, Companies, Publicly available</li><li>Kaggle, datacatalogs.org, Google data set search</li><li>CDLA: Community Data License Agreement</li></ul></li><li>Data Asset eXchange<ul><li>Curated collection of data sets</li><li>Data Science friendly licences</li></ul></li><li>Machine Learning Models<ul><li>Data can contain a wealth of information, Machine learning (ML) models identify patterns in data </li><li>A model must be trained on data before it can be used to make predictions </li><li>Supervised, unsupervised and reinforcement learning are types of ML</li><li>Supervised Learning: Data is labeled and model trained to make correct predictions <ul><li>Regression: Predict real numerical values </li><li>Classification: Classify things into categories </li></ul></li><li>Unsupervised Learning: Data us not labeled, model tries to identify patterns without external help<ul><li>Common learning problems: clustering and anomaly detection </li></ul></li><li>Reinforcement Learning: Conceptually similar to human learning processes</li><li>Deep Learning: Tries to loosely emulate how the human brain works<ul><li>Applications in: Natural Language Processing, Image, audio and video analysis, Time series forecasting</li><li>Requires typically very large datasets of labeled data and is compute intensive</li><li>TensorFlow, Pytorch, Keras, ONNX model zoo</li></ul></li></ul></li><li>The Model Asset Exchange<ul><li>MAX use pre-trained or custom-trainable state-of-the-art models reduces time to value</li><li>Model-serving microservices expose standardized REST API</li></ul></li></ul><h3 id="Jupyter-Notebook-and-JupyterLab"><a href="#Jupyter-Notebook-and-JupyterLab" class="headerlink" title="Jupyter Notebook and JupyterLab"></a>Jupyter Notebook and JupyterLab</h3><ul><li>Jupyter Notebook is a tool for recording Data Science experiments, it allows data scientist to combine text and code block in a single file, it generates plots and tables within the file</li><li>JupyterLab is an interactive environment for Jupyter Notebooks, it allows for real time editing and is compatible with several file formats. It is open source</li><li>A notebook kernel is a computational engine that executes the code contained in a Notebook file</li><li>Jupyter implements a two-process model, with a kernel and a client<ul><li>The client is the interface offering the user the ability to send the code to a kernel. The client is the browser when using a Jupyter notebook.</li><li>The kernel executes the code and returns the result to the client for display</li></ul></li></ul><h3 id="RStudio-IDE"><a href="#RStudio-IDE" class="headerlink" title="RStudio IDE"></a>RStudio IDE</h3><ul><li><p>R is a statistical programming language. It is a powerful tool for data processing and manipulation, statistical inference, data analysis, and Machine Learning algorithms.</p></li><li><p>R supports importing data from different sources: Flat files, Databases, Web, Statistical software</p></li><li><p>Rstudio is an integrated development environment that helps improve and increase productivity with the R language</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">library <span class="punctuation">(</span>datasets<span class="punctuation">)</span></span><br><span class="line">data<span class="punctuation">(</span>iris<span class="punctuation">)</span></span><br><span class="line">View<span class="punctuation">(</span>iris<span class="punctuation">)</span> </span><br><span class="line">unique<span class="punctuation">(</span>iris<span class="operator">$</span>Species<span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p>Popular R Libraries for Data Science</p><ul><li><code>dplyr</code> : Data Manipulation</li><li><code>stringr</code> : String Manipulation </li><li><code>ggplot</code> : Data Visualization </li><li><code>caret</code> : Machine Learning</li><li><code>install.packages(&quot;package name&quot;, repos = &quot;https://cran.r-project.org&quot;, type= &quot;source&quot;)</code> : install packages </li></ul></li><li><p>Data Visualization in R</p><ul><li><code>ggplot</code> - used for data visualizations such as histograms, bar charts, scatterplots etc. It allows adding layers and components on a single visualization</li><li><code>Plotly</code> - an R package can be used to create web-based data visualizations that can be displayed or saved as individual HTML files</li><li><code>Lattice</code> - a data visualization tool that is used to implement complex, multi-variable data sets, a high-level data visualization library; it can handle many of the typical graphics without needing many customizations</li><li><code>Leaflet</code> - very useful in creating interactive plots</li></ul></li><li><p>Using the plot function</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define the cars vector with 5 values</span></span><br><span class="line">cars <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">10</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># Gragh the cars vector with all defaults</span></span><br><span class="line">plot<span class="punctuation">(</span>caars<span class="punctuation">,</span> type<span class="operator">=</span><span class="string">&quot;o&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># Create a title</span></span><br><span class="line">title<span class="punctuation">(</span>main<span class="operator">=</span><span class="string">&quot;Cars vs Index&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p>Using ggplot</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span>datasets<span class="punctuation">)</span></span><br><span class="line"><span class="comment"># Load Data</span></span><br><span class="line">data<span class="punctuation">(</span>mtcars<span class="punctuation">)</span></span><br><span class="line"><span class="comment"># View first 5 rows</span></span><br><span class="line">head<span class="punctuation">(</span>mtcars<span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#load ggplot package</span></span><br><span class="line">library<span class="punctuation">(</span>ggplot2<span class="punctuation">)</span></span><br><span class="line"><span class="comment"># create a scatterplot of displacement (disp) and miles per gallon (mpg)</span></span><br><span class="line">ggplot<span class="punctuation">(</span>aes<span class="punctuation">(</span>x<span class="operator">=</span>disp<span class="punctuation">,</span>y<span class="operator">=</span>mpg<span class="punctuation">,</span><span class="punctuation">)</span><span class="punctuation">,</span>data<span class="operator">=</span>mtcars<span class="punctuation">)</span><span class="operator">+</span>geom_point<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># Add a title</span></span><br><span class="line">ggplot<span class="punctuation">(</span>aes<span class="punctuation">(</span>x<span class="operator">=</span>disp<span class="punctuation">,</span>y<span class="operator">=</span>mpg<span class="punctuation">,</span><span class="punctuation">)</span><span class="punctuation">,</span>data<span class="operator">=</span>mtcars<span class="punctuation">)</span><span class="operator">+</span>geom_point<span class="punctuation">(</span><span class="punctuation">)</span><span class="operator">+</span>ggtitle<span class="punctuation">(</span><span class="string">&quot;displacement vs miles per gallon&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># change axis name</span></span><br><span class="line">ggplot<span class="punctuation">(</span>aes<span class="punctuation">(</span>x<span class="operator">=</span>disp<span class="punctuation">,</span>y<span class="operator">=</span>mpg<span class="punctuation">,</span><span class="punctuation">)</span><span class="punctuation">,</span>data<span class="operator">=</span>mtcars<span class="punctuation">)</span><span class="operator">+</span>geom_point<span class="punctuation">(</span><span class="punctuation">)</span><span class="operator">+</span>ggtitle<span class="punctuation">(</span><span class="string">&quot;displacement vs miles per gallon&quot;</span><span class="punctuation">)</span> <span class="operator">+</span> labs<span class="punctuation">(</span>x <span class="operator">=</span> <span class="string">&quot;Displacement&quot;</span><span class="punctuation">,</span> y <span class="operator">=</span> <span class="string">&quot;Miles per Gallon&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#make vs a factor</span></span><br><span class="line">mtcars<span class="operator">$</span>vs <span class="operator">&lt;-</span> as.factor<span class="punctuation">(</span>mtcars<span class="operator">$</span>vs<span class="punctuation">)</span></span><br><span class="line"><span class="comment"># create boxplot of the distribution for v-shaped and straight Engine</span></span><br><span class="line">ggplot<span class="punctuation">(</span>aes<span class="punctuation">(</span>x<span class="operator">=</span>vs<span class="punctuation">,</span> y<span class="operator">=</span>mpg<span class="punctuation">)</span><span class="punctuation">,</span> data <span class="operator">=</span> mtcars<span class="punctuation">)</span> <span class="operator">+</span> geom_boxplot<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># Add color to the boxplots to help differentiate</span></span><br><span class="line">ggplot<span class="punctuation">(</span>aes<span class="punctuation">(</span>x<span class="operator">=</span>vs<span class="punctuation">,</span> y<span class="operator">=</span>mpg<span class="punctuation">,</span> fill <span class="operator">=</span> vs<span class="punctuation">)</span><span class="punctuation">,</span> data <span class="operator">=</span> mtcars<span class="punctuation">)</span> <span class="operator">+</span> </span><br><span class="line">  geom_boxplot<span class="punctuation">(</span>alpha<span class="operator">=</span><span class="number">0.3</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">  theme<span class="punctuation">(</span>legend.position<span class="operator">=</span><span class="string">&quot;none&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># reate the histogram of weight wt</span></span><br><span class="line">ggplot<span class="punctuation">(</span>aes<span class="punctuation">(</span>x<span class="operator">=</span>wt<span class="punctuation">)</span><span class="punctuation">,</span>data<span class="operator">=</span>mtcars<span class="punctuation">)</span> <span class="operator">+</span> geom_histogram<span class="punctuation">(</span>binwidth<span class="operator">=</span><span class="number">0.5</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># GGally is an extension of ggplot2</span></span><br><span class="line">library<span class="punctuation">(</span>GGally<span class="punctuation">)</span></span><br><span class="line">ggpairs<span class="punctuation">(</span>iris<span class="punctuation">,</span> mapping<span class="operator">=</span>ggplot2<span class="operator">::</span>aes<span class="punctuation">(</span>colour <span class="operator">=</span> Species<span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul><li><p>A version control system allows you to keep track of changes to your documents</p></li><li><p>Git is free and open source software distributed under the GNU General Public License</p></li><li><p>Git is a distributed version control system and is accessible anywhere in the world</p></li><li><p>SSH protocol is a method for secure remote login from one computer to another</p></li><li><p>Repository contains project folders that are set up for version control</p></li><li><p>Fork is a copy of a repository</p></li><li><p>Pull request is the way you request that someone reviews and approves your changes before they become final</p></li><li><p>Working directory contains the files and subdirectories on your computer that are associated with a Git repository</p></li><li><p>Basic Git Commands</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add *</span><br><span class="line">git status</span><br><span class="line">git commit</span><br><span class="line">git reset</span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">git branch</span><br><span class="line">git checkout</span><br><span class="line">git merge</span><br></pre></td></tr></table></figure></li><li><p>Working with Branches</p><ul><li>A branch is a snapshot of your repository to which you can make changes</li><li>Master Branch is the official version of the project, The child branch creates a copy of the master branch</li><li>Edits and changes are made in the child branch. Tests are done to ensure quality before merging to the Master Branch</li><li>Branches allow for simultaneous development and testing by multiple team members </li></ul></li><li><p>Pull Requests (PR) are a way of proposing changes to the main branch. Ideally, another team member reviews the changes and approves it to be merged to the Master branch</p></li></ul><h3 id="IBM-Tools-for-Data-Science"><a href="#IBM-Tools-for-Data-Science" class="headerlink" title="IBM Tools for Data Science"></a>IBM Tools for Data Science</h3><ul><li>Watson Studio is an integrated platform of tools, services, and data that helps companies accelerate their shift to become data-driven organizations</li><li>Watson Knowledge Catalog unites all information assets into a single metadata-rich catalog, based on Watson’s understanding of relationships between assets and how they’re being used and socialized among users in existing projects<ul><li>Main features: Find data, Catalog data, Govern data, Understand data, Power data Science, Prepare data, Connect data, Deploy anywhere</li></ul></li><li>Data refinery simplifies data cleansing, shaping and preparation tasks by providing graphical tools for analyzing and preparing data</li><li>SPSS based products include easy to use graphical interfaces for wide varieties of statistical and machine learning algorithms and data transformations<ul><li>SPSS Modeler flows include some data management capabilities, as well as tools for data preparation, visualization, and model building</li><li>SPSS Modeler is a data mining and text analytics software application used to build predictive models and conduct other analytics tasks. It has a visual interface that enables users to leverage statistical and data mining algorithms without programming</li><li>SPSS Statistics is a statistical and machine learning software application and is widely used in academia, government agencies, and large enterprises used to build predictive models, perform statistical analysis of data, and conduct other analytic tasks. It has a visual interface, which enables users to leverage statistical and data mining algorithms without programming, although the interface is very different from Modeler</li></ul></li><li>Model Deployment with Watson Machine Learning<ul><li>Open standards for model deployment: PMML(Predictive Model Markup Language), PFA(Portable Format for Analytics from DMG)</li><li>ONNX: Open Neural Network eXchange</li></ul></li><li>Auto AI help simplify an AI lifecycle management, it provides a graphical interface to create and deploy machine learning models with real time visualizations</li><li>IBM Watson Openscale is a product that includes several important features<ul><li>Fairness, Explainability, Model Monitoring, Business Impact</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云上搭建基于 Anaconda 的 Jupyter 数据科学环境</title>
      <link href="/%E4%BA%91%E4%B8%8A%E6%90%AD%E5%BB%BAJupyter%20Notebook/"/>
      <url>/%E4%BA%91%E4%B8%8A%E6%90%AD%E5%BB%BAJupyter%20Notebook/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Jupyter Notebook 是基于浏览器网页的用于交互计算的应用程序，支持 Python、R、Julia 和 Scala 等多种语言，在数据科学相关领域有着非常大的用途。JupyterLab 是基于 web 的集成开发环境，包含了 Jupyter Notebook 所有功能的同时还支持操作终端、编辑 markdown 文本、打开交互模式、查看 csv 文件及图片等功能，最近在学习的 IBM 数据科学专项课程也都是基于 Jupyter Lab 的，在阿里云主机上部署 Jupyter 环境也能使研究和学习更加方便。</p></blockquote><span id="more"></span><h3 id="一、安装Anaconda"><a href="#一、安装Anaconda" class="headerlink" title="一、安装Anaconda"></a>一、安装Anaconda</h3><p>通过清华源安装最新版本 Anaconda：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2020.11-Linux-x86_64.sh</span><br><span class="line">bash Anaconda3-2020.11-Linux-x86_64.sh</span><br><span class="line"><span class="comment"># 狂按Enter&gt;&gt;yes&gt;&gt;继续狂按Enter安装</span></span><br></pre></td></tr></table></figure><p>Anaconda 默认安装在 <code>/root/anaconda3</code> 目录下。</p><p>配置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment"># 添加下面两行内容</span></span><br><span class="line"><span class="comment">#added by Anaconda3 4.4.0 installer</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/root/anaconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure><p>激活 Anaconda 环境并测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">conda --version</span><br></pre></td></tr></table></figure><p>添加清华镜像源，并搜索时显示通道地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels <span class="string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/&#x27;</span></span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>创建 jupyter notebook 运行环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n jupyter_notebook python=3</span><br><span class="line"><span class="comment"># source activate jupyter_notebook 激活环境</span></span><br><span class="line"><span class="comment"># source deactivate 退出环境</span></span><br></pre></td></tr></table></figure><h3 id="二、安装配置Jupyter"><a href="#二、安装配置Jupyter" class="headerlink" title="二、安装配置Jupyter"></a>二、安装配置Jupyter</h3><p>通过 Anaconda 安装 Jupyter Notebook：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install jupyter notebook</span><br><span class="line"><span class="comment"># 输入jupyter notebook --ip=127.0.0.1 --allow-root 可运行则为安装成功</span></span><br></pre></td></tr></table></figure><p>生成 Jupyter Notebook 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p>设置 Jupyter Notebook 密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ipython</span><br><span class="line">In [1]: from notebook.auth import passwd</span><br><span class="line">In [2]: passwd()</span><br><span class="line">Enter password: </span><br><span class="line">Verify password: </span><br><span class="line">Out[2]: <span class="string">&#x27;加密字符串&#x27;</span></span><br></pre></td></tr></table></figure><p>修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /root/.jupyter/jupyter_notebook_config.py</span><br><span class="line"><span class="comment">#修改如下行</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">c.NotebookApp.password = <span class="string">&#x27;加密字符串&#x27;</span></span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line">c.NotebookApp.allow_root = True</span><br></pre></td></tr></table></figure><p>启动 Jupyter Notebook：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p>启动 Jupyter Lab：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter lab</span><br></pre></td></tr></table></figure><p>远程访问方式：<code>公网ip地址:8888</code></p><p>通过 SSH 端口映射到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L8888:localhost:8888 root@106.15.200.147</span><br></pre></td></tr></table></figure><p>访问方式：<code>localhost:8888</code></p><h3 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h3><p>Jupyter Notebook 只适用于单用户登录，如果想搭建多用户的 Jupyter 的话，要使用 JupyterHub 进行搭建。</p><p>阿里云默认不打卡 8888 端口，需要在服务器管理控制台中设置开放端口。</p><h3 id="添加-JAVA-环境支持"><a href="#添加-JAVA-环境支持" class="headerlink" title="添加 JAVA 环境支持"></a>添加 JAVA 环境支持</h3><p>安装 JDK（过程略），<a href="https://github.com/SpencerPark/IJava/releases">下载</a> Java 内核压缩包 <code>ijava</code>，上传到服务器，使用 <code>unzip</code> 命令解压。</p><p>安装 Java 内核：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python install.py --sys-prefix</span><br></pre></td></tr></table></figure><p>查看 Jupyter 内核支持：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jupyter kernelspec <span class="built_in">list</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Available kernels:</span></span><br><span class="line"><span class="string">  java       /root/anaconda3/share/jupyter/kernels/java</span></span><br><span class="line"><span class="string">  python3    /root/anaconda3/share/jupyter/kernels/python3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云云计算助理工程师认证</title>
      <link href="/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%91%E8%AE%A1%E7%AE%97%E5%8A%A9%E7%90%86%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%AE%A4%E8%AF%81/"/>
      <url>/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%91%E8%AE%A1%E7%AE%97%E5%8A%A9%E7%90%86%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>阿里云基础认证（ACA - Alibaba Cloud Certified Associate）是面向使用阿里云基础产品的专业技术认证，主要涉及阿里云的计算、存储、网络、安全类的核心产品。 阿里云云计算助理工程师的培训和认证的过程能够提升个人对云计算产品技术的理解，可以对这些产品进行基本的日常管理，也可以基于这些产品进行应用的部署，从而证明个人在云计算领域的专业能力，获得更多就业机会。</p></blockquote><span id="more"></span><p><img src="https://blog.zhuangzhihao.top/img/ACA云计算2023.4.png" alt></p><h3 id="阿里云简介"><a href="#阿里云简介" class="headerlink" title="阿里云简介"></a>阿里云简介</h3><h4 id="云计算的概念"><a href="#云计算的概念" class="headerlink" title="云计算的概念"></a>云计算的概念</h4><p>传统IT部署方式：自建机房（耗时耗力、人员和设备等成本高、不利于扩容等）。</p><p>云计算是一种新的服务模式（计算资源池、网络资源池、存储资源池）。</p><p>云计算按照拥有者和使用者的不同主要分为三种部署模式：</p><ol><li><p>专有云：也叫私有云，属于企业内部自行构建的云环境</p></li><li><p>公有云：云服务商提供云计算服务，用户通过互联网进行连接和使用</p></li><li><p>混合云：企业内部云与共有云互通，具有私有云的私密性兼具公有云的灵活性</p></li></ol><p>云计算根据对用户所提供的服务不同划分了多种不同的服务模式：</p><ul><li>IaaS：基础设施即服务，为用户直接提供计算资源、存储资源、网络资源等，用户需要自行构建自身系统，可操控性最高，一般云服务商都会提供该服务模式。</li><li>PaaS：平台即服务，为开发者提供按需开发环境，主要针对开发者用户提供一个开发、测试等使用云环境。</li><li>SaaS：软件即服务，为用户提供给按需软件服务，云服务商管理和提供软件，用户直接使用云服务商软件。</li></ul><h4 id="阿里云云产品"><a href="#阿里云云产品" class="headerlink" title="阿里云云产品"></a>阿里云云产品</h4><p>阿里云创立于2009年，是全球领先的云计算及人工智能科技公司，提供了丰富的产品类型以满足用户各场景的使用需求。</p><ul><li>弹性计算：云服务器、高性能计算HPC、弹性编排。</li><li>存储服务：云存储、智能存储、混合云存储。</li><li>网络：云上网络、跨地域网络、混合云网络。</li><li>数据库：关系型数据库、NoSQL数据库、数据库生态工具。</li><li>CDN与边缘：CDN、SCDN、DCDN。</li><li>安全：云安全、业务安全。</li><li>阿里云体系架构：数据中心 -&gt; Linux -&gt; 通用云服务市场&amp;行业解决方案。</li></ul><h4 id="阿里云基础架构"><a href="#阿里云基础架构" class="headerlink" title="阿里云基础架构"></a>阿里云基础架构</h4><p>地域（Region）：阿里云基于地理位置进行划分，资源创建成功后不能修改地域。不同地域提供的阿里云资源也会略有不同。</p><p>可用区（Zone）：同一地域内，电力和网络互相独立的物理区域。同一可用区内实例之间的网络延时更小。</p><p>每个地域完全独立。每个可用区完全隔离，但同一个地域内的可用区之间使用低时延链路相连。</p><p>选择地域时，需要考虑地理位置、阿里云产品之间的关系、资源的价格、经营许可备案等因素，根据目标用户所在的地理位置选择地域。</p><p>选择可用区时，需要考虑在同一地域内可用区与可用区之间内网互通，可用区之间能做到故障隔离，以及是否将实例放在同一可用区内，主要取决于对容灾能力和网络延时的要求。</p><p>完整的服务体系包括自助服务、技术支持、服务运营、培训认证、生态服务、电话支持。</p><h3 id="阿里云弹性计算"><a href="#阿里云弹性计算" class="headerlink" title="阿里云弹性计算"></a>阿里云弹性计算</h3><h4 id="ECS的概念"><a href="#ECS的概念" class="headerlink" title="ECS的概念"></a>ECS的概念</h4><p>云服务器（Elastic Compute Service）是阿里云提供的性能卓越、稳定可靠、弹性扩展的IaaS（Infrastructure as a Service）级别云计算服务。云服务器ECS免去了采购IT硬件的前期准备，实现计算资源的即开即用和弹性伸缩。</p><p>阿里云ECS持续提供创新型服务器，解决多种业务需求，助力企业的业务发展，稳定、弹性、高安全、高性能、易用性、可拓展性强。</p><p>阿里云ECS在部署前需要进行规划，需要考虑的因素：</p><ul><li>地域和可用区：地域一旦成功创建实例后，无法更换地域。</li><li>高可用性：通过快照实现数据备份，通过跨可用区、部署集、负载均衡（Server Load Balancer）等实现应用容灾。</li><li>安全方案：使用ECS的安全组，控制ECS实例的出入网访问策略以及端口监听状态。</li><li>网络规划：自行规划私网IP，全面支持新功能和新型实例规格。</li></ul><p>ECS适用场景：</p><ul><li>企业官网或轻量的 Web 应用。</li><li>多媒体以及高并发应用或网站，与对象存储OSS搭配。</li><li>高I/O要求数据库。</li><li>访问量波动剧烈的应用或网站。</li><li>大数据及实时在线或离线分析。</li><li>机器学习和深度学习等AI应用，例如GPU计算型实例。</li></ul><p>云服务器 ECS 相对于普通 IDC 的优点：</p><ul><li>易用性：在线更换操作系统，Web在线管理。</li><li>安全性：三副本数据设计，用户自定义快照，快速自动恢复，有效阻止MAC欺骗和ARP攻击，有效防护DDoS攻击，端口入侵扫描、挂马扫描、漏洞扫描等。</li><li>灵活性：在线升级配置、带宽升降自由、在线使用负载均衡。</li></ul><h4 id="ECS的实例规格"><a href="#ECS的实例规格" class="headerlink" title="ECS的实例规格"></a>ECS的实例规格</h4><p>实例：一台云服务器ECS实例等同于台虚拟机，包含vCPU、内存、操作系统、网络、磁盘等最基础的计算组件，可以方便地定制，更改实例的配置。</p><p>实例规格：根据业务场量，ECS实例可以分为多个规格族，同一个规格族里，根据vCPU和内存的配置，可以分为多种不同的规格，不同实规格具有不同vCPU和内存等配置，包含物理CPU型号、主频等。某些软件或应用对实例规格的配置有要求。</p><p>系统存储：一台ECS实例必须包合一块系统盘，用来存储操作统和核心配置，镜像主要用于初始化系统盘，决定ECS实例的操作系统和初始软件配置。</p><p>网络类型：ECS实例区分网络类型，实例在相同的网络中，例如一个VPC，可以使用私网地址通过内网通信。</p><p>实例的生命周期：创建实例 -&gt; 准备中 -&gt; 启动中 -&gt; 运行中 -&gt; 停止中 -&gt; 已停止 -&gt; 删除实例。</p><p>为应对不同业务场景，阿里云ECS提供多种实例规格族：</p><ol><li><p>通用型（g系列）、计算型（c系列）、内存型（r系列）、大数据型（d系列）。</p></li><li><p>本地SSD型（i系列）、高主频计算型（hfc、hfg、hfr系列）。</p></li></ol><h4 id="弹性裸金属服务器（神龙）"><a href="#弹性裸金属服务器（神龙）" class="headerlink" title="弹性裸金属服务器（神龙）"></a>弹性裸金属服务器（神龙）</h4><p>弹性裸金属服务器（ECS Bare Metal Instance）基于阿里云完全自主研发的下一代虚拟化技术而打造的新型计算类服务器产品，兼具虚拟机的弹性和物理机的性能及功能特性。与上一代虚拟化技术相比，下一代虚拟化技术不仅保留了普通云服务器的弹性体验，而且保留了物理机的性能与特性，全面支持嵌套虚拟化技术。</p><p>EMB弹性裸金属服务器特点：</p><ul><li>弹性裸金属服务器融合了物理机与云服务器的各自优势，实现超强超稳的计算能力。业务应用可以直接访问弹性裸服务器的处理器和内存，无需任何虚拟化开销。</li><li>弹性裸金属服务器通过自研芯片和自研Hypervisor系统软件，打造了全球领先的深度融合物理机和虚拟机特性的创新型计算架构。能与阿里云产品家族中的其他计算产品无缝对接。</li></ul><p>EMB 弹性裸金属服务器优势：</p><ul><li>用户独占计算资源。</li><li>加密计算：芯片级可信执行环境。</li><li>兼容多种专有云：具有再次虚拟化的能力。</li><li>异构指令集处理器支持：零成本支持ARM等其他指令集处理器。</li></ul><p>EMB 相对于物理机和 ECS 的优点：</p><ul><li>ECS不具备免性能损失、免特性损失、免资源争抢等计算特性。</li><li>物理机不支持云存储特性、不支持网络兼容等特性。</li></ul><p>弹性裸金属服务器适用场景：游戏场景、金融加密场景、SCC超级计算集群。</p><h4 id="ECS的使用"><a href="#ECS的使用" class="headerlink" title="ECS的使用"></a>ECS的使用</h4><p>基础配置（付费模式、地域和可用区、实例规格）-&gt; 网络与安全（专用网络、公网IP、安全组）-&gt; 系统配置（登录凭证、登录密码）。</p><p>ECS镜像提供了创建ECS实例所需的信息。镜像文件相当于副本文件，包含了一块或多块云盘中的所有数据，官方提供公共镜像、自定义镜像、共享镜像和镜像市场。</p><p>ECS的连接方式：Workbench、VNC、putty等客户端工具、SSH命令连接或SSH Control Lite、JuiceSSH等App，除VNC外，其它连接方式均要求待连接实例分配了固定公网IP或EIP 。</p><h3 id="阿里云存储服务"><a href="#阿里云存储服务" class="headerlink" title="阿里云存储服务"></a>阿里云存储服务</h3><h4 id="OSS的概念"><a href="#OSS的概念" class="headerlink" title="OSS的概念"></a>OSS的概念</h4><p>常见的存储结构：</p><ul><li>块存储：以数据块为存储单位，需要分区格式化才能使用（直接访问存储DAS、存储区域网络SAN等）。</li><li>文件存储：以文件为存储单位，由文件存储服务器NAS提供文件访问服务（CIFS、NFS等）。</li><li>对象存储：以对象为存储单位，扁平化结构（大数据存储）。</li></ul><p>阿里云对象存储OSS（Object Storage Service）是阿里云提供的海量、安全、低成本、高可靠的云存储服务，可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><p>存储类型（Storage Class）：OSS提供标准、低频访问、归档三种存储类型，全面覆盖从热到冷的各种数据存储场景。</p><p>存储空间（Bucket）：用于存储对象（Object）的容器，所有对象都必须隶属于某个存储空间。</p><p>对象（Object）：OSS存储数据的基本单元，也被称为OSS的文件。对象由元信息（Object Meta）、用户数据（Data）和文件名（Key）组成。</p><p>地域（Region）：OSS的数据中心所在物理位置，可以根据费用、请求来源等选择合适的地域创建Bucket。</p><p>访问域名（Endpoint）：OSS对外服务的访问域名。</p><p>访问密钥（AccessKey）：AK，访问身份验证中用到的AccessKey Id和AccessKey Secret。</p><p>OSS 的优势和适用场景：</p><ul><li>方便、快捷的使用方式：提供标准的RESTful API接口、丰富的SDK包、客户端工具、控制台，不限制存储空间大小，支持数据生命周期管理。</li><li>强大、灵活的安全机制：灵活的鉴权、授权机制，提供用户级别资源隔离机制和多集群同步机制</li><li>丰富、强大的增值服务：图片处理、音视频转码，互联网访问加速、内容加速分发CDN</li><li>数据冗余机制：OSS采用数据冗余存储机制，OSS Object操作具有强一致性</li><li>阿里云OSS 相对于自建对象存储的优点：可靠、安全、低成本、智能存储。</li></ul><h4 id="OSS的使用"><a href="#OSS的使用" class="headerlink" title="OSS的使用"></a>OSS的使用</h4><p>阿里云OSS将数据文件以对象（Object）的形式上传到存储空间（Bucket）中：创建一个或者多个存储空间，向每个存储空间中添加一个或多个文件，通过获取已上传文件的覅之进行文件的分享和下载，通过修改存储空间的读写权限（ACL）来设置访问权限，通过阿里云管理控制台、各种便捷工具以及丰富的SDK包执行基本和高级OSS操作。</p><p>开通阿里云OSS服务后，需要首先创建存储空间（Bucket）来存储文件。Bucket 名称具有唯一性。</p><p>区域（创建后无法更换）：如需要通过ECS内网访问OSS，需选择与ECS相同的地域。</p><p>存储类型：标准存储（经常访问）、低频访问（长期存储、较少访问）、归档存储（长期存储、极少访问）。</p><p>同城冗余存储：用户数据以冗余的方式存储在同一区域的3个可用区（AZ）中。</p><p>读写权限分为私有（private）、公共读（public-read）、公共读写（public-read-write）。</p><p>创建了存储空间（Bucket）后，可以上传任何类型的文件（Object）到存储空间中，可使用OSS图形化管理工具ossbrowser将文件上传至OSS，可使用OSS命令行工具ossutil将文件上传至OSS，OSS提供多种语言的API和SDK包，快速进行二次开发。</p><h4 id="块存储的概念"><a href="#块存储的概念" class="headerlink" title="块存储的概念"></a>块存储的概念</h4><ul><li>块存储是阿里云为云服务器ECS提供的块设备产品，具有高性能和低延时的特点，支持随机读写</li><li>可以像使用物理硬盘一样格式化并建立文件系统来使用块存储，满足大部分同意业务场景下的数据存储需求</li><li>衡量块存储产品的性能指标主要包括IOPS、吞吐量和访问时延<ul><li>IOPS（Input/Output Operation per Second）：每秒能处理的I/O个数，表示块存储处理读写（输入/输出）的能力，单位为次</li><li>吞吐量（Throughput）：单位时间内可以成功传输的数据数量，单位为MB/s</li><li>访问时延（Latency）：块存储处理一个I/O需要的实践，单位为s、ms或微秒</li><li>容量（Capacity）：容量是指存储空间大小，单位为TiB、GiB、MiB或者KiB，容量无法衡量块存储性能</li></ul></li><li>阿里云块存储的数据安全：读写稳定性（分布存储）、主动备份（快照）、数据擦除机制、数据加密（AES-256）</li></ul><h4 id="块存储的分类"><a href="#块存储的分类" class="headerlink" title="块存储的分类"></a>块存储的分类</h4><ul><li>云盘：数据块级别的块存储产品。云盘采用多副本的分布式机制，具有低时延、高性能、持久性、高可靠等性能，支持随时创建、扩容以及释放</li><li>本地盘：基于云服务器ECS所在物理机（宿主机——上的本地硬盘设备，为ECS实例提供本地存储访问能力。为对存储I/O性能和海量存储性价比有极高要求的业务场景而设计的产品。具有低时延、高随机IOPS、高吞吐量、高性价比等优势</li><li>本地盘来自单台物理机，数据可靠性取决于物理机的可靠性，存在单点故障风险</li><li>云盘类似硬盘，可以对挂载到ECS实例上的云盘做分区、格式化、创建文件系统等操作，并持久化存储数据</li><li>云盘根据性能分类<ul><li>ESSD云盘：基于新一代分布式块存储架构的超高性能云盘产品，结合25GE网络和RDMA技术，单盘可提供高达100万的随机读写能力和更低的单路时延能力</li><li>SSD云盘：具备稳定的高随机读写性能、高可靠性的高性能云盘产品</li><li>高效云盘：具备高性价比、中等随机读写性能、高可靠性的云盘产品</li><li>普通云盘：具备高可靠性、一般随机读写性能的云盘产品</li></ul></li><li>云盘的数据类型<ul><li>系统盘：不可共享访问。初始化系统盘时，由镜像确定操作系统类型和应用数据，系统盘一定是云盘。只能随实例创建，生命周期与挂载的ECS实例相同</li><li>数据盘：常用于存储应用数据，可以与ECS实例同时创建，也可以单独创建。数据盘可以时云盘，也可以是其他类型块存储（本地盘），单台ECS实例上限16</li></ul></li><li>一块云盘只能挂载到同一地域、同一可用区的一台ECS实例</li></ul><h4 id="块存储与对象存储"><a href="#块存储与对象存储" class="headerlink" title="块存储与对象存储"></a>块存储与对象存储</h4><ul><li><p>阿里云数据存储场景产品：块存储、对象存储OSS、文件存储NAS</p><p>|          | 块存储                                                                               | OSS                                                      |<br>| ———— | —————————————————————————————————————————— | ———————————————————————————— |<br>| 数据模型 | 文件系统是一种典型的树状索引结构                                                     | 分布式的对象存储服务，Key-Value对形式                    |<br>| 数据获取 | 先访问文件夹目录再在该目录下查找文件                                                 | 根据Object的名称（Key）唯一的获取该Object的内容          |<br>| 优势     | 支持文件的修改，文件夹的操作                                                         | 支持海量的用户并发访问                                   |<br>| 劣势     | 受限于单个设备的性能，访问越深的目录消耗的资源越大，操作拥有很多文件的目录也会非常慢 | Object不支持修改，哪怕修改一个字节也需要重新上传整个目录 |</p></li></ul><h4 id="块存储的使用"><a href="#块存储的使用" class="headerlink" title="块存储的使用"></a>块存储的使用</h4><ul><li><p>云服务器ECS不支持单独创建系统盘</p></li><li><p>数据盘只能挂载同一可用区的ECS</p></li><li><p>不支持合并多块云盘，提前做好云盘数量和容量的规划</p></li><li><p>已创建的多块云盘，不建议制作LVM（Logic Volume Manager）逻辑卷</p></li><li><p>挂载数据盘</p><ul><li>可以将单独创建的云盘、从ECS实例上卸载下来的系统盘挂载到ECS实例上，作为数据盘使用</li><li>被挂载的实例和云盘在同一可用区</li><li>被挂载的实例状态为运行中（Running）或已停止（Stopped），不能为已锁定（Locked）</li><li>云盘的状态为待挂载（Available）</li><li>随ECS实例一起创建的云盘，和为包年包月实例创建的包年包月数据盘无需挂载</li><li>一块云盘只能挂载到一台ECS实例上，一台ECS实例最多能挂载16块云盘作数据盘用</li></ul></li><li><p>分区格式化数据盘</p><ul><li>阿里云块存储支持的分区格式包括MBR（Master Boot Record）和GPT（Globally Unique Identifier Partition Table）</li><li>MBR只支持处理不大于2TiB的容量，且只支持划分4个分区，如果需要使用大于2TiB的数据盘，必须采用GPT格式</li></ul><p>| 操作系统 | 分区工具      | 分区格式 | 文件系统                     |<br>| ———— | ——————- | ———— | —————————————— |<br>| Windows  | 磁盘管理      | MBR、GPT | NTFS、fat                    |<br>| Linux    | fdisk、parted | MBR、GPT | vfat、ext3、ext4、xfs、btrfs |</p><ul><li>在Linux系统中，分区和格式化后还需要使用mount命令将分区挂载至空白目录，并将新分区挂载信息写入至 <code>/etc/fstab</code> 文件中</li><li>具体操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fdisk –l  //查看分区信息</span><br><span class="line">fdisk /dev/vdb  //分区管理命令</span><br><span class="line">p  //查看分区表信息</span><br><span class="line">n  //创建分区</span><br><span class="line">w  //保存分区表</span><br><span class="line">partx  //同步磁盘信息</span><br><span class="line">mkfs.ext4 /dev/vdb1  //格式化分区为ext4格式</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/data  //创建空白目录挂载新磁盘分区</span><br><span class="line">mount /dev/vdb1 /mnt/data  //挂载分区至空白目录</span><br><span class="line"><span class="built_in">df</span> –h | grep vdb1  //查看分区挂载信息</span><br><span class="line"><span class="built_in">echo</span> “/dev/vdb1 /mnt/data ext4 defaults 0 0” &gt;&gt; /etc/fstab  //设置开机自动挂载</span><br><span class="line">mount –a  //验证/etc/fstab文件的正确性</span><br></pre></td></tr></table></figure></li><li><p>卸载云盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/vdb1  //在ECS中卸载分区</span><br><span class="line">vim /etc/fstab  //在文档中将自己新增挂载记录删除</span><br></pre></td></tr></table></figure><ul><li>最后在控制台卸载云盘</li></ul></li><li><p>在MBR磁盘管理中主分区、扩展分区和逻辑分区的区别</p><ul><li>主分区：一块硬盘最多只能创建4个，可以放置任何类型数据</li><li>扩展分区：一块硬盘最多只能创建1个，不能放置任何数据，需要进一步划分逻辑分区后才能使用</li><li>逻辑分区：基于扩展分区进行创建，空间由扩展分区划分出来，可以放置普通数据，不能存放计算机的启动引导文件</li></ul></li></ul><h3 id="阿里云网络"><a href="#阿里云网络" class="headerlink" title="阿里云网络"></a>阿里云网络</h3><h4 id="VPC的概念"><a href="#VPC的概念" class="headerlink" title="VPC的概念"></a>VPC的概念</h4><ul><li>专有网络VPC（Virtual Private Cloud）是基于阿里云构建的一个隔离的网络环境，专有网络之间逻辑上彻底隔离</li><li>VPC主要提供两个能力：<ul><li>用户可以自定义网络拓扑，包括选择自由IP地址范围、划分网段、配置路由表和网关等</li><li>通过专线或VPN与原有数据中心连接，云上和云下的资源使用同一个网络地址规划，实现应用的平滑迁移上云</li></ul></li><li>VPC组成部分：一个路由器、至少一个私网网段、至少一个交换机<ul><li>路由器（VRouter）：专有网络的枢纽</li><li>交换机（VSwitch）：组成专有网络的基础网络设备，用来连接不同的云资源</li><li>私网网段：在创建专有网络和交换机时，您需要以CIDR地址块的形式指定专有网络使用的私网网段</li></ul></li></ul><h4 id="VPC连接"><a href="#VPC连接" class="headerlink" title="VPC连接"></a>VPC连接</h4><ul><li>公网连接技术<ul><li>ECS固定公网IP：支持使用共享流量包，将公网IP转换外EIP后也可以使用共享带宽</li><li>弹性公网IP（EIP）：可以动态和VPC ECS实例绑定和解绑，支持实例访问公网（SNAT）和被公网访问（DNAT），可使用共享流量包和共享带宽</li><li>NAT网关：支持多台VPC ECS实例访问公网（SNAT）和被公网访问（DNAT）</li><li>负载均衡：基于端口提供四层和七层负载均衡，支持用户从公网通过负载均衡（SLB）访问ECS。在DNAT方面，负载均衡是基于端口的负载均衡，即一个负载均衡的一个端口可以对应多台ECS。负载均衡通过对多台ECS进行流量分发，可以扩展应用系统对外的服务能力，并通过消除单点故障提升应用系统的可用性</li></ul></li><li>VPC之间的互通（VPC可以有效的实现网络的隔离）<ul><li>云企业网：支持多个不同地域、不同账号的VPC连接起来，构建互联网络（一网通、低时延高速率、就近接入与最短链路互通、链路冗余及容灾、系统化管理）</li><li>VPN网关：通过在两个VPC之间创建IPsec连接，建立加密通信通道（安全、高可用、低成本、配置简单）</li></ul></li><li>本地IDC和云上专有网络打通，构建混合云架构（上云）<ul><li>高速通道：通过物理专线接入使VPC与本地IDC网络互通（低延迟、专线连接安全可靠）</li><li>VPN网关：通过建立IPsec-VPN，将本地IDC网络和云上VPC连接起来；或通过建立SSL-VPN，将本地客户端远程接入VPC</li><li>云企业网：与本地IDC互通支持将要互通的本地IDC关联的边界路由器（VBR）加载到已创建的云企业网实例，构建互联网络；或多VPC与IDC互通支持将要互通的多个网络实例（VPC和VBR）加载到已创建的云企业网实例，构建企业级互联网络</li><li>接入网关：线下机构（IDC/分支机构/门店等）接入阿里云数据中心，轻松构建混合云，实现线下机构的互通（即插即用、网络拓扑变化自适应快速收敛、就近接入、加密互联）</li></ul></li></ul><h4 id="VPC的基础架构"><a href="#VPC的基础架构" class="headerlink" title="VPC的基础架构"></a>VPC的基础架构</h4><ul><li>VPC逻辑架构<ul><li>基于隧道技术和软件定义网络SDN（Software Defined Network）技术，阿里云的研发在硬件网关和自研交换机设备的基础上实现了VPC产品</li><li>VPC包含交换机、网关和控制器三个重要的组件。交换机和网关组成了数据通路的关键路径，控制器使用自研的协议下发转发表到网关和交换机，完成了配置通路的关键路径</li></ul></li><li>网络规划<ul><li>VPC是地域级别的资源，不能跨地域部署，当有多地域部署系统的需求时，就必须使用多个VPC。多业务系统隔离如果在一个地域的多个业务系统需要通过VPC进行严格隔离。</li><li>交换机的规划：即使只使用一个VPC，也尽量使用至少两个交换机，并且将两个交换机分布在不同可用区，这样可以实现跨可用区容灾</li><li>网段的规划：交换机的网段必须是其所属VPC网段的子集</li></ul></li></ul><h4 id="SLB的概念"><a href="#SLB的概念" class="headerlink" title="SLB的概念"></a>SLB的概念</h4><ul><li>负载均衡（Server Load Balancer）是将访问流量根据转发策略分发到后端多台云服务器（ECS实例）的流量分发控制服务。负载均衡扩展了应用的服务能力，增强了应用的可用性</li><li>通过设置虚拟服务地址，将添加的同一地域的多台ECS实例虚拟成一个高性能、高可用的后端服务池，并根据转发规则，将来自客户端的请求分发给后端服务器池中的ECS实例</li><li>默认检查云服务器池中的ECS实例的健康状态，自动隔离异常状态的ECS实例，消除了单台ECS实例的单点故障，提高了应用的整体服务能力。此外，负载均衡还具备抗DDoS攻击的能力，增强了应用服务的防护能力</li><li>SLB的组成部分<ul><li>负载均衡实例（Server Load Balancer Instances），一个负载均衡实例是一个运行的负载均衡服务，用来接收流量并将其分配给后端服务器</li><li>监听（Listeners），用来检查客户端请求并将请求转发给后端服务器，监听也会对后端服务进行健康检查</li><li>后端服务器（Backend Servers），一组接受前端请求的ECS实例</li></ul></li><li>SLB的产品优势：高可用、可扩展、低成本、安全、高并发</li></ul><h4 id="SLB的原理"><a href="#SLB的原理" class="headerlink" title="SLB的原理"></a>SLB的原理</h4><ul><li>SLB的基础架构<ul><li>负载均衡采用集群部署，提供四层（TCP协议和UDP协议）和七层（HTTP和HTTPS协议）的负载均衡，可实现会话同步，以消除服务器单点故障，提升冗余，保证服务的稳定性</li><li>七层：采用Tengine实现负载均衡</li><li>四层：采用开源软件LVS（Linux Virtual Server）+ keepalived 的方式实现负载均衡</li></ul></li><li>SLB中提供的功能<ul><li>调度算法：轮询、加权轮询（WRR）、加权最小连接数（WLC）和一致性哈希（CH）调度算法</li><li>健康检查：检查后端服务器的运行状况</li><li>会话保持：在会哈的生命周期内，可以将同一客户端的请求转发到同一台后端服务器上</li><li>访问控制：支持添加黑名单和白名单，灵活控制客户端访问</li><li>高可用：将流量转发给多个可用区的后端服务器</li><li>安全防护：结合云顿，可提供5Gbps的防DDos攻击能力</li></ul></li><li>SLB的应用场景：应用于高访问量的业务，扩展应用程序、消除单点故障、同城容灾（多可用区）、跨地域容灾</li></ul><h4 id="SLB的配置"><a href="#SLB的配置" class="headerlink" title="SLB的配置"></a>SLB的配置</h4><ul><li>创建负载均衡实例 -&gt; 添加监听 -&gt; 添加后端服务器 -&gt; 域名解析</li><li>SLB使用的注意事项<ul><li>规划实例地域（提供主备可用区）</li><li>选择实例的网络类型（公网或私网）</li><li>选择协议类型：四层监听将直接转发给后端服务器，不会修改标头，七层监听原理上是反向代理的一种实现</li><li>准备后端服务器（不支持跨地域部署）</li></ul></li><li>后端服务器不需要配置公网IP地址（固定和弹性都不需要），外面客户访问通过SLB的公网IP地址进行访问，后端服务器添加的公网IP目的为了方便管理和控制后端服务器</li></ul><h4 id="AS的概念"><a href="#AS的概念" class="headerlink" title="AS的概念"></a>AS的概念</h4><ul><li>弹性伸缩（Auto Scaling）可以根据业务需求和策略设置伸缩规则，在业务需求增长时自动增加ECS实例以保证计算能力，在业务需求下降时自动减少ECS实例以节约成本</li><li>弹性伸缩不仅适合业务量不断波动的应用程序，同时也适合业务量稳定的应用程序</li><li>AS的使用场景<ul><li>弹性扩张：自动完成底层资源升级，避免访问时延和超负荷运行</li><li>弹性收缩：自动完成底层资源释放，避免资源浪费</li><li>弹性自愈：提供健康检查功能</li></ul></li></ul><h4 id="AS的原理"><a href="#AS的原理" class="headerlink" title="AS的原理"></a>AS的原理</h4><ul><li><p>AS的工作流程：创建伸缩组、伸缩配置、伸缩规则、伸缩触发任务</p><ul><li>伸缩出发任务按照各自触发生效的条件来触发伸缩活动</li><li>系统自动通过ExecuteScalingRule接口触发伸缩活动，并在该接口中指定需要执行的伸缩规则的阿里云资源唯一标识符（Ari）</li><li>根据Rule Ari获取伸缩规则、伸缩组和伸缩配置信息</li><li>自动创建ECS实例并配置负载均衡和RDS</li><li>伸缩活动完成后启动伸缩组的冷却功能</li></ul></li><li><p>AS的伸缩模式：定时模式、动态模式、固定数量模式、自定义模式、健康模式、多模式并行</p></li></ul><h4 id="AS的配置"><a href="#AS的配置" class="headerlink" title="AS的配置"></a>AS的配置</h4><ul><li>AS的使用流程：创建伸缩组 -&gt; 创建伸缩配置 -&gt; 其用伸缩组 -&gt; 创建伸缩规则 -&gt; 创建定时任务 -&gt; 创建报警任务</li><li>AS使用的功能限制<ul><li>弹性伸缩不支持纵向扩展，即不支持自动提升或降低ECS实例的vCPU、内存、带宽等配置</li><li>部署在伸缩组内ECS实例上的应用必须是无状态并且可横向扩展的</li><li>伸缩组内ECS实例可能会被自动释放，因此不适合保存会话记录、应用数据、日志等信息</li><li>弹性伸缩不支持自动将ECS实例添加到Memcache实例的访问白名单</li></ul></li><li>弹性伸缩AS是调整ECS服务器的数量，SLB是提供负载均衡服务</li><li>一个完整的AS服务，需要后端服务器与SLB结合提供负载均衡访问，然后再由AS来调整SLB的后端服务器的数量</li></ul><h3 id="阿里云云数据库"><a href="#阿里云云数据库" class="headerlink" title="阿里云云数据库"></a>阿里云云数据库</h3><h4 id="PolarDB的概念"><a href="#PolarDB的概念" class="headerlink" title="PolarDB的概念"></a>PolarDB的概念</h4><ul><li>PolarDB是阿里云自研的下一代关系型云数据库，有三个独立的引擎。分别可以100%兼容 MySQL、100%兼容 PostgreSQL、高度兼容 Oracle语法，存储容量最高可达100TB，单库最多可扩展到16个节点，适用于企业多样化的数据库应用场景</li><li>PolarDB既融合了商业数据库稳定可靠、高性能、可扩展的特征,又具有开源云数据库简单开放、自我迭代的优势</li><li>PolarDB采用存储和计算分离的架构，所有计算节点共享一份数据，提供分钟级的配置升降级、秒级的故障恢复、全局数据一致性和免费的数据备份容灾服务</li><li>PolarDB特点<ul><li>集群架构，计算与存储分离：PolarDB采用多节点集群的架构,集群中有一个Writer节点（主节点）和多个Reader节点（读节点）</li><li>读写分离：当应用程序使用集群地址时，PolarDB MySQL/ PostgreSQL通过内部的代理层（Proxy）对外提供服务，应用程序的请求都先经过代理，然后才访问到数据库节点</li></ul></li><li>集群：一个集群包含一个主节点以及最多15个只读节点（最少一个，用于提供Active-Active高可用）</li><li>节点：一个独立占用物理内存的数据库服务进程，节点ID以pi开头</li><li>数据库：在节点下创建的逻辑单元，一个节点可以创建多个数据库，数据库在节点内的命名唯一</li></ul><h4 id="PolarDB的优势"><a href="#PolarDB的优势" class="headerlink" title="PolarDB的优势"></a>PolarDB的优势</h4><ul><li>容量大、高性价比、分钟级弹性、读一致性、毫秒级延迟（物理复制）、无锁备份</li><li>云数据库PolarDB既融合了商业数据库稳定可靠、高性能、可扩展的特性，又具有开源云数据库简单开放、自我迭代的优势</li><li>PolarDB的产品架构及特点：一写多读、计算与存储分离、读写分离、高速链路互联、共享分布式存储、数据多副本</li></ul><h4 id="RDS的概念"><a href="#RDS的概念" class="headerlink" title="RDS的概念"></a>RDS的概念</h4><ul><li>阿里云关系型数据库RDS（Relational Database service）是一种稳定可靠、可弹性伸缩的在线数据库服务。基于阿里云分布式文件系统和SSD盘高性能存储，RDS支持MySQL、SQL Server、PostgreSQL、PPAS（Postgre Plus Advanced Server，高度兼容Oracle数据库）和 MariaDB TX引擎，并且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案</li><li>RDS相关概念：实例（虚拟化的数据库服务器）、数据库引擎、网络类型（VPC）、产品系列、规格族、存储类型</li><li>地域和可用区概念与其他阿里云产品中的定义相同</li><li>RDS vs 自建数据库：便宜易用、高性能（参数优化和SQL优化建议）、高可用、高安全性</li></ul><h4 id="RDS的产品选型"><a href="#RDS的产品选型" class="headerlink" title="RDS的产品选型"></a>RDS的产品选型</h4><ul><li>产品系列<ul><li>基础版：单节点实例，计算与存储分离架构</li><li>高可用版：一主一备高可用架构</li><li>集群版：仅SQL Server提供，基于AlwaysOn技术实现，支持横向扩展集群读能力</li><li>三节点企业版：仅MySQL提供，一主两备的三节点架构，通过多副本同步复制确保数据的强一致性，金融级可靠</li></ul></li><li>实例规格族<ul><li>共享型：独享被分配的内存，与同一物理机上的其他共享型实例共享CPU和存储资源</li><li>通用型：复用率小于共享型实例</li><li>独享型：具有完全独享的CPU和内存，独占物理机型</li></ul></li><li>存储类型<ul><li>本地SSD盘：与数据库引擎位于同一节点的SSD盘，低I/O延时</li><li>SSD云盘：基于分布式存储架构的弹性块存储设备，实现计算与存储分离</li><li>ESSD云盘：SSD云盘结合25GE网络和RDMA技术</li><li>RDS的可靠性、持久性和读写性能满足产品SLA承诺</li></ul></li></ul><h4 id="PolarDB-MySQL的管理步骤"><a href="#PolarDB-MySQL的管理步骤" class="headerlink" title="PolarDB MySQL的管理步骤"></a>PolarDB MySQL的管理步骤</h4><ul><li>创建数据库集群 -&gt; 设置集群白名单 -&gt; 创建数据库账号 -&gt; 查看连接地址 -&gt; 连接数据库集群</li><li>数据库集群账号：高权限账号（只能通过控制台创建管理）、普通账号（可通过SQL语句创建管理）</li><li>集群连接地址（支持私网和公网）：集群地址、主地址（总是连接到主节点）</li></ul><h4 id="PolarDB-MySQL的连接"><a href="#PolarDB-MySQL的连接" class="headerlink" title="PolarDB MySQL的连接"></a>PolarDB MySQL的连接</h4><ul><li><p>PolarDB MySQL集群支持使用DMS（Data Management Service）和通用MySQL客户端连接</p><ul><li>DMS是阿里云提供的图形化的数据管理工具，它是一种集数据管理、结构管理、访问安全、BI图表、数据趋势、数据轨迹、性能与优化和服务器管理于一体的数据管理服务。</li><li>支持对关系型数据库（MySQL、SQL Server、PostgreSQl等）和NoSQL数据库（MongoDB、 Redis等）的管理，同时还支持Linux服务器管理</li></ul></li><li><p>可以使用任何通用的客户端连接PolarDB集群，例如HeidiSQL</p></li><li><p>命令行连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h&lt;连接地址&gt; -P&lt;端口&gt; -u&lt;用户名&gt; -p&lt;密码&gt; -D&lt;数据库&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="PolarDB-MySQL的数据管理"><a href="#PolarDB-MySQL的数据管理" class="headerlink" title="PolarDB MySQL的数据管理"></a>PolarDB MySQL的数据管理</h4><ul><li>数据迁移/同步方案<ul><li>云数据库PolarDB提供了多种数据迁移同步方案，可满足不同上云、迁云、同步的业务需求，可以在不影响业务的情况下平滑将数据库迁移、同步至阿里云云数据库PolarDB上</li><li>通过使用阿里云数据传输服务（DTS），可以实现PolarDB的结构迁移、全量迁移和实时同步</li><li>多种迁移类型：结构对象迁移、全量数据迁移和增量数据迁移</li></ul></li><li>DTS的特点<ul><li>DTS具备极高的链路稳定性和数据可靠性</li><li>数据传输支持同/异构数据源之间的数据交互，提供数据迁移/订阅/同步交互功能</li><li>支持节点的故障容灾，可实现链路的秒级恢复</li><li>支持断点续传，可有效解决因硬件、网络等异常导致的传输中断</li><li>DTS支持RAM主子账号体系，用户可以使用子账号创建并管理DTS实例，提高企业安全性</li></ul></li></ul><h3 id="阿里云CDN"><a href="#阿里云CDN" class="headerlink" title="阿里云CDN"></a>阿里云CDN</h3><h4 id="CDN的概念"><a href="#CDN的概念" class="headerlink" title="CDN的概念"></a>CDN的概念</h4><ul><li>CDN解决的问题：最后一公里传输质量、弹性带宽、低成本、减少源站压力、节省源站带宽成本</li><li>阿里云内容分发网络（Content Delivery Network，简称CDN）是建立并覆盖在承载网之上，由分布在不同区域的边缘节点服务器群组成的分布式网络。阿里云CDN分担源站压力，避免网络拥塞，确保在不同区域、不同场景下加速网站内容的分发，提高资源访问速度。</li><li>阿里云CDN将源站资源缓存至阿里云遍布全球的加速节点上，当终端用户请求访问和获取该资源时，无需回源，系统自动调用离终端用户最近的CDN节点上已缓存的资源。</li><li>CDN相关产品：对象存储OSS、视频直播点播、阿里云云解析、云服务器ECS、负载均衡（IP地址）</li><li>阿里云CDN的主要优势：稳定快速、性价比高、简单易用、高效智能</li></ul><h4 id="CDN的工作原理"><a href="#CDN的工作原理" class="headerlink" title="CDN的工作原理"></a>CDN的工作原理</h4><ul><li>CDN的衡量指标：延时、下载速度、打开速度、丢包率、回源率、缓存命中率<ul><li>回源率分为回源请求数比和回源流量比</li><li>回源请求数比指边缘节点对于没有缓存、缓存过期（可缓存）和不可缓存的请求占全部请求记录的比例，越低则性能越好</li><li>回源流量比是回源请求文件大小产生的流量和请求本身产生的流量，比值越低，性能越好</li><li>回源流量比 = 回源旑量 / (回源流量 + 用户请求访问的流量)</li></ul></li><li>由于业务场景和业务类型的不同，即使选择了相同配置的CDN服务，实际产生的加速效果也不相同</li></ul><h4 id="CDN中常见名词"><a href="#CDN中常见名词" class="headerlink" title="CDN中常见名词"></a>CDN中常见名词</h4><ul><li>CNAME记录：Canonical Name，别名，用来把一个域名解析到另一个域名，再由另一个域名提供IP地址</li><li>CNAME域名：接入CDN，在阿里云控制台添加域名后，阿里云CDN将分配一个CNAME域名</li><li>DNS：Domain Name System，域名解析服务，DNS的作用是把域名转换成为网络可以识别的IP地址</li><li>边缘节点：在阿里云中，边缘节点、CDN节点、Cache节点、缓存节点、加速节点、阿里云节点、节点等都指阿里云边缘节点</li><li>源站指实际业务的服务器，源站类型可以选择OSS域名、IP、源站或函数计算域名</li><li>回源：CDN节点未缓存请求资源或缓存资源已到期时，回源站获取资源，返回给客户端</li><li>CDN的业务使用场景分为静态内容加速、动态内容加速和安全加速。其中，阿里云CDN只针对于静态内容加速的使用，动态内容加速需使用阿里云全站加速，安全加速需使用阿里云安全加速</li><li>阿里云CDN的业务场景：图片小文件、大文件下载、视音频点播、全站加速、安全加速</li></ul><h4 id="CDN的使用"><a href="#CDN的使用" class="headerlink" title="CDN的使用"></a>CDN的使用</h4><ul><li>开通CDN服务 -&gt; 添加加速域名 -&gt; 配置CNAME -&gt; 停止CDN服务</li><li>如果需要使用CDN加速指定网站上的业务，则需要将该网站作为源站，为其创建加速域名，CDN通过加速域名将源站上的资源缓存到CDN的加速节点，实现资源访问加速</li><li>加速域名注意事项<ol><li>加速名一殷使用子域名或泛域名</li><li>支持泛域名加速,不支持中文域名加谜速</li><li>加速域名不允许重复添加</li><li>如果泛域名未被添加到任何CDN账号下,则其支持多个CDN账号添加不同的子域名</li><li>加速内容必须合法且符合CDN业务规范</li></ol></li><li>域名添加成功后，阿里云CDN会分配对应的CNAME地址。如果想启用CDN加速服务，则需要将加速域名指向CNAME地址，访问加速域名的请求才能转发到CDN节点上，达到加速效果</li><li>不同的DNS服务商修改CNAME记录方式略有不同，请参考相应DNS服务商进行配置</li><li>当不想使用CDN加速服务时，可以在CDN控制台上删除指定加速域名。删除加速域名后，不会产生任何费用</li></ul><h3 id="阿里云云上安全防护"><a href="#阿里云云上安全防护" class="headerlink" title="阿里云云上安全防护"></a>阿里云云上安全防护</h3><h4 id="云计算常见威胁"><a href="#云计算常见威胁" class="headerlink" title="云计算常见威胁"></a>云计算常见威胁</h4><ul><li>针对网络中的一个运行系统而言，网络安全是指网络系统的硬件、软件及其系统中的信息受到保护。包括系统连续、可靠、正常地运行，网络服务不中断，系统中的信息不因偶然的或恶意的行为而遭到破坏、更改或泄露</li><li>网络安全的威胁：病毒、木马、网络攻击、人为篡改、自然灾害</li><li>传统集中式管理方式有很大安全问题，云计算的多租户、分布性、对网络和服务提供者的依赖性为安全问题带来新的挑战。除了传统信息系统的安全问题外，云计算由于其本身的特点，带来了新的安全威胁</li><li>云计算安全风险：数据丢失或泄露、系统和技术漏洞、账号与身份管理不善、数据集中的安全问题、API安全存疑、DoS攻击泛滥</li><li>云上安全是由阿里云和用户共同负责构建云安全环境</li><li>阿里云安全体系：云盾、云产品安全、云操作系统安全、安全运维</li></ul><h4 id="阿里云DDoS防护"><a href="#阿里云DDoS防护" class="headerlink" title="阿里云DDoS防护"></a>阿里云DDoS防护</h4><ul><li>分布式拒绝服务（Distributed denial of service，简称DDoS）将多台计算机联合起来作为攻击平台，通过远程连接利用恶意程序，对一个或多个目标发起DDoS攻击，消耗目标服务器性能或网络者宽，从而造成服务器无法正常地提供服务</li><li>DDoS攻击会对业务造成：重大经济损失、数据泄露、恶意竞争</li><li>阿里云DDoS原生防护是一款针对阿里云ECS、SLB、Web应用防火墙、EP等产品直接提升DDoS防御能力的安全产品。相比于DDoS高防，DDoS原生防护可以直接把防御能力加载到云产品上，不需要更换IP，也没有四层端口、七层域名数等限制。同时，DDoS原生防护部署简易，购买后只需要绑定需要防护的云产品的IP地址即可使用</li><li>DDoS高防（Anti-DDoS）是阿里云提供的DDoS攻击代理防护服务。当用户的互联网服务器遭受大流量的DDoS攻击时，DDoS高防可以保护其应用服务持续可用。DDσS高防通过DNS解析调度流量到阿里云高防网络，代理接入阿里云DDoS防护系统，抵御流量型和资源耗尽型DDoS攻击</li><li>DDoS高防支持通过DNS解析和IP直接指向两种引流方式，实现网站域名和业务端口的接入防护，根据用户在DDoS高防服务中为业务配置的转发规则，DDoS高防将业务的DNS域名解析或业务IP指向DDoS高防实例IP或CNAME地址进行引流</li><li>来自公网的访问流量都将优先经过高防机房，恶意攻击流量将在高防流量清洗中心进行清洗过滤，正常的访问流量通过端口协议转发的方式返回给源站服务器，从而保障源站服务器的稳定访问</li><li>使用DDoS高防防护网站流程：添加网站业务转发规则 -&gt; 接入网站业务流量 -&gt; 设置网站业务防护策略 -&gt; 查看网站业务防护数据</li><li>DDoS高防除了可以防御最常用的网站类业务，同时也支持防护非网站业务</li></ul><h4 id="Web应用防火墙"><a href="#Web应用防火墙" class="headerlink" title="Web应用防火墙"></a>Web应用防火墙</h4><ul><li>云盾web应用防火墙（Web Application Firewall，简称WAF）基于云安全大数据能力，用于防御SQL注入、XSS跨站脚本、常见Web服务器插件漏洞、木马上传、非授权核心资源访问等OWASP常见攻击，并过滤海量恶意CC攻击，避免您的网站资产数据泄露，保障网站的安全与可用性</li><li>云盾web应用防火墙具有部署简易、防护及时精确、大数据驱动、高可靠等优势</li><li>使用Web应用防火墙之前，必须将要防护的网站接入web应用防火墙。网站接入默认使用DNS配置模式，需要在web应用防火墙添加琙名，设置网站流量的转发信息，并修改域名的DNS解析设置，将网站流量解析到web应用防火墙进行防护</li><li>开通Web应用防火墙服务后,可以使用DNS配置模式或透明代理模式将网站接入web应用防火墙进行防护</li></ul><h4 id="云安全中心"><a href="#云安全中心" class="headerlink" title="云安全中心"></a>云安全中心</h4><ul><li>云安全中心是一个实时识别、分析、预警安全威胁的统安全管理系统，通过防勒索、防病毒、防篡改、合规检査等安全能力，实现威胁检测、响应、溯源的自动化安全运营闭环，保护云上资产和本地服务器并满足监管合规要求</li><li>云安全中心提供基础版、基础杀毒版、高级版和企业版多个版本</li><li>云安全中心产品优势：安全事件告警和检索、漏洞和基线配置检测、安全风险量化和预测、安全可视化界面、支持病毒云查杀、符合多项国际安全认证标准</li><li>资产安全状态通过云安全中心Agent插件收集和检测得出</li><li>Agent插件：云安全中心提供的本地安全插件，必须在要防护的服务器上安装该插件才能使用云安全中心的服务</li></ul><h4 id="阿里云云监控"><a href="#阿里云云监控" class="headerlink" title="阿里云云监控"></a>阿里云云监控</h4><ul><li><p>云监控（Cloud monitor）是一项针对阿里云资源和互联网应用进行监控的服务，云监控为云上用户提供开箱即用的企业级开放型一站式监控解决方案。云监控涵盖IT设施基础监控和外网网络质量拔测监控，是基于事件、自定义指标和日志的业务监控，全方位提供更高效、全面、省钱的监控服务</p></li><li><p>云监控结合阿里云云计算平台强大的数据分析能力，提供云服务监控、站点监控和自定义监控，云产品、业务保驾护航，主要有天然集成、数据可视化、监控数据处理、灵活报警等优势</p></li><li><p>云监控的应用场景：云服务监控、系统监控、及时处理异常场景、及时扩容场景、站点监控、自定义监控</p></li><li><p>主机监控的应用</p><ul><li>混合云场景下监控解决方案云监控通过插件采集用户服务器监控数据，该插件支持安装在非ECS服务器上，解决云上下双重环境的基础监控问题</li><li>企业级用户的监控解决方案主机监控提供应用分组功能，支持将阿里云不同地域的服务器分配在同一分组中，真正从业务角度管理服务器。同时，提供分组维度的报警功能管理能力，一次规则设置可以作用全组，极大提升监控运维效率和管理体验</li></ul></li><li><p>自定义监控</p><ul><li>提供了自由定义监控项及报警规则的功能</li><li>可以针对自己关心的业务指标进行监控，将采集到的监控数据上报至云监控，由云监控来进行数据处理，并根据处理结果进行报警</li></ul></li><li><p>事件监控与自定义监控的区别：事件监控用于解决非连续的事件类型数据监控数据上报、查询与报警的场景，而自定义监控用于解决周期性持续采集的时间序列监控数据上报、查询与报警的场景</p></li><li><p>模拟CPU占用场景</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 安装压力测试工具</span><br><span class="line">yum install –y stress</span><br><span class="line">// 执行压力测试命令</span><br><span class="line">stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --<span class="built_in">timeout</span> 10m</span><br><span class="line">// 查看用户的邮箱，将会收到报警邮件</span><br></pre></td></tr></table></figure></li><li><p>阿里云云监控支持非阿里云主机的监控，需要手动安装插件</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>What is Data Science?</title>
      <link href="/What-is-Data-Science/"/>
      <url>/What-is-Data-Science/</url>
      
        <content type="html"><![CDATA[<blockquote><p>The art of uncovering the insights and trends in data has been around since ancient times. The ancient Egyptians used census data to increase efficiency in tax collection and they accurately predicted the flooding of the Nile river every year. Since then, people working in data science have carved out a unique and distinct field for the work they do. This field is data science. This course provided by IBM gives me a chance to get an overview of what data science is today. The following are the notes I took during this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/what-is-datascience.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Defining-Data-Science"><a href="#Defining-Data-Science" class="headerlink" title="Defining Data Science"></a>Defining Data Science</h3><ul><li>Data science is the field of exploring, manipulating, and analyzing data, and using data to answer questions or make recommendations.</li><li>Data Science can help organizations to understand their environments, analyze existing issues, and reveal previously hidden opportunities.</li><li>Data scientists can use powerful data visualization tools to help stakeholders understand the nature of the results, and the recommended action to take. </li><li>Data Science is changing the way we work; it’s changing the way we use data and it’s changing the way organizations understand the world.</li><li>There are many paths to a career in data science; most, but not all, involve a little math, a little science, and a lot of curiosity about data.</li><li>New data scientists need to be curious, judgmental and argumentative.</li><li>Data Science: The Sexiest Job in the 21st Century</li></ul><h3 id="What-Do-Data-Scientists-Do"><a href="#What-Do-Data-Scientists-Do" class="headerlink" title="What Do Data Scientists Do?"></a>What Do Data Scientists Do?</h3><ul><li>A day in the Life of a Data Scientist: to discover optimum solutions to existing problems</li><li>Old problems, new problems, Data Science solutions<ul><li>Identify the problem and establish a clear understanding of it. </li><li>Gather the data for analysis. </li><li>Identify the right tools to use.</li><li>Develop a data strategy. </li><li>Case studies are also helpful in customizing a potential solution.</li></ul></li><li>Data Science Topics and Algorithms<ul><li>Regression、Data visualization、Artificial neural networks、Structured data</li><li>Using complicated machine learning algorithms does not always guarantee achieving a better performance.</li></ul></li><li>Accessing algorithms, tools, and data through the Cloud enables Data Scientists to stay up-to-date and collaborate easily.</li></ul><h3 id="Big-Data-and-Data-Mining"><a href="#Big-Data-and-Data-Mining" class="headerlink" title="Big Data and Data Mining"></a>Big Data and Data Mining</h3><ul><li>Foundations of Big Data<ul><li>Big Data refers to the dynamic, large and disparate volumes of data being created by people, tools, and machines. </li><li>It requires new, innovative, and scalable technology to collect, host, and analytically process the vast amount of data gathered in order to derive real-time business insights that relate to consumers, risk, profit, performance, productivity management, and enhanced shareholder value.</li><li>The V’s of Big Data: Velocity、Volume、Variety、Veracity、Value</li></ul></li><li>Hadoop and other tools, combined with distributed computing power, are used to handle the demands of Big Data.</li><li>Big Data is driving digital transformation</li><li>Most of the components of data science, such as probability, statistics, linear algebra, and programming, have been around for many decades but now we have the computational capabilities to apply combine them and come up with new techniques and learning algorithms.</li><li>Data Science Skills &amp; Big Data</li><li>Data Mining: the process of automatically searching and analyzing data, discovering previously unrevealed patterns. It involves preprocessing the data to prepare it and transforming it into an appropriate format.</li></ul><h3 id="Deep-Learning-and-Machine-Learning"><a href="#Deep-Learning-and-Machine-Learning" class="headerlink" title="Deep Learning and Machine Learning"></a>Deep Learning and Machine Learning</h3><ul><li>Data Science is the process and method for extracting knowledge and insights from large volumes of disparate data, it’s a broad term encompass the entire data processing methodology.</li><li>AI includes everything that allows computers to learn how to solve problems and make intelligent decisions.</li><li>Machine learning is a subset of AI that uses computer algorithms to analyze data and make intelligent decisions based on what it is learned without being explicitly programmed.</li><li>Machine learning algorithms are trained with large sets of data and they learn from examples. They do not follow rules-based algorithms.</li><li>Machine learning is what enables machines to solve problems on their own and make accurate predictions using the provided data.</li><li>Deep learning is a specialized subset of machine learning that uses layered neural networks to simulate human decision-making.</li><li>Deep learning algorithms can label and categorize information and identify patterns. It is what enables AI systems to continuously learn on the job and improve the quality and accuracy of results by determining whether decisions were correct.</li><li>A neural network in AI is a collection of small computing units called neurons that take incoming data and learn to make decisions over time. </li><li>Neural networks are often layer-deep and are the reason deep learning algorithms become more efficient as the data sets increase in volume, as opposed to other machine learning algorithms that may plateau as data increases.</li><li>Machine Learning has many applications, from recommender systems that provide relevant choices for customers on commercial websites, to detailed analysis of financial markets. (Predictive analytics、Decision trees、Bayesian Analysis、Naive Bayes、Recommendations)</li><li>Regression</li></ul><h3 id="Data-Science-in-Business"><a href="#Data-Science-in-Business" class="headerlink" title="Data Science in Business"></a>Data Science in Business</h3><ul><li>Data Science helps physicians provide the best treatment for their patients, and helps meteorologists predict the extent of local weather events, and can even help predict natural disasters like earthquakes and tornadoes.</li><li>That companies can start on their data science journey by capturing data. Once they have data, they can begin analyzing it.</li><li>Applications of Data Science: Recommendation engine、Siri、Google</li><li>The purpose of the final deliverable of a Data Science project is to communicate new information and insights from the data analysis to key decision-makers.</li></ul><h3 id="Careers-and-Recruiting-in-Data-Science"><a href="#Careers-and-Recruiting-in-Data-Science" class="headerlink" title="Careers and Recruiting in Data Science"></a>Careers and Recruiting in Data Science</h3><ul><li>Data Scientists need programming, mathematics, and database skills, many of which can be gained through self-learning.</li><li>Companies recruiting for a Data Science team need to understand the variety of different roles Data Scientists can play, and look for soft skills like storytelling and relationship building as well as technical skills.</li><li>Curiosity is one of the most important skills that a data scientist should possess.</li><li>High school students considering a career in Data Science should learn programming, math, databases, and most importantly practice their skills.</li></ul><h3 id="The-Report-Structure"><a href="#The-Report-Structure" class="headerlink" title="The Report Structure"></a>The Report Structure</h3><ul><li>The length and content of the final report will vary depending on the needs of the project.</li><li>The structure of the final report for a Data Science project should include a cover page, table of contents, executive summary, detailed contents, acknowledgements, references and appendices.</li><li>The report should present a thorough analysis of the data and communicate the project findings.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建 LAMP 环境安装部署 Wordpress</title>
      <link href="/%E4%BA%91%E4%B8%8A%E6%90%AD%E5%BB%BAWordPress/"/>
      <url>/%E4%BA%91%E4%B8%8A%E6%90%AD%E5%BB%BAWordPress/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近购买了阿里云学生机（轻量应用服务器，单核2G内存），预装载CentOS 7.6。官方推荐Putty连接，我使用的SSH软件为Xshell，用Xftp传输文件。第一次接触云服务器，在云主机上搭建 LAMP 环境并部署 Wordpress 博客应用，仅供测试参考。</p></blockquote><span id="more"></span><h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><ul><li>打开Xshell，填写主机IP、用户名（root）、密码</li><li>命令行出现：<code>Welcome to Alibaba Cloud Elastic Compute Service !</code></li></ul><h3 id="安装Apache-HTTP服务"><a href="#安装Apache-HTTP服务" class="headerlink" title="安装Apache HTTP服务"></a>安装Apache HTTP服务</h3><ul><li><p>Apache是世界使用排名第一的Web服务器端软件，它可以运行在几乎所有广泛使用的计算机平台上，Apache由于其跨平台和安全性被广泛使用</p></li><li><p>安装Apache服务及其扩展包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd httpd-manual mod_ssl mod_perl mod_auth_mysql</span><br></pre></td></tr></table></figure></li><li><p>启动Apache服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd.service</span><br></pre></td></tr></table></figure></li><li><p>访问IP地址，出现Apache测试页面</p></li><li><p>Apache默认监听80端口</p></li></ul><h3 id="安装-MySQL-数据库"><a href="#安装-MySQL-数据库" class="headerlink" title="安装 MySQL 数据库"></a>安装 MySQL 数据库</h3><ul><li><p>使用wordpress搭建云上博客，需要使用MySQL数据库存储数据</p></li><li><p>下载并安装MySQL官方的<code>Yum Repository</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">//三行分开输入</span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure></li><li><p>启动 MySQL 数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure></li><li><p>查看MySQL运行状态（显示<code>Active: active</code>）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure></li><li><p>查看MySQL初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure></li><li><p>登陆MySQL数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></li><li><p>修改MySQL密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>创建wordpress数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database wordpress; </span><br><span class="line">show databases;    #查看数据库是否已创建</span><br></pre></td></tr></table></figure></li><li><p>输入<code>exit</code>退出数据库</p></li></ul><h3 id="安装PHP语言环境"><a href="#安装PHP语言环境" class="headerlink" title="安装PHP语言环境"></a>安装PHP语言环境</h3><ul><li><p>WordPress是使用PHP语言开发的博客平台，PHP是全世界最好的语言(→_→)</p></li><li><p>安装PHP环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install php php-mysql gd php-gd gd-devel php-xml php-common php-mbstring php-ldap php-pear php-xmlrpc php-imap</span><br></pre></td></tr></table></figure></li><li><p>创建PHP测试页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php phpinfo(); ?&gt;&quot; &gt; /var/www/html/phpinfo.php</span><br></pre></td></tr></table></figure></li><li><p>重启Apache服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure></li><li><p>访问<code>IP地址/phpinfo.php</code>，显示PHP测试页面</p></li></ul><h3 id="安装配置Wordpress"><a href="#安装配置Wordpress" class="headerlink" title="安装配置Wordpress"></a>安装配置Wordpress</h3><ul><li><p>安装Wordpress</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wordpress</span><br></pre></td></tr></table></figure></li><li><p>进入/usr/share/wordpress目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/wordpress</span><br></pre></td></tr></table></figure></li><li><p>修改<code>wp-config.php</code>指向路径为绝对路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -snf /etc/wordpress/wp-config.php wp-config.php</span><br></pre></td></tr></table></figure></li><li><p>使用<code>ll</code>查看修改后的目录结构</p></li><li><p>在Apache的根目录<code>/var/www/html</code>下，创建一个<code>wp-blog</code>文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/html/wp-blog</span><br></pre></td></tr></table></figure></li><li><p>移动wordpress到Apache根目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv * /var/www/html/wp-blog/</span><br></pre></td></tr></table></figure></li><li><p>修改<code>wp-config.php</code>配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/database_name_here/wordpress/&#x27; /var/www/html/wp-blog/wp-config.php</span><br><span class="line">sed -i &#x27;s/username_here/root/&#x27; /var/www/html/wp-blog/wp-config.php</span><br><span class="line">sed -i &#x27;s/password_here/数据库密码/&#x27; /var/www/html/wp-blog/wp-config.php</span><br></pre></td></tr></table></figure></li><li><p>查看文件配置是否修改成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n /var/www/html/wp-blog/wp-config.php</span><br></pre></td></tr></table></figure></li><li><p>重启Apache服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure></li></ul><h3 id="测试Wordpress"><a href="#测试Wordpress" class="headerlink" title="测试Wordpress"></a>测试Wordpress</h3><ul><li><p>访问<code>IP地址/wp-blog/wp-admin/install.php</code></p></li><li><p>访问<code>IP地址/wp-blog/</code>即为WordPress页面</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IBM Data Analyst Capstone Project</title>
      <link href="/IBM-Data-Analyst-Capstone-Project/"/>
      <url>/IBM-Data-Analyst-Capstone-Project/</url>
      
        <content type="html"><![CDATA[<blockquote><p>In this course provided by IBM, I will assume the role of an Associate Data Analyst who has recently joined the organization and be presented with a business challenge that requires data analysis to be performed on real-world datasets. The capstone project will culminate with a presentation of your data analysis report, with an executive summary for the various stakeholders in the organization. I believe this project is a great opportunity to showcase Data Analytics skills, and demonstrate proficiency to potential employers. The following are the notes I took during this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/IBM-Data-Analyst.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/pdf/Coursera-Data-Analyst-Capstone-Project.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Data-Collection"><a href="#Data-Collection" class="headerlink" title="Data Collection"></a>Data Collection</h3><h4 id="Collecting-Data-Using-APIs"><a href="#Collecting-Data-Using-APIs" class="headerlink" title="Collecting Data Using APIs"></a>Collecting Data Using APIs</h4><ul><li><p>The <code>HTTP</code> protocol allows you to send and receive information through the web including webpages, images, and other web resources.</p></li><li><p>Uniform resource locator(URL): the most popular way to find resources on the web</p><ul><li>Scheme: <code>http://</code></li><li>Internet address or Base URL: <code>www.ibm.com</code> </li><li>Route location on the web server: <code>/images/IDSNlogo.png</code></li></ul></li><li><p>Request</p><ul><li>Request start line = <code>GET</code> method + location of the resource <code>/index.html</code> + <code>HTTP</code> version</li><li>Request header passes additional information with an <code>HTTP</code> request</li></ul></li><li><p>Response</p><ul><li>Response start line = version number <code>HTTP/1.0</code> + a status code (200) meaning success, + a descriptive phrase (OK). </li><li>Response header contains useful information</li><li>Response body containing the requested file an <code>HTML</code> document</li></ul></li><li><p>Requests in Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> IFrame</span><br><span class="line"><span class="comment">#GET request //# Use single quotation marks for defining string</span></span><br><span class="line">url=<span class="string">&#x27;https://www.ibm.com/&#x27;</span>  </span><br><span class="line">r=requests.get(url)</span><br><span class="line"><span class="comment">#status of the request</span></span><br><span class="line">r.status_code  </span><br><span class="line"><span class="comment">#view request headers //r.request.body</span></span><br><span class="line"><span class="built_in">print</span>(r.request.headers)  </span><br><span class="line"><span class="comment">#HTTP response header</span></span><br><span class="line">header=r.headers  </span><br><span class="line"><span class="comment">#obtain the date</span></span><br><span class="line">header[<span class="string">&#x27;date&#x27;</span>]  </span><br><span class="line"><span class="comment">#obtain the type of data</span></span><br><span class="line">header[<span class="string">&#x27;Content-Type&#x27;</span>]  </span><br><span class="line">r.encoding</span><br><span class="line"><span class="comment">#view text</span></span><br><span class="line">r.text[<span class="number">0</span>:<span class="number">100</span>]  </span><br><span class="line"><span class="comment">#write content(image)</span></span><br><span class="line">path=os.path.join(os.getcwd(),<span class="string">&#x27;image.png&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br><span class="line">Image.<span class="built_in">open</span>(path)</span><br></pre></td></tr></table></figure></li><li><p>Get Request with URL Parameters</p><ul><li>You can use the <code>GET</code> method to modify the results of your query</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url_get=<span class="string">&#x27;http://httpbin.org/get&#x27;</span></span><br><span class="line"><span class="comment">#To create a Query string, add a dictionary.</span></span><br><span class="line">payload=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Joseph&quot;</span>,<span class="string">&quot;ID&quot;</span>:<span class="string">&quot;123&quot;</span>&#125;  </span><br><span class="line">r=requests.get(url_get,params=payload)</span><br><span class="line">r.url  <span class="comment">#&#x27;http://httpbin.org/get?name=Joseph&amp;ID=123&#x27;</span></span><br><span class="line"><span class="comment">#key args in JSON format</span></span><br><span class="line">r.json()[<span class="string">&#x27;args&#x27;</span>]  </span><br></pre></td></tr></table></figure></li><li><p>Post Requests</p><ul><li>the <code>POST</code> request sends the data in a request body</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url_post=<span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">r_post=requests.post(url_post,data=payload)</span><br><span class="line">r_post.url </span><br><span class="line">r_post.request.body</span><br><span class="line">r_post.json()[<span class="string">&#x27;form&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul><h4 id="Collecting-Data-Using-Webscraping"><a href="#Collecting-Data-Using-Webscraping" class="headerlink" title="Collecting Data Using Webscraping"></a>Collecting Data Using Webscraping</h4><ul><li><p>Review of Webscraping</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  <span class="comment"># this module helps in web scrapping.</span></span><br><span class="line"><span class="keyword">import</span> requests  <span class="comment"># this module helps us to download a web page</span></span><br><span class="line">url = <span class="string">&quot;http://www.ibm.com&quot;</span></span><br><span class="line"><span class="comment"># get the contents of the webpage in text format and store in a variable called data</span></span><br><span class="line">data  = requests.get(url).text  </span><br><span class="line"><span class="comment"># create a soup object using the variable &#x27;data&#x27;</span></span><br><span class="line">soup = BeautifulSoup(data,<span class="string">&quot;html5lib&quot;</span>)  </span><br><span class="line"><span class="comment"># in html anchor/link is represented by the tag &lt;a&gt;</span></span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;a&#x27;</span>):  </span><br><span class="line">    <span class="built_in">print</span>(link.get(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line"><span class="comment"># in html image is represented by the tag &lt;img&gt;</span></span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;img&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(link.get(<span class="string">&#x27;src&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>Scrape data from html table</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/labs/datasets/HTMLColorCodes.html&quot;</span></span><br><span class="line"><span class="comment"># get the contents of the webpage in text format and store in a variable called data</span></span><br><span class="line">data  = requests.get(url).text  </span><br><span class="line">soup = BeautifulSoup(data,<span class="string">&quot;html5lib&quot;</span>)</span><br><span class="line"><span class="comment"># in html table is represented by the tag &lt;table&gt;</span></span><br><span class="line">table = soup.find(<span class="string">&#x27;table&#x27;</span>) </span><br><span class="line"><span class="comment"># in html table row is represented by the tag &lt;tr&gt;</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> table.find_all(<span class="string">&#x27;tr&#x27;</span>): </span><br><span class="line">    <span class="comment"># in html a column is represented by the tag &lt;td&gt;</span></span><br><span class="line">    cols = row.find_all(<span class="string">&#x27;td&#x27;</span>) </span><br><span class="line">    <span class="comment"># store the value in column 3 as color_name</span></span><br><span class="line">    color_name = cols[<span class="number">2</span>].getText() </span><br><span class="line">    <span class="comment"># store the value in column 4 as color_code</span></span><br><span class="line">    color_code = cols[<span class="number">3</span>].getText() </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;---&gt;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(color_name,color_code))</span><br></pre></td></tr></table></figure></li></ul><h4 id="Exploring-Data"><a href="#Exploring-Data" class="headerlink" title="Exploring Data"></a>Exploring Data</h4><ul><li><p>Load the dataset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">dataset_url = <span class="string">&quot;https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m1_survey_data.csv&quot;</span></span><br><span class="line">df = pd.read_csv(dataset_url)</span><br></pre></td></tr></table></figure></li><li><p>Explore the dataset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Display the top &amp; bottom 5 rows and columns from your dataset</span></span><br><span class="line">df.head()  </span><br><span class="line">df.tail()</span><br><span class="line"><span class="comment">#The number of rows in the dataset.</span></span><br><span class="line">df.shape[<span class="number">0</span>]  </span><br><span class="line"><span class="comment">#The number of columns in the dataset.</span></span><br><span class="line">df.shape[<span class="number">1</span>]  </span><br><span class="line"><span class="comment">#Print the datatype of all columns.</span></span><br><span class="line">df.dtypes  </span><br><span class="line"><span class="comment">#Print the mean age of the survey participants.</span></span><br><span class="line">df[<span class="string">&quot;Age&quot;</span>].mean()</span><br><span class="line"><span class="comment">#Print how many unique countries are there in the Country column.</span></span><br><span class="line">df[<span class="string">&quot;Country&quot;</span>].nunique()  </span><br></pre></td></tr></table></figure></li></ul><h3 id="Data-Wrangling"><a href="#Data-Wrangling" class="headerlink" title="Data Wrangling"></a>Data Wrangling</h3><ul><li><p>Load the dataset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">&quot;https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m1_survey_data.csv&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>Finding Duplicates</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Find how many duplicate rows exist in the dataframe.</span></span><br><span class="line">df.duplicated(keep=<span class="string">&#x27;first&#x27;</span>).<span class="built_in">sum</span>()  </span><br><span class="line"><span class="comment">#Show duplicated rows</span></span><br><span class="line">duplicateRows = df[df.duplicated()]  </span><br><span class="line">duplicateRows  </span><br><span class="line"><span class="comment">#numbers of duplicate values in the column Respondent</span></span><br><span class="line">df[<span class="string">&quot;Respondent&quot;</span>].duplicated(keep=<span class="string">&#x27;first&#x27;</span>).<span class="built_in">sum</span>()  </span><br></pre></td></tr></table></figure></li><li><p>Removing Duplicates</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Remove the duplicate rows from the dataframe.</span></span><br><span class="line">df.drop_duplicates(ignore_index=<span class="literal">True</span>, inplace=<span class="literal">True</span>)  </span><br><span class="line"><span class="comment">#Verify if duplicates were actually dropped.</span></span><br><span class="line">df.duplicated(keep=<span class="string">&#x27;first&#x27;</span>).<span class="built_in">sum</span>()  </span><br><span class="line"><span class="comment">#number of rows and columns left</span></span><br><span class="line">df.shape  </span><br><span class="line"><span class="comment">#numbers of unique rows left in the column Respondent</span></span><br><span class="line">df[<span class="string">&quot;Respondent&quot;</span>].nunique  </span><br></pre></td></tr></table></figure></li><li><p>Finding Missing Values</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Find the missing values for all columns.</span></span><br><span class="line">df.isnull().<span class="built_in">sum</span>()  </span><br><span class="line"><span class="comment">#Find out how many rows are missing in the column EdLevel</span></span><br><span class="line">df[<span class="string">&quot;EdLevel&quot;</span>].isnull().<span class="built_in">sum</span>()  </span><br></pre></td></tr></table></figure></li><li><p>Determine Missing Values</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Find the value counts for the column WorkLoc.</span></span><br><span class="line">df[<span class="string">&quot;WorkLoc&quot;</span>].value_counts()  </span><br><span class="line"><span class="comment">#Impute (replace) all the empty rows in the column WorkLoc with the value that you have identified as majority.</span></span><br><span class="line">df[<span class="string">&quot;WorkLoc&quot;</span>].fillna(value=<span class="string">&quot;Office&quot;</span>,inplace=<span class="literal">True</span>)  </span><br><span class="line"><span class="comment">#After imputation there should ideally not be any empty rows in the WorkLoc column.</span></span><br><span class="line">df[<span class="string">&quot;WorkLoc&quot;</span>].isnull().<span class="built_in">sum</span>()  </span><br></pre></td></tr></table></figure></li><li><p>Normalizing Data</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#List out the various categories in the column &#x27;CompFreq&#x27;</span></span><br><span class="line">df[<span class="string">&quot;CompFreq&quot;</span>].unique()  </span><br><span class="line"><span class="comment">#If the CompFreq is Yearly then use the exising value in CompTotal</span></span><br><span class="line">df[<span class="string">&quot;CompFreq&quot;</span>].replace(to_replace=<span class="string">&quot;Yearly&quot;</span>,value=<span class="number">1</span>,inplace=<span class="literal">True</span>)  </span><br><span class="line"><span class="comment">#If the CompFreq is Monthly then multiply the value in CompTotal with 12 (months in an year)</span></span><br><span class="line">df[<span class="string">&quot;CompFreq&quot;</span>].replace(to_replace=<span class="string">&quot;Monthly&quot;</span>,value=<span class="number">12</span>,inplace=<span class="literal">True</span>)  </span><br><span class="line"><span class="comment">#If the CompFreq is Weekly then multiply the value in CompTotal with 52 (weeks in an year)</span></span><br><span class="line">df[<span class="string">&quot;CompFreq&quot;</span>].replace(to_replace=<span class="string">&quot;Weekly&quot;</span>,value=<span class="number">52</span>,inplace=<span class="literal">True</span>)  </span><br><span class="line">df[<span class="string">&quot;CompFreq&quot;</span>].unique()</span><br><span class="line">df[<span class="string">&quot;CompFreq&quot;</span>].value_counts()</span><br><span class="line"><span class="comment">#it makes comparison of salaries easy.</span></span><br><span class="line">df[<span class="string">&#x27;NormalizedAnnualCompensation&#x27;</span>] = df[<span class="string">&quot;CompTotal&quot;</span>] * df[<span class="string">&quot;CompFreq&quot;</span>]  </span><br><span class="line">df[<span class="string">&quot;Respondent&quot;</span>].nunique()</span><br><span class="line">df[<span class="string">&quot;ConvertedComp&quot;</span>].describe()</span><br><span class="line">df[<span class="string">&quot;ConvertedComp&quot;</span>].hist(figsize=(<span class="number">15</span>,<span class="number">4</span>))</span><br><span class="line">df[<span class="string">&#x27;NormalizedAnnualCompensation&#x27;</span>].median()</span><br></pre></td></tr></table></figure></li></ul><h3 id="Exploratory-Data-Analysis"><a href="#Exploratory-Data-Analysis" class="headerlink" title="Exploratory Data Analysis"></a>Exploratory Data Analysis</h3><ul><li><p>Import necessary modules</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">%matplotlib inline</span><br><span class="line">df = pd.read_csv(<span class="string">&quot;https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m2_survey_data.csv&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>Distribution: Determine how the data is distributed</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Plot the distribution curve for the column ConvertedComp</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line">sns.distplot(a=df[<span class="string">&quot;ConvertedComp&quot;</span>],bins=<span class="number">20</span>,hist=<span class="literal">False</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#Plot the histogram for the column ConvertedComp</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line">sns.distplot(a=df[<span class="string">&quot;ConvertedComp&quot;</span>],bins=<span class="number">20</span>,kde=<span class="literal">False</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#the median of the column ConvertedComp</span></span><br><span class="line">df[<span class="string">&quot;ConvertedComp&quot;</span>].median()</span><br><span class="line"><span class="comment">#number of responders identified themselves only as a Man</span></span><br><span class="line">df[<span class="string">&quot;Gender&quot;</span>].value_counts()</span><br><span class="line"><span class="comment">#the median number of ConvertedComp of responders identified themselves only as a Woman</span></span><br><span class="line">woman = df[df[<span class="string">&quot;Gender&quot;</span>] == <span class="string">&quot;Woman&quot;</span>]</span><br><span class="line">woman[<span class="string">&quot;ConvertedComp&quot;</span>].median()</span><br><span class="line"><span class="comment">#five number summary for the column Age</span></span><br><span class="line">df[<span class="string">&quot;Age&quot;</span>].describe()</span><br></pre></td></tr></table></figure></li><li><p>Outliers</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Find out if outliers exist in the column ConvertedComp using a box plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line">sns.boxplot(x=df.ConvertedComp, data=df)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#Find out the Inter Quartile Range for the column ConvertedComp</span></span><br><span class="line">df[<span class="string">&quot;ConvertedComp&quot;</span>].describe()</span><br><span class="line"><span class="comment">#Find out the upper and lower bounds.</span></span><br><span class="line">Q1 = df[<span class="string">&quot;ConvertedComp&quot;</span>].quantile(<span class="number">0.25</span>)</span><br><span class="line">Q3 = df[<span class="string">&quot;ConvertedComp&quot;</span>].quantile(<span class="number">0.75</span>)</span><br><span class="line">IQR = Q3 - Q1</span><br><span class="line"><span class="built_in">print</span>(IQR)</span><br><span class="line"><span class="comment">#Identify how many outliers are there in the ConvertedComp column</span></span><br><span class="line">outliers = (df[<span class="string">&quot;ConvertedComp&quot;</span>] &lt; (Q1 - <span class="number">1.5</span> * IQR)) | (df[<span class="string">&quot;ConvertedComp&quot;</span>] &gt; (Q3 + <span class="number">1.5</span> * IQR))</span><br><span class="line">outliers.value_counts()</span><br><span class="line">less = (df[<span class="string">&quot;ConvertedComp&quot;</span>] &lt; (Q1 - <span class="number">1.5</span> * IQR))</span><br><span class="line">less.value_counts()</span><br><span class="line">more = (df[<span class="string">&quot;ConvertedComp&quot;</span>] &gt; (Q3 + <span class="number">1.5</span> * IQR))</span><br><span class="line">more.value_counts()</span><br><span class="line"><span class="comment">#Create a new dataframe by removing the outliers from the ConvertedComp column</span></span><br><span class="line">RemoveConvertedcomp = df[~(df[<span class="string">&quot;ConvertedComp&quot;</span>] &gt; (Q3 + <span class="number">1.5</span> * IQR))]</span><br><span class="line">RemoveConvertedcomp.head()</span><br><span class="line">RemoveConvertedcomp[<span class="string">&quot;ConvertedComp&quot;</span>].median()</span><br><span class="line">RemoveConvertedcomp[<span class="string">&quot;ConvertedComp&quot;</span>].mean()</span><br></pre></td></tr></table></figure></li><li><p>Correlation: Find the correlation between all numerical columns</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.corr()</span><br></pre></td></tr></table></figure></li></ul><h3 id="Data-Visualization"><a href="#Data-Visualization" class="headerlink" title="Data Visualization"></a>Data Visualization</h3><ul><li><p>Work with Database</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">!wget https://cf-courses-data.s3.us.cloud-<span class="built_in">object</span>-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m4_survey_data.sqlite</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># open a database connection</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">&quot;m4_survey_data.sqlite&quot;</span>) </span><br><span class="line"><span class="comment"># print how many rows are there in the table named &#x27;master&#x27;</span></span><br><span class="line">QUERY = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SELECT COUNT(*)</span></span><br><span class="line"><span class="string">FROM master</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># the read_sql_query runs the sql query and returns the data as a dataframe</span></span><br><span class="line">df = pd.read_sql_query(QUERY,conn)</span><br><span class="line">df.head()</span><br><span class="line"><span class="comment"># print all the tables names in the database</span></span><br><span class="line">QUERY = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SELECT name as Table_Name FROM</span></span><br><span class="line"><span class="string">sqlite_master WHERE</span></span><br><span class="line"><span class="string">type = &#x27;table&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># the read_sql_query runs the sql query and returns the data as a dataframe</span></span><br><span class="line">pd.read_sql_query(QUERY,conn)</span><br><span class="line"><span class="comment">#run a group by query</span></span><br><span class="line">QUERY = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SELECT Age,COUNT(*) as count</span></span><br><span class="line"><span class="string">FROM master</span></span><br><span class="line"><span class="string">group by age</span></span><br><span class="line"><span class="string">order by age</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">pd.read_sql_query(QUERY,conn)</span><br><span class="line"><span class="comment">#Describe a table</span></span><br><span class="line">table_name = <span class="string">&#x27;master&#x27;</span>  <span class="comment"># the table you wish to describe</span></span><br><span class="line">QUERY = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SELECT sql FROM sqlite_master</span></span><br><span class="line"><span class="string">WHERE name= &#x27;&#123;&#125;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.<span class="built_in">format</span>(table_name)</span><br><span class="line">df = pd.read_sql_query(QUERY,conn)</span><br><span class="line"><span class="built_in">print</span>(df.iat[<span class="number">0</span>,<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li><li><p>Visualizing Distribution of Data</p></li><li>Relationship</li><li>Composition</li><li>Comparison</li></ul><h3 id="Dashboard-Creation"><a href="#Dashboard-Creation" class="headerlink" title="Dashboard Creation"></a>Dashboard Creation</h3><ul><li>IBM Cognos Dashboard Embedded (CDE) is an AI-fueled business intelligence service that supports the entire data analytics cycle, from discovery to operationalization. It provides users with data discovery capabilities to visually explore and interact with their data to identify the key insights for improving data driven decisions. Users can perform data discovery and then quickly assemble that information into interactive, visually appealing dashboards; all without the need of formal training.</li><li>Add a Cognos Dashboard Embedded (CDE) service and upload external data files to your project (supports CSV file only)</li><li>General navigation around the CDE user interface (UI), start a new dashboard with a template in CDE, populate it with a data visualization as well as save the dashboard.</li></ul><h3 id="Presentation-of-Findings"><a href="#Presentation-of-Findings" class="headerlink" title="Presentation of Findings"></a>Presentation of Findings</h3><ul><li><p>Data collected, cleaned and organized -&gt; Report (paper style report or slideshow presentation)</p></li><li><p>Elements Of A Successful Data Findings Report</p><ul><li>Outline</li><li>Cover Page</li><li>Executive Summary: briefly explain the details of the project and should be considered a stand-alone document</li><li>Table of Contents</li><li>Introduction: explains the nature of the analysis, states the problem, and gives the questions that were to be answered by performing the analysis</li><li>Methodology: explains the data sources that were used in the analysis and outlines the plan for the collected data</li><li>Results: goes into the detail of the data collection, how it was organized, and how it was analyzed,  also contain the charts and graphs that would substantiate the results and call attention to the more complex or crucial findings</li><li>Discussion: engage the audience with a discussion of your implications that were drawn from the research</li><li>Conclusion: reiterate the problem given in the introduction and gives an overall summary of the findings, also state the outcome of the analysis and if any other steps would be taken in the future</li><li>Appendix: contain information that really didn’t fit in the main body of the report, but you deemed it was still important enough to include</li></ul></li><li><p>Factors to remember in accurately conveying your message</p><ul><li>Make sure charts and graphs are not too small and are clearly labeled</li><li>Use the data only as supporting evidence</li><li>Share only one point from each chart</li><li>Eliminate data that does not support the key message</li></ul></li><li><p>Final Presentation</p><div class="row">    <embed src="/pdf/Capstone_Story.pdf" width="100%" height="550" type="application/pdf"></div></li></ul><h3 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a>Assignments</h3><ul><li>Visit my <a href="https://github.com/Bezhuang/LearnCS/tree/main/IBM%20Professional%20Certificates/Data%20Analyst%20Capstone%20Project">Github Repository</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Analysis With Python</title>
      <link href="/Data-Analysis-with-Python/"/>
      <url>/Data-Analysis-with-Python/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This Data Analysis with Python course provided by IBM is designed to teach future data analysts how to prepare data for analysis, perform simple statistical analysis, create meaningful data visualizations, predict future trends from data through a number of lecture, lab, and assignments using Python libraries. The following are the notes I took during this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Coursera-Data-Analysis-with-py.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Importing-Datasets"><a href="#Importing-Datasets" class="headerlink" title="Importing Datasets"></a>Importing Datasets</h3><ul><li><p>Data, Dataset &amp; Attributes in the dataset</p></li><li><p>Python Packages for Data Science</p><ul><li>Scientifics Computing Libraries: Pandas, NumPy, SciPy</li><li>Visualization Libraries: Matplotlib, Seaborn</li><li>Algorithmic Libraries: Scikit-learn, Statsmodels</li></ul></li><li><p>Importing Data: Format &amp; File Path of dataset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">url = <span class="string">&quot;&quot;</span></span><br><span class="line">df = pd.read_csv(url, header = <span class="literal">None</span>)  <span class="comment">#create dataframe</span></span><br><span class="line">df.head(n) <span class="comment">#shows the first n rows while df.tail(n) shows the bottom n rows</span></span><br><span class="line">path = <span class="string">&quot;&quot;</span></span><br><span class="line">df.to_csv(path) <span class="comment">#exporting dataframe, you can also use df.to_json() / df.to_excel() / df.to_sql()</span></span><br></pre></td></tr></table></figure></li><li><p>Data Types</p><ul><li><code>df.dtypes</code> Checks datatypes</li><li><code>df.describe(include=&quot;all&quot;)</code> Returns a statistical summary</li><li><code>df.info()</code> Provides a concise summary of dataframe</li></ul></li><li><a href="/Databases&amp;SQL4Data-Science/#Accessing%20databases%20using%20Python">Accessing Databases with Python</a> (DB-API)</li></ul><h3 id="Data-Wrangling"><a href="#Data-Wrangling" class="headerlink" title="Data Wrangling"></a>Data Wrangling</h3><ul><li><p>Pre-processing Data in Python = Data Cleaning = Data Wrangling</p></li><li><p>Dealing with Missing Values</p><ul><li>Drop: <code>df.dropna(subset=[&quot;column_name&quot;], axis=0, inplace=True)</code></li><li>Replace: <code>df.replace(missing_value, new_value)</code> </li><li>Mean: <code>df[&quot;column_name&quot;].mean()</code></li></ul></li><li><p>Data Formatting</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;city-mpg&quot;</span>] = <span class="number">235</span>/df[<span class="string">&quot;city-mpg&quot;</span>]</span><br><span class="line">df.rename(columns=(<span class="string">&quot;city_mpg&quot;</span>: <span class="string">&quot;city-L/100km&quot;</span>), inplace=<span class="literal">True</span>)</span><br><span class="line">df[<span class="string">&quot;city-L/100km&quot;</span>]=df[<span class="string">&quot;city-L/100km&quot;</span>].astype(<span class="string">&quot;float&quot;</span>) </span><br></pre></td></tr></table></figure><ul><li><code>dataframe.astype()</code> Converts data type</li></ul></li><li><p>Data Normalization</p><ul><li>Simple Feature scaling:  $x<em>{new}=\dfrac{x</em>{old}}{x_{max}}$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;length&quot;</span>]=df[<span class="string">&quot;length&quot;</span>]/df[<span class="string">&quot;length&quot;</span>].<span class="built_in">max</span>()</span><br></pre></td></tr></table></figure><ul><li>Min - Max:  $x<em>{new}=\dfrac{x</em>{old}-x<em>{min}}{x</em>{max}-x_{min}}$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;length&quot;</span>]=(df[<span class="string">&quot;length&quot;</span>]-df[<span class="string">&quot;length&quot;</span>].<span class="built_in">min</span>())/(df[<span class="string">&quot;length&quot;</span>].<span class="built_in">max</span>()-df[<span class="string">&quot;length&quot;</span>].<span class="built_in">min</span>())</span><br></pre></td></tr></table></figure><ul><li>Z-score (Standard Score):  $x<em>{new}=\dfrac{x</em>{old}-\mu}{\sigma }$</li><li>z-score values typically range between [-3,3]</li></ul></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;length&quot;</span>]=(df[<span class="string">&quot;length&quot;</span>]-df[<span class="string">&quot;length&quot;</span>].mean())/df[<span class="string">&quot;length&quot;</span>].std()</span><br></pre></td></tr></table></figure><ul><li><p>Binning: Converts numeric into categorical variables by Grouping them in a set of “bins”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bins=np.linspace(<span class="built_in">min</span>(df[<span class="string">&quot;price&quot;</span>]),<span class="built_in">max</span>(df[<span class="string">&quot;price&quot;</span>]),<span class="number">4</span>)</span><br><span class="line">group_names=[<span class="string">&quot;Low&quot;</span>,<span class="string">&quot;Medium&quot;</span>,<span class="string">&quot;High&quot;</span>]</span><br><span class="line">df[<span class="string">&quot;price-binned&quot;</span>]=pd.cut(df[<span class="string">&quot;price&quot;</span>],bins,labels=group_names,include_lowest=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li><p>Turning categorical variables into quantitative variables</p><ul><li>Convert categorical variables into dummy variables (0 or 1)</li><li><code>pd.get_dummies(df[&#39;fuel&#39;])</code></li></ul></li></ul><h3 id="Exploratory-Data-Analysis-EDA"><a href="#Exploratory-Data-Analysis-EDA" class="headerlink" title="Exploratory Data Analysis (EDA)"></a>Exploratory Data Analysis (EDA)</h3><ul><li><p>EDA is preliminary step in data analysis to summarize main characteristics of the data, gain better understanding of the data set, uncover relationships between different variables, and extract important variables for the problem we’re trying to solve.</p></li><li><p>Descriptive Statistics</p><ul><li>Describe basic features of data</li><li>Giving short summaries about the sample and measures of the data</li><li><code>df.describe</code> Summarize statistics, <code>value_counts()</code> Summarize the categorical data</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wheels_counts=df[<span class="string">&quot;wheels&quot;</span>].value_counts().to_frame()</span><br></pre></td></tr></table></figure><ul><li>Box Plot</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(x=<span class="string">&quot;wheels&quot;</span>,y=<span class="string">&quot;price&quot;</span>,data=df)</span><br></pre></td></tr></table></figure><ul><li>Scatter Plot</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y=df[<span class="string">&quot;price&quot;</span>]</span><br><span class="line">x=df[<span class="string">&quot;engine-size&quot;</span>]</span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.title(<span class="string">&quot;Scatterplot of Engine Size vs Price&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Engine Size&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Price&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>GroupBy</p><ul><li>The groupby method is used on categorical variables, groups the data into subsets according to the different categories of that variable.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_test=df[[<span class="string">&#x27;drive-wheels&#x27;</span>,<span class="string">&#x27;body-style&#x27;</span>,<span class="string">&#x27;price&#x27;</span>]]</span><br><span class="line">df_grp=df_test.grop[by([<span class="string">&#x27;drive-wheels&#x27;</span>,<span class="string">&#x27;body-style&#x27;</span>], as_index= <span class="literal">False</span>).mean()</span><br><span class="line">df_grp</span><br></pre></td></tr></table></figure><ul><li>Pivot table</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_pivot=df_grp.pivot(index=<span class="string">&#x27;drive-wheels&#x27;</span>,columns=<span class="string">&#x27;body-style&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>Heatmap</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.pcolor(df_pivot,cmap=<span class="string">&#x27;RdBu&#x27;</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>Correlation</p><ul><li>Correlation measures to what extent different variables are interdependent</li><li>Correlation doesn’t imply causation</li><li>Linear Relationship</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.regplot(x=<span class="string">&quot;engine-size&quot;</span>,y=<span class="string">&quot;price&quot;</span>,data=df)</span><br><span class="line">plt.ylim(<span class="number">0</span>,)</span><br></pre></td></tr></table></figure></li><li><p>Correlation - Statistics</p><ul><li>Pearson Correlation: Measure the strength of the correlation between two features (Correlation coefficient &amp; P-value)</li><li>Correlation coefficient close to +1: Large Positive relationship, close to -1: Large Negative relationship, close to 0: No relationship</li><li>P-value &lt; 0.001: Strong certainty in the result, &lt; 0.05: Moderate certainty in the result, &lt; 0.1: Weak certainty in the result, &gt; 0.1: No certainty in the result</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pearson_coef, p_value=stats.pearsonr(df[<span class="string">&#x27;horsepower&#x27;</span>],df[<span class="string">&#x27;price&#x27;</span>])</span><br></pre></td></tr></table></figure><ul><li>Correlation-Heatmap</li></ul></li><li><p>Chi-Square: Test for Association</p><ul><li>The Chi-square test is intended to test how likely it is that an observed distribution is due to chance. </li><li>It measures how well the observed distribution of data fits with the distribution that is expected if the variables are independent.</li><li>The Chi-square does not tell you the type of relationship that exists between both variables only that a relationship exists.</li><li>$X^{2}=\sum^{n}<em>{i=1}\dfrac{\left(O</em>{i}-E<em>{i}\right)^{2}}{E</em>{i}}$</li><li>Degree of freedom = (row-1) * (column-1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scipy.stats.chi2_contingency(cont_table, correction = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Model-Development"><a href="#Model-Development" class="headerlink" title="Model Development"></a>Model Development</h3><ul><li><p>A model can be thought of as a mathematical equation used to predict a value given one or more other values, relating one or more independent variables to dependent variables</p></li><li><p>Usually the more relevant data you have the more accurate your model is</p></li><li><p>Linear regression will refer to one independent variable to make a prediction</p></li><li><p>Multiple Linear Regression will refer to multiple independent variables to make a prediction</p></li><li><p>Simple Linear Regression (SLR)</p><ul><li>The predictor (independent) variable - x, The target (dependent) variable - y</li><li>$b<em>{0}$: the intercept, $b</em>{1}$: the slope</li><li>$y=b<em>{0}+b</em>{1}x$</li><li>Fit: $\left( b<em>{0},b</em>{1}\right)$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">lm=LinearRegression() <span class="comment">#create a linear regression object using the constructor</span></span><br><span class="line">x=df[[<span class="string">&#x27;highway-mpg&#x27;</span>]] <span class="comment">#define the predictor variable and target variable</span></span><br><span class="line">y=df[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line">lm.fit(x,y) <span class="comment">#fit the model</span></span><br><span class="line">Yhat=lm.predict(X) <span class="comment">#obtain a prediction</span></span><br><span class="line">lm.intercept_ <span class="comment">#view the intercept</span></span><br><span class="line">lm.coef_ <span class="comment">#view the slope</span></span><br></pre></td></tr></table></figure></li><li><p>Multiple Linear Regression (MLR)</p><ul><li>One continuous target (Y) variables, Two or more predictor (X) variables</li><li>$\widehat{Y}=b<em>{0}+b</em>{1}x<em>{1}+b</em>{2}x<em>{2}+b</em>{3}x<em>{3}+b</em>{4}x_{4}$</li><li>$b<em>{0}$: interception (x=0), $b</em>{1}$: the coefficient or parameter of $x<em>{1}$, $b</em>{2}$: the coefficient of parameter $x_{2}$ and so on</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Z=df[[<span class="string">&#x27;horsepower&#x27;</span>,<span class="string">&#x27;curb-weight&#x27;</span>,<span class="string">&#x27;engine-size&#x27;</span>,<span class="string">&#x27;highway-mpg&#x27;</span>]] <span class="comment">#extract predictor variables and store them in the variable Z (dataframe)</span></span><br><span class="line">lm.fit(Z, df[<span class="string">&#x27;price&#x27;</span>]) <span class="comment">#train the model</span></span><br><span class="line">Yhat=lm.predict(X) <span class="comment">#obtain a prediction</span></span><br><span class="line">lm.intercept_ <span class="comment">#view the intercept</span></span><br><span class="line">lm.coef_ <span class="comment">#view the slope</span></span><br></pre></td></tr></table></figure></li><li><p>Model Evaluation using Visualization</p><ul><li>Regression plots are a good estimate of the relationship between two variables, the strength of the correlation, and the direction of the relationship (positive or negative)</li><li>Regression plot shows a combination of scatterplot and the fitted linear regression line ($\widehat{Y}$)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.regplot(x=<span class="string">&quot;highway-mpg&quot;</span>,y=<span class="string">&quot;price&quot;</span>,data=df)</span><br><span class="line">plt.ylim(<span class="number">0</span>,)</span><br></pre></td></tr></table></figure><ul><li>Residual plot represents the error between the actual value</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.resifplot(df[<span class="string">&#x27;highway-mpg&#x27;</span>],df[<span class="string">&#x27;price&#x27;</span>])</span><br></pre></td></tr></table></figure><ul><li>Distribution plot counts the predicted value versus the actual value</li><li>MLR - Distribution plots</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">ax1=sns.displot(df[<span class="string">&#x27;price&#x27;</span>],hist=<span class="literal">False</span>,color=<span class="string">&#x27;r&#x27;</span>,label=<span class="string">&#x27;Actual Value&#x27;</span>)</span><br><span class="line">sns.distplot(Yhat,hist=<span class="literal">False</span>,color=<span class="string">&#x27;b&#x27;</span>,label=<span class="string">&#x27;Fitted Values&#x27;</span>,ax=axl)</span><br></pre></td></tr></table></figure></li><li><p>Polynomial Regression and Pipelines</p><ul><li>Polynomial regression is a special case of the general linear regression model, useful for describing curvilinear relationships</li><li>Curvilinear relationship: By squaring or setting higher order terms of the predictor variables</li><li>Quadrac - 2nd order: $\widehat{Y}=b<em>{0}+b</em>{1}x<em>{1}+b</em>{2}(x_{1})^2$</li><li>Cubic - 3rd order: $\widehat{Y}=b<em>{0}+b</em>{1}x<em>{1}+b</em>{2}(x<em>{1})^2+b</em>{3}(x_{1})^3$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f=np.polyfit(x,y,<span class="number">3</span>) <span class="comment">#calculate polynomial of 3rd order</span></span><br><span class="line">p=np.polyld(f)</span><br><span class="line"><span class="built_in">print</span>(p) <span class="comment">#print out the model</span></span><br></pre></td></tr></table></figure><ul><li>We could also have multi-dimensional polynomial linear regression: $\widehat{Y}=b<em>{0}+b</em>{1}x<em>{1}+b</em>{2}x<em>{2}+b</em>{3}x<em>{1}x</em>{2}+b<em>{4}(x</em>{1})^2+b<em>{5}(x</em>{3})^2+..$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line">pr=PolynomialFeatures(degree=<span class="number">2</span>,include_bias=<span class="literal">False</span>)</span><br><span class="line">x_polly=pr.fit_transform(x[[<span class="string">&#x27;horsepower&#x27;</span>,<span class="string">&#x27;curb-weight&#x27;</span>]])</span><br></pre></td></tr></table></figure><ul><li>Pre-processing</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">SCALE=StandardScaler()</span><br><span class="line">SCALE.fit(x_data[[<span class="string">&#x27;horsepower&#x27;</span>,<span class="string">&#x27;curb-weight&#x27;</span>]])</span><br><span class="line">x_scale=SCALE.transform(x_data[[<span class="string">&#x27;horsepower&#x27;</span>,<span class="string">&#x27;curb-weight&#x27;</span>]])</span><br></pre></td></tr></table></figure><ul><li>Pipelines: transform -&gt; prediction</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line">Input=[(<span class="string">&#x27;Scale&#x27;</span>,StandardScaler()),(<span class="string">&#x27;polynomial&#x27;</span>,PolynomialFeatures(degree=<span class="number">2</span>),(<span class="string">&#x27;mode&#x27;</span>,LinearRegression()))]</span><br><span class="line">Pipe.fit(df[[<span class="string">&#x27;horsepower&#x27;</span>,<span class="string">&#x27;curb-weight&#x27;</span>,<span class="string">&#x27;engine-size&#x27;</span>,<span class="string">&#x27;highway-mpg&#x27;</span>]],y) <span class="comment">#train the pipeline object</span></span><br><span class="line">yhat=Pipe.predict(X[[<span class="string">&#x27;horsepower&#x27;</span>,<span class="string">&#x27;curb-weight&#x27;</span>,<span class="string">&#x27;engine-size&#x27;</span>,<span class="string">&#x27;highway-mpg&#x27;</span>]])</span><br></pre></td></tr></table></figure></li><li><p>Measures for In-Sample Evaluation</p><ul><li>A way to numerically determine how good the model fits on our data</li><li>Mean Squared Error (MSE)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line">mean_squared_error(df[<span class="string">&#x27;price&#x27;</span>],Y_predict_simple_fit)</span><br></pre></td></tr></table></figure><ul><li>R-squared: The coefficient of determination</li><li>R-squared is a measure to determine how close the data is to the fitted regression line</li><li>R^2: the percentage of variation of the target variable (Y) that is explained by the linear model</li><li>$R^{2}=\left( 1-\dfrac{MSE-of-regression-line}{MSE-of-the-average-of-the-data}\right)$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lm.fit(X,Y)</span><br><span class="line">lm.score(X,y)</span><br></pre></td></tr></table></figure><ul><li>Generally the values of the MSE are between 0 and 1</li><li>R^2 = 0 indicates your model performs worst</li></ul></li><li><p>Prediction and Decision Making</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lm.fit(df[<span class="string">&#x27;highway-mpg&#x27;</span>],df[<span class="string">&#x27;prices&#x27;</span>])  <span class="comment">#Train the model</span></span><br><span class="line">lm.predict(np.array(<span class="number">30.0</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>))  <span class="comment">#Predict the price</span></span><br><span class="line">lm.coef_  <span class="comment">#Value of the Slope</span></span><br></pre></td></tr></table></figure><ul><li>Residual Plot</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">new_input=np.arrange(<span class="number">1</span>,<span class="number">101</span>,<span class="number">1</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>)  <span class="comment">#Arrange to generate sequence</span></span><br><span class="line">yhat=lm.predict(new_input)  <span class="comment">#Predict new values</span></span><br></pre></td></tr></table></figure><ul><li>Numerical measures for Evaluation</li><li>Comparing MLR and SLR: A lower Mean Square Error does not necessarily imply better fit</li><li>Mean Square Error for a Multiple Linear Regression Model will be smaller than the Mean Square Error for a Simple Linear Regression model, since the errors of the data will decrease when more variables are included in the model</li><li>Polynomial regression will also have a smaller Mean Square Error than the linear regular regression</li></ul></li></ul><h3 id="Model-Evaluation-and-Refinement"><a href="#Model-Evaluation-and-Refinement" class="headerlink" title="Model Evaluation and Refinement"></a>Model Evaluation and Refinement</h3><ul><li><p>In-sample evaluation tells us how well our model will fit the data used to train it</p></li><li><p>Build and train the model with a training set (70% dataset)</p></li><li><p>Use testing set to access the performance of a predictive model (30% dataset)</p></li><li><p>Function <code>train_test_split()</code>: Split data into random train and test subsets</p><ul><li>x_data: features or independent variables, y_data: dataset target (<code>df[&#39;price&#39;]</code>)</li><li>x_train, y_train: parts of available data as training set</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(x_data,y_data,test_size=<span class="number">0.3</span>,random_state=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>Generalization error is measure of how well our data does at predicting previously unseen data, the error we obtain using our testing data is an approximation of this error.</p></li><li><p>Lots of training data</p></li><li><p>Cross Validation</p><ul><li>Most common out-of-sample evaluation metrics</li><li>More effective use of data (each observation is used for both training and testing)</li></ul></li><li><p>Function <code>cross_val_score()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line">scores=cross_val_score(lr,x_data,y_data,cv=<span class="number">3</span>)</span><br><span class="line">np.mean(scores)</span><br></pre></td></tr></table></figure></li><li><p>Function <code>cross_val_predict()</code></p><ul><li>It returns the prediction that was obtained for each element when it was in the test set</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score  <span class="comment">#Has a similar interface to cross_cal_score()</span></span><br><span class="line">scores=cross_val_score(lr,x_data,y_data,cv=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p>Model Selection: y(x)+noise</p></li><li><p>Underfitting: Where the model is too simple to fit the data.</p></li><li><p>Overfitting: Where the model is too flexible and fits the noise rather than the function</p></li><li><p>Ridge regression</p><ul><li>A regression that is employed in a Multiple regression model when Multicollinearity occurs</li><li>Multicollinearity is when there is a strong relationship among the independent variables</li><li>Ridge regression is very common with polynomial regression</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line">RidgeModel=Ridge(alpha=<span class="number">0.1</span>)</span><br><span class="line">RidgeModel.fit(X,y)</span><br><span class="line">Yhat=RidgeModel.predict(X)</span><br></pre></td></tr></table></figure></li><li><p>Grid Search allows us to scan through multiple free parameters with few lines of code.</p><ul><li>Hyperparameters: Parameters that are not part of the fitting or training process. (eg. Ridge regression)</li><li>Scikit-learn has a means of automatically iterating over these hyperparameters using cross-validation called Grid Search</li><li>Training data、Validation data、Test data</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line">parameters1=[&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="number">0.001</span>,<span class="number">0.1</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>,<span class="number">10000</span>,<span class="number">100000</span>,<span class="number">1000000</span>]&#125;]</span><br><span class="line">parameters2=[&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="number">0.001</span>,<span class="number">0.1</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>],<span class="string">&#x27;normalize&#x27;</span>:[<span class="literal">True</span>,<span class="literal">False</span>]&#125;]</span><br><span class="line">RR=Ridge()</span><br><span class="line">Grid1=GridSearchCV(rr,parameters1,cv=<span class="number">4</span>)</span><br><span class="line">Grid1.fit(x_data[[<span class="string">&#x27;horsepower&#x27;</span>,<span class="string">&#x27;curb-weight&#x27;</span>,<span class="string">&#x27;engine-size&#x27;</span>,<span class="string">&#x27;highway-mpg&#x27;</span>]],y_data)</span><br><span class="line">Grid.best_estimator_</span><br><span class="line">scores=Grid.cv_results_</span><br><span class="line">scores[<span class="string">&#x27;mean_test_score&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Project-Case"><a href="#Project-Case" class="headerlink" title="Project Case"></a>Project Case</h3><ul><li>Determining the market price of a house given a set of features</li><li><a href="https://dataplatform.cloud.ibm.com/analytics/notebooks/v2/178b3007-1e92-4946-97ed-f22763f254d2/view?access_token=6f0d33f3dd579324e58eac3e6416508d2f47372218c970f98d418bc68133d33c">Final Assignment Notebook Url</a> (May not be accessible from Mainland China)</li></ul><h3 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a>Assignments</h3><ul><li>Visit my <a href="https://github.com/Bezhuang/LearnCS/tree/main/IBM%20Professional%20Certificates/Data%20Analysis%20with%20Python">Github Repository</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021 阿里云 Java 训练营第三期</title>
      <link href="/Java%E9%AB%98%E7%BA%A7%E8%AE%AD%E7%BB%83%E8%90%A5/"/>
      <url>/Java%E9%AB%98%E7%BA%A7%E8%AE%AD%E7%BB%83%E8%90%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本期训练营是阿里云开发者社区Java训练营的第3期，主要基于最流行的Java Spring Cloud, 结合阿里巴巴淘宝微服务案例，实战模拟淘宝Order微服务，实战演练微服务开发，扩展学习Spring Cloud Alibaba新框架，本篇日志主要记录5天直播Spring cloud微服务开发课中的一些知识点，附<a href="https://github.com/Bezhuang/LearnCS/tree/main/Java高级训练营">实战代码</a>。</p></blockquote><span id="more"></span><p><img src="https://blog.zhuangzhihao.top/img/Java高级训练营.png" alt></p><h3 id="微服务架构设计与实践"><a href="#微服务架构设计与实践" class="headerlink" title="微服务架构设计与实践"></a>微服务架构设计与实践</h3><ul><li><p>架构演化之路：单体 -&gt; 分层 -&gt; 分布式 -&gt; SOA -&gt; 微服务</p></li><li><p>微服务架构Microservice</p><ul><li>一种新型的软件架构风格，把单个巨型服务应用分解为多个独立微小的服务程序，每个小服务程序运行在独立的进程中</li><li>服务与服务之间通过轻量协议通信，通信机制互相协作、互相配合，从而为终端用户提供业务价值</li><li>每个小服务可以采用不同的语言、框架、工具独立开发、测试、部署、运维</li><li>单独部署、单独伸缩，去中心化：数据中心、管理中心，敏捷性、灵活性、需求变化，更加高效的软件架构模式</li></ul></li><li>微服务优缺点 <ul><li>快速响应需求变化，易于替换，独立进程、开发、部署、测试，无依赖</li><li>高度解耦，基于功能进行组织，独立技术栈、服务可以使用不同的语言、系统、平台</li><li>协议简单，通信使用语言中立的协议，通常是http</li><li>架构复杂，多服务运维难度大，系统部署依赖和服务间通信成本高</li></ul></li><li>敏捷开发、敏捷运维DevOps</li><li>微服务典型应用场景：淘宝、支付宝、微信、微博、IOT、游戏、导航</li></ul><h3 id="Eureka微服务注册与发现"><a href="#Eureka微服务注册与发现" class="headerlink" title="Eureka微服务注册与发现"></a>Eureka微服务注册与发现</h3><ul><li>服务注册与发现：Service Registry and Discovery<ul><li>大规模微服务集群架构，拥有许多服务实例，客户端要找到自己调用的服务</li><li>新服务上线或莫格服务宕机，下线时可以实时监控服务的状态</li></ul></li><li><p>Spring Cloud Eureka服务发现与注册</p><ul><li>Eureka：注册中心，服务发现模块，是Nexflix的核心（开源的项目），竞争对手：ZooKeeper</li><li>一个基于REST的中心服务，管理服务，实现云端的服务注册和服务发现</li><li>Eureka组件组成：Eureka服务器和Eureka客户端</li><li>Spring Cloud Nextflix提供简化开发模板，直接使用Spring Boot创建项目，添加<code>@EnableEurekaServer</code>开发注册服务中心</li></ul></li><li><p>Spring Eureka注册中心实战</p><ul><li><p>创建Spring Eureka服务注册中心项目，添加<code>@EnableEurekaServer</code>，将Spring Boot应用改造成Eureka服务注册中心，<code>application.properties</code>增加配置，打包项目并运行测试</p></li><li><p>参考<a href="https://spring.io/guides/gs/service-registeration-and-discovery">https://spring.io/guides/gs/service-registeration-and-discovery</a></p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">EurekaServer</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8761</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="comment">#\u6CE8\u518C\u548C\u67E5\u8BE2\u63A7\u5236</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Spring-Cloud2020-微服务架构"><a href="#Spring-Cloud2020-微服务架构" class="headerlink" title="Spring Cloud2020 微服务架构"></a>Spring Cloud2020 微服务架构</h3><ul><li>Spring Cloud Netflix Greenwich以上（2.1.X）版本相对成熟，企业使用多，容易落地架构</li><li>Spring Cloud Alibaba相对成熟，部分组件可以替换</li><li>新版本2020（aka Ilford）可以作为拓展学习，基于Spring Boot2.4及以上版本，Bootstrap默认禁用，慎重选择新版本</li></ul><h3 id="开发微服务API"><a href="#开发微服务API" class="headerlink" title="开发微服务API"></a>开发微服务API</h3><ul><li><p>配置Eureka客户端项目</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">order-microservice</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8001</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Feign声明式调用客户端"><a href="#Feign声明式调用客户端" class="headerlink" title="Feign声明式调用客户端"></a>Feign声明式调用客户端</h3><ul><li><p>调用方，简化微服务API调用</p></li><li><p>Feign是一种声明式、模板化的HTTP客户端，简化HTTP客户端开发</p></li><li><p>只需要创建一个接口 + <code>@注解</code>（Feign注解和JAX-RS注解）</p></li><li><p>Feign支持可插拔的编码器和解码器，默认集成了Ribbon，并和Eureka结合</p></li><li><p>Eureka Server、Eureka Client + Feign，mvn package打包</p></li><li><p><code>@EnableFeignClients</code></p></li><li><p>调用方FeignClient代理接口代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value=&quot;microservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GreetingClient</span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/greeting&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">greeting</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用方Feign配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">FeignClient</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">9000</span></span><br><span class="line"><span class="attr">eureka.client.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">eureka.instance.non-secure-port-enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>调用方测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> GreetingClient clientproxy;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hi&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> clientproxy.hi();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Ribbon负载均衡算法"><a href="#Ribbon负载均衡算法" class="headerlink" title="Ribbon负载均衡算法"></a>Ribbon负载均衡算法</h3><ul><li>Spring Cloud客户端负载均衡器Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法</li><li>Ribbon将Netflix的中间层服务连接在一起</li><li>Ribbon客户端组件提供许多配置如连接超时、重试等</li><li>配置文件中列出后台所有的机器，Ribbon会自动去连接这些机器（如简单轮询、随即连接等）</li><li>Spring Cloud使用Ribbon实现自定义的负载均衡算法</li><li>默认规则：简单轮询负载均衡RoundRobin</li><li>随机负载均衡Random随机选择UP的Server</li><li>加权响应时间负载均衡WeightResponseTime</li><li>区域感知轮询负载均衡ZoneAware</li></ul><h3 id="Hystrix微服务监控"><a href="#Hystrix微服务监控" class="headerlink" title="Hystrix微服务监控"></a>Hystrix微服务监控</h3><ul><li><p>Netflix Hystrix熔断器框架保护系统，通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力，防止服务器过载、系统雪崩</p></li><li><p>Fallback灾备操作，出错以后返回的值</p></li><li><p>Hystrix中，主要通过线程池来实现资源隔离，Hystrix的信号模式Semaphores隔离资源，熔断代码，<code>@EnableHystrix</code></p></li><li><p>Hystrix支持dashoboard控制面板监控信息：独立部署<a href="http://localhost:9001/hystrix，也可以Zuul，`@EnableHystrixDashboard`">http://localhost:9001/hystrix，也可以Zuul，`@EnableHystrixDashboard`</a></p></li><li><p>监控数据源：<a href="http://localhost:9001/actuator/hystrux.stream">http://localhost:9001/actuator/hystrux.stream</a></p></li><li><p>Feign可以和Hystrix结合使用，也可以独立使用</p></li><li><p>Pom依赖：<code>spring-cloud-starter-hystrix</code>、<code>spring-cloud-starter-hystrix-dashboard</code> </p></li><li><p>Spring Cloud Hoxton版本后需要特殊配置</p></li><li><p>Hystrix底层原理：使用命令模式对命令对象抽象了两个抽象类：HystrixCommand和HystrixObservableCommand</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启用监控熔断限流</span></span><br><span class="line"><span class="attr">feign.hystrix.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#暴露监控数据源地址</span></span><br><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br><span class="line"><span class="comment">#info,health,thread</span></span><br><span class="line"><span class="comment">#允许展示监控服务器</span></span><br><span class="line"><span class="attr">hystrix.dashboard.proxy-stream-allow-list</span>=<span class="string">localhost,192.168.1.101</span></span><br></pre></td></tr></table></figure></li><li><p>Hystrix核心参数</p><ul><li>请求最大次数（默认20个请求）circuitBreaker.requestVolumnThreshold</li><li>滚动窗口（默认10秒）metrics.rollingStats.timeInMilliseconds</li><li>失败百分比（默认&gt;50%）circuitBreaker.errorThreasholdPercentage</li></ul></li></ul><h3 id="Zuul网关"><a href="#Zuul网关" class="headerlink" title="Zuul网关"></a>Zuul网关</h3><ul><li><a href="http://github.com/Netflix/zuul">Zuul</a>是Netflix开源的微服务网关工具，可以和Eureka、Ribbon、Hystrix等组件配合使用</li><li>Spring Cloud对Zuul进行了整合与增强，旨在实现动态路由、监视、弹性和安全性</li><li>默认使用Apache HTTP Client作为HTTP客户端，也可以使用RestClient或okhttp3.OkHttpClient</li><li>Zuul默认会为Eureka注册的服务创建动态路由</li><li>Zuul在2.x/3.x的分支中已经引入netty</li><li>Zuul网关特性<ul><li>验证和安全 Authentication and Security</li><li>跟踪、统计和监控 Insights and Monitoring</li><li>动态路由消息到后台集群 Dynamic Routing</li><li>压力测试主机递增 Stress Testing</li><li>过载保护 Load Shedding</li><li>静态消息处理，无需后台集群服务器处理 Static Response handling</li><li>多区域弹性伸缩，跨AWS区域路由请求，分散压力，请求处理更接近调用者 Multiregion Resiliency</li></ul></li><li>Zuul依赖 <code>spring-cloud-starter-zuul</code>、<code>spring-cloud-starter-eureka</code></li><li>添加注解 <code>@EnableZuulProxy</code>，Zuul内部使用Ribbon实现客户端负载均衡</li><li>Spring Cloud Gateway替代Zuul</li></ul><h3 id="Nacos服务注册与发现"><a href="#Nacos服务注册与发现" class="headerlink" title="Nacos服务注册与发现"></a>Nacos服务注册与发现</h3><ul><li>Dynamic Naming and Configuration Service</li><li>Nacos关键特性：服务发现和服务健康监测、动态配置服务、动态DNS服务、服务及其元数据管理</li><li>相对于Eureka：同时支持AP和CP模型、跨中心同步、k8s基成、分组管理、权重设置</li><li><p>三种部署模式：单机模式、集群模式、多集群模式</p></li><li><p>Alibaba微服务组件：Sentinel、Nacos、RocketMQ、Dubbo、Seata</p></li></ul><h3 id="Sentinel熔断限流"><a href="#Sentinel熔断限流" class="headerlink" title="Sentinel熔断限流"></a>Sentinel熔断限流</h3><ul><li><p>分布式系统的流量防卫兵，流量控制、熔断降级、系统负载保护等多维度保护服务的稳定性</p></li><li><p>相对于Hystrix支持基于调用关系的限流、流量整形、系统负载保护</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>: <span class="string">nacos-feign-sentinel</span></span><br><span class="line"><span class="comment">#服务器端口</span></span><br><span class="line"><span class="attr">server.port</span>:<span class="string">9001</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment">#sentinel</span></span><br><span class="line"><span class="attr">spring.cloud.sentinel.transport.dashboard</span>=<span class="string">127.0.0.1:8080</span></span><br><span class="line"><span class="attr">feign.sentinel.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#监控数据源要暴露地址</span></span><br><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="课程代码"><a href="#课程代码" class="headerlink" title="课程代码"></a>课程代码</h3><ul><li>课程代码已上传 <a href="https://github.com/Bezhuang/LearnCS/tree/main/%E9%98%BF%E9%87%8C%E4%BA%91%E5%BC%80%E5%8F%91%E8%80%85%E5%AD%A6%E9%99%A2/Java%E9%AB%98%E7%BA%A7%E8%AE%AD%E7%BB%83%E8%90%A5">Github 仓库</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 阿里云 Java 训练营第二期</title>
      <link href="/Java%E4%B8%AD%E7%BA%A7%E8%AE%AD%E7%BB%83%E8%90%A5/"/>
      <url>/Java%E4%B8%AD%E7%BA%A7%E8%AE%AD%E7%BB%83%E8%90%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本期训练营是继<a href="/Java初级训练营">Java新手训练营</a>后的第2期，课程由阿里云开发者社区提供，同样采用5天不间断直播授课的形式，主要内容为Spring Boot 2.5自动化配置原理、实战开发REST API、MySQL数据库、Redis高并发缓存、MQ消息队列Kafka、安全机制、Docker容器等，本篇日志主要记录实战Spring Boot2.5开发中的一些常用知识点，附<a href="https://github.com/Bezhuang/LearnCS/tree/main/Java中级训练营">实战代码</a>。</p></blockquote><span id="more"></span><p><img src="https://blog.zhuangzhihao.top//img/Java第二期训练营.png" alt></p><h3 id="Java-Spring-企业级开发平台"><a href="#Java-Spring-企业级开发平台" class="headerlink" title="Java Spring 企业级开发平台"></a>Java Spring 企业级开发平台</h3><ul><li>最初来自2002年Rod Jahnson所著书《Expert One-on-One J2EE Design and Development》,最早名字为：Interface21</li><li>2003年6月诞生轻量级Java企业级开发工具类库<a href="http://www.springsource.org">Spring</a>，现在已经发展成为包括开发工具、MVC框架、类库、微服务架构的完整平台（体系）</li><li>一个轻量级控制反转（IoC）和面向切面（AOP）的容器框架，一个分层的JavaSE/EE full-stack（一站式）轻量级开源框架</li><li>Spring提供IOC、AOP、日志、安全、加密等工具类库，用于解决企业应用开发的复杂性</li><li>Spring Framework：Spring工具类框架，其他Spring项目如Spring Boot也依赖于此框架</li><li>Spring MVC：Java MVC网站开发框架</li><li>Spring Boot：简化Spring应用开发。简化配置文件，使用嵌入式web服务器，含有诸多开箱即用微服务功能，可以和Spring Cloud联合部署</li><li>Spring Cloud：微服务框架，为开发者提供分布式系统的配置管理、服务发现、路器、智能路由、微代理、控制总线等开发工具包</li><li>Spring Data：数据访问框架，封装了很多种数据及数据库的访问相关技术，包括JDBC、Redis、MongoDB、Neo4J等</li><li>Spring REST Shell：可以调用Rest服务的命令行工具，命令行操作Rest服务</li></ul><h3 id="Spring-Boot发展历史"><a href="#Spring-Boot发展历史" class="headerlink" title="Spring Boot发展历史"></a>Spring Boot发展历史</h3><ul><li>联合创始人：Rod Jahnson、Juergen Hoeller、Yann Caroff</li><li>Thomas Risberg&amp;Spring JDBC、Keith Donald&amp;Spring MVC、Adrain Coyler&amp;Spring AOP</li><li>2014年4月开始发布Spring Boot2.0的1.0.0版本</li><li>配合模板和框架来简化Spring项目开发，轻松创建具有最小或零配置的独立应用程序的方式，它提供默认的代码和注释配置，只需要非常少的配置就能进行Java Spring应用开发</li><li>Spring Boot = Auto-Dependency Resolution + Auto-Configuration ＋Management Endpoints + Embedded HTTP Servers (Tomcat, Jetty)</li><li>Spring Boot 2.5.0加入startup endpoint支持GET请求、info endpoint安全改进、支持Java16等新特性</li></ul><h3 id="实战Spring-Boot-2-4"><a href="#实战Spring-Boot-2-4" class="headerlink" title="实战Spring Boot 2.4"></a>实战Spring Boot 2.4</h3><ul><li><p><a href="start.spring.io">在线创建Spring项目</a></p></li><li><p>开发环境：Open JDK，Eclipse需要添加Spring Tools 4插件，IDEA自带</p><ul><li><code>start.spring.io</code> 连接失败可使用 <code>start.alibaba.com</code> 源替代</li><li>Spring Web（Tomcat）：<a href="http://localhost:8080/hello">http://localhost:8080/hello</a></li></ul></li><li><p>REST API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaSpringBoot01HelloWorldDemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;SpringApplication.run(JavaSpringBoot01HelloWorldDemoApplication.class, args);&#125;    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span>  <span class="comment">//公开http接口，默认端口8080，可在application.properties中修改</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;    </span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Hello Spring Boot&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> s;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改端口和context path（<code>appilcation.properties</code>文件）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">&#x27;JavaSpringBoot212&#x27;</span></span><br><span class="line"><span class="attr">server.servlet.contextPath</span>=<span class="string">/SpringBoot</span></span><br><span class="line"><span class="attr">server.host</span>=<span class="string">&#x27;localhost&#x27;</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">&#x27;8080&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="自动化配置Autoconfig底层原理"><a href="#自动化配置Autoconfig底层原理" class="headerlink" title="自动化配置Autoconfig底层原理"></a>自动化配置Autoconfig底层原理</h3><ul><li>Spring Boot auto configuration根据<code>classpath</code>的jar依赖自动配置Spring应用</li><li>@SpringBootApplication注解<ul><li>等于三大注解：<code>@EnableAutoConfiguration</code> + <code>@ComponentScan</code> + <code>@Configuration</code>之和</li><li><code>@Configuration</code>将该注解类标记为应用程序上下文的bean来源</li><li><code>@EnableAutoConfiguration</code>告诉Spring Boot自动配置添加bean</li><li>通常手动为Spring MVC应用程序添加<code>@EnableWebMvc</code>，但Spring Boot会在类路径上看到spring-webmvc时自动添加该注解，为Web应用添加并启用关键特性，例如设置DispatcherServlet</li><li><code>@ComponentScan</code>告诉Spring扫描组件，配置和服务，控制器</li></ul></li><li>Auto-configuration is non-invasive 非侵入式</li><li>自动配置也可以被禁用</li><li>自动化配置机制核心：<code>spring-boot-autoconfigure.jar</code> + <code>spring.factories</code></li><li>Springboot启动（依赖、配置）-&gt; 自动化依赖（解析、加载）-&gt; 自动化配置（工厂模式创建Bean、依赖注入）-&gt; 自动化服务器（内置Web Server、监听）</li><li><code>AutoConfigurationPackages.Registrar</code> 注册存储客户端配置包列表的bean，可通过<code>AutoConfigurationPackages.get</code>（BeanFactory）静态方法访问</li><li>ImportSelector导入选择器负责引导自动配置机制：<code>@Import(EnableAutoConfigurationImportSelector.class)</code></li><li><code>spring.autoconfigure.exclude</code> 属性控制要排除的自动配置类列表</li><li><p>监控自动注入的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CommandLineRunner <span class="title function_">commandLineRunner</span><span class="params">(ApplicationContext ctx)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;监控Spring Boot 2.0自动注入的Bean:&quot;</span>);</span><br><span class="line">            String[] beanNames =ctx.getBeanDefinitionNames();</span><br><span class="line">            Arrays.sort(beanNames);</span><br><span class="line">            <span class="keyword">for</span> (String beanName : beanNames)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Spring自动注入Bean:&quot;</span>+beanName);&#125;</span><br><span class="line">        &#125;;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用Spring-Data连接MySQL数据库"><a href="#使用Spring-Data连接MySQL数据库" class="headerlink" title="使用Spring Data连接MySQL数据库"></a>使用Spring Data连接MySQL数据库</h3><ul><li>Spring Data快速数据访问框架、强大的repository仓储和自定义对象映射ORM抽象，提供统一的编程模型</li><li><p>通过JavaConfig和自定义XML命名空间轻松实现Spring集成与Spring MVC控制器的高级集成，实验支持跨库持久性</p></li><li><p>Spring Boot实战MySQL</p><ul><li>Spring JDBC and JdbcTemplate</li><li>Spring Data简化连接不同的数据库</li><li>Spring Data JPA连接MySQL，默认底层使用Hibernate framework，支持Repository仓储模式</li><li>引入最重要的两个包：<code>spring-boot-starter-data-jpa</code>和<code>mysql-connector-jave</code></li></ul></li><li>Spring Data JPA框架<ul><li>Spring Data JPA简化数据访问层的开发工作，基于Spring和JPA构建存储库的完美支持</li><li>支持Querydsl谓词，从而支持类型安全的JPA查询，在引导时验证<code>@Query</code>带注释的查询</li><li>支持Domain类的透明审核，分页支持，动态查询执行，集成自定义数据访问代码的能力</li><li>支持基于XML的实体映射，引入<code>@EnableJpaRepositories</code>，基于<code>JavaConfig</code>的存储库配置</li></ul></li></ul><h3 id="MongoDB-4-0数据库"><a href="#MongoDB-4-0数据库" class="headerlink" title="MongoDB 4.0数据库"></a>MongoDB 4.0数据库</h3><ul><li><p><a href="https://edu.aliyun.com/workshop/3/course/1044">阿里巴巴MongoDB高级实战</a></p></li><li><p>NoSQL排名第一的分布式数据库，由C++语言编写，特点是高性能、高并发、易部署、易使用、存储数据非常方便（灵活的数据模型），旨在为Web应用提供可扩展的高性能数据存储解决方案</p></li><li><p>MongoDB开源、跨平台，支持Windows、Linux、OS X和Solaris系统，集成内存缓存，自动分片储存，支持分布式查询和跨文档事务，便于横向扩展</p></li><li><p>Repository仓储层代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlogRepository</span> <span class="keyword">extends</span> <span class="title class_">MongoRepository</span>&lt;Blog, ObjectId&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> Blog <span class="title function_">findById</span><span class="params">(ObjextId id)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(ObjectId id)</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Blog&gt; <span class="title function_">findAll</span><span class="params">()</span>;&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动命令：<code>.\mongod.exe --port 27017 --dbpath=&quot;../data&quot; --logpath=&quot;../log/mongo.log&quot;</code></p></li><li><p>命令行控制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br><span class="line">use database</span><br><span class="line">db.users.insert(&#123;<span class="string">&quot;key1&quot;</span>:<span class="string">&quot;value1&quot;</span>,<span class="string">&quot;key2&quot;</span>:<span class="string">&quot;value2&quot;</span>&#125;)</span><br><span class="line">db.users.find()</span><br></pre></td></tr></table></figure></li><li><p>可视化管理工具：Compass、Robo 3T（Robomongo）</p></li></ul><h3 id="Redis分布式缓存6-0"><a href="#Redis分布式缓存6-0" class="headerlink" title="Redis分布式缓存6.0"></a>Redis分布式缓存6.0</h3><ul><li>三层架构+高并发缓存：前端（UI界面）-&gt; 后台（API接口+Services业务逻辑+DAO数据访问）-&gt; 数据（MongoDB+MySQL/Oracle/SQLServer+Redis）</li><li>Redis API：<code>org.springframework.data.redis.connection</code>包，<code>RedisConnection</code>，<code>RedisConnectionFactory Interface</code></li><li>RedisConnection解析为Redis通信提供核心组件，处理与Redis服务器后端的通信</li><li>配置参数：RedisConnectionFactory工厂模式，RedisTemplate：RedisConnection对象，Repository：Connection Pool</li><li>RedisTemplate Interface：GeoOperations，HashOperations，HyperLogLogOperations，ListOperations，SetOperations，ValueOperations，ZSetOperations</li><li>Redis默认接口：6379（最好安装在Linux系统）</li><li>Redis6.0配置文件<code>redis.conf</code>里默认的IP配置，要改掉才能远程链接（改成 bind 0.0.0.0）</li></ul><h3 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h3><ul><li>自定义实现安全验证</li><li>Spring Security开源框架<ul><li>专注于身份验证和授权，保护Spring应用系统的安全标准</li><li>提供安全认证服务的框架</li><li>Authetication验证和Authorization收起</li></ul></li><li>Apache Shiro开源框架<ul><li>简单易用的开源Java安全框架，可应用于Web和非Web环境</li></ul></li><li>Basic、Form、OAuth、LDAP、Kerberos、X509、Token验证</li><li>WebSecurityConfig：配置安全规则，默认启用basic验证</li><li>全站安全验证配置</li></ul><h3 id="REST-API帮助文档Swagger"><a href="#REST-API帮助文档Swagger" class="headerlink" title="REST API帮助文档Swagger"></a>REST API帮助文档Swagger</h3><ul><li>Spring REST Docs（离线，不好用）</li><li><p>Swagger自动化文档工具</p><ul><li>一个完整的API生态，工具，规范，代码规范</li></ul></li><li><p>Swagger依赖：springfox-swagger2，</p></li></ul><h3 id="应用程序性能监控（Admin-amp-Actuator）"><a href="#应用程序性能监控（Admin-amp-Actuator）" class="headerlink" title="应用程序性能监控（Admin&amp;Actuator）"></a>应用程序性能监控（Admin&amp;Actuator）</h3><ul><li>环境、bean、版本、内存、日志、指标、配置、JVM、GC</li><li>性能监控和管理组件Actuator<ul><li>使用HTTP Endpoint或JMX，运行状态指标数据收集</li><li>默认监控EndPoint：<a href="http://localhost:8080/Actuator">http://localhost:8080/Actuator</a></li><li><code>management.endpoints.web.exposure.include=*</code></li></ul></li><li>Micrometer：多维度指标收集器，语言中立的API（可采集数据图形）</li><li>Spring Boot Admin Server：开发监控服务端<ul><li><code>management.endpoints.health.show-details</code></li></ul></li></ul><h3 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h3><ul><li>Spring Boot Docker Hub</li><li>阿里云Docker镜像仓库（国内第一）提供Docker Images镜像加速</li><li>DockerFIle：Docker镜像配置文件</li><li>Build Docker Image with Maven：<code>mvn clean package dockerfile:build</code> </li></ul><h3 id="课程代码"><a href="#课程代码" class="headerlink" title="课程代码"></a>课程代码</h3><ul><li>课程代码已上传 <a href="https://github.com/Bezhuang/LearnCS/tree/main/%E9%98%BF%E9%87%8C%E4%BA%91%E5%BC%80%E5%8F%91%E8%80%85%E5%AD%A6%E9%99%A2/Java%E4%B8%AD%E7%BA%A7%E8%AE%AD%E7%BB%83%E8%90%A5">Github 仓库</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> MySQL </tag>
            
            <tag> MongoDB </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>听林纳斯聊聊 Linux 背后的思想</title>
      <link href="/Linux%E8%83%8C%E5%90%8E%E7%9A%84%E6%80%9D%E6%83%B3/"/>
      <url>/Linux%E8%83%8C%E5%90%8E%E7%9A%84%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linus Torvalds，一个任何极客都不会陌生的名字，Linux之父、Git之父，大神在计算机领域的影响力可以说是划时代的。那么在这些传奇的背后蕴藏着怎样的思想呢？下面这个Linus2016年时在TED上接受的一次访谈或许能让我们对Linux背后的思想略窥一二。</p></blockquote><span id="more"></span><h3 id="一、传奇的诞生"><a href="#一、传奇的诞生" class="headerlink" title="一、传奇的诞生"></a>一、传奇的诞生</h3><p>1991年的8月25日，一个刚进入赫尔辛基大学不久的21岁学生在学校的邮箱列表中公开了这样一封邮件：“What would you like to see most in minix —— small poll for my new operation system”，在邮件中他这么写道：“我正在开发一个（免费的）操作系统 …… 这只是出于爱好，不会像gnu那样庞大和专业 …… 我现在已经移植了bash和gcc …… 看起来几个月之内就会有实质性的进展”。1991年9月，他通过大学的FTP服务器发布了这个叫Freax的操作系统，随后它被重新命名为我们今天所熟知的名字：Linux。</p><p>时至今日，我想我们已无需再多去赘述Linux产生的影响和它划时代的意义，我更想来聊聊的是Linus另一个对世界影响至深的理念——开源。</p><p>Software is like sex, It‘s better when it’s free. —— Linus Torvalds</p><p>26年后，当Linus描述起一开始建立Linux项目时的工作情况，他说：“Linux最初并不是一个团队合作的产物”，这个操作系统最初只是作为众多为他自己服务的一系列项目中的一个，仅仅是一个因为个人需要而开发的产物。接下来当项目逐渐成长起来，需要获得别人的一些认可和意见，他才逐渐把源码放开，“我已经在这个项目上努力半年了，快来看看我的成果”。在那时，也没有使用什么开源方法或是改进项目的手段，只是不同的人贡献了一些不同的代码，让你觉得，“噢，我从来没有想过可以这样，这样竟然可以让项目获得改进”。不久之后，Linus将其加入了FSF（ 自由软件基金 ）的 GNU 计划中，使用流行的开源许可证，避免了商业或其他的因素参与导致的负面影响，也同时允许用户合法的免费使用、拷贝并且改动程序。今天，Linux 内核是地球上目前为止最活跃的开源项目，是服务器端处于支配地位的操作系统，是 Android 的基础。世界上所有的超级计算机都跑在 Linux 上，包括 NASA 的集群和SpaceX的引擎。</p><h3 id="二、开源的力量"><a href="#二、开源的力量" class="headerlink" title="二、开源的力量"></a>二、开源的力量</h3><p>最开始的时候，人们并不是向项目直接贡献代码，人们更多的是贡献自己的想法。Linus原本是不喜欢有人打扰自己的工作的，对他来说，哪怕是电脑主机都不需要性能多强劲，只需要做到绝对的安静就好。所以当人们开始评论、开始对代码提供反馈信息的时候，突然就会让人耳目一新，这是一种崭新的时刻，“I Love Other People”！ </p><p>不知道为何，好像所有的Geek都不是社交达人，Linus的姐姐（或许是妹妹）说过，他最大的异常特征是从不参与众人的行动，独自沉浸在计算机，沉浸在数学，沉浸在物理学这些他擅长的领域中。不过开源最核心的理念之一就是它非常鼓励不同的人一起合作，不见得需要互相喜欢对方，甚至可能互相都瞧不上，但是大家可以有非常热烈的非常专业的争论，这就是开源的魅力。</p><p>早期，Linus是担心商业带来的负面影响的，所以他反对软件专利，认为商业人士是来利用你的工作的。但是，他渐渐发现这些商业人士完成了他完全不感兴趣的事情，在完全基于不同的目标，商业使用开源的方式只是专注技术的大神自己刚好不想走的路，“我关心技术，同时有些人关心UI，但我不会去做UI来拯救我的人生。如果我被困在岛屿上，同时唯一的脱困方式是做一个漂亮的UI，那我肯定会死在那儿的”。Linus自己也承认，如果没有全力投入到开源，并且真得放开手，Linux永远也不可能是现在的样子。可能像谷歌这样的公司利用Linus的开源软件赚了好几亿美元，但对他自己来说，他做了正确的选择。</p><p>时至今日，开源机制能够运转良好，其中很重要的一个缘故是代码可以将所有的事情都转化为黑和白（1和0）。通常这样利于作出决定，代码要么执行，要么不执行，因此意味着更少的争议空间。当然，你也能将同样的原则应用到其它领域的一些地方（比如科研、学术），因为黑色和白色混合在一起不只是变成灰色，而是很多不同的颜色。</p><h3 id="三、优雅的品味"><a href="#三、优雅的品味" class="headerlink" title="三、优雅的品味"></a>三、优雅的品味</h3><p>在Coding的领域，你不仅仅只需要打代码，还要对代码有好的品位。我们可以看看下面这个调用单向链表的例子：</p><p>你是希望用if语句有一个特殊情况处理一个特殊情况，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">remove_list_entry</span><span class="params">(entry)</span></span><br><span class="line">&#123;</span><br><span class="line">    prev = <span class="literal">NULL</span>;</span><br><span class="line">    walk = head;    <span class="comment">// Walk the list</span></span><br><span class="line">    <span class="keyword">while</span> (walk != entry)&#123;</span><br><span class="line">        prev = walk;</span><br><span class="line">        walk = walk-&gt;next;</span><br><span class="line">    &#125;    <span class="comment">//Remove the entry by updating the head or the previous entry</span></span><br><span class="line">    <span class="keyword">if</span>(!prev)</span><br><span class="line">        head = entry-&gt;next;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        prev-&gt;next = entry-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是直接通过指针变量指向next地址？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">remove_list_entry</span><span class="params">(entry)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//The &quot;indirect&quot; pointer points to the address of the thing we&#x27;ll update</span></span><br><span class="line">    indirect = &amp;head;</span><br><span class="line">    <span class="comment">//Walk the list,looking for the thing that points to the entry we want to remove</span></span><br><span class="line">    <span class="keyword">while</span> ((*indirect) != entry)</span><br><span class="line">        indirect = &amp;(*indirect)-&gt;next;</span><br><span class="line">        *indirect = entry-&gt;next    <span class="comment">// .. and just remove it</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CS 101，当碰到一个问题时，可以通过不同的方式被重写，移除一个特殊的情形恢复正常，就是好的代码。</p><p>“Good taste is much bigger than clever or stupid. Good taste is about really seeing the big patterns and kind of instinctively knowing what’s the right way to do things.” </p><h3 id="四、脚踏实地"><a href="#四、脚踏实地" class="headerlink" title="四、脚踏实地"></a>四、脚踏实地</h3><p>人们常常把特斯拉和爱迪生拿来对比。特斯拉是有远见的有疯狂创意的科学家，人们爱特斯拉（不然怎么满大街的毛豆3呢）。爱迪生则是一个常常被批评为乏味的人。但大神更崇尚后者，“Genius is one percent inspiration and 99 percent perspiration”，爱迪生也许不是一个很好的人，但他的努力帮助他完成很多不平凡的事情。</p><p>“I am not a visionary, I do not have a five-year plan. I’m an engineer. And I’m perfectly happy with all the people who are walking around and just staring at the clouds and looking at the stars and saying, ‘I want to go there’. But I’m looking at the ground, and I want to fix the pothole that’s right in front of me before I fall in. This is the kind of person I am“。</p><h3 id="五、笔者的其他一些废话"><a href="#五、笔者的其他一些废话" class="headerlink" title="五、笔者的其他一些废话"></a>五、笔者的其他一些废话</h3><p>“I do code for fun, but I also want to code for something meaningful”，纵观整篇访谈，这是让我印象最深的一句话。技术是为了实现目标、解决问题而存在的，我始终相信，我们创造出的每一个程序都应该有自己存在的价值和意义。大家是不是都听过一种说法，CV工程师，复制—&gt;粘贴，每天重复、机械的劳动，就和10年前的文员一样，整天CRUD，却离自己的初心渐行渐远。这是在尊重技术，还是只是为了名和利呢？</p><p>在知乎上看到这样一句话，让人感慨良多，它是这么说的：开源让更多人获取到技术，同时也让该技术和会该技术的劳动力变的廉价，以至于在资本家的眼里，那根本不叫技术。可能这的确是事实，大环境也决并非独立个体所能改变的，我们改变不了攫取价值的资本家，所能做的只是尽力向Linus那样去创造价值、贡献价值，To Make Someting Useful and Meaningful。我想，我们努力奋斗是为了更好地实践、创造和分享，这才是我们应有的初衷，这才是我们存在的意义。</p><p>第一次写长文，难免有些生疏，有些语句不通也请见谅。遗憾自己书读的还是不够多，见识还是不够广，唯有加紧努力让拥有的能力赶上自己的心气。访谈的原视频放在下面了，有什么问题欢迎及时指正。</p><h3 id="六、TED-访谈视频"><a href="#六、TED-访谈视频" class="headerlink" title="六、TED 访谈视频"></a>六、TED 访谈视频</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?bvid=BV1w7411Z71f" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 观点与感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51 单片机基础知识总结</title>
      <link href="/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
      <url>/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>单片机（MCU）是典型的嵌入式微控制器，通过在IC芯片上集成运算器、控制器以及IO接口，也就相当于一个小而完善的微型计算机系统。单片机的学习可以和计算机组成原理、汇编语言、微机原理与接口技术和计算机体系结构等计算机专业课程有机结合，加深对于硬件的理解。我使用的是<a href="http://prechin.net/forum.php?mod=viewthread&amp;tid=35264&amp;extra=page%3D1">普中51开发板</a>，以下是我在学习和实战过程中对单片机基础知识的整理总结，源代码保存在 <a href="https://github.com/Bezhuang/Learn-CS/tree/main/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/STC89C52%E5%8D%95%E7%89%87%E6%9C%BA">Github 仓库</a>中，可供参考。</p></blockquote><span id="more"></span><h3 id="单片机预备知识"><a href="#单片机预备知识" class="headerlink" title="单片机预备知识"></a>单片机预备知识</h3><ul><li><p>电平特性：数字电路只有两种电平（高和低）</p><ul><li>单片机TTL电平：高+5V、低0V</li><li>RS232电平（计算机的串口）：高-12V、低+12V</li><li>计算机与单片机之间通讯时需要加电平转换芯片max232</li></ul></li><li><p>二进制：由数字电路中的两种电平特性决定</p></li><li><p>十六进制：二进制的简短表示方式（四个二进制转换成一个十六进制），例：0001B -&gt; 1H</p></li><li><p>二进制的逻辑运算</p><ul><li>”与“运算：<code>·</code></li><li>“或”运算：<code>+</code></li><li>”非“运算：<code>〒</code></li><li>“异或”运算：<code>⊕</code></li></ul></li><li><p>位运算符：<code>&gt;&gt;</code>位右移、<code>&lt;&lt;</code>位左移、<code>&amp;</code>按位与、<code>|</code>按位或、<code>^</code>按位异或、<code>~</code>按位取反</p></li><li><p>C51数据类型扩充定义</p><ul><li>sfr：特殊功能寄存器声明  <code>sfr SCON = 0X98;</code></li><li>sfr16：sfr的16位数据声明  <code>sfr16 T2 = 0xCC;</code></li><li>sbit：特殊功能位声明  <code>sbit 0V = PSW^2;</code></li><li>bit：位变量声明  <code>bit flags</code></li><li>一般来说<code>char</code>定义单个字符，<code>unsigned char</code>定义数组</li></ul></li><li><p>C51头文件：<code>reg51.h</code>、<code>reg52.h</code>（定义特殊功能寄存器和位寄存器），<code>math.h</code>（定义常用数学计算），<code>ctype.h</code>、<code>stdio.h</code>、<code>stdlib.h</code>、<code>absacc.h</code></p></li></ul><h3 id="单片机介绍"><a href="#单片机介绍" class="headerlink" title="单片机介绍"></a>单片机介绍</h3><ul><li>单板机：将CPU芯片、存储器芯片、I/O接口芯片和简单的I/O设备装配在一块印刷电路板上，将监控程序固化在ROM中，从而构成的单板微型计算机</li><li>单片机：在一片集成电路芯片上集成微处理器、存储器、I/O接口电路，从而构成的单芯片微型计算机</li><li>Intel MCS-51系列单片机：集成8位CPU、4K 字节 ROM、128字节RAM、4个8位并口、1个全双工串行口、2个16位定时/计数器。寻址范围64K，有控制功能较强的布尔处理器</li><li>总线（BUS）：计算机各部件之间传送信息的公共通道<ul><li>内部总线：CPU内部之间的连线</li><li>外部总线：CPU与其他部件之间的连线。外部总线分为：数据总线DB（Data Bus）、地址总线AB（Address Bus）、控制总线CB（Control Bus）</li></ul></li><li>CPU：由运算和控制逻辑组成，同时还包括中断系统和部分外部特殊功能寄存器</li><li>RAM：用以存放可以读写的数据，如运算的中间结果、最终结果以及欲显示的数据</li><li>ROM：用以存放程序、一些原始数据和表格</li><li>I/O 口：四个 8 位并行 I/O 口，既可用作输入，也可用作输出</li><li>T/C：两个定时/记数器，既可以工作在定时模式，也可以工作在计数模式</li><li>五个中断源的中断控制系统<ul><li>一个全双工 UART（通用异步接收发送器）的串行 I/O 口，用于实现单片机之间或单片机与微机之间的串行通信</li><li>片内振荡器和时钟产生电路，石英晶体和微调电容需要外接。最佳振荡频率为 6M—12M</li></ul></li><li>80C51系列：以8051为基核开发出的CMOS工艺单片机，是MCS-51系列中的一个典型品种</li></ul><ul><li><p>中断服务程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数名() interrupt n using m</span><br><span class="line">&#123; 函数内部实现; &#125;</span><br></pre></td></tr></table></figure></li><li><p>I/O口定义：<code>sbit beep = P2^3;</code></p></li><li><p>单片机最小系统能够运行起来的必要条件：</p><ol><li>电源电路</li><li>晶振电路（提供时钟脉冲）</li><li>复位电路（提供系统复位操作）</li></ol></li><li><p>对单片机任意IO口的随意操作：1.输出控制电平高低、2.输入检测电平高低</p></li><li><p>定时器</p><ul><li>中断：外部中断、定时器中断、串口中断</li><li>串口通信：单片机之间、单片机与计算机间</li></ul></li><li><p>KEIL C51软件和51硬件仿真器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span>  <span class="comment">//0 Error,0 Warning</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="点亮发光管"><a href="#点亮发光管" class="headerlink" title="点亮发光管"></a>点亮发光管</h3><ul><li><p>GPIO（genral purpose intput output）：通用输入输出端口，可以通过软件来控制其输入和输出</p></li><li><p>51单片机芯片的GPIO引脚与外部设备连接起来，从而实现与外部通讯、 控制以及数据采集的功能</p></li><li><p>STC89C52的引脚</p><ul><li>电源引脚：VC、 GND</li><li>晶振引脚：XTAL1、XTAL2</li><li>复位引脚：RST、VPD，不做其他功能使用</li><li>串口功能引脚：TXD、RXD，可以作为下载引脚使用</li><li>GPIO 引脚：带有 <code>Px.</code> 字样的均属于 GPIO 引脚</li><li>同一时刻，每个引脚只能使用该引脚的一个功能</li></ul></li><li><p>上下拉电阻的作用：</p><ul><li>上拉电阻就是将不确定的信号通过一个电阻拉到高电平，同时此电阻起到一个限流的作用，下拉就是下拉到低电平</li><li>OC门要输出高电平，外部必须加上拉电阻</li><li>加大普通IO口的驱动能力</li><li>起到限流的作用</li><li>抵抗电磁干扰</li></ul></li><li><p>GPIO外围电路</p><ul><li>当I/O口被用作输入用途时，读取输入前要保证锁存器状态为 1</li><li>当将I/O口由低拉高时，指令执行后需要1~2个机器周期才能使实际的输出变成高电平</li><li>51 单片机所有 IO 口都是双向的，即可以作为输入也可以作为输出使用</li><li>由于 P0 口是漏极开路的，所以要操作 P0 口必须外接上拉电阻，其他P1、P2、P3 口都内部自带上拉电阻，可以不加，如果要增强 IO 口驱动能力，可以外接上拉电阻</li></ul></li><li><p>LED：发光二极管，具有单向导电性，通常在LED管脚上串联一个限流电阻</p></li><li><p>发光二极管发光时两端电压约为1.7V，这个电压又叫做发光二极管的“导通压降”</p></li><li><p>对于 LED 这种一次性操作的器件来说，可以把控制语句放在<code>while</code>之前来执行</p></li><li><p><code>Code</code>表示程序所占用 FLASH 的大小，<code>dat</code>表示数据储存器内部 RAM 占用大小，<code>xdat</code>表示数据储存器外部 RAM 占用大小</p></li><li><p>程序的大小不是 <code>.hex</code> 文件的大小，而是编译后的 Code 和 dat 之和</p></li><li><p>LED闪烁（延时函数）</p></li><li><p>移位函数：左移<code>_crol_()</code><em>、右移`_cror</em>()`函数（实现LED流水灯）</p></li></ul><h3 id="其他实验"><a href="#其他实验" class="headerlink" title="其他实验"></a>其他实验</h3><ul><li>由于篇幅关系，其他实验程序代码放在 <a href="https://github.com/Bezhuang/Learn-CS/tree/main/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/STC89C52%E5%8D%95%E7%89%87%E6%9C%BA">Github 仓库</a>中，如需自取</li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Data Visualization With Python</title>
      <link href="/Data-Visualization-with-Python/"/>
      <url>/Data-Visualization-with-Python/</url>
      
        <content type="html"><![CDATA[<blockquote><p>One of the key skills of a data scientist is the ability to tell a compelling story, visualizing data and findings in an approachable and stimulating way. Learning how to leverage a software tool to visualize data will helps one understand the data better, and make more effective decisions. The main goal of this Data Visualization with Python course provided by IBM is to use various techniques and several data visualization libraries in Python, namely Matplotlib, Seaborn, and Folium for presenting data visually. The following are the notes I took during this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Coursera-Data-Visualization-with-Py.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Introduction-to-Data-Visualization-Tools"><a href="#Introduction-to-Data-Visualization-Tools" class="headerlink" title="Introduction to Data Visualization Tools"></a>Introduction to Data Visualization Tools</h3><ul><li><p>Why Build Visuals?</p><ul><li>For exploratory data analysis</li><li>Communicate data clearly</li><li>Share unbiased representation of data</li><li>Use them to support recommendations to different stakeholders</li></ul></li><li><p>Less is more (more effective, attractive and impactive)</p></li><li><p>Matplotlib (<a href="http://www.aosabook.org/en/matplotlib.html">History</a> and Architecture): Created by John Hunter </p><ul><li>Backend Layer has three built-in abstract interface classes: FigureCavas, Renderer, Event</li><li>Artist Layer is comprised of one main object - Artist. Title, lines, tick labels, images all correspond to individual Artist instances.</li><li>Two types of Artist objects: Primitive (Line2D, Rectangle, Circle and Text), Composite (Axis, Tick, Axes and Figure)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.backends.backend_agg <span class="keyword">import</span> FigureCanvasAgg <span class="keyword">as</span> FigureCanvas <span class="comment"># import FigureCanvas</span></span><br><span class="line">frim matplotlib.figure <span class="keyword">import</span> Figure <span class="comment"># import Figure artist</span></span><br><span class="line">fig = Figure()</span><br><span class="line">canvvas = FigureCanvas(fig)</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment">#create 10000 random numbers using numpy</span></span><br><span class="line">x = np.random.randn(<span class="number">10000</span>)</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>) <span class="comment"># create an axes artist</span></span><br><span class="line">ax.hist(x, <span class="number">100</span>) <span class="comment"># generate a histogram of the 10000 numbers</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;Normal distribution with $\mu=0, \sigma=1$&#x27;</span>) <span class="comment"># add a title to the figure and save it</span></span><br><span class="line">fig.savefig(<span class="string">&#x27;matplotlib_histogram.png&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>Scripting Layer is comprised mainly of pyplot, ascripting interface that is lighter that the Artist layer.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.random.randn(<span class="number">10000</span>)</span><br><span class="line">plt.hist(x, <span class="number">100</span>)</span><br><span class="line">plt.title(<span class="string">r&#x27;Normal distribution with $\mu=0, \sigma=1$&#x27;</span>)         plt.savefig(<span class="string">&#x27;matplotlib_histogram.png&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>Basic Plotting with Matplotlib</p><ul><li>Plot Function</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline <span class="comment"># pass in inline as the backend to enforce plots to be rendered within the browser</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(<span class="number">5</span>, <span class="number">5</span>, <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Y&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Plotting Example&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li>Matplotlib - Pandas</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.plot(kind=<span class="string">&quot;line&quot;</span>) <span class="comment"># create a line plot</span></span><br><span class="line">df[<span class="string">&quot;column&quot;</span>].plot(kind=<span class="string">&quot;hist&quot;</span>) <span class="comment"># create a histogram</span></span><br></pre></td></tr></table></figure></li><li><p>Line Plots</p><ul><li>A line plot is a type of plot which displays information as a series of data points called ‘makers’ connected by straight line segments.</li><li>Creating line plots</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">years = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">range</span>(<span class="number">1980</span>, <span class="number">2014</span>)))</span><br><span class="line">df_canada.loc[<span class="string">&#x27;Haiti&#x27;</span>, years].plot(kind=<span class="string">&#x27;line&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Immigration from Haiti&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Number of immigrants&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Years&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul><h3 id="Basic-and-Specialized-Visualization-Tools"><a href="#Basic-and-Specialized-Visualization-Tools" class="headerlink" title="Basic and Specialized Visualization Tools"></a>Basic and Specialized Visualization Tools</h3><ul><li><p>Area Plots (based on line plot)</p><ul><li>Also known as area chart or area graph, is commonly used to represent cumulated totals using numbers or percentages over time</li><li>Area plots are stacked by default.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">years=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,<span class="built_in">range</span>(<span class="number">1980</span>,<span class="number">2014</span>)))</span><br><span class="line">df_canada.sort_values([<span class="string">&#x27;Total&#x27;</span>], ascending=<span class="literal">False</span>, axis=<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df_top5=df_canada.head()</span><br><span class="line">df_top5=df_top5[years].transpose()</span><br><span class="line">df_top5.plot(kind=<span class="string">&#x27;area&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Immigration trend of top 5 countries&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Number of immigrants&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Years&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>Histograms</p><ul><li>A histogram is a way of representing the frequency distribution of a numeric dataset.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">count, bin_edges=np.histogram(df_canada[<span class="string">&#x27;2013&#x27;</span>]) <span class="comment"># numpy function</span></span><br><span class="line">df_canada[<span class="string">&#x27;2013&#x27;</span>].plot(kind=<span class="string">&#x27;hist&#x27;</span>, xticks=bin_edges)</span><br><span class="line">plt.title(<span class="string">&#x27;Histogram of Immigration from 195 countries in 2013&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Number of Countries&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Number of immigrants&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>Bar Charts</p><ul><li>Unlike a histogram, a bar chart is a type of plot where the length of each bar is proportional to the value of the item that it represents.</li><li>It is commonly used to compare the values of a variable at a given point in time. </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">years=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,<span class="built_in">range</span>(<span class="number">1980</span>,<span class="number">2014</span>)))</span><br><span class="line">df_iceland=df_canada.loc[<span class="string">&#x27;Iceland&#x27;</span>,years]</span><br><span class="line">df_iceland.plot(kind=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Icelandic immigrants to Canada from 1980 to 2013&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Year&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Number of immigrants&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>Pie Charts</p><ul><li>A pie chart is a circular statistical graphic divided into slices to illustrate numerical proportion.</li><li><a href="http://www.surveygizmo.com/resources/blog/pie-chart-or-bar-graph">Arguments against pie charts</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">df_continents=df_canada.groupby(<span class="string">&#x27;Continent&#x27;</span>, axis=<span class="number">0</span>).<span class="built_in">sum</span>()</span><br><span class="line">df_continents[<span class="string">&#x27;Total&#x27;</span>].plot(kind=<span class="string">&#x27;pie&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Immigration to Canada by Continent&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>Box Plots</p><ul><li>A boxplot is a way of statistically representing the distribution of given data through 5 main dimensions. </li><li>Minimum, First Quartile, Median, Third Quartile, Maximum, Outliers</li><li>IQR (Inter Quartile Range): between First Quartile and Third Quartile</li><li><code>Function = plot, and Parameter = kind with value = &quot;box&quot;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">df_japan=df_canada.loc(<span class="string">&#x27;Japan&#x27;</span>, years).transpose()</span><br><span class="line">df_japan.plot(kind=<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Box plot of Japanese Immigrants from 1980 to 2013&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Number of Immigrants&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>Scatter Plots</p><ul><li>A scatter plot is a type of plot that displays values pertaining to typically two variables against each other. </li><li>Usually it is a dependent variable to be plotted against an independent variable in order to determine if any correlation between the two variables exists.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">df_total.plot&#123;kind=<span class="string">&#x27;scatter&#x27;</span>,x=<span class="string">&#x27;year&#x27;</span>,y=<span class="string">&#x27;total&#x27;</span>&#125;</span><br><span class="line">plt.title(<span class="string">&#x27;Total immigrant population to Canada from 1980 to 2013&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Year&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Number of immigrants&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>Bubble Plots</p><ul><li>A bubble plot is a variation of the scatter plot that displays three dimensions of data (x, y, z). </li><li>The data points are replaced with bubbles, and the size of the bubble is determined by the third variable ‘z’, also known as the weight. </li></ul></li></ul><h3 id="Advanced-Visualizations-and-Geospatial-Data"><a href="#Advanced-Visualizations-and-Geospatial-Data" class="headerlink" title="Advanced Visualizations and Geospatial Data"></a>Advanced Visualizations and Geospatial Data</h3><ul><li><p>Waffle Charts</p><ul><li>A waffle chart is an interesting visualization that is normally created to display progress toward goals</li><li>Matplotlib does not have a built-in function to create waffle charts.</li></ul></li><li><p>Word Clouds</p><ul><li>A Word Cloud is a depiction of the frequency of different words in some textual data</li><li>Mueller’s word cloud generator</li></ul></li><li><p>Seaborn and Regression Plots</p><ul><li>Seaborn is a Python visualization library based on Matplotlib</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">ax=sns.regplot(x=<span class="string">&#x27;year&#x27;</span>,y=<span class="string">&#x27;total&#x27;</span>,data=df_total,color=<span class="string">&#x27;green&#x27;</span>,marker=<span class="string">&#x27;+&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>Introduction to Folium and Map Styles</p><ul><li>Folium is a powerful Python library that helps you create several types of Leaflet maps</li><li>It enables both the binding of data to a map for choropleth visualizations as well as passing visualizations as markers on the map</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">word_map=folium.Map() <span class="comment">#define the world map</span></span><br><span class="line">world_map <span class="comment">#display world map</span></span><br></pre></td></tr></table></figure><ul><li>Define the world map centered around Canada with a low zoom level</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">world_map=folium.Map(</span><br><span class="line">location=[<span class="number">56.130</span>, -<span class="number">106.35</span>],</span><br><span class="line">zoom_start=<span class="number">4</span>,</span><br><span class="line">    tiles=<span class="string">&#x27;Stamen Terrain&#x27;</span> <span class="comment">#or &#x27;Stream Toner&#x27;</span></span><br><span class="line">)</span><br><span class="line">world_map <span class="comment">#display</span></span><br></pre></td></tr></table></figure></li><li><p>Maps with Markers</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">canada_map=folium.Map(</span><br><span class="line">location=[<span class="number">56.130</span>, -<span class="number">106.35</span>],</span><br><span class="line">zoom_start=<span class="number">4</span></span><br><span class="line">)</span><br><span class="line">ontario=folium.<span class="built_in">map</span>.FeatureGroup() <span class="comment">#create a feature group</span></span><br><span class="line">ontario.add_child(</span><br><span class="line">  folium.features.CircleMarker([<span class="number">51.25</span>,-<span class="number">85.32</span>],radius=<span class="number">5</span>,color=<span class="string">&#x27;red&#x27;</span>,fill_color=<span class="string">&#x27;Red&#x27;</span>)</span><br><span class="line">) <span class="comment">#style the feature group</span></span><br><span class="line">canada_map.add_child(ontario) <span class="comment">#add the feature group to the map</span></span><br><span class="line">folium.Marker([<span class="number">51.25</span>,-<span class="number">85.32</span>],popup=<span class="string">&#x27;Ontario&#x27;</span>).add_to(canada_map) <span class="comment">#label the marker</span></span><br><span class="line">canada <span class="built_in">map</span></span><br></pre></td></tr></table></figure></li><li><p>Choropleth Maps</p><ul><li>A choropleth map is a thematic map in which areas are shaded or patterned in proportion to the measurement of the statistical variable being displayed on the map, such as population density or per capita income.</li><li>Geojson File</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">world_map=folium.Map(</span><br><span class="line">zoom_start=<span class="number">2</span>,</span><br><span class="line">    tiles=<span class="string">&#x27;Mapbox Bright&#x27;</span></span><br><span class="line">)</span><br><span class="line">world_geo=<span class="string">r&#x27;world_countries.json&#x27;</span> <span class="comment">#geojson file</span></span><br><span class="line">world_map.choropleth(</span><br><span class="line">geo_path=world_geo,</span><br><span class="line">data=df_canada,</span><br><span class="line">columns=[<span class="string">&#x27;Country&#x27;</span>,<span class="string">&#x27;Total&#x27;</span>],</span><br><span class="line">key_on=<span class="string">&#x27;feature.properties.name&#x27;</span>,</span><br><span class="line">fill_color=<span class="string">&#x27;YlOrRd&#x27;</span>,</span><br><span class="line">legend_name=<span class="string">&#x27;Immigration to Canada&#x27;</span></span><br><span class="line">)</span><br><span class="line">world_map</span><br></pre></td></tr></table></figure></li></ul><h3 id="Creating-Dashboards-with-Plotly-and-Dash"><a href="#Creating-Dashboards-with-Plotly-and-Dash" class="headerlink" title="Creating Dashboards with Plotly and Dash"></a>Creating Dashboards with Plotly and Dash</h3><ul><li><p>Dashboard</p><ul><li>Produce real-time visuals</li><li>Understand business moving parts</li><li>Visually track, analyze and display key performance indicators (KPI)</li><li>Take informed decisions and improve performance. </li><li>Reduced hours of analyzing</li></ul></li><li><p>Best dashboards answer critical business questions.</p></li><li><p><a href="https://pyviz.org/dashboarding/">Python dashboarding tools</a>: Dash from Plotly, Panel, voila, Streamlit, Bokeh, ipywidgets, matplotlib, Flask</p></li><li><p><a href="https://plotly.com/python/getting-started/">Plotly</a></p><ul><li>Interactive, open-source plotting library</li><li>Supports over 40 unique chart types</li><li>Includes chart types like statistical, financial, maps, scientific and 3-dimensional</li><li>Visualizations can be displayed in Jupyter notebook, saved to HTML files, or can be used in developing Python-built web applications using Dash</li></ul></li><li><p>Plotly Graph Objects: Low-level interface to figures, traces, and layout: <code>plotly.gragh_objects.Figure</code></p></li><li><p>Plotly express: High-level wrapper for Plotly </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.gragh_objects <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">10</span>) <span class="comment">#set random seed for reproducibility</span></span><br><span class="line">x=np.arange(<span class="number">12</span>)</span><br><span class="line">y=np.random.randint(<span class="number">50</span>, <span class="number">500</span>, size=<span class="number">12</span>) <span class="comment">#create random y values</span></span><br><span class="line">fig=go.Figure(data=go.Scatter(x=x,y=y)) <span class="comment">#create figure and add trace (scatter)</span></span><br><span class="line">fig.update_layout(title=<span class="string">&#x27;Simple Line Plot&#x27;</span>,xais_title=<span class="string">&#x27;Month&#x27;</span>,yaxis_title=<span class="string">&#x27;Sales&#x27;</span>)</span><br><span class="line">fig.show()</span><br><span class="line">fig=px.line(x=x,y=y,title=<span class="string">&#x27;Simple Line Plot&#x27;</span>,labels=<span class="built_in">dict</span>(x=<span class="string">&#x27;Month&#x27;</span>,y=<span class="string">&#x27;Sales&#x27;</span>)) <span class="comment">#Entire line chart can be created in a single command</span></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure></li><li><p><a href="https://images.plot.ly/plotly-documentation/images/plotly_js_cheat_sheet.pdf">Plotly cheatsheet</a></p></li><li><p>Dash</p><ul><li>Open-Source User Interface Python library for creating reactive, web-based applications</li><li>Easy to build GUI</li><li>Declarative and Reactive</li><li>Rendered in web browser and can be deployed to servers</li><li>Inherently cross-platform and mobile ready</li><li>Both enterprise-ready and a first-class member of Plotly’s open-source tools</li></ul></li><li><p><a href="https://dash.plotly.com/dash-core-components">Dash core components</a>: <code>import dash_core_components as dcc</code></p><ul><li>Describe higher-level components that are interactive and are generated with JavaScript, HTML, and CSS through the React.js library</li></ul></li><li><p><a href="https://dash.plotly.com/dash-html-components">Dash HTML components</a>: <code>import dash_html_components as html</code></p><ul><li>Component for every HTML tag</li></ul></li><li><p>Callback function is a python function that is automatically called by Dash whenever an input component’s property changes</p></li><li><p>Callback function is decorated with <code>@app.callback</code> decorator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.callback(<span class="params">Output, Input</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback_fuction</span>:</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> some_result</span><br></pre></td></tr></table></figure></li><li><p>Callback decorator function takes two parameters: Input and Output</p><ul><li>Input and Output to the callback function will have component id and component property</li><li>Multiple inputs or outputs should be enclosed inside either a list or tuple. </li></ul></li><li><p><a href="https://dash.plotly.com/basic-callbacks">Callbacks with one input</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"><span class="keyword">import</span> dash</span><br><span class="line"><span class="keyword">import</span> dash_html_components <span class="keyword">as</span> html</span><br><span class="line"><span class="keyword">import</span> dash_core_components <span class="keyword">as</span> dcc</span><br><span class="line"><span class="keyword">from</span> dash.dependencies <span class="keyword">import</span> Input, Output</span><br><span class="line">airline_data=pd.read_csv(<span class="string">&#x27;airline.csv&#x27;</span>,encoding=<span class="string">&#x27;ISO-8859-1&#x27;</span>,dtype=&#123;<span class="string">&#x27;Airport&#x27;</span>:<span class="built_in">str</span>,<span class="string">&#x27;TailNum&#x27;</span>:<span class="built_in">str</span>&#125;) <span class="comment">#read the data</span></span><br><span class="line">app=dash.Dash()</span><br><span class="line"><span class="comment"># Design dash app layout</span></span><br><span class="line">app.layout=html.Div(children=[html.H1(<span class="string">&#x27;Airline Dashboard&#x27;</span>,style=&#123;<span class="string">&#x27;textAlign&#x27;</span>:<span class="string">&#x27;center&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:colors[<span class="string">&#x27;text&#x27;</span>],<span class="string">&#x27;font-size&#x27;</span>:<span class="number">40</span>&#125;),html.Div([<span class="string">&#x27;Input:&#x27;</span>,dcc.Input(<span class="built_in">id</span>=<span class="string">&#x27;input-yr&#x27;</span>,value=<span class="string">&#x27;2010&#x27;</span>,<span class="built_in">type</span>=<span class="string">&#x27;number&#x27;</span>,style=&#123;<span class="string">&#x27;height&#x27;</span>:<span class="string">&#x27;50px&#x27;</span>,<span class="string">&#x27;font-size&#x27;</span>:<span class="number">35</span>&#125;),],style=&#123;<span class="string">&#x27;font-size&#x27;</span>:<span class="number">40</span>&#125;),html.Br(),html.Br(),html.Div(dcc.Gragh(<span class="built_in">id</span>=<span class="string">&#x27;bar-plot&#x27;</span>)),])</span><br><span class="line"><span class="meta">@app.callback(<span class="params">Output(<span class="params">component_id=<span class="string">&#x27;bar-plot&#x27;</span>,component_property=<span class="string">&#x27;figure&#x27;</span></span>),Input(<span class="params">component_id=<span class="string">&#x27;input-yr&#x27;</span>,component_property=<span class="string">&#x27;value&#x27;</span></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_gragh</span>(<span class="params">entered_year</span>):</span><br><span class="line">    df=airline_data[airline_data[<span class="string">&#x27;Year&#x27;</span>]==<span class="built_in">int</span>(entered_year)] <span class="comment">#select data</span></span><br><span class="line">    g1=df.groupby([<span class="string">&#x27;Reporting_Airline&#x27;</span>])[<span class="string">&#x27;Flights&#x27;</span>].<span class="built_in">sum</span>().nlargest(<span class="number">10</span>).reset_index() <span class="comment">#top 10 airline carrier in terms of number of flights</span></span><br><span class="line">    fig1=px.bar(g1,x=<span class="string">&#x27;Reporting_Airline&#x27;</span>,y=<span class="string">&#x27;Flights&#x27;</span>,title=<span class="string">&#x27;Top 10 airline carrier in year &#x27;</span>+<span class="built_in">str</span>(entered_year)+<span class="string">&#x27; in terms of number of flights&#x27;</span>) <span class="comment">#plot the gragh</span></span><br><span class="line">    fig1.update_layout()</span><br><span class="line">    <span class="keyword">return</span> fig1</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run_server(port=<span class="number">8002</span>,host=<span class="string">&#x27;127.0.0.1&#x27;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a>Assignments</h3><ul><li>Visit my <a href="https://github.com/Bezhuang/LearnCS/tree/main/IBM%20Professional%20Certificates/Data%20Visualization%20With%20Python">Github Repository</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python Project for Data Science</title>
      <link href="/Python-Project-for-Data-Science/"/>
      <url>/Python-Project-for-Data-Science/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This Python Project mini-course provided by IBM is intended to demonstrate basic Python skills by performing specific tasks such as extracting data, web scraping, visualizing data, and creating a dashboard. The following are the notes I took during this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Coursera-Python-Project4DS.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Web-Scraping"><a href="#Web-Scraping" class="headerlink" title="Web Scraping"></a>Web Scraping</h3><ul><li><p>HTML Tags</p><ul><li>HTML Composition</li><li>HTML Paragraph Tags: <code>&lt;p&gt;&lt;/p&gt;</code></li><li>HTML Anchor Tag &amp; Hyperlink Tag: <code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code></li><li>Attributes: <code>href=&quot;&quot;</code></li><li>Inspect HTML: <code>F12</code></li><li>Document Tree: <code>&lt;head&gt;&lt;/head&gt;</code>, <code>&lt;body&gt;&lt;/body&gt;</code></li><li>HTML Tables: <code>&lt;table&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></li></ul></li><li><p>BeautifulSoup</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html=<span class="string">&quot;&quot;</span></span><br><span class="line">soup=BeautifulSoup(html, <span class="string">&#x27;html5lib&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>BeautifulSoup: Object</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tag_object=soup.title</span><br><span class="line">tag_object=soup.h3</span><br><span class="line">tag_child=tag_object.b <span class="comment">#HTML Tree</span></span><br><span class="line">parent_tag=tag_child.parent <span class="comment">#Parent attribute</span></span><br><span class="line">sibling_1=tag_object.next_sibling <span class="comment">#Next-sibling attribute</span></span><br><span class="line">tag_child.attrs <span class="comment">#Show attributes</span></span><br><span class="line">tag_child.string <span class="comment">#Navigable string</span></span><br></pre></td></tr></table></figure></li><li><p>BeautifulSoup: <code>find_all</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">table=BeautifulSoup(html, <span class="string">&#x27;html5lib&#x27;</span>)</span><br><span class="line">table_row=table.find_all(name=<span class="string">&#x27;tr&#x27;</span>) <span class="comment">#Python iterable</span></span><br><span class="line">first_row=table_row[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">from</span> i,row <span class="keyword">in</span> <span class="built_in">enumerate</span>(table_rows): <span class="comment">#Elements</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;row&quot;</span>,i)</span><br><span class="line">    cells+row.find_all(<span class="string">&quot;td&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> j,cell <span class="keyword">in</span> <span class="built_in">enumerate</span>(cells):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;column&quot;</span>,j,<span class="string">&quot;cell&quot;</span>,cell)</span><br></pre></td></tr></table></figure></li><li><p>Requests &amp; BeautifulSoup in real web page</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">page=requests.get(<span class="string">&quot;http://...&quot;</span>).text</span><br><span class="line">soup=BeautifulSoup(page, <span class="string">&quot;html.parser&quot;</span>) <span class="comment">#Create a BeautifulSoup object</span></span><br><span class="line">artists=soup.find_all(<span class="string">&#x27;a&#x27;</span>) <span class="comment">#Pull all instances of &lt;a&gt; tag</span></span><br><span class="line"><span class="keyword">for</span> artist <span class="keyword">in</span> artists:  <span class="comment">#Clears data of all tags</span></span><br><span class="line">    names=artist.contents[<span class="number">0</span>]</span><br><span class="line">    fullLink=artist.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(names)</span><br><span class="line">    <span class="built_in">print</span>(fullLink)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Project-Analyzing-Stock-Performance-and-Building-a-Dashboard"><a href="#Project-Analyzing-Stock-Performance-and-Building-a-Dashboard" class="headerlink" title="Project: Analyzing Stock Performance and Building a Dashboard"></a>Project: Analyzing Stock Performance and Building a Dashboard</h3><ul><li>A stock (also known as equity) is a security that represents the ownership of a fraction of a <a href="https://www.investopedia.com/terms/c/corporation.asp">corporation</a>.</li><li>The stock ticker is a report of the price of a certain stock, updated continuously throughout the trading session by the various stock market exchanges.</li><li>Extracting Stock Data Using a Python Library: <code>yfinance</code></li><li><p>Extracting Stock Data Using Web Scraping</p></li><li><p><a href="https://dataplatform.cloud.ibm.com/analytics/notebooks/v2/ad8810db-e61c-4227-997d-f26c1ec0ad49/view?access_token=6a4d4d444262c5dc0cc25bee7ed55437e3bde917b8c6218d9f24f68053e99955">Project Notebook</a></p></li></ul><h3 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a>Assignments</h3><ul><li>Visit my <a href="https://github.com/Bezhuang/LearnCS/tree/main/IBM%20Professional%20Certificates/Python%20Project%20for%20Data%20Science">Github Repository</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>皮卡丘彩虹屁语音包</title>
      <link href="/Pikachu-rainbow-fart/"/>
      <url>/Pikachu-rainbow-fart/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/saekiraku/vscode-rainbow-fart/">VSCode Rainbow Fart</a> 是一个在你编程时持续夸你写的牛逼的扩展，可以根据代码关键字播放贴近代码意义的真人语音。<a href="https://github.com/Bezhuang/Pikachu-rainbow-fart">皮卡丘彩虹屁语音包（Pikachu-rainbow-fart）</a> 是基于此插件编写的定制化的皮卡丘语音包，项目基于 MIT 协议开源于 Github。</p></blockquote><span id="more"></span><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Bezhuang/Pikachu-rainbow-fart/pikachu.jpg" style="width:400px;"></div></div><span class="p center code large">Pikachu Rainbow Fart</span><h3 id="一、小智的快乐"><a href="#一、小智的快乐" class="headerlink" title="一、小智的快乐"></a>一、小智的快乐</h3><p>皮卡丘（ピカチュウ）是宝可梦动画人物小智的第一个宝可梦。它小小的嘴巴，黑色的眼睛和萌萌的叫声也使它深受许多神奇宝贝迷的喜爱。借助 <a href="https://github.com/SaekiRaku/vscode-rainbow-fart">VSCode Rainbow Fart</a> 插件，我们可以在编程时持续享受到来自皮卡丘可爱的呼唤声</p><h3 id="二、皮卡丘的语言"><a href="#二、皮卡丘的语言" class="headerlink" title="二、皮卡丘的语言"></a>二、皮卡丘的语言</h3><p>本语音包中包含90余种皮卡丘的声音（在输入关键字时随机播放），以下一些例子仅供参考：</p><ul><li>皮卡！</li><li>皮卡—丘</li><li>皮皮—卡丘</li><li>皮卡皮卡</li><li>皮—卡丘</li><li>皮—皮卡丘</li><li>皮卡卡皮卡</li><li>皮卡—皮卡丘</li><li>皮—卡皮卡</li></ul><h3 id="三、使用介绍"><a href="#三、使用介绍" class="headerlink" title="三、使用介绍"></a>三、使用介绍</h3><ol><li>下载 <a href="https://github.com/Bezhuang/Pikachu-rainbow-fart/releases/download/1.0.0/Pikachu-rainbow-fart.zip">Pikachu-rainbow-fart.zip</a> （或在 Releases 界面下载同名<code>zip</code>包）</li><li>从 <a href="https://marketplace.visualstudio.com/items?itemName=saekiraku.rainbow-fart">VSCode 扩展商店</a> 下载并安装 <strong>Rainbow Fart 插件</strong></li><li>在 VSCode 的命令面板打开 <strong>Enable Rainbow Fart</strong> 并点击弹出通知上的 <strong>Open</strong> 按钮</li><li>在打开的浏览器页面设置栏点击 <strong>导入</strong> 选择下载好的 zip 包</li><li>点击 <strong>授权</strong> ，回到 VSCode 愉快的打代码吧  ヽ(￣▽￣)ﾉ</li></ol><h3 id="四、界面预览"><a href="#四、界面预览" class="headerlink" title="四、界面预览"></a>四、界面预览</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://raw.githubusercontent.com/Bezhuang/Pikachu-rainbow-fart/main/preview1.png" "></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://raw.githubusercontent.com/Bezhuang/Pikachu-rainbow-fart/main/preview2.png" "></div></div><h3 id="五、IntelliJ-IDEA支持"><a href="#五、IntelliJ-IDEA支持" class="headerlink" title="五、IntelliJ IDEA支持"></a>五、IntelliJ IDEA支持</h3><ol><li><p>从 <a href="https://plugins.jetbrains.com/plugin/14543-rainbow-fart">Jetbrains扩展商店</a> 下载并安装 <strong>Rainbow Fart 插件</strong></p></li><li><p>设置 -&gt; 其他 -&gt; Rainbow Fart -&gt; Custom voice package path</p></li><li><p><strong>导入</strong> 下载好的 <a href="https://github.com/Bezhuang/Pikachu-rainbow-fart/releases/download/1.0.0/Pikachu-rainbow-fart.zip">zip 包</a></p></li></ol><h3 id="六、补充申明"><a href="#六、补充申明" class="headerlink" title="六、补充申明"></a>六、补充申明</h3><p>本语音包是基于 <a href="https://github.com/SaekiRaku">佐伯楽（SaekiRaku）</a> 开发的 <a href="https://github.com/SaekiRaku/vscode-rainbow-fart">VSCode Rainbow Fart</a> 插件的语音拓展包</p><p>IDEA 版本插件来自 <a href="https://github.com/izhangzhihao">张志豪</a> 开发的 <a href="https://github.com/izhangzhihao/intellij-rainbow-fart">intellij-rainbow-fart</a>，由于 IDEA 版本插件不支持 wav 格式文件，故所有音频文件已转为 mp3 格式。</p><p>支持 C / C++ / JavaScript / Python / Java 语言的大多数关键词和分隔符</p><p>语音素材来源于<a href="https://www.bilibili.com/video/av8731532/">游戏动画阿星</a> ，所有文件基于 MIT 开源</p><p>有其他的问题，欢迎及时来向我反馈。。。</p>]]></content>
      
      
      <categories>
          
          <category> 其他开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Databases and SQL for Data Science with Python</title>
      <link href="/Databases-and-SQL-for-Data-Science/"/>
      <url>/Databases-and-SQL-for-Data-Science/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Much of the world’s data resides in databases, A working knowledge of databases and SQL is a must to become a data scientist. The emphasis in this course provided by IBM is on hands-on and practical learning. So, I’ll try to record how I work with real databases, real data science tools, real-world datasets and eventually, how I create a database instance in the cloud on the following notes I took during this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Databases&amp;SQL4Data-Science.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Introduction-to-Databases"><a href="#Introduction-to-Databases" class="headerlink" title="Introduction to Databases"></a>Introduction to Databases</h3><ul><li>Structured Query Language (or SQL) is a powerful language which is used for communicating with and extracting data from databases.</li><li>SQL is among the top 3 skills for a Data Scientist or Data Analysts</li><li>A database is a repository of data, it provides the functionality for adding, modifying and querying data</li><li>RDBMS = Relational database management system</li><li>5 Basic SQL commands: Create, Insert, Select, Update, Delete</li><li>Cloud databases: Ease of use and access, Scalability &amp; Economics, Disaster recovery<ul><li>IBM Db2, PostgreSQL, Oracle Cloud, Microsoft Azure, Amazon RDS</li></ul></li><li><p>DBaaS (Database-as-a-Service) provides users with access to database resources in Cloud without the need for setting up hardware and installing software.</p></li><li><p>Relational Model allows for data independence (key advantage)</p></li><li>Entities are independent objects which have Attributes<ul><li>Entity-Relationship Model (ER-Model): used as a tool to design RDBMS</li><li>Mapping Entity Diagrams to Tables: Entities become tables, Attributes get translated into columns</li></ul></li><li>Primary Keys and Foreign Keys: A primary key uniquely identifies a specific row in a table and prevents duplication of data.</li></ul><h3 id="Basic-SQL"><a href="#Basic-SQL" class="headerlink" title="Basic SQL"></a>Basic SQL</h3><ul><li><p>Data Definition Language statements (DDL) and Data Manipulation Language statements (DML)</p></li><li><p>Data Definition Language (DDL) statements are used to define, change, or drop database objects. </p><ul><li>Common DDL statement types include: <code>CREATE</code>, <code>ALTER</code>, <code>TRUNCATE</code> and <code>DROP</code></li></ul></li><li><p>Data Manipulation Language (DML) statements are used to read and modify data in tables.</p><ul><li>CRUD operations: Create, Read, Update and Delete</li><li>Common DML statement types include: <code>INSERT</code>, <code>SELECT</code>, <code>UPDATE</code> and <code>DELETE</code></li></ul></li><li><p><code>CREATE</code> and <code>DROP</code> tables in the database</p><ul><li>It is quite common to issue a <code>DROP</code> before doing a <code>CREATE</code> in test and development scenarios, but if the table does not already exist and you try to drop it, you will see an error like <code>XXX.YYY</code> is an undefined name.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">drop table COUNTRY;  ## If table already exists</span><br><span class="line">create table COUNTRY(</span><br><span class="line">ID int PRIMARY KEY NOT NULL,</span><br><span class="line">CCODE char(2) NOT NULL,</span><br><span class="line">NAME varchar(60)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>Use <code>SELECT</code> queries to retrieve data from the database</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select COLUMN1, COLUMN2, ... from TABLE1 ;</span><br><span class="line">##  or</span><br><span class="line">select * from COUNTRY ;</span><br><span class="line">## or</span><br><span class="line">select * from COUNTRY where ID &lt; 5 ;</span><br><span class="line">## or</span><br><span class="line">select * from COUNTRY where CCODE = &#x27;CA&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>Use <code>COUNT</code>, <code>DISTINCT</code>, <code>LIMIT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code> to compose and run basic queries</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-- 0. Drop table INSTRUCTOR in case it already exists</span><br><span class="line">drop table INSTRUCTOR;</span><br><span class="line">-- 1. Create table INSTRUCTOR</span><br><span class="line">CREATE TABLE INSTRUCTOR</span><br><span class="line">  (ins_id INTEGER PRIMARY KEY NOT NULL, </span><br><span class="line">   lastname VARCHAR(15) NOT NULL, </span><br><span class="line">   firstname VARCHAR(15) NOT NULL, </span><br><span class="line">   city VARCHAR(15), </span><br><span class="line">   country CHAR(2)</span><br><span class="line">  );</span><br><span class="line">-- 2A. Insert single row for Rav Ahuja</span><br><span class="line">INSERT INTO INSTRUCTOR</span><br><span class="line">  (ins_id, lastname, firstname, city, country)</span><br><span class="line">  VALUES </span><br><span class="line">  (1, &#x27;Ahuja&#x27;, &#x27;Rav&#x27;, &#x27;Toronto&#x27;, &#x27;CA&#x27;);</span><br><span class="line">-- 2B. Insert the two rows for Raul and Hima</span><br><span class="line">INSERT INTO INSTRUCTOR</span><br><span class="line">  VALUES</span><br><span class="line">  (2, &#x27;Chong&#x27;, &#x27;Raul&#x27;, &#x27;Toronto&#x27;, &#x27;CA&#x27;),</span><br><span class="line">  (3, &#x27;Vasudevan&#x27;, &#x27;Hima&#x27;, &#x27;Chicago&#x27;, &#x27;US&#x27;);</span><br><span class="line">-- 3. Select all rows in the table</span><br><span class="line">SELECT * FROM INSTRUCTOR;</span><br><span class="line">-- 3b. Select firstname, lastname and country where city is Toronto</span><br><span class="line">SELECT firstname, lastname, country from INSTRUCTOR where city=&#x27;Toronto&#x27;;</span><br><span class="line">-- 4. Change the city for Rav to Markham</span><br><span class="line">UPDATE INSTRUCTOR SET city=&#x27;Markham&#x27; where ins_id=1;</span><br><span class="line">-- 5. Delete the row for Raul Chong</span><br><span class="line">DELETE FROM INSTRUCTOR where ins_id=2;</span><br><span class="line">-- 5b. Retrieve all rows from the table</span><br><span class="line">SELECT * FROM INSTRUCTOR ;</span><br></pre></td></tr></table></figure></li></ul><h3 id="String-Patterns-Ranges-Sorting-and-Grouping"><a href="#String-Patterns-Ranges-Sorting-and-Grouping" class="headerlink" title="String Patterns, Ranges, Sorting and Grouping"></a>String Patterns, Ranges, Sorting and Grouping</h3><ul><li><p>Using String Patterns and Ranges</p><ul><li>The <code>WHERE</code> clause always requires a predicate, which is a condition that evaluates to true, false or unknown.</li><li>Use the <code>LIKE</code> predicate with string patterns for the search：<code>WHERE &lt;columnname&gt; LIKE &lt;string pattern&gt;</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select F_NAME , L_NAME</span><br><span class="line">from EMPLOYEES</span><br><span class="line">where ADDRESS LIKE &#x27;%Elgin,IL%&#x27; ;</span><br></pre></td></tr></table></figure></li><li><p>Sorting Result Sets</p><ul><li><p><code>ORDER BY</code>: Descending order，Specifying Column Sequence Number</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select F_NAME, L_NAME, DEP_ID </span><br><span class="line">from EMPLOYEES</span><br><span class="line">order by DEP_ID desc, L_NAME desc;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Grouping Result Sets</p><ul><li><code>SELECT DISTINCT()</code> : Eliminating Duplicates</li><li><code>GROUP BY</code></li><li><code>HAVING</code>: Restricting the result set</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select DEP_ID, COUNT(*) AS &quot;NUM_EMPLOYEES&quot;, AVG(SALARY) AS &quot;AVG_SALARY&quot;</span><br><span class="line">from EMPLOYEES</span><br><span class="line">group by DEP_ID</span><br><span class="line">having count(*) &lt; 4</span><br><span class="line">order by AVG_SALARY;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Functions-Sub-Queries-Multiple-Tables"><a href="#Functions-Sub-Queries-Multiple-Tables" class="headerlink" title="Functions, Sub-Queries, Multiple Tables"></a>Functions, Sub-Queries, Multiple Tables</h3><ul><li><p>Built-in Database Functions: Using database functions can significantly reduce the amount of data that needs to be retrieved from the database.</p></li><li><p>Aggregate or Column Functions</p><ul><li>INPUT: Collection of values (e.g. entire column), OUTPUT: Single value</li><li><code>SUM()</code>, <code>MIN()</code>, <code>MAX()</code>, <code>AVG()</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select AVG( COST / QUANTITY ) from PETRESCUE where ANIMAL = &#x27;Dog&#x27;;</span><br></pre></td></tr></table></figure></li><li><p><code>SCALAR</code> and <code>STRING</code> functions</p><ul><li>Perform operations on every input value</li><li><code>ROUND()</code>, <code>LENGTH()</code>, <code>UCASE</code>, <code>LCASE</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select DISTINCT(UCASE(ANIMAL)) from PETRESCUE;</span><br><span class="line">select * from PETRESCUE where LCASE(ANIMAL) = &#x27;cat&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>Date and Time Built-in Functions</p><ul><li><code>YEAR()</code>, <code>MONTH()</code>, <code>DAY()</code>, <code>DAYOFWEEK()</code>, <code>DAYOFYEAR()</code>, <code>WEEK()</code>, <code>HOUR()</code>, <code>MINUTE()</code>, <code>SECOND()</code></li><li>Date or Time Arithmetic</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select SUM(QUANTITY) from PETRESCUE where DAY(RESCUEDATE)=&#x27;14&#x27;;</span><br><span class="line">select (RESCUEDATE + 3 DAYS) from PETRESCUE;</span><br><span class="line">select (CURRENT DATE - RESCUEDATE) from PETRESCUE;</span><br></pre></td></tr></table></figure></li><li><p>Sub-Queries and Nested Selects</p><ul><li>Sub-Queries cannot evaluate Aggregate functions like <code>AVG()</code> in the <code>WHERE</code> clause,therefore,use a sub-Select expression</li><li>Sub-queries in <code>FROM</code> clause substitute the <code>TABLE</code> name with a sub-query called Derived Tables or Table Expressions.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from employees where salary &gt; AVG(salary)</span><br><span class="line">select EMP_ID, F_NAME, L_NAME, SALARY from employees where SALARY &gt; (select AVG(SALARY) from employees);</span><br><span class="line">select EMP_ID, SALARY, ( select AVG(SALARY) from employees ) AS AVG_SALARY from employees ;</span><br></pre></td></tr></table></figure></li><li><p>Working with Multiple Tables</p><ul><li>Sub-queries</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from employees where DEP_ID IN ( select DEPT_ID_DEP from departments where LOC_ID = &#x27;L0002&#x27; );</span><br><span class="line">select DEPT_ID_DEP, DEP_NAME from departments where DEPT_ID_DEP IN ( select DEP_ID from employees where SALARY &gt; 70000 ) ;</span><br></pre></td></tr></table></figure><ul><li>Implicit <code>JOIN</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from employees E, departments D where E.DEP_ID = D.DEPT_ID_DEP;</span><br><span class="line">select E.EMP_ID, D.DEP_NAME from employees E, departments D where E.DEP_ID = D.DEPT_ID_DEP</span><br></pre></td></tr></table></figure><ul><li><code>JOIN</code> operators（<code>INNER JOIN</code>, <code>OUTER JOIN</code>…）</li></ul></li></ul><h3 id="Accessing-databases-using-Python"><a href="#Accessing-databases-using-Python" class="headerlink" title="Accessing databases using Python"></a>Accessing databases using Python</h3><ul><li><p>Python ecosystem: NumPy, pandas, matplotlib, SciPy</p></li><li><p>DB-API (Python Database API): Python’s standard API for accessing relational databases.</p><ul><li>Connection Objects: Database connections, Manage transactions</li><li>Cursor Objects: Database queries, Scroll through result set, Retrieve results</li><li>Connection methods: <code>.cursor()</code>, <code>.commit()</code>, <code>.rollback()</code>, <code>.close()</code></li><li>Cursor methods: <code>.callproc()</code>, <code>.execute()</code>, <code>.executemany()</code>, <code>.fetchone()</code>, <code>.fetchmany()</code>, <code>.fetchall()</code>, <code>.nextset()</code>, <code>.arraysize()</code>, <code>.close()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dbmodule <span class="keyword">import</span> connect</span><br><span class="line"><span class="comment">#Create connection object</span></span><br><span class="line">Connection = connect(<span class="string">&#x27;databasename&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;pswd&#x27;</span>)</span><br><span class="line"><span class="comment">#Create a cursor object</span></span><br><span class="line">Cursor=connection.cursor()</span><br><span class="line"><span class="comment">#Run Queries</span></span><br><span class="line">Cursor.execute(<span class="string">&#x27;select * from mytable&#x27;</span>)</span><br><span class="line">Results = cursor.fetchall()</span><br><span class="line"><span class="comment">#Free resources</span></span><br><span class="line">Cursor.close()</span><br><span class="line">Connection.close()</span><br></pre></td></tr></table></figure></li><li><p>Connect to Db2 database (ibm_db API)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ibm_db</span><br><span class="line"><span class="comment">#Replace the placeholder values with your actual Db2 hostname, username, and password:</span></span><br><span class="line">dsn_hostname = <span class="string">&quot;YourDb2Hostname&quot;</span>   <span class="comment"># e.g.: &quot;dashdb-txn-sbox-yp-dal09-04.services.dal.bluemix.net&quot;</span></span><br><span class="line">dsn_uid = <span class="string">&quot;YourDb2Username&quot;</span>        <span class="comment"># e.g. &quot;abc12345&quot;</span></span><br><span class="line">dsn_pwd = <span class="string">&quot;YoueDb2Password&quot;</span>      <span class="comment"># e.g. &quot;7dBZ3wWt9XN6$o0J&quot;</span></span><br><span class="line">dsn_driver = <span class="string">&quot;&#123;IBM DB2 ODBC DRIVER&#125;&quot;</span></span><br><span class="line">dsn_database = <span class="string">&quot;BLUDB&quot;</span>            <span class="comment"># e.g. &quot;BLUDB&quot;</span></span><br><span class="line">dsn_port = <span class="string">&quot;50000&quot;</span>                <span class="comment"># e.g. &quot;50000&quot; </span></span><br><span class="line">dsn_protocol = <span class="string">&quot;TCPIP&quot;</span>            <span class="comment"># i.e. &quot;TCPIP&quot;</span></span><br><span class="line"><span class="comment">#Create the dsn connection string</span></span><br><span class="line">dsn = (</span><br><span class="line">    <span class="string">&quot;DRIVER=&#123;0&#125;;&quot;</span></span><br><span class="line">    <span class="string">&quot;DATABASE=&#123;1&#125;;&quot;</span></span><br><span class="line">    <span class="string">&quot;HOSTNAME=&#123;2&#125;;&quot;</span></span><br><span class="line">    <span class="string">&quot;PORT=&#123;3&#125;;&quot;</span></span><br><span class="line">    <span class="string">&quot;PROTOCOL=&#123;4&#125;;&quot;</span></span><br><span class="line">    <span class="string">&quot;UID=&#123;5&#125;;&quot;</span></span><br><span class="line">    <span class="string">&quot;PWD=&#123;6&#125;;&quot;</span>).<span class="built_in">format</span>(dsn_driver, dsn_database, dsn_hostname, dsn_port, dsn_protocol, dsn_uid, dsn_pwd)</span><br><span class="line"><span class="comment">#Create database connection</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = ibm_db.connect(dsn, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Connected to database: &quot;</span>, dsn_database, <span class="string">&quot;as user: &quot;</span>, dsn_uid, <span class="string">&quot;on host: &quot;</span>, dsn_hostname)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Unable to connect: &quot;</span>, ibm_db.conn_errormsg() )</span><br></pre></td></tr></table></figure></li><li><p>Close the connection</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ibm_db.close(conn)</span><br></pre></td></tr></table></figure></li><li><p>Creating tables, loading data and querying data</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Lets first drop the table INSTRUCTOR in case it exists from a previous attempt</span></span><br><span class="line">dropQuery = <span class="string">&quot;drop table INSTRUCTOR&quot;</span></span><br><span class="line"><span class="comment">#Now execute the drop statment</span></span><br><span class="line">dropStmt = ibm_db.exec_immediate(conn, dropQuery)</span><br><span class="line"><span class="comment">#Construct the Create Table DDL statement - replace the ... with rest of the statement</span></span><br><span class="line">createQuery = <span class="string">&quot;create table INSTRUCTOR(id INTEGER PRIMARY KEY NOT NULL, fname ...)&quot;</span></span><br><span class="line"><span class="comment">#Now fill in the name of the method and execute the statement</span></span><br><span class="line">createStmt = ibm_db.replace_with_name_of_execution_method(conn, createQuery)</span><br><span class="line"><span class="comment">#Construct the query - replace ... with the insert statement</span></span><br><span class="line">insertQuery = <span class="string">&quot;...&quot;</span></span><br><span class="line"><span class="comment">#execute the insert statement</span></span><br><span class="line">insertStmt = ibm_db.exec_immediate(conn, insertQuery)</span><br><span class="line"><span class="comment">#replace ... with the insert statement that inerts the remaining two rows of data</span></span><br><span class="line">insertQuery2 = <span class="string">&quot;...&quot;</span></span><br><span class="line"><span class="comment">#execute the statement</span></span><br><span class="line">insertStmt2 = ibm_db.exec_immediate(conn, insertQuery2)</span><br><span class="line"><span class="comment">#Construct the query that retrieves all rows from the INSTRUCTOR table</span></span><br><span class="line">selectQuery = <span class="string">&quot;select * from INSTRUCTOR&quot;</span></span><br><span class="line"><span class="comment">#Execute the statement</span></span><br><span class="line">selectStmt = ibm_db.exec_immediate(conn, selectQuery)</span><br><span class="line"><span class="comment">#Fetch the Dictionary (for the first row only) - replace ... with your code</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">#Fetch the rest of the rows and print the ID and FNAME for those rows</span></span><br><span class="line"><span class="keyword">while</span> ibm_db.fetch_row(selectStmt) != <span class="literal">False</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot; ID:&quot;</span>,  ibm_db.result(selectStmt, <span class="number">0</span>), <span class="string">&quot; FNAME:&quot;</span>,  ibm_db.result(selectStmt, <span class="string">&quot;FNAME&quot;</span>))</span><br><span class="line">updateQuery = <span class="string">&quot;update INSTRUCTOR set CITY=&#x27;MOOSETOWN&#x27; where FNAME=&#x27;Rav&#x27;&quot;</span></span><br><span class="line">updateStmt = ibm_db.exec_immediate(conn, updateQuery))</span><br></pre></td></tr></table></figure></li><li><p>Retrieve data into Pandas</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">import</span> ibm_db_dbi</span><br><span class="line"><span class="comment">#connection for pandas</span></span><br><span class="line">pconn = ibm_db_dbi.Connection(conn)</span><br><span class="line"><span class="comment">#query statement to retrieve all rows in INSTRUCTOR table</span></span><br><span class="line">selectQuery = <span class="string">&quot;select * from INSTRUCTOR&quot;</span></span><br><span class="line"><span class="comment">#retrieve the query results into a pandas dataframe</span></span><br><span class="line">pdf = pandas.read_sql(selectQuery, pconn)</span><br><span class="line"><span class="comment">#print just the LNAME for first row in the pandas data frame</span></span><br><span class="line">pdf.LNAME[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#print the entire data frame</span></span><br><span class="line">pdf</span><br><span class="line">pdf.shape</span><br></pre></td></tr></table></figure></li><li><p>SQL Magic</p><ul><li>Cell magics: start with a double <code>%%</code> sign and apply to the entire cell</li><li>Line magics: start with a single <code>%</code>  sign and apply to a particular line in a cell</li><li><code>%magicname arguments</code></li><li><code>%sql select * from tablename</code></li></ul></li></ul><h3 id="Analyzing-data-with-Python"><a href="#Analyzing-data-with-Python" class="headerlink" title="Analyzing data with Python"></a>Analyzing data with Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Connect to the database</span></span><br><span class="line">%load_ext sql</span><br><span class="line">%sql ibm_db_sa://</span><br><span class="line"><span class="comment">#Store the dataset in a Table</span></span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line">chicago_socioeconomic_data = pandas.read_csv(<span class="string">&#x27;https://data.cityofchicago.org/resource/jcxq-k9xf.csv&#x27;</span>)</span><br><span class="line">%sql PERSIST chicago_socioeconomic_data</span><br><span class="line">%sql SELECT * FROM chicago_socioeconomic_data limit <span class="number">5</span>;</span><br><span class="line"><span class="comment">#How many rows are in the dataset</span></span><br><span class="line">%sql SELECT COUNT(*) FROM chicago_socioeconomic_data;</span><br><span class="line"><span class="comment">#How many community areas in Chicago have a hardship index greater than 50.0</span></span><br><span class="line">%sql SELECT COUNT(*) FROM chicago_socioeconomic_data WHERE hardship_index &gt; <span class="number">50.0</span>;</span><br><span class="line"><span class="comment">#What is the maximum value of hardship index in this dataset</span></span><br><span class="line">%sql SELECT MAX(hardship_index) FROM chicago_socioeconomic_data;</span><br><span class="line"><span class="comment">#Which community area which has the highest hardship index</span></span><br><span class="line">%sql select community_area_name <span class="keyword">from</span> chicago_socioeconomic_data where hardship_index = ( select <span class="built_in">max</span>(hardship_index) <span class="keyword">from</span> chicago_socioeconomic_data )</span><br><span class="line"><span class="comment">#Create a scatter plot using the variables per_capita_income_ and hardship_index</span></span><br><span class="line">!pip install seaborn</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">income_vs_hardship = %sql SELECT per_capita_income_, hardship_index FROM chicago_socioeconomic_data;</span><br><span class="line">plot = sns.jointplot(x=<span class="string">&#x27;per_capita_income_&#x27;</span>,y=<span class="string">&#x27;hardship_index&#x27;</span>, data=income_vs_hardship.DataFrame())</span><br></pre></td></tr></table></figure><h3 id="Using-JOIN-operations-to-work-with-multiple-tables"><a href="#Using-JOIN-operations-to-work-with-multiple-tables" class="headerlink" title="Using JOIN operations to work with multiple tables"></a>Using JOIN operations to work with multiple tables</h3><ul><li><p>Inner Join</p></li><li><p>Outer Join</p><ul><li>Left Outer Join</li><li>Right Outer Join</li><li>Full Outer Join</li></ul></li><li><p>HR Database example</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- Select the names, job start dates, and job titles of all employees who work for the department number 5 ---</span></span><br><span class="line"><span class="keyword">select</span> E.F_NAME,E.L_NAME, JH.START_DATE, J.JOB_TITLE </span><br><span class="line"><span class="keyword">from</span> EMPLOYEES <span class="keyword">as</span> E </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> JOB_HISTORY <span class="keyword">as</span> JH <span class="keyword">on</span> E.EMP_ID<span class="operator">=</span>JH.EMPL_ID </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> JOBS <span class="keyword">as</span> J <span class="keyword">on</span> E.JOB_ID<span class="operator">=</span>J.JOB_IDENT</span><br><span class="line"><span class="keyword">where</span> E.DEP_ID <span class="operator">=</span><span class="string">&#x27;5&#x27;</span></span><br><span class="line">;</span><br><span class="line"><span class="comment">--- Perform a Left Outer Join on the EMPLOYEES and DEPARTMENT tables and select employee id, last name, department id and department name for all employees ---</span></span><br><span class="line"><span class="keyword">select</span> E.EMP_ID,E.L_NAME,E.DEP_ID,D.DEP_NAME</span><br><span class="line"><span class="keyword">from</span> EMPLOYEES <span class="keyword">AS</span> E </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> DEPARTMENTS <span class="keyword">AS</span> D <span class="keyword">ON</span> E.DEP_ID<span class="operator">=</span>D.DEPT_ID_DEP</span><br><span class="line">;</span><br><span class="line"><span class="comment">--- Re-write the query to have the result set include all the employees but department names for only the employees who were born before 1980. ---</span></span><br><span class="line"><span class="keyword">select</span> E.EMP_ID,E.L_NAME,E.DEP_ID,D.DEP_NAME</span><br><span class="line"><span class="keyword">from</span> EMPLOYEES <span class="keyword">AS</span> E </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> DEPARTMENTS <span class="keyword">AS</span> D <span class="keyword">ON</span> E.DEP_ID<span class="operator">=</span>D.DEPT_ID_DEP </span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">YEAR</span>(E.B_DATE) <span class="operator">&lt;</span> <span class="number">1980</span></span><br><span class="line">;</span><br><span class="line"><span class="comment">--- Perform a Full Join on the EMPLOYEES and DEPARTMENT tables and select the First name, Last name and Department name of all employees. ---</span></span><br><span class="line"><span class="keyword">select</span> E.F_NAME,E.L_NAME,D.DEP_NAME</span><br><span class="line"><span class="keyword">from</span> EMPLOYEES <span class="keyword">AS</span> E </span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> DEPARTMENTS <span class="keyword">AS</span> D <span class="keyword">ON</span> E.DEP_ID<span class="operator">=</span>D.DEPT_ID_DEP</span><br><span class="line">;</span><br><span class="line"><span class="comment">--- Re-write Query to have the result set include all employee names but department id and department names only for male employees. ---</span></span><br><span class="line"><span class="keyword">select</span> E.F_NAME,E.L_NAME,D.DEPT_ID_DEP, D.DEP_NAME</span><br><span class="line"><span class="keyword">from</span> EMPLOYEES <span class="keyword">AS</span> E </span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> DEPARTMENTS <span class="keyword">AS</span> D <span class="keyword">ON</span> E.DEP_ID<span class="operator">=</span>D.DEPT_ID_DEP <span class="keyword">AND</span> E.SEX <span class="operator">=</span> <span class="string">&#x27;M&#x27;</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Working-with-Real-World-Datasets"><a href="#Working-with-Real-World-Datasets" class="headerlink" title="Working with Real World Datasets"></a>Working with Real World Datasets</h3><ul><li>Understand 3 Chicago datasets</li><li>Load the 3 datasets into 3 tables in a Db2 database</li><li>Execute SQL queries to answer assignment questions</li></ul><h3 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a>Assignments</h3><ul><li>Visit my <a href="https://github.com/Bezhuang/LearnCS/tree/main/IBM%20Professional%20Certificates/Databases%20and%20SQL%20for%20Data%20Science%20with%20Python">Github Repository</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 阿里云 Java 训练营第一期</title>
      <link href="/Java%E5%88%9D%E7%BA%A7%E8%AE%AD%E7%BB%83%E8%90%A5/"/>
      <url>/Java%E5%88%9D%E7%BA%A7%E8%AE%AD%E7%BB%83%E8%90%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在阿里云开发者社区中看到有<a href="https://developer.aliyun.com/learning/trainingcamp/java/1?spm=a2c6h.21110250.J_3925608520.1.73b63c67PXfMgE">Java新手训练营</a>（5天突破Java面向对象编程）的课程，采用直播授课的形式，希望能在侠客大佬的指导下有更好的学习效果吧。当然，直播时间有限，所以这篇日志并不是对Java知识点完全系统的梳理，主要记录一些开发中常用的语法和概念和在面试时会遇到的问题，以<a href="https://github.com/Bezhuang/LearnCS/tree/main/Java%E8%AE%AD%E7%BB%83%E8%90%A5">训练</a>和熟悉特性为主。</p></blockquote><span id="more"></span><p><img src="https://blog.zhuangzhihao.top/img/Java第一期训练营.png" alt></p><h3 id="Java知识点"><a href="#Java知识点" class="headerlink" title="Java知识点"></a>Java知识点</h3><ol><li>Java语言的发展历史</li><li>Java语言的优势和特点</li><li>OOP面向对象编程概念：对象、<code>Class</code>类、继承、封装、多态</li><li>基础语法：数据类型、8大基本类型、数据结构</li><li>关键字：<code>int</code> 、<code>class</code></li><li>变量：存储数据</li><li>数据类型: <code>String</code>、<code>int</code>、<code>bool</code>、链表<code>List</code>、数组、哈希表、字典</li><li>控制语句: <code>if else</code>、<code>while</code>、<code>for</code></li><li>文件操作：调用封装好的类库 <code>File</code></li><li>网络编程：Socket TCP IP、SMTP邮件传输协议等</li><li>数据库连接：ADO.NET , JDBC等连接库NoSQL</li><li>网站框架：<code>``PHP</code>、ASP、JSP、ASP.NET、Spring MVC、Node</li></ol><h4 id="Java语言特性"><a href="#Java语言特性" class="headerlink" title="Java语言特性"></a>Java语言特性</h4><ul><li>IDE：Eclipse 或者IntelliJ IDEA、MyEclipse</li><li><p>JDK（Java Development Kit）：Java开发工具包，包含JAVA的运行环境和开发工具</p><ul><li>Java虚拟机（JVM+Java系统类库）、Java编译器、Java调试工具、Java分析工具</li><li>安装和配置：JDK环境变量和 classpath</li></ul></li><li>Src：源代码文件夹，Source；Bin文件夹：保存编译后的二进制文件</li></ul><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> come.alibiba;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);   <span class="comment">//println：输出行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java代码执行顺序"><a href="#Java代码执行顺序" class="headerlink" title="Java代码执行顺序"></a>Java代码执行顺序</h4><ol><li><p>编译原理：Java源代码 词法分析、语法分析</p></li><li><p>编译后的文件 <code>.class</code> 文件， ByteCode 字节码格式</p></li><li>JVM 类装载器 ClassLoader 装载执行的类文件</li><li>代码检验：符合JVM规范和类型安全等</li><li>Java中间代码 IR（Intermediate Representation）IL</li><li>准备：准备方法表、静态字段等需要的内存空间</li><li>JIT 即时编译器执行二次编译 IR 中间代码</li><li>转换为机器码</li><li>CPU 以 线程Thread 身份执行机器码</li></ol><h4 id="Java-9新特性"><a href="#Java-9新特性" class="headerlink" title="Java 9新特性"></a>Java 9新特性</h4><ol><li>Jigsaw 项目：模块化，包，仿C#的程序集<code>dll</code>概念</li><li>简化了的进程 API</li><li>轻量级的 JSON API</li><li>钱和货币的相关 API</li><li>改善多线程锁争用机制</li><li>代码分段缓存</li><li>改进的 Stream API</li><li>改进的 Javadoc</li><li>HTTP 2.0 客户端 HTTP/2。WebSocket</li><li>多版本兼容JAR</li></ol><h4 id="Java三个版本"><a href="#Java三个版本" class="headerlink" title="Java三个版本"></a>Java三个版本</h4><ol><li>2005年6月，JavaOne大会SUN公司公开Java SE 6（To，Java已经更名以取消其中数字”2“）</li><li>JavaSE（Java 2 Platform Standard Edition，java标准版）</li><li>JavaEE（Java 2 Platform,Enterprise Edition，java企业版）</li><li>JavaME（Java 2 Platform Micro Edition，java平台微型版）</li><li>Enterprise Java Bean（EJB）Java企业开发规范标准，框架重</li><li>Pivotal 公司开发一套 Spring 框架：取代EJB框架，简化Java企业级开发</li></ol><h4 id="JVM-Java虚拟机"><a href="#JVM-Java虚拟机" class="headerlink" title="JVM Java虚拟机"></a>JVM Java虚拟机</h4><ol><li>Java虚拟机： 托管执行Java的中间代码 <code>.class</code>，Java Virtual Machine缩写</li><li>虚拟机：linux系统，Window系统虚拟计算机</li><li>Java编译成中间代码，JIT 即时编译器再次编译为CPU指令</li><li>CPU执行</li><li>JVM把 <code>.class</code> 文件加载内存，C#编译后文件格式 <code>.dll</code></li><li>二次编译 jit（Just in Time）转换为CPU指令执行</li><li>JVM 负责Java代码编译、执行、内存分配、GC回收</li><li>C#等价概念 CLR 公共语言运行时，包含C#、VB、F#等</li><li>Common Language Runtime</li></ol><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>8大基本数据类型<ul><li><code>byte</code> 字节 8bit 位，<code>short</code> 短整型 2X8bit，<code>int</code> 整型 4X8bit，<code>long</code> 长整型 8X8bit，<code>float</code> 浮点 4X8bit，<code>double</code> 双精度 8X8bit，<code>char</code> 字符 8bit，<code>boolean</code> 布尔类型 8bit</li></ul></li><li>两大数据类型<ul><li>基本数据类型（Java 8大基本类型，C#中也有）</li><li>引用数据类型（复杂的数据类型，Java，C#中也有）</li><li>C#中还有一种值类型概念</li></ul></li><li>6大包装类（包装一层）：<code>Boolean</code>、<code>Character</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code></li></ul><h4 id="Java的枚举类型"><a href="#Java的枚举类型" class="headerlink" title="Java的枚举类型"></a>Java的枚举类型</h4><ol><li><p>Java 中的枚举是一些常量的集合，Java 1.5 中引入，属于引用类型</p></li><li><p><code>java.lang.Enum</code></p></li><li><p>大写关键字 <code>Enum</code>，小写关键字 <code>enum</code></p></li><li><p><code>Enum</code> 抽象类，所有枚举类型的基类，<code>enum</code> 继承自  <code>Enum</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Season</span> &#123; SPRING, SUMMER, AUTUM, WINTER &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="条件和循环语句"><a href="#条件和循环语句" class="headerlink" title="条件和循环语句"></a>条件和循环语句</h3><h4 id="if条件"><a href="#if条件" class="headerlink" title="if条件"></a>if条件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">10000000</span>) &#123; System.out.println(<span class="string">&quot;超级富豪程序员&quot;</span>); &#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num &gt; <span class="number">1000000</span>) &#123; System.out.println(<span class="string">&quot;富豪程序员&quot;</span>); &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; System.out.println(<span class="string">&quot;码畜&quot;</span>); &#125;</span><br></pre></td></tr></table></figure><h4 id="switch条件"><a href="#switch条件" class="headerlink" title="switch条件"></a>switch条件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;输入星期查询&quot;</span>);</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> sin.nextInt();</span><br><span class="line"><span class="keyword">switch</span> (day)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;休息&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;上班&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="for循环，for-each循环"><a href="#for循环，for-each循环" class="headerlink" title="for循环，for each循环"></a>for循环，for each循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123; sum = sum + i; &#125; System.out.println(sum);</span><br><span class="line"><span class="keyword">for</span> (String s : list)&#123; System.out.println(s); &#125;  <span class="comment">//foreach循环</span></span><br></pre></td></tr></table></figure><h4 id="while循环，do-while循环"><a href="#while循环，do-while循环" class="headerlink" title="while循环，do while循环"></a>while循环，do while循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"><span class="keyword">while</span>(age&lt;<span class="number">100</span>) &#123; age=age+<span class="number">1</span>; System.out.println(age); &#125;</span><br><span class="line"><span class="keyword">do</span>&#123; age++; System.out.println(age); &#125;<span class="keyword">while</span> (age&lt;<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>算数运算符，二进制位运算符（ <code>&amp;</code>  与，<code>|</code>  或，<code>^</code>异或，<code>〜</code>按位取反），逻辑运算符（<code>&amp;&amp;</code> and，<code>||</code> or，<code>!</code> not），赋值运算符（<code>/=</code>除和），条件运算符 （三元运算符）<code>(a=1)?1:2</code></li></ul><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><ul><li><p>Object Oriented Programming</p></li><li><p>软件工程的发展</p><p><code>面向硬件：CPU指令，汇编</code> -&gt; <code>面向过程PO：C语言、Pascal</code> -&gt; <code>面向对象OO：C++、Java、C#</code> -&gt; <code>面向组件CO：COM</code> -&gt; <code>面向服务SO：Web服务</code></p></li><li><p><code>Class</code>类代码封装的基本单元，<code>Class</code>封装了数据（变量）和行为（函数功能）</p></li><li><p><code>Class</code> 描述抽象事务的类型，万物（<code>Object</code>）皆可归为类，对象是类的具体实体</p></li><li><p>类继承</p></li></ul><h4 id="OOP面向对象的三大特征"><a href="#OOP面向对象的三大特征" class="headerlink" title="OOP面向对象的三大特征"></a>OOP面向对象的三大特征</h4><ul><li>继承 <code>Inheritence</code>：子类继承父类的代码。继承是父类和子类之间共享数据和方法的机制，本质就是代码重用，通常把父类称为基类，子类称为派生类，Java和C#单继承，通过接口来实现多重继承，接口可以从多个基接口继承。</li><li>封装 <code>Encapsulation</code>：<code>Class</code> + 修饰符封装代码。就是用一个<code>Class</code>把数据和行为代码组合在一起，形成一个对象，面向过程封装<code>Function</code>，在Java和C#中类的工具，对象则是封装的基本单元，访问级别修饰符：<code>Public</code>、<code>Protected</code>、<code>Private</code></li><li>多态性 <code>Polymorphism</code>：同一种行为，多种代码实现。就是指同一个操作作用于不同的对象，可以有不同的解释，产生不同的执行结果，多态性有两种，一种是静态多态（编译时多态），一种是动态多态（运行时多态），方法重载和重写实现。</li></ul><h4 id="面向对象OOP核心概念"><a href="#面向对象OOP核心概念" class="headerlink" title="面向对象OOP核心概念"></a>面向对象OOP核心概念</h4><ol><li>面向过程编程（POP），Procedure Oriented Programming</li><li>函数 Function 改名叫 方法 Method</li><li>汇编、C、SQL、C++， Java，JavaScript、C#、Go</li><li>对物品 Object 进行分类 Class，万物分类，抽象，Object物体，编程语言：对象</li><li>Class 代码封装的更大的单位，类包含功能函数和数据变量</li><li>类全局变量：属性、成员，函数外面变量</li><li><code>Class</code> 类：数据 + 行为功能，代码组织更合理，变量+函数， 字段+方法</li></ol><h4 id="封装Encapsulation"><a href="#封装Encapsulation" class="headerlink" title="封装Encapsulation"></a>封装Encapsulation</h4><ul><li>封装 Encapsulation：相比之前Function功能，把数据和行为功能代码打包在一起，形成一个封闭Class类。代码封装单位。</li><li>在C#和Java中，类是支持对象封装的工具，对象则是封装的基本单元。</li></ul><ol><li>类和结构是 .NET 和 Java 中的常规类型系统的基本构造，本质上都属于数据结构，封装着一个逻辑单位的数据和行为。</li></ol><ul><li>数据和行为是该类或结构的“成员”，它们包含各自的方法、属性和事件等。</li><li>Class 默认是 <code>Internal</code>，成员是 <code>Private</code></li></ul><h3 id="OOP原则"><a href="#OOP原则" class="headerlink" title="OOP原则"></a>OOP原则</h3><h4 id="Class类继承"><a href="#Class类继承" class="headerlink" title="Class类继承"></a>Class类继承</h4><ul><li>为了更好的代码重用</li><li>在Java中，子类可以继承父类，所有的方法都是默认 <code>Virtual</code> 的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>               <span class="comment">//重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Run</span><span class="params">()</span></span><br><span class="line">    &#123;System.out.println(<span class="string">&quot;Hello dog run...&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造函数，创建对象，实例化，构造对象，通过对象，调用行为，功能、方法</li></ul><h4 id="面向对象行为多态"><a href="#面向对象行为多态" class="headerlink" title="面向对象行为多态"></a>面向对象行为多态</h4><ul><li><p>多态是行为（功能、函数、方法）的多态，指为同名的方法提供不同的实现代码，是面向对象编程的最重要特征</p></li><li><p>我们不用关心方法的具体实现而仅仅依靠名称来进行调用操作</p></li><li><p><code>Abstract</code> 抽象方法和 <code>Virtual</code> 虚方法是多态性的基础</p></li><li><p>Java和C#提供三种多态能力：接口多态、继承多态、抽象多态</p></li><li><p>接口：部分约束、合约、约定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBike</span> <span class="comment">//声明一个接口 叫功能</span></span><br><span class="line">&#123;<span class="keyword">void</span> <span class="title function_">Call</span><span class="params">()</span>;&#125;  <span class="comment">//定义Call方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> : IBike <span class="comment">//猫类实现接口</span></span><br><span class="line">&#123;<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Call</span><span class="params">()</span>&#123;     </span><br><span class="line">    Console.WriteLine(<span class="string">&quot;喵喵喵&quot;</span>);&#125;  <span class="comment">//实现Call方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="多态的实现方式"><a href="#多态的实现方式" class="headerlink" title="多态的实现方式"></a>多态的实现方式</h4><ul><li>重载 <code>Overloading</code>：同一个类中，兄弟方法，方法名相同，参数个数、类型、顺序不同</li><li>重写 <code>Override</code>：子类和父类，父子关系，子类重新实现父类中的同名方法</li><li><code>@override</code> 标记到重写的方法上</li></ul><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><ul><li><p>抽象的类型，无法具体化接口，约束合约</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.frankxulei; <span class="comment">//接口表示一种约束，电源接口、USB接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IFly</span> &#123; <span class="keyword">void</span> <span class="title function_">Fly</span><span class="params">()</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">IFly</span> &#123; <span class="comment">//继承抽象类和接口</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Run</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Hello dog run...&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Fly</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Hello dog fly...&quot;</span>); &#125; &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h4><ol><li>实例方法：创建对象才能调用的方法</li><li>静态方法：<code>Static</code> 修饰的方法，属于类<code>Class</code>，不需要实例化</li><li><p>虚方法：<code>virtual</code>，介于抽象和实体方法之间，可以重写</p></li><li><p>除了 <code>static</code>、<code>final</code>、<code>private</code> 修饰的所有方法都是抽象类</p></li><li><code>Abstract</code> 抽象类不可以被实例化，<code>interface</code> 接口也不可以</li><li>抽象类只允许单继承，接口可以多继承</li><li><code>Abstract</code> 抽象类有具体方法实现，接口只有方法声明</li><li>抽象类使用关键字 <code>extends</code>，接口继承使用 <code>implements</code></li><li>抽象类代表同一类别， 接口代表一种部分约束</li></ol><h4 id="虚方法，抽象方法和重写"><a href="#虚方法，抽象方法和重写" class="headerlink" title="虚方法，抽象方法和重写"></a>虚方法，抽象方法和重写</h4><ul><li><p>父类不希望子类重写我</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Run</span><span class="params">()</span><span class="comment">//虚方法</span></span><br><span class="line">&#123;Console.WriteLine(<span class="string">&quot;BaseClass.VirtualMethod&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">AddPower</span><span class="params">()</span>;&#125; <span class="comment">//抽象方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMWCar</span> : Car</span><br><span class="line">&#123; <span class="meta">@override</span> <span class="comment">//重写虚方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Run</span><span class="params">()</span>&#123; Console.WriteLine(<span class="string">&quot;SubClass.VirtualMethod&quot;</span>);&#125;</span><br><span class="line">   <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AddPower</span><span class="params">()</span>&#123; Console.WriteLine(“加油<span class="string">&quot;); &#125;&#125;</span></span><br><span class="line"><span class="string">class Test</span></span><br><span class="line"><span class="string">&#123; static void Main()&#123;</span></span><br><span class="line"><span class="string">Car baseClass = new BMWCar(); //声明类型为基类，实际类型为子类</span></span><br><span class="line"><span class="string">//由实际类型决定调用子类还是父类方法，实际是SubClass类的对象：SubClass.VirtualMethod</span></span><br><span class="line"><span class="string">baseClass. Run();</span></span><br><span class="line"><span class="string">baseClass. AddPower(); &#125;&#125;//重写抽象方法</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="简易计算器"><a href="#简易计算器" class="headerlink" title="简易计算器"></a>简易计算器</h4><ul><li>用户输入数据：借用 <code>Scanner</code> 类</li><li>选择加减乘除：<code>IF</code> 条件判断</li><li>计算结果：数据类型</li><li>方法重载</li></ul><h3 id="文件编程"><a href="#文件编程" class="headerlink" title="文件编程"></a>文件编程</h3><h4 id="File文件流和IO读写文件工具类"><a href="#File文件流和IO读写文件工具类" class="headerlink" title="File文件流和IO读写文件工具类"></a>File文件流和IO读写文件工具类</h4><ul><li><code>Java.io</code> 包几乎包含了所有操作输入、输出需要的类，所有这些流类代表了输入源和输出目标</li><li><code>Java.io</code> 包，File文件类库的流支持很多格式（基本类型、对象、本地化字符集等）</li><li>一个流可以理解为一个数据的序列，输入流表示从一个源读取数据，输出流表示向一个目标写数据</li><li><p>Java为I/O提供了强大而灵活的支持（类库），使其更广泛地应用到文件传输和网络编程中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Java-IO读写文件工具类"><a href="#Java-IO读写文件工具类" class="headerlink" title="Java IO读写文件工具类"></a>Java IO读写文件工具类</h4><ul><li>Java读文件，通常会使用 FileInputStream 和 FileReader（也可以单独使用）读文本内容</li><li>java写文件中，通常会使用 FileOutputStream 和 FileWriter（也可以单独使用），</li><li>FileWriter 只能写文本文件</li></ul><h4 id="Java打开-保存开文件对话框"><a href="#Java打开-保存开文件对话框" class="headerlink" title="Java打开/保存开文件对话框"></a>Java打开/保存开文件对话框</h4><ul><li>AWT：FileDialog 类 + FilenameFilter 类实现本功能</li><li>Swing：JFileChooser 类 + FileFilter 类实现本功能</li></ul><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><h4 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h4><ul><li><p>物理上内存空间（数组连续的存储空间）连续，访问速度快，不灵活</p></li><li><p>相同数据类型的元素按一定顺序排列的集合（一组连续的存储空间），就是把有限个类型相同的变量用一个名字命名，然后用编号区分他们的变量的集合，这个名字成为数组名，编号成为下标。也叫索引 Index</p></li><li><p>数组是一种数据结构，它包含若干相同类型的变量。</p></li><li><p>数组元素，通过下标，0开始计数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[<span class="number">10</span>] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span>[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span>[] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line">String[] nameArray = &#123;“C”,”Java”,”C++”&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组特点"><a href="#数组特点" class="headerlink" title="数组特点"></a>数组特点</h4><ul><li>内存空间连续</li><li>数组可以是一维、多维或交错的。</li><li>数值数组元素的默认值设置为零，而引用元素的默认值设置为 null</li><li>交错数组是数组的数组，因此其元素是引用类型并初始化为 null</li><li>数组的索引从0开始：具有n 个元素的数组的索引是从 0 到 n-1</li><li>数组元素可以是任何类型，包括数组类型。</li><li>C#7.0 元组不限制数组元素类型，数组元素是各种类型</li><li>数组访问效率高，但是删除和插入效率低</li></ul><h4 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h4><ul><li>List 链表：空间节点指针连接，链条节点，可变长度，物理上不连续，插入和删除节点性能高，但是查找性能较低</li><li>内存空间分离，指针指向下一个节点，灵活、空间大</li><li>单链表和双链表</li></ul><h4 id="数据列表（ArrayList）"><a href="#数据列表（ArrayList）" class="headerlink" title="数据列表（ArrayList）"></a>数据列表（ArrayList）</h4><ul><li>Array 数组: 一组连续的物理空间，一组元素，不可变长度，查找性能高，但是插入和删除需要移动位置，性能低</li><li><p>ArrayList：可变长度的数组</p></li><li><p>使用 <code>ArrayList</code> 类 <code>Add</code>、<code>AddRange</code> 和 <code>ToArray</code> 方法的项代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ArrayList</span> <span class="variable">myAL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();<span class="comment">// 创建和初始化ArrayList.</span></span><br><span class="line">    myAL.Add(<span class="string">&quot;The&quot;</span>); <span class="comment">//添加一个元素</span></span><br><span class="line">    myAL.AddRange(<span class="keyword">new</span> <span class="title class_">string</span>[] &#123; <span class="string">&quot;the&quot;</span>, <span class="string">&quot;lazy&quot;</span>,<span class="string">&quot;dog&quot;</span> &#125;);<span class="comment">//添加一组元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="集合（Set）接口"><a href="#集合（Set）接口" class="headerlink" title="集合（Set）接口"></a>集合（Set）接口</h4><ul><li><p>集合 Set：不包含重复元素的集合，属于 Collection Framework 框架</p></li><li><p><code>public interface Set &lt;E&gt;</code>、<code>extends Collection &lt;E&gt;</code></p></li><li><p>集合提供一种更灵活的方式使用对象组，内存空间灵活</p></li><li><p>与数组不同，处理的对象组可根据程序更改的需要动态地增长和收缩</p></li><li><p>对于某些集合，可以指定键Key，则放入集合中的所有对象，以便可以快速检索对象</p></li><li><p>集合是类，因此必须 <code>new</code> 新集合后，才能添加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    set.add(i);&#125;</span><br><span class="line">System.out.println(set);</span><br><span class="line"><span class="type">TreeSet</span> <span class="variable">sortedSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Integer&gt;(set); <span class="comment">//有序集</span></span><br><span class="line">System.out.println(sortedSet);</span><br></pre></td></tr></table></figure></li></ul><h4 id="哈希映射（HashMap）"><a href="#哈希映射（HashMap）" class="headerlink" title="哈希映射（HashMap）"></a>哈希映射（HashMap）</h4><ul><li><p>HashMap，存储键值对（Key/Value）数据，类型定义 <code>java.util.HashMap&lt;K,V&gt;</code></p></li><li><p><code>public class HashMap&lt;K,V&gt;</code>、<code>extends AbstractMap&lt;K,V&gt;</code>、<code>implements Map&lt;K,V&gt;, Cloneable, Serializable</code></p></li><li><p>继承了抽象类 AbstractMap，基于哈希表的Map接口的实现，并允许 <code>null</code> 值和 <code>null</code> 键。</p></li><li><p>提供了 <code>get( )</code>  和 <code>put( )</code> 方法，HashMap 是无序的，即不会记录插入的顺序</p></li><li><p>HashMap 与 Hashtable 基本一样，但是不同步，允许为 <code>null</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, String&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">System.out.println(hashmap.put(<span class="number">1</span>, “C<span class="string">&quot;) ); //添加Key,Value</span></span><br><span class="line"><span class="string">System.out.println(hashmap.put(2, “C++&quot;</span>) ); <span class="comment">//添加Key,Value</span></span><br><span class="line">System.out.println(hashmap.put(<span class="number">3</span>, “Java<span class="string">&quot;) ); //添加Key,Value</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="哈希表（Hashtable）"><a href="#哈希表（Hashtable）" class="headerlink" title="哈希表（Hashtable）"></a>哈希表（Hashtable）</h4><ul><li><p>Hashtable 类实现一个哈希表，存储键Key映射到值Value，任何非空（Null）对象都可以用作键或值</p></li><li><p>为了成功地从哈希表存储和检索对象，用作键的对象必须实现 <code>hashCode</code> 方法和 <code>equals</code> 方法</p></li><li><p><code>Hashtable</code> 类包含在 <code>java.util</code> 包中，<code>java.util.Hashtable&lt;K,V&gt;</code></p></li><li><p>哈希表（散列表）类似HashMap，但支持多线程安全，哈希表将key/value(键/值对)存储在哈希表中。</p></li><li><p>在Hashtable中，我们指定一个用作键的对象，以及要与该键关联的值，然后对键进行哈希处理，并将生成的哈希码用作将值存储在表中的索引。</p></li><li><p>Hashtable 类的初始默认容量为11，而 loadFactor 为0.75。</p></li><li><p>在Java版本2中，重写了Hashtable类以实现Map接口，并使它成为 Java Collection Framework的成员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hashtable&lt;Integer, String&gt; hashtable = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;Integer, String&gt;();</span><br><span class="line">System.out.println( hashtable.put(<span class="number">1</span>, “C<span class="string">&quot;) ); //添加Key,Value</span></span><br><span class="line"><span class="string">System.out.println( hashtable.put(2, “C++&quot;</span>) ); <span class="comment">//添加Key,Value</span></span><br><span class="line">System.out.println( hashtable.put(<span class="number">3</span>, “Java<span class="string">&quot;) ); //添加Key,Value</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="HashMap-和-HashTable的区别"><a href="#HashMap-和-HashTable的区别" class="headerlink" title="HashMap 和 HashTable的区别"></a>HashMap 和 HashTable的区别</h4><div class="table-container"><table><thead><tr><th>HashMap</th><th>Hashtable</th></tr></thead><tbody><tr><td>非同步synchronized</td><td>同步synchronized</td></tr><tr><td>不是线程安全</td><td>线程安全</td></tr><tr><td>允许1个null key 和多个null 值</td><td>不允许null key 和null value</td></tr><tr><td>JDK 1.2引入</td><td>早期就有</td></tr><tr><td>使用Iterator遍历Hashmap</td><td>使用Iterator或Enumeration遍历Hashtable</td></tr><tr><td>继承AbstractMap类</td><td>继承Dictionary类</td></tr><tr><td>并发高</td><td>并发低</td></tr></tbody></table></div><h4 id="其他复杂数据类型"><a href="#其他复杂数据类型" class="headerlink" title="其他复杂数据类型"></a>其他复杂数据类型</h4><ul><li>枚举（ Enumeration）</li><li>向量（ Vector）</li><li>栈（ Stack）：先进后出</li><li>字典（Dictionary ）</li><li>队列（Queue）：先进先出</li><li>树（Tree）</li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="Java-泛型机制"><a href="#Java-泛型机制" class="headerlink" title="Java 泛型机制"></a>Java 泛型机制</h4><ul><li>Java泛型（ generic Type）是JDK 5 2004年中引入的一个新特性。是万能类型，泛型实现代码和算法的重用</li><li>Java泛型方法和泛型类 让类型定义更灵活，以后随意替换具体类型</li><li>早期 <code>List&lt;Object&gt;</code> 来接受更多的参数类型，该机制允许程序员在编译时检测到非法的类型，比如重用排序算法，支持各种类型对象的排序</li><li>泛型方法在调用时可以接收不同类型的参数</li><li>Java泛型使用的机制和C#不同（伪泛型）。编译器会把泛型信息类型擦除。</li><li>实际编译的代码不包含类型信息 <code>type erasure</code></li><li><code>ArrayList&lt;E&gt;</code> 和<code>HashMap&lt;k,v&gt;</code>都是典型的泛型类型</li></ul><h4 id="泛型定义"><a href="#泛型定义" class="headerlink" title="泛型定义"></a>泛型定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java泛型定义和C#泛型List定义语法一样</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">List</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> t;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T t)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.t = t;&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> t;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型实战"><a href="#泛型实战" class="headerlink" title="泛型实战"></a>泛型实战</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Java泛型实战&quot;</span>);</span><br><span class="line">ArrayList&lt;String&gt; listNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> listNames.getClass();</span><br><span class="line">listNames.add(“阿里Java训练营<span class="string">&quot;); listNames.add(“阿里云大学&quot;</span>);</span><br><span class="line">System.out.println(c1 == c2);</span><br><span class="line"><span class="keyword">for</span> (String s : listNames) &#123; System.out.println(s); &#125;</span><br></pre></td></tr></table></figure><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="ODBC开放数据库连接"><a href="#ODBC开放数据库连接" class="headerlink" title="ODBC开放数据库连接"></a>ODBC开放数据库连接</h4><ul><li>微软提出的数据库接口标准：Open Database Connectivity，简称ODBC</li><li>开放数据库连接技术，解决不同异构数据库连接的问题，主要是Windows系统来用，支持多种数据库</li><li>ODBC 现已成为WOSA（The Windows Open System Architecture）（Windows开放系统体系结构）的主要部分</li><li>ODBC基于Windows系统一种数据库访问接口标准，用ODBC 可以访问各类计算机上的DB文件，也可以访问如Excel 表和 ASCII 数据文件这类非数据库对象</li></ul><h4 id="Java数据库连接驱动-JDBC"><a href="#Java数据库连接驱动-JDBC" class="headerlink" title="Java数据库连接驱动 JDBC"></a>Java数据库连接驱动 JDBC</h4><ul><li>JDBC 框架，Java数据库连接技术（Java Database Connectivity），与<code>.NET</code>中的<code>ADO.NET</code>类似</li><li>JDBC是Java语言编程中与数据库连接的API，封装了各种数据库访问的API 和基础类库，支持多种数据库连接</li><li>NoSQL：Mongodb 公司提供 Java 和 C# 驱动</li><li>JDBC 支持的数据库：Oracle、DB2、Sql Server、Sybase、Informix、MySQL、PostgreSQL、access（直连用ODBC）</li><li>JDBC 很像微软的<code>ADO.NET</code> 和C#的数据库连接技术，可以向数据库传递SQL语句命令，实现各种操作，也可以调用储存过程</li><li>SQLHelper 和 MySQLHelper支持Java和C#工具类</li><li>现在普遍使用 ORM 框架，底层使用了JDBC和ADO.NET</li><li>Hibernate（Entity Framework），mybatis（Dapper）</li></ul><h4 id="JDBC-5大对象-接口和类"><a href="#JDBC-5大对象-接口和类" class="headerlink" title="JDBC 5大对象 接口和类"></a>JDBC 5大对象 接口和类</h4><ul><li>DriverManager：驱动管理器，管理数据库驱动程序列表</li><li>Driver：处理与数据库服务器的通信，可能由多种驱动</li><li>Connection：数据库连接对象。C#的连接对象是 SQLConnection</li><li>Statement：SQL语句对象，将SQL语句提交数据库。SQLCommand</li><li>ResultSet：SQL查询这些对象保存查询结果。DataSet、DataReader</li><li>SQLException：数据库操作异常类型，C#也有</li></ul><h4 id="JDBC编程5大步骤"><a href="#JDBC编程5大步骤" class="headerlink" title="JDBC编程5大步骤"></a>JDBC编程5大步骤</h4><ul><li><p>JDBC 连接MySQL 对应的驱动包，工具类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在pom.xml文件中添加驱动dependency--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>手动引用到项目中，Maven自动化构建工具</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.AlibabaJava07JDBCMySQLDemo;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123; </span><br><span class="line">  <span class="comment">// 1.加载驱动 JSP连接MySQL</span></span><br><span class="line">  Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">  <span class="comment">// 2.连接数据</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/taobao?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;990312&quot;</span>;</span><br><span class="line">  <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">  <span class="comment">// 3.SQL命令</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users order by Id&quot;</span>;</span><br><span class="line">  java.sql.<span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line">  <span class="comment">// 4.执行SQL命令</span></span><br><span class="line">  <span class="type">ResultSet</span> <span class="variable">result</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">  <span class="comment">// 5.结果处理</span></span><br><span class="line">  <span class="keyword">while</span> (result.next()) &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> result.getString(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">   <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> result.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">   <span class="type">String</span> <span class="variable">psw</span> <span class="operator">=</span> result.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">   System.out.println(id+<span class="string">&quot; : &quot;</span>+ name + <span class="string">&quot; : &quot;</span> + psw); &#125;</span><br><span class="line">  <span class="comment">// 6.结束运行</span></span><br><span class="line">  result.close();</span><br><span class="line">  statement.close();</span><br><span class="line">  con.close();  &#125;  &#125;</span><br></pre></td></tr></table></figure><ul><li>加载（注册）数据库驱动库 -&gt; 建立链接 -&gt; 执行SQL语句 -&gt; 处理结果集RecordSet -&gt; 关闭数据库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.SQL命令</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO `users` (`id`,`name`,`password`) VALUES(?,?,?);&quot;</span>;</span><br><span class="line"><span class="comment">// 4.准备命令</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 5.设置参数</span></span><br><span class="line">statement.setInt(<span class="number">1</span>, id);</span><br><span class="line">statement.setString(<span class="number">2</span>, name);</span><br><span class="line">statement.setString(<span class="number">3</span>, password);</span><br><span class="line"><span class="comment">// 6.执行SQL命令</span></span><br><span class="line">statement.execute();</span><br><span class="line"><span class="comment">// 7.关闭连接</span></span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h4 id="JDBC驱动和数据库URL"><a href="#JDBC驱动和数据库URL" class="headerlink" title="JDBC驱动和数据库URL"></a>JDBC驱动和数据库URL</h4><div class="table-container"><table><thead><tr><th>数据库</th><th>JDBC驱动名称</th><th>URL格式</th></tr></thead><tbody><tr><td>MySQL</td><td>com.mysql.jdbc.Driver</td><td>jdbc:mysql://hostname/databaseName</td></tr><tr><td>ORACLE</td><td>oracle.jdbc.driver.OracleDriver</td><td>jdbc:oracle:thin:@hostname:portNumber:databaseName</td></tr><tr><td>PostgreSQL</td><td>org.postgresql.Driver</td><td>jdbc:postgresql://hostname:port/dbname</td></tr><tr><td>DB2</td><td>com.ibm.db2.jdbc.net.DB2Driver</td><td>jdbc:db2:hostname:port Number/databaseName</td></tr><tr><td>Sybase</td><td>com.sybase.jdbc.SybDriver</td><td>jdbc:sybase:Tds:hostname:portNumber/databaseName</td></tr></tbody></table></div><h4 id="Java三层架构"><a href="#Java三层架构" class="headerlink" title="Java三层架构"></a>Java三层架构</h4><ol><li>UI展示层Presentation Layer：Swing、网页、WP、IOS、安卓</li><li>Services 业务逻辑层</li><li>DAO 数据访问层</li></ol><h3 id="JSP网站开发和Servlet底层原理"><a href="#JSP网站开发和Servlet底层原理" class="headerlink" title="JSP网站开发和Servlet底层原理"></a>JSP网站开发和Servlet底层原理</h3><h4 id="Web网站开发框架"><a href="#Web网站开发框架" class="headerlink" title="Web网站开发框架"></a>Web网站开发框架</h4><ul><li>JQuery、Bootstrap、EasyUI、Angular JS、React.JS、Vue.JS</li><li>HTML5、CSS3、JavaScript、XML、JSON、Flash Silverlight</li><li>PHP、ASP、JSP、ASP.NET MVC、Java Spring MVC、Node.js、Spring Boot</li><li>Web服务器：Tomcat\Nginx\IIS</li><li>ORM数据库连接</li></ul><h4 id="JSP动态网站开发框架"><a href="#JSP动态网站开发框架" class="headerlink" title="JSP动态网站开发框架"></a>JSP动态网站开发框架</h4><ul><li>PHP 脚本语言，1994</li><li>ASP VBScript，1996 Active Server Page</li><li>JSP JavaScript，1999年 网页中嵌入Java语言</li><li>Netscape 网景公司和Sun</li><li>ASP.NET WebForm 2002 拖控件，网页嵌入 C#</li></ul><h4 id="JSP动态网站开发技术"><a href="#JSP动态网站开发技术" class="headerlink" title="JSP动态网站开发技术"></a>JSP动态网站开发技术</h4><ul><li>JSP与PHP、ASP、ASP.NET等类似，是动态网页开发技术。</li><li>JSP（全称Java Server Page）Sun公司，1999发布，由Sun Microsystems公司倡导和许多公司参与共同创建</li><li>JSP 技术是以Java语言作为开发语言的，网页嵌入Java代码</li><li>ASP是以vb脚本作为开发语言， C#嵌入，文件扩展名为 <code>.asp</code></li><li>ASP.NET WebForm 前后分离，嵌入C#，文件扩展名 <code>.aspx</code></li><li>JSP 网页本质上Java代码在服务器端处理客户端的HTTP请求</li><li>HTML：Hypertext Markup Language 超文本标记语言，HTTP：Hypertext Transfer Protocol 超文本传输协议</li><li>JSP文件后缀名为 <code>.jsp</code> ，JSP可以运行在Linux和Windows上</li></ul><h4 id="新建一个JSP网站"><a href="#新建一个JSP网站" class="headerlink" title="新建一个JSP网站"></a>新建一个JSP网站</h4><ol><li>Eclipse新建一个JSP网站</li><li>编写页面内容Hello 阿里巴巴Java训练营</li><li>使用Tomcat运行起来</li></ol><h4 id="Java写网页"><a href="#Java写网页" class="headerlink" title="Java写网页"></a>Java写网页</h4><ul><li><p>内嵌 Java语言代码 <code>&lt;%Java代码%&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Java实战训练营<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;Images/mongodb.png&quot;</span>&gt;</span></span><br><span class="line">&lt;% out.println(“阿里巴巴Java实战训练营&quot;); %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="JSP网页9大内置对象"><a href="#JSP网页9大内置对象" class="headerlink" title="JSP网页9大内置对象"></a>JSP网页9大内置对象</h4><div class="table-container"><table><thead><tr><th>对象</th><th>名词</th><th>描述</th></tr></thead><tbody><tr><td>request</td><td>请求</td><td>HttpServletRequest类的实例，用户请求</td></tr><tr><td>response</td><td>应答</td><td>HttpServletResponse类的实例，返回应答消息</td></tr><tr><td>out</td><td>临时输出</td><td>PrintWriter类的实例，用于把结果输出到网页流中</td></tr><tr><td>session</td><td>会话</td><td>HttpSession类的实例，会话，记录和当前用户相关的数据</td></tr><tr><td>application</td><td>应用程序</td><td>ServletContext类的实例，与应用上下文有关</td></tr><tr><td>config</td><td>配置</td><td>ServletConfig类的实例</td></tr><tr><td>pageContext</td><td>页面上下文</td><td>PageContext类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><tr><td>page</td><td>页面</td><td>类似于Java类中的this关键字</td></tr><tr><td>Exception</td><td>异常</td><td>Exception类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr></tbody></table></div><h4 id="Session跨页面传递数据"><a href="#Session跨页面传递数据" class="headerlink" title="Session跨页面传递数据"></a>Session跨页面传递数据</h4><ul><li>Session会话对象</li><li>用于用户访问网站期间的临时数据的缓存</li><li>购物车</li></ul><h4 id="JSP对象的4大作用范围（4大作用域）"><a href="#JSP对象的4大作用范围（4大作用域）" class="headerlink" title="JSP对象的4大作用范围（4大作用域）"></a>JSP对象的4大作用范围（4大作用域）</h4><ol><li>page scope 页面范围</li><li>request scope 请求范围</li><li>session scope 会话范围</li><li>application scope. 应用程序范围</li></ol><h4 id="JSP查询MySQL"><a href="#JSP查询MySQL" class="headerlink" title="JSP查询MySQL"></a>JSP查询MySQL</h4><ol><li>新建JSP网页</li><li>网页中导入JDBC包</li><li>连接MySQL数据库Alibaba</li><li>查询用户</li><li>显示到页面上</li><li>HTML5：标签语言网页内容</li><li>CSS3：样式，颜色，大小，位置，Bootstrap</li><li>JavaScript：脚本语言，JQuery</li></ol><h4 id="Bootstrap样式"><a href="#Bootstrap样式" class="headerlink" title="Bootstrap样式"></a>Bootstrap样式</h4><ul><li><a href="http://www.bootcss.com/">http://www.bootcss.com/</a></li><li>Tweeter提供的免费开源样式</li><li>页面直接加入样式引用，在html标签使用样式</li><li><code>&lt;table class=&quot;table&quot;&gt;</code></li></ul><h4 id="JSP访问MySQL数据库"><a href="#JSP访问MySQL数据库" class="headerlink" title="JSP访问MySQL数据库"></a>JSP访问MySQL数据库</h4><ul><li><p>包引用只存入Web目录下就可以了</p></li><li><p>命名空间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=&quot;java.io.*,java.util.*,java.sql.*&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;javax.servlet.http.*,javax.servlet.*&quot; %&gt;</span><br><span class="line">&lt;%@page import=&quot;java.sql.Connection&quot; %&gt;</span><br><span class="line">&lt;%@page import=&quot;java.sql.DriverManager&quot; %&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/sql&quot; prefix=&quot;sql&quot;%&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="JSP连接MYSQL代码"><a href="#JSP连接MYSQL代码" class="headerlink" title="JSP连接MYSQL代码"></a>JSP连接MYSQL代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>阅读次数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;%</span><br><span class="line">    String driverClass=&quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line">    String url=&quot;jdbc:mysql://localhost:3306/taobao&quot;;</span><br><span class="line">    String user=&quot;root&quot;;</span><br><span class="line">    String password=&quot;1234qwer&quot;;</span><br><span class="line">    Connection conn;</span><br><span class="line">    try&#123;</span><br><span class="line">Class.forName(driverClass);</span><br><span class="line">conn=DriverManager.getConnection(url,user,password);</span><br><span class="line">Statement stmt=conn.createStatement();</span><br><span class="line">String sql=&quot;select * from news order by Id desc&quot;;</span><br><span class="line">ResultSet rs=stmt.executeQuery(sql);</span><br><span class="line">while(rs.next())&#123;</span><br><span class="line">  %&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&lt;%=rs.getString(&quot;Id&quot;) %&gt;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&lt;%=rs.getString(&quot;Title&quot;) %&gt;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&lt;%=rs.getInt(&quot;ViewTimes&quot;) %&gt;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;%</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  catch(Exception ex)&#123; ex.printStackTrace(); &#125;</span><br><span class="line">  %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JSP实战新闻编辑"><a href="#JSP实战新闻编辑" class="headerlink" title="JSP实战新闻编辑"></a>JSP实战新闻编辑</h4><ol><li>用户选择编辑，id传递</li><li>编辑页面接收id,</li><li>保存到隐藏html元素：hidden</li><li>数据查询：新闻数据</li><li>赋值给控件：从发布新闻页面拷贝，CSS，HTML5</li><li>提交单独页面：独立保存编辑后的信息</li></ol><h4 id="Java-JSP生命周期"><a href="#Java-JSP生命周期" class="headerlink" title="Java JSP生命周期"></a>Java JSP生命周期</h4><ul><li>Servlet：Java中用来处理HTTP请求的类</li><li>JSP生命周期：从创建到销毁的整个过程，Servlet 生命周期，编译、创建、执行、销毁</li><li>JSP生命周期包括：将JSP文件编译成 servlet</li><li>开发阶段： 编写JSP页面代码</li><li>编译阶段：JSP编译成servlet类，生成 servlet 类class</li><li>初始化阶段：加载JSP的servlet类，创建对象，初始化</li><li>执行阶段：调用JSP对应的servlet实例的服务方法</li><li>销毁阶段：调用JSP对应的servlet实例的销毁方法，销毁对象</li></ul><h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><h4 id="Tomcat9网站Web服务器"><a href="#Tomcat9网站Web服务器" class="headerlink" title="Tomcat9网站Web服务器"></a>Tomcat9网站Web服务器</h4><ul><li>Tomcat开源免费的Java Web服务器软件，最初由Sun的软件构架师詹姆斯·邓肯·戴维森开发的，</li><li>Tomcat是 Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和Oracle其他一些公司及个人共同开发而成</li><li>Tomcat支持Servlet 和JSP 规范规范、WebSocket、微软的IIS Web服务器</li><li>官方网站：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></li></ul><h4 id="Tomcat的核心组件（架构）"><a href="#Tomcat的核心组件（架构）" class="headerlink" title="Tomcat的核心组件（架构）"></a>Tomcat的核心组件（架构）</h4><ul><li>Web容器—-处理静态页面</li><li>catalina —- servlet容器——-处理servlet</li><li>JSP容器，它就是把jsp页面翻译成一般的servlet</li></ul><h3 id="课程代码"><a href="#课程代码" class="headerlink" title="课程代码"></a>课程代码</h3><ul><li>课程代码已上传 <a href="https://github.com/Bezhuang/LearnCS/tree/main/%E9%98%BF%E9%87%8C%E4%BA%91%E5%BC%80%E5%8F%91%E8%80%85%E5%AD%A6%E9%99%A2/Java%E5%88%9D%E7%BA%A7%E8%AE%AD%E7%BB%83%E8%90%A5">Github 仓库</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
            <tag> JDBC </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python for Data Science, AI &amp; Development</title>
      <link href="/Python-for-Data-Science/"/>
      <url>/Python-for-Data-Science/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This course provided by IBM will not teach everything about Python, but it gives me the tools to work as a data scientist and enough knowledge to continue to expand Python learning. The following are the notes I took during this course. Since that I’ve learned <a href="/py4e-code">Python for everybody</a> on Coursera before, so this note will only contain the necessary outlines and newly learned content.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Coursera-Py-for-DS&amp;AI.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Python-Basics"><a href="#Python-Basics" class="headerlink" title="Python Basics"></a>Python Basics</h3><ul><li>Types</li><li><code>int</code>, <code>float</code>, <code>str</code>, <code>True</code>, <code>False</code></li><li>Expressions and Variables</li><li>Mathematical Operations</li><li>String Operations<ul><li><code>Name[1:4]</code>, <code>len()</code>, <code>\n</code></li></ul></li><li><code>try:</code>，<code>except:</code></li></ul><h3 id="Python-Data-Structures"><a href="#Python-Data-Structures" class="headerlink" title="Python Data Structures"></a>Python Data Structures</h3><ul><li>Lists <code>[1, 2, 3]</code> and Tuples <code>(1, 2, 3)</code><ul><li><code>ABC[1]</code>, Tuples are immutable</li><li><code>.extend()</code>, <code>.append()</code>, <code>.split()</code>, <code>.pop()</code>, <code>.del()</code> , <code>.index()</code>, <code>sorted()</code></li><li>Append only adds one element to the list</li></ul></li><li>Sets <code>&#123;q, w, e&#125;</code><ul><li>unordered, unique element, <code>set(list)</code>, <code>.remove()</code></li><li><code>set2 = set1 &amp; set 3</code>, <code>.union</code>, <code>set2.issubset(set1)</code>, <code>.issuperset</code>(), <code>.difference()</code></li></ul></li><li>Dictionaries <code>&#123;&quot;key1&quot;:value1, &quot;key2&quot;: value2&#125;</code><ul><li><code>DICT[&#39;Graduation&#39;]=&#39;2022&#39;</code>, <code>.keys()</code>, <code>.values()</code>, <code>&#39;Graduation&#39; in DICT</code></li></ul></li></ul><h3 id="Python-Programming-Fundamentals"><a href="#Python-Programming-Fundamentals" class="headerlink" title="Python Programming Fundamentals"></a>Python Programming Fundamentals</h3><ul><li><p>Conditions and Branching</p><ul><li>Comparison Operators <code>==</code>，Logic Operators<code>or</code> <code>AND</code>，Boolean</li><li><code>if ():</code>， <code>elif:</code></li></ul></li><li><p>Loops：<code>range(10,15)</code>，<code>for a in range():</code>，<code>while():</code></p></li><li><p>Functions: a function can have multiple parameters</p><ul><li><code>def function(input):</code></li><li><code>global [variable]</code> </li></ul></li><li><p>Objects and Classes</p><ul><li><p>Every object has a type, a blueprint and a set of methods.</p></li><li><p>An object is an instance of a particular type.</p></li><li><p>Class includes Data attributes and methods  <code>dir(NameOfObject):</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius, color=<span class="string">&#x27;red&#x27;</span></span>):</span><br><span class="line">        self.radius = radius;</span><br><span class="line">        self.color = color;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Reading and Writing files with <code>open()</code></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/example1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> File1:  <span class="comment"># &quot;r&quot; for reading</span></span><br><span class="line">    file_stuff=File1.read()  <span class="comment"># file.readlines()can save text to a list</span></span><br><span class="line">    <span class="built_in">print</span>(file_stuff)        <span class="comment"># file.readline(3)can only read 1 line</span></span><br><span class="line"><span class="built_in">print</span>(File1.closed)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/example2.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> File2:  <span class="comment">#&quot;a&quot; for appending</span></span><br><span class="line">        File2.write(line)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> readfile:   <span class="comment"># copy file</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example2.txt&quot;</span>, <span class="string">&quot;w&quot;</span>):     <span class="comment"># &quot;w&quot; for writing</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> readfile:</span><br><span class="line">            writefile.write(line)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h3><h4 id="Loading-data-with-Pandas"><a href="#Loading-data-with-Pandas" class="headerlink" title="Loading data with Pandas"></a>Loading data with Pandas</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">csv_path=<span class="string">&quot;file1.csv&quot;</span></span><br><span class="line">df = pd.read_csv(csv_path)  <span class="comment"># Dataframes</span></span><br><span class="line">df.head()  <span class="comment"># Treat the first row as the column name</span></span><br><span class="line">x=df[[<span class="string">&#x27;ColumnA&#x27;</span>]]</span><br></pre></td></tr></table></figure><h4 id="Select-Data-from-a-data-frame-in-Pandas"><a href="#Select-Data-from-a-data-frame-in-Pandas" class="headerlink" title="Select Data from a data frame in Pandas"></a>Select Data from a data frame in Pandas</h4><ul><li><code>df.loc[&#39;row&#39;, &#39;column&#39;]: &#39;value&#39;</code><ul><li><code>loc</code> is primarily label based; when two arguments are used, you use column headers and row indexes to select the data you want.  </li><li><code>loc</code> can also take an integer as a row or column number.</li><li><code>loc</code> will return a <code>KeyError</code> if the requested items are not found.</li></ul></li><li><code>df.iloc[0,0]:&#39;value&#39;</code><ul><li><code>iloc</code> is integer-based. You use column numbers and row numbers to get rows or columns at particular positions in the data frame.</li><li><code>iloc</code> will return an <code>IndexError</code> if the requested indexer is out-of-bounds.</li></ul></li><li>Use <code>loc</code> and <code>iloc</code> to slice data frames and assign the values to a new data frame.<ul><li><code>z = df.iloc[0:2, 0:3]</code></li></ul></li></ul><h4 id="Working-with-and-Saving-data-with-Pandas"><a href="#Working-with-and-Saving-data-with-Pandas" class="headerlink" title="Working with and Saving data with Pandas"></a>Working with and Saving data with Pandas</h4><ul><li><code>df[&#39;ColumnA&#39;].unique()</code>，<code>`df1=df[df[&#39;ColumnA&#39;]&gt;=1980]</code></li><li>Save as CSV：<code>df1.to_csv(&#39;new.csv&#39;)</code></li></ul><h3 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h3><h4 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import the libraries</span></span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Plotting functions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Plotvec1</span>(<span class="params">u, z, v</span>):    </span><br><span class="line">    ax = plt.axes()</span><br><span class="line">    ax.arrow(<span class="number">0</span>, <span class="number">0</span>, *u, head_width=<span class="number">0.05</span>, color=<span class="string">&#x27;r&#x27;</span>, head_length=<span class="number">0.1</span>)</span><br><span class="line">    plt.text(*(u + <span class="number">0.1</span>), <span class="string">&#x27;u&#x27;</span>)    </span><br><span class="line">    ax.arrow(<span class="number">0</span>, <span class="number">0</span>, *v, head_width=<span class="number">0.05</span>, color=<span class="string">&#x27;b&#x27;</span>, head_length=<span class="number">0.1</span>)</span><br><span class="line">    plt.text(*(v + <span class="number">0.1</span>), <span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    ax.arrow(<span class="number">0</span>, <span class="number">0</span>, *z, head_width=<span class="number">0.05</span>, head_length=<span class="number">0.1</span>)</span><br><span class="line">    plt.text(*(z + <span class="number">0.1</span>), <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">    plt.ylim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    plt.xlim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Plotvec2</span>(<span class="params">a,b</span>):</span><br><span class="line">    ax = plt.axes()</span><br><span class="line">    ax.arrow(<span class="number">0</span>, <span class="number">0</span>, *a, head_width=<span class="number">0.05</span>, color =<span class="string">&#x27;r&#x27;</span>, head_length=<span class="number">0.1</span>)</span><br><span class="line">    plt.text(*(a + <span class="number">0.1</span>), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    ax.arrow(<span class="number">0</span>, <span class="number">0</span>, *b, head_width=<span class="number">0.05</span>, color =<span class="string">&#x27;b&#x27;</span>, head_length=<span class="number">0.1</span>)</span><br><span class="line">    plt.text(*(b + <span class="number">0.1</span>), <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    plt.ylim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    plt.xlim(-<span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="One-Dimensional-Numpy"><a href="#One-Dimensional-Numpy" class="headerlink" title="One Dimensional Numpy"></a>One Dimensional Numpy</h4><ul><li>A numpy array is similar to a list. It’s usually fixed in size and each element is of the same type.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">a.size <span class="comment"># Get the size of numpy array  5</span></span><br><span class="line">a.ndim <span class="comment"># Get the number of dimensions of numpy array  1</span></span><br><span class="line">a.shape <span class="comment"># Get the shape/size of numpy array  (5,)</span></span><br><span class="line">a.dtype <span class="comment"># Check the type of the values stored in numpy array</span></span><br><span class="line">a[<span class="number">0</span>]=<span class="number">20</span> <span class="comment"># Assign value  [20,1,2,3,4]</span></span><br><span class="line">b=a[<span class="number">3</span>:<span class="number">5</span>] <span class="comment"># Slicing  [3,4]</span></span><br><span class="line">mean = a.mean() <span class="comment"># Get the mean of numpy array</span></span><br><span class="line">standard_deviation=a.std() <span class="comment"># Get the standard deviation of numpy array</span></span><br><span class="line">max_b = b.<span class="built_in">max</span>()</span><br><span class="line">min_b = b.<span class="built_in">min</span>()</span><br></pre></td></tr></table></figure><ul><li>Numpy Array Operations</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">u = np.array([<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">v = np.array([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">z = u + v <span class="comment"># Numpy Array Addition</span></span><br><span class="line">Plotvec1(u, z, v) <span class="comment"># Plot numpy arrays (equivalent to vector addition)</span></span><br><span class="line">z = <span class="number">2</span> * u <span class="comment"># Numpy Array Multiplication</span></span><br><span class="line">z = u * v <span class="comment"># Calculate the production of two numpy arrays</span></span><br><span class="line">np.dot(u, v) <span class="comment"># Calculate the dot product  1*0+0*1</span></span><br><span class="line">u + <span class="number">1</span> <span class="comment"># Add the constant to array  [2,1]</span></span><br><span class="line">x = np.array([<span class="number">0</span>, np.pi/<span class="number">2</span> , np.pi]) <span class="comment"># Create the numpy array in radians</span></span><br><span class="line">y = np.sin(x) <span class="comment"># Calculate the sin of each elements</span></span><br></pre></td></tr></table></figure><ul><li>A useful function for plotting mathematical functions is <code>linspace</code></li><li>Linspace returns evenly spaced numbers over a specified interval.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, num=<span class="number">100</span>) <span class="comment"># Makeup a numpy array within [0, 2π] and 100 elements </span></span><br><span class="line">y = np.sin(x) <span class="comment"># Calculate the sine of x list</span></span><br><span class="line">plt.plot(x, y) <span class="comment"># Plot the result</span></span><br></pre></td></tr></table></figure><h4 id="Two-Dimensional-Numpy"><a href="#Two-Dimensional-Numpy" class="headerlink" title="Two Dimensional Numpy"></a>Two Dimensional Numpy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=[[<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>],[<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>],[<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>]]</span><br><span class="line">A = np.array(a) <span class="comment"># Convert list to Numpy Array，Every element is the same type</span></span><br><span class="line">A.ndim <span class="comment"># # Show the numpy array dimensions  2</span></span><br><span class="line">A.shape <span class="comment"># A.shape  (3,3)</span></span><br><span class="line">A.size <span class="comment"># # Show the numpy array size  9</span></span><br><span class="line">A[<span class="number">1</span>, <span class="number">2</span>] <span class="comment"># Access the element on the second row and third column  23</span></span><br><span class="line">A[<span class="number">1</span>][<span class="number">2</span>] <span class="comment"># Access the element on the second row and third column</span></span><br><span class="line">A[<span class="number">0</span>][<span class="number">0</span>:<span class="number">2</span>] <span class="comment"># Access the element on the first row and first and second columns  array([11, 12])</span></span><br><span class="line">A[<span class="number">0</span>:<span class="number">2</span>, <span class="number">2</span>] <span class="comment"># Access the element on the first and second rows third column  array([13, 23])</span></span><br><span class="line">Z = X + Y <span class="comment"># Add X and Y</span></span><br><span class="line">Z = <span class="number">2</span> * Y <span class="comment"># Multiply Y with 2</span></span><br><span class="line">Z = X * Y <span class="comment"># Multiply X with Y</span></span><br><span class="line">Z = np.dot(A,B) <span class="comment"># Calculate the dot product</span></span><br><span class="line">np.sin(Z) <span class="comment"># Calculate the sine of Z</span></span><br><span class="line">C.T <span class="comment"># Get the transposed of C</span></span><br></pre></td></tr></table></figure><h3 id="Simple-APIs"><a href="#Simple-APIs" class="headerlink" title="Simple APIs"></a>Simple APIs</h3><h4 id="Create-and-Use-APIs-in-Python"><a href="#Create-and-Use-APIs-in-Python" class="headerlink" title="Create and Use APIs in Python"></a>Create and Use APIs in Python</h4><ul><li><p>An API lets two pieces of software talk to each other. </p></li><li><p>An essential type of API is a REST API (<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer APIs) that allows you to access resources via the internet. </p></li><li><p>Preparation</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">!pip install nba_api</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">one_dict</span>(<span class="params">list_dict</span>):</span><br><span class="line">    keys=list_dict[<span class="number">0</span>].keys()</span><br><span class="line">    out_dict=&#123;key:[] <span class="keyword">for</span> key <span class="keyword">in</span> keys&#125;</span><br><span class="line">    <span class="keyword">for</span> dict_ <span class="keyword">in</span> list_dict:</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> dict_.items():</span><br><span class="line">            out_dict[key].append(value)</span><br><span class="line">    <span class="keyword">return</span> out_dict</span><br></pre></td></tr></table></figure></li><li><p>Pandas API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">dict_=&#123;<span class="string">&#x27;a&#x27;</span>:[<span class="number">11</span>,<span class="number">21</span>,<span class="number">31</span>],<span class="string">&#x27;b&#x27;</span>:[<span class="number">12</span>,<span class="number">22</span>,<span class="number">32</span>]&#125; <span class="comment"># create a dictionary</span></span><br><span class="line">df=pd.DataFrame(dict_) <span class="comment">#use the dataframe to communicate with the pandas API</span></span><br><span class="line">df.head()</span><br><span class="line">df.mean()</span><br></pre></td></tr></table></figure></li><li><p>REST APIs</p><ul><li>Use the <a href="https://pypi.org/project/nba-api/">NBA API</a> to determine how well the Golden State Warriors performed against the Toronto Raptors.</li><li>Use the API do the determined number of points the Golden State Warriors won or lost by for each game.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nba_api.stats.static <span class="keyword">import</span> teams <span class="comment">#https://pypi.org/project/nba-api/</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">nba_teams = teams.get_teams() <span class="comment">#returns a list of dictionaries </span></span><br><span class="line"><span class="comment">#The dictionary key id has a unique identifier for each team as a value</span></span><br><span class="line">nba_teams[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">dict_nba_team=one_dict(nba_teams) <span class="comment">#create a dictionary</span></span><br><span class="line">df_teams=pd.DataFrame(dict_nba_team)</span><br><span class="line">df_teams.head()</span><br><span class="line">df_warriors=df_teams[df_teams[<span class="string">&#x27;nickname&#x27;</span>]==<span class="string">&#x27;Warriors&#x27;</span>]</span><br><span class="line">id_warriors=df_warriors[[<span class="string">&#x27;id&#x27;</span>]].values[<span class="number">0</span>][<span class="number">0</span>] <span class="comment">#we now have an integer that can be used to request the Warriors information</span></span><br><span class="line"><span class="keyword">from</span> nba_api.stats.endpoints <span class="keyword">import</span> leaguegamefinder</span><br><span class="line">wget https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%<span class="number">205</span>/Labs/Golden_State.pkl</span><br><span class="line">file_name = <span class="string">&quot;Golden_State.pkl&quot;</span></span><br><span class="line">games = pd.read_pickle(file_name)</span><br><span class="line">games.head()</span><br><span class="line">games_home=games [games [<span class="string">&#x27;MATCHUP&#x27;</span>]==<span class="string">&#x27;GSW vs. TOR&#x27;</span>] <span class="comment">#create two dataframes</span></span><br><span class="line">games_away=games [games [<span class="string">&#x27;MATCHUP&#x27;</span>]==<span class="string">&#x27;GSW @ TOR&#x27;</span>]   <span class="comment">#Home&amp;Away</span></span><br><span class="line">games_home.mean()[<span class="string">&#x27;PLUS_MINUS&#x27;</span>]</span><br><span class="line">games_away.mean()[<span class="string">&#x27;PLUS_MINUS&#x27;</span>]</span><br><span class="line">fig, ax = plt.subplots()  <span class="comment">#plot out</span></span><br><span class="line">games_away.plot(x=<span class="string">&#x27;GAME_DATE&#x27;</span>,y=<span class="string">&#x27;PLUS_MINUS&#x27;</span>, ax=ax)</span><br><span class="line">games_home.plot(x=<span class="string">&#x27;GAME_DATE&#x27;</span>,y=<span class="string">&#x27;PLUS_MINUS&#x27;</span>, ax=ax)</span><br><span class="line">ax.legend([<span class="string">&quot;away&quot;</span>, <span class="string">&quot;home&quot;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul><h4 id="Create-Speech-to-Text-Translator"><a href="#Create-Speech-to-Text-Translator" class="headerlink" title="Create Speech to Text Translator"></a>Create Speech to Text Translator</h4><ul><li><p>Convert an audio file of an English speaker to text using a Speech to Text API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">!pip install PyJWT==<span class="number">1.7</span><span class="number">.1</span> ibm_watson wget</span><br><span class="line"><span class="keyword">from</span> ibm_watson <span class="keyword">import</span> SpeechToTextV1 </span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> ibm_cloud_sdk_core.authenticators <span class="keyword">import</span> IAMAuthenticator</span><br><span class="line">url_s2t = <span class="string">&quot;&quot;</span> <span class="comment">#URL</span></span><br><span class="line">iam_apikey_s2t = <span class="string">&quot;&quot;</span> <span class="comment">#API keys</span></span><br><span class="line">authenticator = IAMAuthenticator(iam_apikey_s2t) <span class="comment"># create a Speech To Text Adapter object</span></span><br><span class="line">s2t = SpeechToTextV1(authenticator=authenticator)</span><br><span class="line">s2t.set_service_url(url_s2t)</span><br><span class="line">!wget -O PolynomialRegressionandPipelines.mp3  https://cf-courses-data.s3.us.cloud-<span class="built_in">object</span>-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%<span class="number">205</span>/data/PolynomialRegressionandPipelines.mp3</span><br><span class="line">filename=<span class="string">&#x27;PolynomialRegressionandPipelines.mp3&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, mode=<span class="string">&quot;rb&quot;</span>)  <span class="keyword">as</span> wav:</span><br><span class="line">    response = s2t.recognize(audio=wav, content_type=<span class="string">&#x27;audio/mp3&#x27;</span>)</span><br><span class="line">response.result</span><br><span class="line"><span class="keyword">from</span> pandas.io.json <span class="keyword">import</span> json_normalize</span><br><span class="line">json_normalize(response.result[<span class="string">&#x27;results&#x27;</span>],<span class="string">&quot;alternatives&quot;</span>)</span><br><span class="line">response</span><br><span class="line">recognized_text=response.result[<span class="string">&#x27;results&#x27;</span>][<span class="number">0</span>][<span class="string">&quot;alternatives&quot;</span>][<span class="number">0</span>][<span class="string">&quot;transcript&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Translate the English version to a Spanish version using a Language Translator API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ibm_watson <span class="keyword">import</span> LanguageTranslatorV3</span><br><span class="line">url_lt=<span class="string">&#x27;https://gateway.watsonplatform.net/language-translator/api&#x27;</span></span><br><span class="line">apikey_lt=<span class="string">&#x27;&#x27;</span></span><br><span class="line">version_lt=<span class="string">&#x27;2018-05-01&#x27;</span></span><br><span class="line">authenticator = IAMAuthenticator(apikey_lt)</span><br><span class="line">language_translator = LanguageTranslatorV3(version=version_lt,authenticator=authenticator)</span><br><span class="line">language_translator.set_service_url(url_lt)</span><br><span class="line">language_translator</span><br><span class="line"><span class="keyword">from</span> pandas.io.json <span class="keyword">import</span> json_normalize</span><br><span class="line">json_normalize(language_translator.list_identifiable_languages().get_result(), <span class="string">&quot;languages&quot;</span>)</span><br><span class="line">translation_response = language_translator.translate(\</span><br><span class="line">    text=recognized_text, model_id=<span class="string">&#x27;en-es&#x27;</span>)</span><br><span class="line">translation_response</span><br><span class="line">translation=translation_response.get_result()</span><br><span class="line">translation</span><br><span class="line">spanish_translation =translation[<span class="string">&#x27;translations&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;translation&#x27;</span>]</span><br><span class="line">spanish_translation </span><br><span class="line">translation_new = language_translator.translate(text=spanish_translation ,model_id=<span class="string">&#x27;es-en&#x27;</span>).get_result()</span><br><span class="line">translation_eng=translation_new[<span class="string">&#x27;translations&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;translation&#x27;</span>]</span><br><span class="line">translation_eng</span><br></pre></td></tr></table></figure></li></ul><h4 id="HTTP-and-Requests"><a href="#HTTP-and-Requests" class="headerlink" title="HTTP and Requests"></a>HTTP and Requests</h4><ul><li><p>When the client use a web page, browser sends an HTTP request to the server where the page is hosted. The server tries to find the desired resource by default <code>index.html</code>. </p></li><li><p>If request is successful, the server will send the object to the client in an <code>HTTP</code> response, this includes information like the type of the resource, the length of the resource, and other information.</p></li><li><p>The <code>HTTP</code> protocol allows you to send and receive information through the web including webpages, images, and other web resources.</p></li><li><p>Uniform resource locator (URL) is the most popular way to find resources on the web.</p></li><li><p>Request：<code>GET</code>，<code>POST</code>，<code>PUT</code>，<code>DELETE</code> method</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> IFrame</span><br><span class="line">url=<span class="string">&#x27;https://www.ibm.com/&#x27;</span></span><br><span class="line">r=requests.get(url)</span><br><span class="line">r.status_code <span class="comment">#view the status code</span></span><br><span class="line"><span class="built_in">print</span>(r.request.headers)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;request body:&quot;</span>, r.request.body)</span><br><span class="line">header=r.headers <span class="comment">#view the HTTP response header</span></span><br><span class="line"><span class="built_in">print</span>(r.headers)</span><br><span class="line">header[<span class="string">&#x27;date&#x27;</span>]</span><br><span class="line">header[<span class="string">&#x27;Content-Type&#x27;</span>] <span class="comment">#Content-Type indicates the type of data</span></span><br><span class="line">r.encoding <span class="comment">#check the encoding</span></span><br><span class="line">r.text[<span class="number">0</span>:<span class="number">100</span>]</span><br><span class="line"><span class="comment"># Use single quotation marks for defining string</span></span><br><span class="line">url=<span class="string">&#x27;https://gitlab.com/ibm/skills-network/courses/placeholder101/-/raw/master/labs/module%201/images/IDSNlogo.png&#x27;</span></span><br><span class="line">r=requests.get(url) <span class="comment">#make a get request</span></span><br><span class="line"><span class="built_in">print</span>(r.headers)</span><br><span class="line">r.headers[<span class="string">&#x27;Content-Type&#x27;</span>]</span><br><span class="line"><span class="comment"># An image is a response object that contains the image as a bytes-like object</span></span><br><span class="line">path=os.path.join(os.getcwd(),<span class="string">&#x27;image.png&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br><span class="line">Image.<span class="built_in">open</span>(path)  </span><br></pre></td></tr></table></figure></li><li><p>Write <code>wget</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!wget -O /resources/data/Example1.txt https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%205/data/Example1.txt</span><br></pre></td></tr></table></figure><p>Is Equal To:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url=<span class="string">&#x27;https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%205/data/Example1.txt&#x27;</span></span><br><span class="line">path=os.path.join(os.getcwd(),<span class="string">&#x27;example1.txt&#x27;</span>)</span><br><span class="line">r=requests.get(url)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure></li><li><p>Get Request with URL Parameters</p><ul><li>We append <code>/get</code> in the Route indicate we would like to preform a <code>GET</code> request</li><li><code>url_get=&#39;http://httpbin.org/get&#39;</code></li><li>A <a href="https://en.wikipedia.org/wiki/Query_string">query string</a> is a part of a uniform resource locator (URL), this sends other information to the web server.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Joseph&quot;</span>,<span class="string">&quot;ID&quot;</span>:<span class="string">&quot;123&quot;</span>&#125;</span><br><span class="line">r=requests.get(url_get,params=payload)</span><br><span class="line">r.url</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;request body:&quot;</span>, r.request.body)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">r.headers[<span class="string">&#x27;Content-Type&#x27;</span>]</span><br><span class="line">r.json()</span><br><span class="line">r.json()[<span class="string">&#x27;args&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>POST</code> is used to send data to a server, but the <code>POST</code> request sends the data in a request body.</p></li><li><p><code>url_post=&#39;http://httpbin.org/post&#39;</code></p></li><li><p>This endpoint will expect data as a file or as a form, a from is convenient way to configure an HTTP request to send data to a server.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># To make a POST request we use the post() function, the variable payload is passed to the parameter data </span></span><br><span class="line">r_post=requests.post(url_post,data=payload) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;POST request URL:&quot;</span>,r_post.url ) <span class="comment">#the POST request has no name or value pairs</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;GET request URL:&quot;</span>,r.url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;POST request body:&quot;</span>,r_post.request.body) <span class="comment">#compare the POST and GET </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;GET request body:&quot;</span>,r.request.body)</span><br><span class="line">r_post.json()[<span class="string">&#x27;form&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Final-Project"><a href="#Final-Project" class="headerlink" title="Final Project"></a>Final Project</h3><h4 id="Analyzing-US-Economic-Data-and-Building-a-Dashboard"><a href="#Analyzing-US-Economic-Data-and-Building-a-Dashboard" class="headerlink" title="Analyzing US Economic Data and Building a Dashboard"></a>Analyzing US Economic Data and Building a Dashboard</h4><ul><li><p><a href="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/FinalModule_Coursera/PY0101EN_Coursera_FinalAssignment.ipynb">A template notebook is provided in the lab</a></p></li><li><p>Examine how changes in GDP impact the unemployment rate.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> bokeh.plotting <span class="keyword">import</span> figure, output_file, show,output_notebook</span><br><span class="line">output_notebook()</span><br><span class="line"><span class="comment"># Define the function make_dashboard</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_dashboard</span>(<span class="params">x, gdp_change, unemployment, title, file_name</span>):</span><br><span class="line">    output_file(file_name)</span><br><span class="line">    p = figure(title=title, x_axis_label=<span class="string">&#x27;year&#x27;</span>, y_axis_label=<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">    p.line(x.squeeze(), gdp_change.squeeze(), color=<span class="string">&quot;firebrick&quot;</span>, line_width=<span class="number">4</span>, legend=<span class="string">&quot;% GDP change&quot;</span>)</span><br><span class="line">    p.line(x.squeeze(), unemployment.squeeze(), line_width=<span class="number">4</span>, legend=<span class="string">&quot;% unemployed&quot;</span>)</span><br><span class="line">    show(p)</span><br><span class="line"><span class="comment"># The dictionary links contain the CSV files with all the data.    </span></span><br><span class="line">links=&#123;<span class="string">&#x27;GDP&#x27;</span>:<span class="string">&#x27;https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/clean_gdp.csv&#x27;</span>,\</span><br><span class="line">       <span class="string">&#x27;unemployment&#x27;</span>:<span class="string">&#x27;https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/clean_unemployment.csv&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>Question 1: Create a dataframe that contains the GDP data and display the first five rows of the dataframe.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">csv_path=links[<span class="string">&#x27;GDP&#x27;</span>]  <span class="comment"># links[&quot;GDP&quot;] contains the path or name of the file.</span></span><br><span class="line">df=pd.read_csv(csv_path)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure></li><li><p>Question 2: Create a dataframe that contains the unemployment data. Display the first five rows of the dataframe.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">csv_path=links[<span class="string">&#x27;unemployment&#x27;</span>]</span><br><span class="line">df=pd.read_csv(csv_path)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure></li><li><p>Question 3: Display a dataframe where unemployment was greater than 8.5%.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">csv_path=links[<span class="string">&#x27;unemployment&#x27;</span>]</span><br><span class="line">df=pd.read_csv(csv_path)</span><br><span class="line">df1=df[df[<span class="string">&#x27;unemployment&#x27;</span>]&gt;<span class="number">8.5</span>]</span><br><span class="line">df1</span><br></pre></td></tr></table></figure></li><li><p>Question 4: Use the function make_dashboard to make a dashboard</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create your dataframe with column date</span></span><br><span class="line">csv_path=links[<span class="string">&#x27;GDP&#x27;</span>]</span><br><span class="line">gdp_dataframe=pd.read_csv(csv_path)</span><br><span class="line">x = pd.DataFrame(gdp_dataframe, columns=[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line">x.head()</span><br><span class="line"><span class="comment"># Create your dataframe with column change-current</span></span><br><span class="line">gdp_change = pd.DataFrame(gdp_dataframe, columns=[<span class="string">&#x27;change-current&#x27;</span>])</span><br><span class="line">gdp_change.head()</span><br><span class="line"><span class="comment"># Create your dataframe with column unemployment</span></span><br><span class="line">csv_path=links[<span class="string">&#x27;unemployment&#x27;</span>]</span><br><span class="line">unemploy_dataframe= pd.read_csv(csv_path)</span><br><span class="line">unemployment = pd.DataFrame(unemploy_dataframe, columns=[<span class="string">&#x27;unemployment&#x27;</span>])</span><br><span class="line">unemployment.head()</span><br><span class="line"><span class="comment"># Give your dashboard a string title</span></span><br><span class="line">title = <span class="string">&quot;Unemployement stats &amp; GDP&quot;</span></span><br><span class="line">file_name = <span class="string">&quot;index.html&quot;</span></span><br><span class="line"><span class="comment"># Fill up the parameters in the following function:</span></span><br><span class="line">make_dashboard(x=x, gdp_change=gdp_change, unemployment=unemployment, title=title, file_name=file_name)</span><br></pre></td></tr></table></figure></li></ul><h4 id="My-Work"><a href="#My-Work" class="headerlink" title="My Work"></a>My Work</h4><ul><li><p><a href="https://jp-tok.dataplatform.cloud.ibm.com/analytics/notebooks/v2/86e30bef-41d8-4b38-a8f3-b0be3f7ca27d/view?access_token=7c7aa7dd80dcca2762f88c50a413cdaed865b0d218dded9d0afcf730680a7cf1">Final Assignment Notebook Url</a> (May not be accessible from Mainland China)</p><p><img src="https://blog.zhuangzhihao.top/img/Python-for-DS&amp;AI.png" alt="Unemployment stats &amp; GDP"></p></li></ul><h3 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a>Assignments</h3><ul><li>Visit my <a href="https://github.com/Bezhuang/LearnCS/tree/main/IBM%20Professional%20Certificates/Python%20for%20Data%20Science%20and%20AI">Github Repository</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Data Visualization and Dashboards with Excel and Cognos</title>
      <link href="/Data-Visualization-and-Dashboards/"/>
      <url>/Data-Visualization-and-Dashboards/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“A picture is worth 1,000 words”. This Course provided by IBM endows me with the ability to effectively create data visualizations, such as charts or graphs, with Excel and IBM Cognos Analytics, without having to write any code. It also elevates my confidence level in creating intermediate level data visualizations after numerous hands-on labs and the final project. The following are the notes I took during this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Coursera-DA&amp;Visualization-foundation.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/pdf/Coursera-Data-Visualization&amp;Dashboards.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Introduction-to-Charts"><a href="#Introduction-to-Charts" class="headerlink" title="Introduction to Charts"></a>Introduction to Charts</h3><ul><li>Line Charts compare different but related data sets, they can display trends and show how data values change in relation to a continuous variable (e.g. time)</li><li>Pie Charts can show the breakdown of an entity into its sub-parts and the proportion of the sub-parts in relation to one another. Each portion represents a static value or category.</li><li>Bar Charts: Stacked bar charts</li><li>Column Charts can be used quite effectively to show change over time and to compare values side-by-side.</li><li>Treemaps are useful for displaying complex hierarchies using nested rectangles.</li><li>Funnel Charts can display a pipeline or different stages of a continuous process.</li><li>In Scatter Chart, the circle colors represent the categories of data and the circle sizes are indicative of the volume of data. A scatter chart can be great for revealing trends, clusters, patterns, and correlations between data points. </li><li>Bubble Charts. are useful for comparing a handful of categories to one another in terms of relative significance.</li><li><p>Sparklines do not include an axis or coordinates, yet they display trends simply and effectively. These are great for showing the general trend of a variation. </p></li><li><p>A pivot chart is used to show the data series, categories, and chart axes the same way a basic chart is used.</p><ul><li>Area charts</li><li>Column charts</li></ul></li><li>Use a pivot table or pivot chart to filter data and to expand and collapse data levels.</li></ul><h3 id="Advanced-Charts"><a href="#Advanced-Charts" class="headerlink" title="Advanced Charts"></a>Advanced Charts</h3><ul><li>A tree map chart is used to compare values across hierarchy levels and show proportions within hierarchical levels as rectangles. </li><li>Tree maps are a good way of displaying lots of data in one graphical asset because they use the color and closeness of proportional shapes within the chart to represent hierarchical data categories.</li><li>A scatter chart is a type of graph used to compare two sets of numerical data values and show relationships between those sets of numerical values.  </li><li>A scatter chart combines the two sets of values on the x and y axes into single points of data and then displays them in clusters in the chart.</li><li>A histogram is a graph that shows the distribution of the data grouped into bins. </li><li>A bar chart is used to compare data while a histogram is used to display distribution of data.</li><li>A filled map chart is a type of chart used to compare values and show categories across geographical regions.</li><li>Sparklines are mini charts placed inside single cells to represent a selected range of data. They are typically used to show data trends, such as seasonal increase-decrease, economic cycles, and share, rate, or price fluctuations.</li><li>A sparkline provides the greatest impact when it is placed close to the data it represents.</li></ul><h3 id="Creating-Dashboards-Using-Spreadsheets"><a href="#Creating-Dashboards-Using-Spreadsheets" class="headerlink" title="Creating Dashboards Using Spreadsheets"></a>Creating Dashboards Using Spreadsheets</h3><ul><li>The term <strong>dashboard</strong> comes from the automotive industry where car designers have put the most important gauges and other display information in a handy graphical display that is easy for the driver to view and understand.</li><li>Data Analysis dashboards provide key information in one place</li><li>Dashboards can provide user interaction capabilities like filters, slicers, timelines and map charts</li><li>Dashboard users get consolidated and visualized insight into their most important business data and KPIs. Dashboard users get a self-service BI interface</li><li><p>Dashboards are typically created in a data analysis application by using multiple pivot tables and charts, visualizations and filtering tools.</p></li><li><p>Advanced data analysis and visualization apps: Bokeh, Dash in Python, R-Studio’s Shiny, Tableau, IBM Cognos Analytics</p></li><li>Expert Viewpoints Advice: “Less is more”, make visualizations more focused to highlight just one or two important points.</li></ul><h3 id="Creating-Dashboards-Using-IBM-Cognos-Analytics"><a href="#Creating-Dashboards-Using-IBM-Cognos-Analytics" class="headerlink" title="Creating Dashboards Using IBM Cognos Analytics"></a>Creating Dashboards Using IBM Cognos Analytics</h3><ul><li>Cognos Analytics is an AI-fueled business intelligence platform that supports the entire analytics cycle, from discovery to operationalization.</li><li>Use Cognos Analytics to create a simple dashboard.</li><li>Creating calculations and Leveraging navigation paths.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Excel Basics for Data Analysis</title>
      <link href="/Excel-Basics-%20for-Data-Analysis/"/>
      <url>/Excel-Basics-%20for-Data-Analysis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Excel is an essential tool for working with data - whether for business, marketing, data analytics, or research. Throughout this course provided by IBM, I’ve gained valuable experience in cleansing and wrangling data using functions and then analyze data using techniques like filtering, sorting and creating pivot tables. The following are the notes I took during this course. </p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Coursera-Excel-Basics.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Introduction-to-Spreadsheets-for-Data-Analysis"><a href="#Introduction-to-Spreadsheets-for-Data-Analysis" class="headerlink" title="Introduction to Spreadsheets for Data Analysis"></a>Introduction to Spreadsheets for Data Analysis</h3><ul><li>There are several spreadsheet applications available in the marketplace, the most commonly used and fully-featured spreadsheet application is Microsoft Excel. </li><li>Spreadsheets provide several advantages over manual calculation methods and they help you keep data organized and easily accessible. </li><li>As a Data Analyst, you can use spreadsheets as a tool for your data analysis tasks. </li><li>There are several elements that make up a workbook in a spreadsheet application. </li><li>The ribbon provides access to all the features and tools required to view, enter, edit, manipulate, clean, and analyze data in Excel. </li><li>There are several ways to navigate around a worksheet and workbook in Excel. </li><li><p>How a Data Analyst Uses Spreadsheets: Collecting Data -&gt; Cleaning Data -&gt; Analyzing Data -&gt; Visualizing Data</p></li><li><p>Workbooks are represented as a <code>.XLSX</code> file (Includes Data, Calculations, Functions and other Underlying Elements)</p></li><li>Cells contains Text, Numbers, Formulas or Calculation Results</li><li>Cells are organized in Rows and Columns</li></ul><h3 id="Excel-Keyboard-Shortcuts"><a href="#Excel-Keyboard-Shortcuts" class="headerlink" title="Excel Keyboard Shortcuts"></a>Excel Keyboard Shortcuts</h3><div class="table-container"><table><thead><tr><th>Task</th><th>Shortcut</th></tr></thead><tbody><tr><td>Close a workbook</td><td>Ctrl+W</td></tr><tr><td>Open a workbook</td><td>Ctrl+O</td></tr><tr><td>Save a workbook</td><td>Ctrl+S</td></tr><tr><td>Copy</td><td>Ctrl+C</td></tr><tr><td>Cut</td><td>Ctrl+X</td></tr><tr><td>Paste</td><td>Ctrl+V</td></tr><tr><td>Undo</td><td>Ctrl+Z</td></tr><tr><td>Remove cell contents</td><td>Delete</td></tr><tr><td>Bold</td><td>Ctrl+B</td></tr><tr><td>Open context menu</td><td>Shift+F10</td></tr><tr><td>Expand or collapse the ribbon</td><td>Ctrl+F1</td></tr><tr><td>Move up one cell in the worksheet</td><td>Up arrow key</td></tr><tr><td>Move down one cell in the worksheet</td><td>Down arrow key</td></tr><tr><td>Move one cell left in the worksheet</td><td>Left arrow key</td></tr><tr><td>Move one cell right in the worksheet</td><td>Right arrow key</td></tr><tr><td>Move to the edge of the current data region in the worksheet (e.g. end of column)</td><td>Ctrl+Arrow key (e.g. Ctrl+Down arrow)</td></tr><tr><td>Move to the last cell on a worksheet</td><td>Ctrl+End</td></tr><tr><td>Move to the beginning of a worksheet</td><td>Ctrl+Home</td></tr><tr><td>Extend the selection of cells to the last used cell on a worksheet (lower right corner)</td><td>Ctrl+Shift+End</td></tr><tr><td>Move to the cell in the upper-left corner of the window (when Scroll Lock is On)</td><td>Home+Scroll Lock</td></tr><tr><td>Move one screen down in a worksheet</td><td>Page Down</td></tr><tr><td>Move one screen up in a worksheet</td><td>Page Up</td></tr><tr><td>Move one screen to the right in a worksheet</td><td>Alt+Page Down</td></tr><tr><td>Move one screen to the left in a worksheet</td><td>Alt+Page Up</td></tr><tr><td>Move to the next sheet in a workbook</td><td>Ctrl+Page Down</td></tr><tr><td>Move to the previous sheet in a workbook</td><td>Ctrl+Page Up</td></tr><tr><td>Edit the active cell and put the cursor at the end of the cell’s contents</td><td>F2</td></tr><tr><td>Enter the current time</td><td>Ctrl+Shift+colon (:)</td></tr><tr><td>Enter the current date</td><td>Ctrl+semi-colon (;)</td></tr></tbody></table></div><h3 id="Getting-Started-Using-Spreadsheets"><a href="#Getting-Started-Using-Spreadsheets" class="headerlink" title="Getting Started Using Spreadsheets"></a>Getting Started Using Spreadsheets</h3><ul><li>There are several features to modify views in Excel, and it is very straightforward to enter and edit data in a spreadsheet. </li><li>You can move or copy data within a worksheet or between worksheets, and you can use AutoFill to automatically enter data that is in a series or that fits a pattern. </li><li>You can format both cells and data in Excel. </li><li>A formula is made up of several component parts, and formulas can perform calculations using numbers directly or by using references to data in the worksheet. </li><li>Basic formulas: <code>=SUM()</code>, <code>=AVERAGE(</code>), <code>=MIN()</code>, <code>=MAX()</code>, <code>=COUNT()</code>, <code>=MEDIUM()</code></li><li>More functions<ul><li>Financial : ACCRINT, INTRATE</li><li>Logical : AND, IF, OR, NOT</li><li>Text : CONCAT, FIND, SEARCH</li><li>Date &amp; Time : NETWORKDAYS, WEEKDAY</li><li>Lookup &amp; Reference : AREAS, SORTBY, VLOOKUP, HLOOKUP</li><li>Math &amp; Trig : POWER, SUMIF, SUMPRODUCT</li><li>Statistical : AVERAGE, COUNTIF, MAX, MEDIAN, MIN</li></ul></li><li>You can use the Fill Handle in Excel to quickly copy formulas to other cells. </li><li>There are several different categories of function you can use for different purposes, and you can search for a function by name, or by category. </li><li>You can reference cells in the worksheet in your formulas by using relative, absolute, or mixed references. </li><li>You can make a formula absolute by adding a dollar symbol ($) to a cell reference. </li><li>If you get errors in your formulas, you can use the error-checking capabilities of Excel to resolve them. </li></ul><h3 id="Basics-of-Data-Quality-and-Privacy"><a href="#Basics-of-Data-Quality-and-Privacy" class="headerlink" title="Basics of Data Quality and Privacy"></a>Basics of Data Quality and Privacy</h3><ul><li><p>The Five Traits of Data Quality: </p><ul><li>Accuracy </li><li>Completeness </li><li>Reliability </li><li>Relevance </li><li>Timeliness </li></ul></li><li><p>Importing Text: You can use the ‘Text Import Wizard’ to import data from other formats, such as plain text, or comma-separated value files. </p></li><li><p>The Three Fundamentals of Data Privacy: Confidentiality, Collection and Use, Compliance </p></li></ul><h3 id="Cleaning-Data"><a href="#Cleaning-Data" class="headerlink" title="Cleaning Data"></a>Cleaning Data</h3><ul><li><p>It’s important to remove any duplicated or inaccurate data, and it’s important to remove any empty rows in your dataset. </p></li><li><p>There are several other types of data inconsistency that you may need to resolve, in order to properly clean your data: </p><ol><li>Change the case of text</li><li>Fix date formatting errors</li><li>Trim whitespace from your data </li></ol></li><li><p>You can use the Flash Fill and Text to Columns features in Excel to manipulate and standardize your data, and functions can also be used to help manipulate and standardize your data. </p></li></ul><h3 id="Data-Analysis-Basics-Filtering-and-Sorting-Data"><a href="#Data-Analysis-Basics-Filtering-and-Sorting-Data" class="headerlink" title="Data Analysis Basics, Filtering and Sorting Data"></a>Data Analysis Basics, Filtering and Sorting Data</h3><ul><li>Before shaping your data, you need to visualize the final output, and ask yourself the following questions: <ul><li>How big is the dataset? </li><li>What type of filtering is required to find the necessary information? </li><li>How should the data be sorted? </li><li>What type of calculations are needed? </li></ul></li><li>There are several advantages to formatting your data as a table: <ul><li>Automatic calculations even when filtering </li><li>Column headings never disappear </li><li>Banded rows to make reading easier </li><li>Tables will automatically expand when adding new rows </li></ul></li><li>The most basic way of shaping your data is to sort and filter it:<ul><li>Sorting data helps you to organize it by a specified criteria, such as numerically, alphabetically, or chronologically. </li><li>Filtering our data makes it easier to control what data is displayed and what is hidden, based on filtered fields. </li></ul></li><li>Functions in Excel are arranged into multiple categories; including mathematical, statistical, logical, financial, and date and time-based. </li><li>Common functions for a data analyst include:  <code>IF</code>, <code>IFS</code>(alternative for nested IF), <code>COUNTIF</code>, <code>SUMIF</code>, <code>VLOOKUP</code>(vertical lookup), <code>HLOOKUP</code>(horizontal lookup), <code>XLOOKUP</code><ul><li><code>=IF(AD2&gt;300,&quot;Large&quot;,IF(AD2&gt;100,&quot;Medium&quot;,IF(AD2&gt;0,&quot;Small&quot;)))</code></li><li><code>=IFS(AD2&gt;300,&quot;Large&quot;,AD2&gt;100,&quot;Medium&quot;,AD2&gt;0,&quot;Small&quot;)</code></li><li><code>=COUNTIF(N2:N195,&quot;VISA&quot;)</code></li><li><code>=SUMIF(range, criteria, [sum range])</code></li><li><code>=SUMIFS ([sum range], range1, criteria1, range2, criteria2, ...)</code></li><li><code>=VLOOKUP (value, table, col_index, [range_lookup])</code></li><li><code>=HLOOKUP (value, table, row_index, [range_lookup])</code></li></ul></li></ul><h3 id="Using-Pivot-Tables"><a href="#Using-Pivot-Tables" class="headerlink" title="Using Pivot Tables"></a>Using Pivot Tables</h3><ul><li><p>Pivot Tables:</p><ul><li>To obtain usable and presentable insights into your data you need to use Pivot Tables. </li><li>Pivot tables provide a simple and quick way to summarize and analyze data, to observe trends and patterns in your data and to make comparisons of your data. </li><li>Pivot tables are dynamic, so as you change and add data to the original dataset on which the pivot table is based, the analysis and summary information changes too. </li><li>A Data Analyst can use pivot tables to draw useful and relevant conclusions about, and create insights into, an organization’s data in order to present those insights to interested parties within the company. </li></ul></li><li><p>Use this Pivot Table checklist to ensure your data is in a fit state to make a Pivot Table: </p><ul><li>Format your data as a table for best results.</li><li>Ensure column headings are correct, and there is only one header row, as these column headings become the field names in a Pivot Table.</li><li>Remove any blank rows and columns, and try to eliminate blank cells also.</li><li>Ensure value fields are formatted as numbers, and not text, and ensure date fields are formatted as dates, and not text.</li></ul></li><li><p>Arranging Pivot Tables with Filters and Recommended Tables:</p><ul><li>You use the Pivot Table Fields pane to add and arrange data fields in your pivot table. </li><li>Recommended Pivot Tables are a list of suggested different combinations of data that could be used when creating a Pivot Table, based on the data selected in the worksheet. </li></ul></li><li><p>Filters and Slicers:</p><ul><li>Slicers are on-screen graphical filter objects that enable you to filter your data using buttons, which makes it easier to perform quick filtering of your pivot table data. </li><li>Timelines are another type of filter tool that enable you to filter specifically on date-related data in your pivot table. This is a much quicker and more effective way of dynamically filtering by date, rather than having to create and adjust filters on your date columns. </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Data Analytics</title>
      <link href="/Introduction-to-Data-Analytics/"/>
      <url>/Introduction-to-Data-Analytics/</url>
      
        <content type="html"><![CDATA[<blockquote><p>The Introduction to Data Analytics course provided by IBM is the first in a series of courses designed to prepare me for a career as a junior data analyst. The course introduces me to the core concepts, processes, and tools I need to gain entry into data analytics. The following are the notes I took during this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Coursera-Intro-2-DA.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Modern-Data-Ecosystem"><a href="#Modern-Data-Ecosystem" class="headerlink" title="Modern Data Ecosystem"></a>Modern Data Ecosystem</h3><h4 id="Key-Players-in-the-Data-Ecosystem"><a href="#Key-Players-in-the-Data-Ecosystem" class="headerlink" title="Key Players in the Data Ecosystem"></a>Key Players in the Data Ecosystem</h4><ul><li>An Interconnected, Independent and Continually evolving network</li><li>Data Sources &amp; Users</li><li>Emerging technologies shaping the modern data ecosystem</li><li>Organizations are using data to uncover opportunities and applying that knowledge to differentiate themselves from their competition.</li><li>Data engineering converts raw data into usable data. Data analytics uses this data to generate insights. Data scientists use data analytics and data engineering to predict the future using data from the past.</li><li>Business analysts and business intelligence analysts use these insights and predictions to drive decisions that benefit and grow their business.</li></ul><h4 id="Defining-Data-Analysis"><a href="#Defining-Data-Analysis" class="headerlink" title="Defining Data Analysis"></a>Defining Data Analysis</h4><ul><li>Data analysis is the process of gathering, cleaning, analyzing and mining data, interpreting results, and reporting the findings.</li><li>Different Types of Data Analytics<ul><li>Descriptive Analytics</li><li>Diagnostic Analytics</li><li>Predictive Analytics</li><li>Prescriptive Analytics (self-driving)</li></ul></li><li>The Data Analysis Process<ul><li>Understanding the problem and desired result</li><li>Setting a clear metric</li><li>Gathering data</li><li>Cleaning data</li><li>Analyzing and Mining data</li><li>Interpreting results</li><li>Presenting your findings</li></ul></li><li>Data Analytics vs. Data Analysis</li></ul><h3 id="The-Data-Analyst-Role"><a href="#The-Data-Analyst-Role" class="headerlink" title="The Data Analyst Role"></a>The Data Analyst Role</h3><h4 id="Responsibilities-of-a-Data-Analyst"><a href="#Responsibilities-of-a-Data-Analyst" class="headerlink" title="Responsibilities of a Data Analyst"></a>Responsibilities of a Data Analyst</h4><ol><li>Acquiring data</li><li>Creating queries to extract required data</li><li>Filtering, cleaning, standardizing, and reorganizing data</li><li>Using statistical tools</li><li>Using statistical techniques</li><li>Analyzing patterns</li><li>Preparing reports and charts</li><li>Creating appropriate documentation</li></ol><h4 id="Skills-required-for-Data-Analyst"><a href="#Skills-required-for-Data-Analyst" class="headerlink" title="Skills required for Data Analyst"></a>Skills required for Data Analyst</h4><ul><li>Expertise in using spreadsheets (Excel)</li><li>Proficiency in statistical analysis and visualization tools and software (Power BI, SAS, Tableau)</li><li>Proficiency in programming languages (R, Python, C++, Java, MATLAB)</li><li>Good knowledge of SQL, and ability to work with data in relational and NoSQL databases</li><li>The ability to access and extract data from data repositories (Data marts, Data warehouses, Data lakes, Data pipelines)</li><li>Familiarity with Big Data processing tools (Hadoop, Hive, Spark)</li><li>Proficiency in Statistics</li><li>Analytical skills</li><li>Problem-solving skills</li><li>Probing skills</li><li>Data Visualization skills</li><li>Project Management skills</li><li>Collaboration and Communication ability</li><li>Curiosity and Intuition</li></ul><h3 id="Data-Analysts-Ecosystem"><a href="#Data-Analysts-Ecosystem" class="headerlink" title="Data Analysts Ecosystem"></a>Data Analysts Ecosystem</h3><ul><li>A data analyst ecosystem includes the infrastructure, software, tools, frameworks, and processes used to gather, clean, analyze, mine, and visualize data.</li></ul><h4 id="Types-of-Data"><a href="#Types-of-Data" class="headerlink" title="Types of Data"></a>Types of Data</h4><ul><li>Structured data is data that is well organized in formats that can be stored in databases and lends itself to standard data analysis methods and tools</li><li>Semi-structured data is data that is somewhat organized and relies on meta tags for grouping and hierarchy</li><li>Unstructured data is data that is not conventionally organized in the form of rows and columns in a particular format</li></ul><h4 id="Different-Types-of-File-Form"><a href="#Different-Types-of-File-Form" class="headerlink" title="Different Types of File Form"></a>Different Types of File Form</h4><ul><li>Delimited text files: <code>.CSV</code>, <code>.TSV</code></li><li>Microsoft Excel Open XML Spreadsheet: <code>.XLSX</code></li><li>Extensible Markup Language: <code>.XML</code></li><li>JavaScript Object Notation: <code>.JSON</code></li></ul><h4 id="Sources-of-Data"><a href="#Sources-of-Data" class="headerlink" title="Sources of Data"></a>Sources of Data</h4><ul><li>Relational Databases: Store structured data that can be leveraged for analysis</li><li>Flat Files: Store data in plain text format, each line or row is one record, delimited text</li><li>Spreadsheet files: Special type of flat files, organize data in a tabular format (<code>.XLSX</code>)</li><li>XML files: Contain data values that are identified or marked up using tags</li><li>APIs and Web Services</li><li>Web scraping: Extract relevant data from unstructured data</li><li>Data Streams and feeds (RSS feeds)</li></ul><h4 id="Languages-for-Data-Professionals"><a href="#Languages-for-Data-Professionals" class="headerlink" title="Languages for Data Professionals"></a>Languages for Data Professionals</h4><ul><li>Query languages are designed for accessing and manipulating data in a database (SQL)</li><li>Programming languages are designed for developing applications and controlling application behavior (Python, R, and Java)</li><li>Shell and Scripting languages (Unix/Linux Shell, and PowerShell) are ideal for repetitive and time-consuming operational tasks</li><li>SQL: Structured Query Language, Portable and Platform independent</li><li>Python libraries: Pandas, Numpy and Scipy, Beautifulsoup and Scrapy, Matplotlib and Seaborn, Opency</li><li>R libraries: Gggplot2 and Plotly</li></ul><h3 id="Data-Repositories-and-Big-Data-Platforms"><a href="#Data-Repositories-and-Big-Data-Platforms" class="headerlink" title="Data Repositories and Big Data Platforms"></a>Data Repositories and Big Data Platforms</h3><ul><li>A data repository is a general term used to refer to data that has been collected, organized, and isolated so that it can be used for business operations or mined for reporting and data analysis.</li><li>Data repositories help to isolate data and make reporting and analytics more efficient and credible while also serving as a data archive.</li></ul><h4 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h4><ul><li><p>Databases: Collection of data, or information, designed for the input, storage, search and retrieval, and modification of data</p></li><li><p>DBMS: A set of programs that creates and maintains the database</p></li><li><p>RDBMS: Well-defined structure and schema, Optimized for data operations and querying, Use SQL for querying data</p><ul><li>A relational database is a collection of data organized into a table structure, where the tables can be linked, or related, based on data common to each.</li><li>Create meaningful information, Flexibility, Minimize data redundancy, ease of backup and disaster recovery and ACID complaint (reliable)</li></ul></li></ul><h4 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h4><ul><li><p>Built for speed, flexibility and scale, can be stored in a schema-less form, widely used for processing big data</p></li><li><p>A non-relational database design that provides flexible schemas for the storage and retrieval of data.</p></li><li>NoSQL allows data to be stored in a schema-less or free-form fashion. </li><li>Types: Key-value store (Redis), Document-based (Mongo DB), Column-based (Cassandra), and Graph-based (Neo4J)</li></ul><h4 id="Key-Differences-Between-RDBMS-amp-NoSQL"><a href="#Key-Differences-Between-RDBMS-amp-NoSQL" class="headerlink" title="Key Differences Between RDBMS &amp; NoSQL"></a>Key Differences Between RDBMS &amp; NoSQL</h4><div class="table-container"><table><thead><tr><th><strong>Relational Databases</strong></th><th><strong>Non-Relational Data Bases</strong></th></tr></thead><tbody><tr><td>RDBMS schemas rigidly define how all data inserted into the database must be typed and composed</td><td>NoSQL databases can be schema-agnostic, allowing unstructured and semi-structured data to be stored and manipulated</td></tr><tr><td>Maintaining high-end,commercial relational database management systems can be expensive</td><td>Specifically designed for low-cost commodity hardware</td></tr><tr><td>Support ACID-compliance, which ensures reliability of transactions and crash recovery</td><td>Most NoSQL databases are not ACID compliant</td></tr><tr><td>A mature and well-documented technology, which means the risks are more or less perceivable</td><td>A relatively newer technology</td></tr></tbody></table></div><h4 id="Data-Marts-Data-Lakes-ETL-and-Data-Pipelines"><a href="#Data-Marts-Data-Lakes-ETL-and-Data-Pipelines" class="headerlink" title="Data Marts, Data Lakes, ETL and Data Pipelines"></a>Data Marts, Data Lakes, ETL and Data Pipelines</h4><ul><li>A data warehouse is a multi-purpose enabler of operational and performance analytics. </li><li>A data mart is a sub-section of the data warehouse, built specifically for a particular business function, purpose, or community of users. (Business specific reporting and analytics)</li><li>A Data Lake is a storage repository that can store large amounts of structured, semi-structured, and unstructured data in their native format, classified and tagged with metadata. (Retain all source data without exclusions)</li><li><p>Extract, Transform and Load Process (ETL): Gathering raw data -&gt; Extracting the information needed for reporting and analysis -&gt; Cleaning, standardizing, and transforming data into usable format -&gt; Loading data into a data repository</p><ul><li>Batch processing, Stream processing, Load verification</li></ul></li><li>A data pipeline is a broader term that encompasses the entire journey of moving data from one system to another, including the ETL process.</li></ul><h4 id="Foundations-of-Big-Data"><a href="#Foundations-of-Big-Data" class="headerlink" title="Foundations of Big Data"></a>Foundations of Big Data</h4><ul><li>Big data refers to the dynamic, large and disparate volumes of data being created by people, tools and machines. It requires new, innovative and scalable technology to collect, host, and analytically process the vast amount of data gathered in order to drive real-time business insights that relate to consumers, risk, profit, performance, productivity management, and enhanced shareholder value.</li><li>The V’s of Big Data: Velocity, Volume, Variety, Veracity, Value</li><li><p>Big Data Processing Tools</p><ul><li>Apache Hadoop is a collection of tools that provides distributed storage and processing of big data. (Java based, Node&amp;Cluster, HDFS)</li><li>Apache Hive is a data warehouse for data query and analysis built on top of Hadoop. </li><li>Apache Spark is a distributed data analytics framework designed to perform complex data analytics in real-time. </li></ul></li></ul><h3 id="Gathering-Data"><a href="#Gathering-Data" class="headerlink" title="Gathering Data"></a>Gathering Data</h3><h4 id="Identifying-Data-for-Analysis"><a href="#Identifying-Data-for-Analysis" class="headerlink" title="Identifying Data for Analysis"></a>Identifying Data for Analysis</h4><ul><li><p>Process for Identifying data</p><ol><li>Determine the information you want to collect (specific information/possible sources)</li><li>Define a plan for collecting data (establish timeframe/how much is sufficient/dependencies/risks/mitigation plan)</li><li>Determine your data collection methods depending on sources, types, timeframe and volume of data</li></ol></li><li><p>Data identifying has implication for quality, security, and privacy. None of these are one-time considerations but are relevant through the life cycle of the data analysis process.</p></li><li>Data Quality: data needs to be free of errors, accurate, complete, relevant, and accessible.</li><li>Data Governance: Security, Regulation and Compliances (relate to the usability, integrity, and availability of data)</li><li>Data Privacy: confidentiality, license for use, and compliance to mandated regulations (Checks, validations, and an auditable trail needs to be planned.)</li></ul><h4 id="Data-Sources"><a href="#Data-Sources" class="headerlink" title="Data Sources"></a>Data Sources</h4><ul><li>Data sources can be internal or external to the organization</li><li>Primary data refers to information obtained directly from the source.</li><li>Secondary data refers to information retrieved from existing sources, such as external databases, research articles, publications, training material and Internet searches, or financial records available as public data.</li><li>Third party data is data you purchased from aggregators who collect data from various sources and combine it into comprehensive datasets purely for the purpose of selling the data.</li><li>Sources for Gathering Data: Databases, Web, Social media sites and Interactive platforms, Sensor data, Data Exchange, Interviews and Observation studies</li></ul><h4 id="How-to-Gather-and-Import-Data"><a href="#How-to-Gather-and-Import-Data" class="headerlink" title="How to Gather and Import Data"></a>How to Gather and Import Data</h4><ul><li>Using queries to extract data from SQL databases<ul><li>Non-relational databases can be queried using SQL or SQL-like query tools.</li></ul></li><li>Application Programming Interfaces (or APIs) are also popularly used for extracting data from a variety of data sources.<ul><li>APIs are also used for data validation.</li></ul></li><li>Using Web Scraping to extract data from the web (RSS feeds are another source typically used for capturing updated data from online forums and news sites where data is refreshed on an ongoing basis.)</li><li>Data streams are a popular source for aggregating constant streams of data flowing from sources such as instruments, IoT devices and applications, and GPS data from cars.</li><li>Data Exchanges have a set of well-defined exchange standards, protocols, and formats relevant for exchanging data.</li><li>Specific data repositories are optimized for certain types of data. <ul><li>Relational databases store structured data with a well-defined schema.</li><li>Semi-structured can be stored in NoSQL clusters. XML and JSON are commonly used for storing and exchanging semi-structured data. JSON is also the preferred data type for web services.</li><li>NoSQL databases and Data Lakes provide a good option to store and manipulate large volumes of unstructured data. Data lakes can accommodate all data types and schema. ETL tools and data pipelines provide automated functions that facilitate the process of importing data.</li></ul></li></ul><h3 id="Wrangling-Data"><a href="#Wrangling-Data" class="headerlink" title="Wrangling Data"></a>Wrangling Data</h3><h4 id="Data-Wrangling"><a href="#Data-Wrangling" class="headerlink" title="Data Wrangling"></a>Data Wrangling</h4><ul><li>Data wrangling, also known as data munging, is an iterative process that involves data exploration, transformation, validation, and making it available for a credible and meaningful analysis.</li><li>The Data Wrangling Process<ol><li>Discovery: Examine and understand data &amp; create a plan</li><li>Transformation: Structuring, Normalizing and Denormalizing, Cleaning, Enriching Data</li><li>Validation: Check the quality of the data post structuring, normalizing, cleaning and enriching of data.</li><li>Publishing: Delivering the output of the wrangled data for downstream project needs.</li><li>Documentation: It is vital that you document all considerations and actions.</li></ol></li></ul><h4 id="Tools-for-Data-Wrangling"><a href="#Tools-for-Data-Wrangling" class="headerlink" title="Tools for Data Wrangling"></a>Tools for Data Wrangling</h4><ul><li>Spreadsheets / Excel Power Query</li><li>OpenRefine</li><li>Google DataPrep</li><li>Watson Studio Refinery</li><li>Trifacta Wrangler</li><li>Python: Jupyter Notebook, NumPy, pandas</li><li>R: Dplyr, Data.Table, Jsonlite</li></ul><h4 id="Data-Cleaning"><a href="#Data-Cleaning" class="headerlink" title="Data Cleaning"></a>Data Cleaning</h4><ul><li>Poor quality data weakens an organization’s competitive standing and undermines critical business objectives.</li><li>Data Cleaning Workflow<ul><li>Inspection: Detect issues and errors, Validating against rules and constraints, Profiling data, visualizing data</li><li>Cleaning: Imputate missing values, Remove duplicate data, Data type conversion, Standardize data, Rectify syntax errors, Examine outliers……</li><li>Verification: Reinspect data</li><li>It is important to document</li></ul></li></ul><h3 id="Analyzing-and-Mining-Data"><a href="#Analyzing-and-Mining-Data" class="headerlink" title="Analyzing and Mining Data"></a>Analyzing and Mining Data</h3><h4 id="Statistical-Analysis"><a href="#Statistical-Analysis" class="headerlink" title="Statistical Analysis"></a>Statistical Analysis</h4><ul><li>Statistics is a branch of mathematics dealing with the collection, analysis, interpretation, and presentation of numerical or quantitative data.</li><li>Statistical Analysis is the application of statistical methods to a sample of data in order to develop an understanding of what that data represents.</li><li>Descriptive Statistics enables you to present data in a meaningful way allowing simpler interpretation of the data.<ul><li>Central Tendency: Mean(average value), Medium(Middle’s value), Mode(Most popular value)</li><li>Dispersion: Variance, Standard Deviation, Range</li><li>Skewness: Measure of whether the distribution of values is symmetrical around a central value or skewed left or right.</li></ul></li><li>Inferential statistics takes data from a sample to make inferences about the larger population from which the sample was drawn.<ul><li>Hypothesis Testing—For example, for studying the effectiveness of a vaccine by comparing outcomes in a control group</li><li>Confidence Intervals incorporate the uncertainty and sample error to create a range of values the actual population value is like to fall within.</li><li>Regression Analysis incorporates hypothesis tests that help determine whether the relationships observed in the sample data actually exist in the population rather than just the sample.</li></ul></li><li>SAS, SPSS, StatsSoft</li></ul><h4 id="Data-Mining"><a href="#Data-Mining" class="headerlink" title="Data Mining"></a>Data Mining</h4><ul><li>The process of extracting knowledge from data, is the heart of the data analysis process. </li><li>An interdisciplinary field that involves the use of pattern recognition technologies, statistical analysis and mathematical techniques.</li><li>Aims to identify correlations in data, find patterns and variations. understand trends and predict probabilities.</li><li>Pattern recognition is the discovery of regularity’s or commonality’s in data.</li><li>A trend is the general tendency of a set of data to change overtime.</li><li>Data mining has applications across industries and disciplines.</li><li>Data mining techniques<ul><li>Classification: Classifying attributes into target categories</li><li>Clustering: Involves grouping data into clusters so they can be treated as groups</li><li>Anomaly or Outlier Detection: Finding patterns in data that are not normal or unexpected</li><li>Association Rule Mining: Establishing a relationship between two data events</li><li>Sequential Patterns: Tracing a series of events that take place in a sequence</li><li>Affinity Grouping: Discovering co-occurrence in relationships</li><li>Decision trees: Building classification models in the form of a tree structure with multiple branches, where each branch represents a probable occurrence.</li><li>Regression: Identifying the nature of the relationship between two variables, which could be causal or correlational.</li></ul></li></ul><h4 id="Tools-for-Data-Mining"><a href="#Tools-for-Data-Mining" class="headerlink" title="Tools for Data Mining"></a>Tools for Data Mining</h4><ul><li>Spreadsheets: Host data, create pivot table, add-ins(Data Mining Client, XLMiner)</li><li>R-language: tm, twitteP, RStudio</li><li>Python: pandas, NumPy, Jupyter Notebook</li><li>IBM SPSS Statistics (Statistical Process for Social Sciences)</li><li>IBM Watson Studio</li><li>SAS Enterprise Miner: A comprehensive, graphical workbench for data mining.</li></ul><h3 id="Communicating-and-Sharing-Data-Analysis-Findings"><a href="#Communicating-and-Sharing-Data-Analysis-Findings" class="headerlink" title="Communicating and Sharing Data Analysis Findings"></a>Communicating and Sharing Data Analysis Findings</h3><ul><li>The data analysis process ends with communicating the findings in ways that impact decision making.</li><li>Data projects involve<ul><li>A collaborative effort spread across business functions</li><li>People with multi-disciplinary skills</li><li>Findings incorporated into a larger business initiative.</li></ul></li><li>The success of your communication depends on how well others can understand and trust your insights to take further action.</li><li>Understanding the information needs of your audience will help you decide what and how much information is essential to enable a better understanding of your findings.</li></ul><h4 id="Structure-your-presentation"><a href="#Structure-your-presentation" class="headerlink" title="Structure your presentation"></a>Structure your presentation</h4><ul><li>Begin your presentation by demonstrating your understanding of the business problem to your audience. Speak in the language of the organization’s business domain.</li><li>The next step in designing your communication is to structure and organize your presentation for maximum impact.</li></ul><h4 id="The-Role-of-Visuals"><a href="#The-Role-of-Visuals" class="headerlink" title="The Role of Visuals"></a>The Role of Visuals</h4><ul><li>A powerful visualization tells a story through the graphical depiction of facts and figures. (Graphs, Charts, Diagrams)</li><li>Trust, Understanding, Relatability</li></ul><h4 id="Introduction-to-Data-Visualization"><a href="#Introduction-to-Data-Visualization" class="headerlink" title="Introduction to Data Visualization"></a>Introduction to Data Visualization</h4><ul><li>Data visualization is the discipline of communicating information through the use of visual elements such as graphs, charts, and maps. Its goal is to make information easy to comprehend, interpret, and retain.</li><li>Choosing appropriate visualizations</li><li>Common types of graphs<ul><li>Bar Charts are great for comparing related data sets or parts of a whole.</li><li>Column Charts compare values side-by-side. You can use them quite effectively to show change over time.</li><li>Pie Charts show the breakdown of an entity into its sub-parts and the proportion of the sub-parts in relation to one another. Each portion of the pie represents a static value or category, and the sum of all categories is equal to hundred percent.</li><li>Line Charts display trends. They’re great for showing how a data value is changing in relation to a continuous variable.</li></ul></li><li>Dashboards organize and display reports and visualizations coming from multiple data sources into a single graphical interface.<ul><li>Are easy to comprehend by an average user</li><li>Make collaboration easy between teams</li><li>Allow you to generate reports on the go</li></ul></li></ul><h4 id="Introduction-to-Visualization-and-Dashboarding-Software"><a href="#Introduction-to-Visualization-and-Dashboarding-Software" class="headerlink" title="Introduction to Visualization and Dashboarding Software"></a>Introduction to Visualization and Dashboarding Software</h4><ul><li>Spreadsheets</li><li>Jupyter Notebook and Python libraries (Matplotlib, Bokeh, Dash)</li><li>R-Studio and R-Shiny</li><li>IBM Cognos Analytics</li><li>Tableau</li><li>Microsoft Power BI</li></ul><h3 id="Opportunities-and-Learning-Paths"><a href="#Opportunities-and-Learning-Paths" class="headerlink" title="Opportunities and Learning Paths"></a>Opportunities and Learning Paths</h3><ul><li>Data analyst job openings exist across industry, government and academia.</li><li>Banking and Finance, Insurance, Healthcare, Retail and Information Technology</li><li>Roles and Responsibilities<ul><li>Data Analyst Specialist Roles</li><li>Domain Specialist Roles</li><li>Data Engineers &amp; Data Scientists</li></ul></li><li>4 important soft skills<ul><li>Problem-Solving</li><li>Project Management</li><li>Communication</li><li>Storytelling</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>杭电 OJ 第 1000、1001 题思路解析</title>
      <link href="/HODJ1000&amp;1001/"/>
      <url>/HODJ1000&amp;1001/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在学完算法和数据结构，以及几门主流的编程语言后，本菜鸡从2021年1月起，正式加入刷题大军。对杭电OJ也慕名已久，所以成为我刷题的首选。</p></blockquote><span id="more"></span><h3 id="1000、A-B-Problem"><a href="#1000、A-B-Problem" class="headerlink" title="1000、A + B Problem"></a>1000、A + B Problem</h3><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>系统默认要读取多组输入，所以要用<code>while</code>语句。</p><p>Java 提交时 <code>class</code> 类名应该为 <code>Main</code>。</p><h4 id="C-版代码"><a href="#C-版代码" class="headerlink" title="C++版代码"></a>C++版代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> num1, num2;</span><br><span class="line">  <span class="keyword">while</span> (cin &gt;&gt; num1 &gt;&gt; num2)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; num1 + num2 &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java版代码"><a href="#Java版代码" class="headerlink" title="Java版代码"></a>Java版代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hdoj1000</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">while</span>(sc.hasNextInt())&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">      <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">      System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1001、Sum-Problem"><a href="#1001、Sum-Problem" class="headerlink" title="1001、Sum Problem"></a>1001、Sum Problem</h3><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>32位编译直接用累加公式会溢出，只能用<code>for</code>循环。</p><p>注意格式：题目要求换行两次，否则会出现<code>presentation error！</code>。</p><h4 id="C-版代码-1"><a href="#C-版代码-1" class="headerlink" title="C++版代码"></a>C++版代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> num1;</span><br><span class="line">  <span class="keyword">while</span>(cin &gt;&gt; num1)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num1; i++)</span><br><span class="line">      sum += i;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl &lt;&lt; endl; </span><br><span class="line">    <span class="comment">//For each case, output SUM(n) in one line, followed by a blank line.</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java版代码-1"><a href="#Java版代码-1" class="headerlink" title="Java版代码"></a>Java版代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(sc.hasNextInt()) &#123;</span><br><span class="line">            <span class="type">int</span> a=sc.nextInt();</span><br><span class="line">            <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;=a;i++) &#123;</span><br><span class="line">                sum=sum+i;  </span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">            System.out.println( );</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ 基础知识总结</title>
      <link href="/Cpp%E5%9F%BA%E7%A1%80/"/>
      <url>/Cpp%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Object Oriented Programming，面向对象的编程的思想是一种对现实世界理解和抽象的方法，其有的封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更灵活和易于维护，对软件开发相当重要。C++ 是一门面向对象的编程语言，本文包含对于C++语言中类、对象、运算符重载、继承、多态等面向对象的程序设计方法，以及模板、标准模板库STL等泛型程序设计的机制的描述，希望帮助读者能够更好的体会和领悟面向对象程序设计方法和泛型程序设计方法的优势。</p></blockquote><span id="more"></span><h3 id="从C到C"><a href="#从C到C" class="headerlink" title="从C到C++"></a>从C到C++</h3><h4 id="C-程序"><a href="#C-程序" class="headerlink" title="C++程序"></a>C++程序</h4><ul><li><p>GCC 是所有编译器的总称，在C语言中使用 <code>gcc</code> 命令编译和链接 C 程序。<code>g++</code> 命令用来编译 C++，<code>gcj</code>命令用来编译 Java，<code>gccgo</code> 命令用来编译 Go 语言</p></li><li><p>命名空间（Namespace）解决合作开发时的命名冲突问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> name&#123;<span class="comment">//variables, functions, classes&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>name</code> 是命名空间的名字，它里面可以包含变量、函数、类、typedef、#define 等</p></li><li><p>使用变量、函数时要指明它们所在的命名空间，<code>::</code>是域解析操作符，用来指明要使用的命名空间</p></li><li><p>可采用 <code>using</code> 关键字声明变量或整个命名空间，<code>using Li::fp;</code>，<code>using namespace Li;</code></p></li><li><p>C++头文件和<code>std</code>标准命名空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// using namespace std;声明在全局范围中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Bezhuang&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;    <span class="comment">//声明命名空间std</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;C++学习者：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">func</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输入输出：需要包含头文件<code>iostream</code>，<code>cin&gt;&gt;</code>标准输入、<code>cout&lt;&lt;</code>标准输出、<code>cerr</code>标准错误，<code>endl</code>结束此行</p></li><li><p><code>new</code> 动态分配内存（对应<code>malloc()</code>），<code>delete</code> 释放内存（对应<code>free()</code>）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];  <span class="comment">//分配10个int型的内存空间</span></span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br></pre></td></tr></table></figure></li></ul><h4 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h4><ul><li><p>内联函数（Inline Function）：在函数调用处直接嵌入函数体的函数称为，类似于C语言中的宏展开</p></li><li><p>注意要在函数定义处添加 <code>inline</code> 关键字而不是在声明处（编译器会忽略）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span>&#123;    <span class="comment">//内联函数，交换两个数的值</span></span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;m&lt;&lt;<span class="string">&quot;, &quot;</span>&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">swap</span>(&amp;m, &amp;n);</span><br><span class="line">    cout&lt;&lt;m&lt;&lt;<span class="string">&quot;, &quot;</span>&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="重载和引用"><a href="#重载和引用" class="headerlink" title="重载和引用"></a>重载和引用</h4><ul><li><p>通过使用默认参数，可以减少要定义的析构函数、方法以及方法重载的数量</p></li><li><p>实参和形参的传值是从左到右依次匹配的，默认参数只能放在形参列表的最后，一旦为某个形参指定了默认值，那么它后面的所有形参都必须有默认值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">float</span> b=d+<span class="number">2.9</span>, <span class="type">char</span> c=<span class="string">&#x27;@&#x27;</span>, <span class="type">int</span> e)</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>函数的重载（Function Overloading）允许多个函数拥有相同的名字，只要它们的参数列表（参数的类型、参数的个数和参数的顺序）不同就可以，但仅返回类型不同不能作为重载的依据</p></li><li><p>同指针一样，引用能够减少数据的拷贝，提高数据的传递效率</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型名 &amp;引用变量名 = 被引用变量名;    <span class="comment">//type &amp;name = data;</span></span><br></pre></td></tr></table></figure></li><li><p>引用在定义时需要添加 <code>&amp;</code>，在使用时不能添加 <code>&amp;</code>，使用时添加 <code>&amp;</code> 表示取地址</p></li><li><p>常引用：如果不希望通过引用来修改原始的数据，那么可以在定义时添加 <code>const</code> 限制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> 类型名 &amp;引用变量名 = 被引用变量名;    <span class="comment">// comst type &amp;name = value;</span></span><br></pre></td></tr></table></figure></li><li><p>C++ 引用可以作为函数参数也可以作为函数返回值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> &amp;<span class="title">plus10</span><span class="params">(<span class="type">int</span> &amp;r)</span> </span>&#123;</span><br><span class="line">    r += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> num2 = <span class="built_in">plus10</span>(num1);</span><br><span class="line">    cout &lt;&lt; num1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  <span class="comment">//运行结果20 20</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="C-字符串"><a href="#C-字符串" class="headerlink" title="C++字符串"></a>C++字符串</h4><ul><li>使用 string 类需要包含头文件  <code>#include &lt;string&gt;</code></li></ul><ul><li><p><code>string s1;</code>   <code>string s2 = &quot;c plus plus&quot;;</code>   <code>string s3 = s2;</code>   <code>string s4 (5, &#39;s&#39;);</code></p></li><li><p><code>length()</code> 函数求长度，<code>c_str()</code> 函数转为C风格字符串</p></li><li><p><code>string</code> 类可以使用<code>+</code>或<code>+=</code>运算符来直接拼接字符串</p></li><li><p><code>insert()</code> 函数可以在 <code>string</code> 字符串中指定的位置插入另一个字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string&amp; <span class="title">insert</span> <span class="params">(<span class="type">size_t</span> pos, <span class="type">const</span> string&amp; str)</span></span>;</span><br><span class="line"><span class="comment">//pos 表示要插入的位置，也就是下标；str 表示要插入的字符串</span></span><br><span class="line">s1.<span class="built_in">insert</span>(pos, str);</span><br></pre></td></tr></table></figure></li><li><p><code>erase(pos, len)</code> 函数可以删除 <code>string</code> 中的一个子字符串</p></li><li><code>substr(pos, len)</code> 函数用于从 <code>string</code> 字符串中提取子字符串</li><li><code>find(str, pos)</code> 函数用于在 <code>string</code> 字符串中查找子字符串出现的位置</li><li><code>rfind()</code> 和 <code>find()</code> 很类似，同样是在字符串中查找子字符串，不同的是 <code>find()</code> 函数从 <code>pos</code> 参数开始往后查找，而 <code>rfind()</code> 函数则最多查找到 <code>pos</code> 处</li><li><code>find_first_of(str)</code> 函数用于查找子字符串和字符串共同具有的字符在字符串中首次出现的位置</li></ul><h3 id="类与对象编程"><a href="#类与对象编程" class="headerlink" title="类与对象编程"></a>类与对象编程</h3><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><ul><li><p>类是创建对象的模板，通过类名创建对象的过程叫做类的实例化，对象是类的一个实例（Instance）</p></li><li><p>类的成员变量称为类的属性（Property），类的成员函数称为类的方法（Method）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;    <span class="comment">//类通常定义在函数外面</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//成员变量Property</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">    <span class="comment">//成员函数Method</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;cout&lt;&lt;name&lt;&lt;<span class="string">&quot;年龄是&quot;</span>&lt;&lt;age&lt;&lt;<span class="string">&quot;，成绩是&quot;</span>&lt;&lt;score&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>类只是一个模板（Template），编译后不占用内存空间，所以在定义类时不能对成员变量进行初始化，只有在创建对象以后才会给成员变量分配内存，才可以赋值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student stu;  <span class="comment">//创建对象</span></span><br><span class="line">    stu.name = <span class="string">&quot;小明&quot;</span>; stu.age = <span class="number">15</span>; stu.score = <span class="number">92.5f</span>;</span><br><span class="line">    stu.<span class="built_in">say</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>class</code> 时，类中的成员默认都是 <code>private</code> 属性的，而使用 <code>struct</code> 时，结构体中的成员默认都是 <code>public</code> 属性的</p></li><li>使用 <code>class</code> 来定义类，使用 <code>struct</code> 来定义结构体，这样做语义更加明确</li></ul><h4 id="成员变量和成员函数"><a href="#成员变量和成员函数" class="headerlink" title="成员变量和成员函数"></a>成员变量和成员函数</h4><ul><li><p>类的成员有成员变量和成员函数两种，成员函数之间可以互相调用，成员函数内部可以访问成员变量</p></li><li><p>在栈上创建对象指针，形式和定义普通变量类似，不能使用 delete 在栈上创建的对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student stu;  <span class="comment">//对象stu在栈上分配内存，需要使用&amp;获取它的地址</span></span><br><span class="line">Student *pStu = &amp;stu;  <span class="comment">//pStu 是一个指针，它指向 Student 类型的数据</span></span><br></pre></td></tr></table></figure></li><li><p>使用 new 在堆上创建出来的对象必须要用一个指针指向它来访问它的成员变量或成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student *pStu = <span class="keyword">new</span> Student;</span><br><span class="line">pStu -&gt; name = <span class="string">&quot;小明&quot;</span>; pStu -&gt; age = <span class="number">15</span>; pStu -&gt; score = <span class="number">92.5f</span>;</span><br><span class="line">pStu -&gt; <span class="built_in">say</span>();</span><br><span class="line"><span class="keyword">delete</span> pStu;  <span class="comment">//删除对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>可以用 <code>对象名.成员名</code>、<code>引用名.成员名</code>、<code>对象指针-&gt;成员名</code> 的方法访问对象的成员变量或调用成员函数</p></li><li><p>对象所占用的存储空间的大小等于各成员变量所占用的存储空间的大小之和（如果不考虑成员变量对齐问题的话）</p></li><li><p>当成员函数定义在类外时必须在函数名前面加上类名予以限定，域解析符（作用域运算符/限定符）<code>::</code> 用来连接类名和函数名，指明当前函数属于哪个类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">say</span><span class="params">()</span></span>;  <span class="comment">//成员函数必须先在类体中作原型声明，然后在类外定义</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::say</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;name&lt;&lt;<span class="string">&quot;的年龄是&quot;</span>&lt;&lt;age&lt;&lt;<span class="string">&quot;，成绩是&quot;</span>&lt;&lt;score&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li><li><p>在类体外定义 inline 函数的方式，必须将类的定义和成员函数的定义都放在同一个头文件中（或者同一个源文件中），否则编译时无法进行嵌入，因此强烈建议将内联函数定义在类的内部</p></li></ul><h4 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h4><ul><li>成员访问限定符 <code>public</code>、<code>protected</code>、<code>private</code> 控制成员变量和成员函数的访问权限</li><li>C++ 中的类没有共有私有之分，public、private、protected 只能修饰类的成员，不能修饰类</li><li><p>封装是指尽量隐藏类的内部实现，只向用户提供有用的成员函数</p><ul><li>实际项目开发中的成员变量以及只在类内部使用的成员函数（只被成员函数调用的成员函数）都应声明为 private，只将允许通过对象调用的成员函数声明为 public</li><li>给成员变量赋值的函数通常称为 <code>set</code> 函数，读取成员变量的值的函数通常称为 <code>get</code> 函数</li></ul></li><li>包含成员对象的类叫封闭类。任何能够生成封闭类对象的语句，都要说明对象中包含的成员对象是如何初始化的，如果不说明则编译器认为成员对象是用默认构造函数或参数全部可以省略的构造函数初始化</li><li>在封闭类的构造函数的初始化列表中可以说明成员对象如何初始化。封闭类对象生成时，先执行成员对象的构造函数，再执行自身的构造函数；封闭类对象消亡时，先执行自身的析构函数，再执行成员对象的析构函数</li></ul><h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><ul><li><p>构造函数（Constructor）没有返回值，不需要用户显式调用（用户也不能调用），而是在创建对象时自动执行  <code>类名()&#123;&#125;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明构造函数（Student类中）</span></span><br><span class="line"><span class="built_in">Student</span>(<span class="type">char</span> *name, <span class="type">int</span> age, <span class="type">float</span> score);</span><br><span class="line"><span class="comment">//定义构造函数</span></span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="type">char</span> *name, <span class="type">int</span> age, <span class="type">float</span> score)&#123;</span><br><span class="line">    m_name = name; m_age = age; m_score = score;&#125;</span><br><span class="line"><span class="comment">//创建对象时向构造函数传参（主函数中）</span></span><br><span class="line">Student *pstu = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="string">&quot;李华&quot;</span>, <span class="number">16</span>, <span class="number">96</span>);</span><br><span class="line">pstu -&gt; <span class="built_in">show</span>();</span><br></pre></td></tr></table></figure></li><li><p>构造函数必须是 public 属性的，否则创建对象时无法调用</p></li><li><p>构造函数没有返回值因此不管是声明还是定义，函数名前面都不能出现返回值类型，函数体中不能有 return 语句</p></li><li><p>构造函数的调用是强制性的，一旦在类中定义了构造函数，那么创建对象时就一定要调用</p></li><li><p>创建对象时只有一个构造函数会被调用，如果有多个重载的构造函数，那么创建对象时提供的实参必须和其中的一个构造函数匹配</p></li><li><p>一个类必须有构造函数，要么用户自己定义，要么编译器自动生成默认构造函数 <code>类名()&#123;&#125;</code></p></li><li><p>定义类时，如果一个构造函数都不写，则编译器自动生成默认（无参）构造函数和复制构造函数，如果编写了构造函数，则编译器不自动生成默认构造函数</p></li><li><p>一个类不一定会有默认构造函数，但一定会有复制构造函数</p></li><li><p>构造函数的初始化列表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student::<span class="built_in">Student</span>(<span class="type">char</span> *name, <span class="type">int</span> age, <span class="type">float</span> score): <span class="built_in">m_name</span>(name)&#123;</span><br><span class="line">    m_age = age;</span><br><span class="line">    m_score = score;</span><br><span class="line">&#125;  <span class="comment">//只对 m_name 使用初始化列表，其他成员变量还是一一赋值</span></span><br></pre></td></tr></table></figure></li><li><p>成员变量的初始化顺序与初始化列表中列出的变量的顺序无关，只与成员变量在类中声明的顺序有关</p></li><li><p>初始化 <code>const</code> 成员变量的唯一方法就是使用初始化列表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VLA</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> m_len;</span><br><span class="line">    <span class="type">int</span> *m_arr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">VLA</span>(<span class="type">int</span> len);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//必须使用初始化列表来初始化 m_len</span></span><br><span class="line">VLA::<span class="built_in">VLA</span>(<span class="type">int</span> len): <span class="built_in">m_len</span>(len)&#123;</span><br><span class="line">    m_arr = <span class="keyword">new</span> <span class="type">int</span>[len];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象在消亡时会调用析构函数</p></li><li><p>析构函数（Destructor）没有返回值，不需要程序员显式调用，在销毁对象时自动执行  <code>~类名()&#123;&#125;</code></p></li><li><p>构造函数和析构函数对于类来说是不可或缺的，<code>new</code> 分配内存时会调用构造函数，用 <code>delete</code> 释放内存时会调用析构函数</p></li></ul><h4 id="静态成员和常成员"><a href="#静态成员和常成员" class="headerlink" title="静态成员和常成员"></a>静态成员和常成员</h4><ul><li><p><code>this</code> 指针也是一个 <code>const</code> 指针，它指向当前对象，用<code>-&gt;</code>来访问当前对象的所有成员变量或成员函数，它的值是不能被修改的</p></li><li><p><code>this</code> 只能用在类的内部，通过 this 可以访问类的所有成员，包括 <code>private</code>、<code>protected</code>、<code>public</code> 属性的</p></li><li><p><code>this</code> 只能在成员函数内部使用，只有当对象被创建后 <code>this</code> 才有意义，因此也不能在 <code>static</code> 成员函数中使用</p></li><li><p><code>this</code> 实际上是成员函数的一个形参，在调用成员函数时将对象的地址作为实参传递给 <code>this</code></p></li><li><p>成员函数中出现的 <code>this</code> 指针，就是指向成员函数所作用的对象的指针，因此静态成员函数内部不能出现 <code>this</code> 指针</p></li><li><p>成员函数实际上的参数个数比表面上看到的多一个，多出来的参数就是 <code>this</code> 指针</p></li><li><p>静态成员变量是一种特殊的成员变量，它被关键字 <code>static</code> 修饰</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> m_total;  <span class="comment">//静态成员变量</span></span><br></pre></td></tr></table></figure></li><li><p><code>static</code> 成员变量不占用对象的内存，而是在所有对象之外开辟内存，即使不创建对象也可以访问</p></li><li><p>一个类中可以有一个或多个静态成员变量，所有的对象都共享这些静态成员变量，都可以引用它</p></li><li><p>每个对象有各自的一份普通成员变量，但是静态成员变量只有一份，被所有对象所共享。</p></li><li><p>静态成员变量必须初始化，而且只能在类体外进行：<code>int Student::m_total = 10;</code></p></li><li><p><code>static</code> 静态成员函数不具体作用于某个对象。即便对象不存在，也可以访问类的静态成员。</p></li><li><p>静态成员函数内部不能访问非静态成员变量，也不能调用非静态成员函数。</p></li><li><p>和静态成员变量类似，静态成员函数在声明时要加 <code>static</code>，在定义时不能加 <code>static</code>。静态成员函数可以通过类来调用（一般都是这样做），也可以通过对象来调用</p></li><li><p>如果你不希望某些数据被修改，可以使用<code>const</code>关键字加以限定。<code>const</code> 可以用来修饰成员变量和常成员函数</p></li><li><p><code>const</code> 成员和引用成员必须在构造函数的初始化列表中初始化，此后值不可修改</p></li><li><p>常成员函数需要在声明和定义的时候在函数头部的结尾加上 <code>const</code> 关键字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明常成员函数</span></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">getname</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">//定义常成员函数</span></span><br><span class="line"><span class="function"><span class="type">char</span> * <span class="title">Student::getname</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_name;</span><br></pre></td></tr></table></figure></li><li><p>函数开头加 <code>const</code> 用来修饰函数的返回值，表示返回值是 <code>const</code> 类型，也就是不能被修改，例如<code>const char * getname()</code></p></li><li><p>函数头部的结尾加上 <code>const</code> 表示常成员函数，这种函数只能读取成员变量的值，而不能修改成员变量的值，例如<code>char * getname() const</code></p></li><li><p><code>const</code> 也可以用来修饰对象，称为常对象。一旦将对象定义为常对象之后，就只能调用类的 <code>const</code> 成员了</p></li><li><p>常量对象上面不能执行非常量成员函数，只能执行常量成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义常对象的语法和定义常量的语法类似</span></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="keyword">class</span> <span class="title">object</span><span class="params">(params)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">class</span> <span class="type">const</span> <span class="title">object</span><span class="params">(params)</span></span>;</span><br><span class="line"><span class="comment">//当然你也可以定义 const 指针</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">class</span> *p = <span class="keyword">new</span> <span class="built_in">class</span>(params);  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">const</span> *p = <span class="keyword">new</span> <span class="built_in">class</span>(params);</span><br><span class="line"><span class="comment">//class为类名，object为对象名，params为实参列表，p为指针名</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="友元函数和友元类"><a href="#友元函数和友元类" class="headerlink" title="友元函数和友元类"></a>友元函数和友元类</h4><ul><li><p>借助友元（friend）可以使得其他类中的成员函数以及全局范围内的函数访问当前类的 <code>private</code> 成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">show</span><span class="params">(Student *pstu)</span></span>;  <span class="comment">//将show()声明为友元函数</span></span><br></pre></td></tr></table></figure></li><li><p>友元函数不同于类的成员函数，在友元函数中不能直接访问类的成员，必须要借助对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(Student *pstu)</span></span>&#123;cout&lt;&lt;pstu-&gt;m_name&lt;&lt;<span class="string">&quot;的年龄是 &quot;</span>&lt;&lt;pstu-&gt;m_age&lt;&lt;endl;&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以将非成员函数声明为友元函数，也可以将其他类的成员函数声明为友元函数</p></li><li><p>一个函数可以被多个类声明为友元函数，这样就可以访问多个类中的 private 成员</p></li><li><p>友元类中的所有成员函数都是另外一个类的友元函数  <code>friend class Student;</code></p></li><li><p>友友元分为友元函数和友元类，友元关系不能传递。如果类 B 是类 A 的友元类，类 C 是类 B 的友元类，不等于类 C 是类 A 的友元类</p></li><li><p>友元的关系是单向的而不是双向的。如果声明了类 B 是类 A 的友元类，不等于类 A 是类 B 的友元类</p></li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li><p>参数的传递本质上是一次赋值的过程，赋值就是对内存进行拷贝，将一块内存上的数据复制到另一块内存上（内存拷贝）</p></li><li><p>C/C++ 禁止在函数调用时直接传递数组的内容，而是强制传递数组指针，而对于结构体和对象没有这种限制，调用函数时既可以传递指针，也可以直接传递内容</p></li><li><p>引用（Reference）可以看做是数据的一个别名，通过这个别名和原来的名字都能够找到这份数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type &amp;name = data;</span><br></pre></td></tr></table></figure></li><li><p>引用必须在定义的同时初始化，并且不能再引用其它数据，类似于 const 常量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">99</span>;</span><br><span class="line">    <span class="type">int</span> &amp;r = a;    <span class="comment">//引用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>常引用：如果不希望通过引用来修改原始的数据，那么可以在定义时添加 const 限制</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> type &amp;name = value;</span><br><span class="line"><span class="comment">//或type const &amp;name = value;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="引用作为函数参数"><a href="#引用作为函数参数" class="headerlink" title="引用作为函数参数"></a>引用作为函数参数</h4><ul><li><p>在定义或声明函数时，可以将函数的形参指定为引用的形式，这样在调用函数时就会将实参和形参绑定在一起，让它们都指代同一份数据</p></li><li><p>如此一来，如果在函数体中修改了形参的数据，那么实参的数据也会被修改，从而拥有“在函数内部影响函数外部数据”的效果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap2</span><span class="params">(<span class="type">int</span> *p1, <span class="type">int</span> *p2)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap3</span><span class="params">(<span class="type">int</span> &amp;r1, <span class="type">int</span> &amp;r2)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num1, num2;</span><br><span class="line">    <span class="built_in">swap1</span>(num1, num2);</span><br><span class="line">    <span class="built_in">swap2</span>(&amp;num1, &amp;num2);</span><br><span class="line">    <span class="built_in">swap3</span>(num1, num2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接传递参数内容，不能达到交换两个数的值的目的</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传递指针，调用函数时，分别将 num1、num2 的指针传递给 p1、p2，此后 p1、p2 指向 a、b 所代表的数据，在函数内部可以通过指针间接地修改 a、b 的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap2</span><span class="params">(<span class="type">int</span> *p1, <span class="type">int</span> *p2)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = *p1;</span><br><span class="line">    *p1 = *p2;</span><br><span class="line">    *p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按引用传参，调用函数时，分别将 r1、r2 绑定到 num1、num2 所指代的数据，此后 r1 和 num1、r2 和 num2 就都代表同一份数据了，通过 r1 修改数据后会影响 num1，通过 r2 修改数据后也会影响 num2</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap3</span><span class="params">(<span class="type">int</span> &amp;r1, <span class="type">int</span> &amp;r2)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = r1;</span><br><span class="line">    r1 = r2;</span><br><span class="line">    r2 = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="引用作为函数返回值"><a href="#引用作为函数返回值" class="headerlink" title="引用作为函数返回值"></a>引用作为函数返回值</h4><ul><li><p>将引用作为函数返回值时，不能返回局部数据（例如局部变量、局部对象、局部数组等）的引用，因为当函数调用完成后局部数据就会被销毁，有可能在下次使用时数据就不存在了，C++ 编译器检测到该行为时也会给出警告</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> &amp;<span class="title">plus10</span><span class="params">(<span class="type">int</span> &amp;r)</span> </span>&#123;</span><br><span class="line">    r += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> num2 = <span class="built_in">plus10</span>(num1);</span><br><span class="line">    cout &lt;&lt; num1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="继承与派生"><a href="#继承与派生" class="headerlink" title="继承与派生"></a>继承与派生</h3><h4 id="三种继承方式"><a href="#三种继承方式" class="headerlink" title="三种继承方式"></a>三种继承方式</h4><ul><li><p>继承（Inheritance）/ 派生（Derive）是一个类从另一个类获取成员变量和成员函数的过程</p></li><li><p>被继承的类称为父类或基类，继承的类称为子类或派生类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 派生类名:［继承方式］ 基类名&#123;</span><br><span class="line">    派生类新增加的成员</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>继承方式包括 <code>public</code>、<code>private</code>和 <code>protected</code>，此项是可选的，如果不写，那么默认为 <code>private</code></p></li><li><p>类成员的访问权限由高到低依次为 <code>public</code> —&gt; <code>protected</code> —&gt; <code>private</code></p></li><li><p>protected 成员和 private 成员类似，也不能通过对象访问。但是当存在继承关系时，基类中的 protected 成员可以在派生类中使用，而基类中的 private 成员不能在派生类中使用</p></li><li><p>基类成员在派生类中的访问权限不得高于继承方式中指定的权限，也就是说，继承方式中的 public、protected、private 是用来指明基类成员在派生类中的最高访问权限的</p></li><li><p>实际上基类的 private 成员是能够被继承的，并且（成员变量）会占用派生类对象的内存，它只是在派生类中不可见，导致无法使用罢了</p></li><li><p>在派生类中访问基类 private 成员的唯一方法就是借助基类的非 private 成员函数，如果基类没有非 private 成员函数，那么该成员在派生类中将无法访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基类People</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setname</span><span class="params">(<span class="type">char</span> *name)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setage</span><span class="params">(<span class="type">int</span> age)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sethobby</span><span class="params">(<span class="type">char</span> *hobby)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">char</span> *<span class="title">gethobby</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">char</span> *m_name;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *m_hobby;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">People::setname</span><span class="params">(<span class="type">char</span> *name)</span></span>&#123; m_name = name; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">People::setage</span><span class="params">(<span class="type">int</span> age)</span></span>&#123; m_age = age; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">People::sethobby</span><span class="params">(<span class="type">char</span> *hobby)</span></span>&#123; m_hobby = hobby; &#125;</span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">People::gethobby</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> m_hobby; &#125;</span><br><span class="line"><span class="comment">//派生类Student</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="keyword">public</span> People&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setscore</span><span class="params">(<span class="type">float</span> score)</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">float</span> m_score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setscore</span><span class="params">(<span class="type">float</span> score)</span></span>&#123; m_score = score; &#125;</span><br><span class="line"><span class="comment">//派生类Pupil</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pupil</span>: <span class="keyword">public</span> Student&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setranking</span><span class="params">(<span class="type">int</span> ranking)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_ranking;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pupil::setranking</span><span class="params">(<span class="type">int</span> ranking)</span></span>&#123; m_ranking = ranking; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pupil::display</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;m_name&lt;&lt;<span class="string">&quot;的年龄是&quot;</span>&lt;&lt;m_age&lt;&lt;<span class="string">&quot;，考试成绩为&quot;</span>&lt;&lt;m_score&lt;&lt;<span class="string">&quot;分，班级排名第&quot;</span>&lt;&lt;m_ranking&lt;&lt;<span class="string">&quot;，TA喜欢&quot;</span>&lt;&lt;<span class="built_in">gethobby</span>()&lt;&lt;<span class="string">&quot;。&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Pupil pup;</span><br><span class="line">    pup.<span class="built_in">setname</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    pup.<span class="built_in">setage</span>(<span class="number">15</span>);</span><br><span class="line">    pup.<span class="built_in">setscore</span>(<span class="number">92.5f</span>);</span><br><span class="line">    pup.<span class="built_in">setranking</span>(<span class="number">4</span>);</span><br><span class="line">    pup.<span class="built_in">sethobby</span>(<span class="string">&quot;乒乓球&quot;</span>);</span><br><span class="line">    pup.<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="改变访问权限"><a href="#改变访问权限" class="headerlink" title="改变访问权限"></a>改变访问权限</h4><ul><li><p>使用 <code>using</code> 关键字可以改变基类成员在派生类中的访问权限</p></li><li><p>using 只能改变基类中 public 和 protected 成员的访问权限，不能改变 private 成员的访问权限，因为基类中 private 成员在派生类中是不可见的，根本不能使用，所以基类中的 private 成员在派生类中无论如何都不能访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//派生类Student</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> People &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">learning</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> People::m_name;  <span class="comment">//将protected改为public</span></span><br><span class="line">    <span class="keyword">using</span> People::m_age;  <span class="comment">//将protected改为public</span></span><br></pre></td></tr></table></figure></li><li><p>如果派生类中的成员（包括成员变量和成员函数）和基类中的成员重名，那么就会遮蔽从基类继承过来的成员</p></li><li>所谓遮蔽，就是在派生类中使用该成员（包括在定义派生类时使用，也包括通过派生类对象访问该成员）时，实际上使用的是派生类新增的成员，而不是从基类继承来的</li><li>基类成员函数和派生类成员函数不会构成重载，如果派生类有同名函数，那么就会遮蔽基类中的所有同名函数，不管它们的参数是否一样</li></ul><h4 id="基类和派生类的构造函数和析构函数"><a href="#基类和派生类的构造函数和析构函数" class="headerlink" title="基类和派生类的构造函数和析构函数"></a>基类和派生类的构造函数和析构函数</h4><ul><li><p>类的构造函数不能被继承</p></li><li><p>解决方法：在派生类的构造函数中调用基类的构造函数</p></li><li><p>派生类构造函数中只能调用直接基类的构造函数，不能调用间接基类的</p></li><li><p>定义派生类构造函数时最好指明基类构造函数；如果不指明，就调用基类的默认构造函数（不带参数的构造函数）；如果没有默认构造函数，那么编译失败</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基类People</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">char</span> *m_name;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">People</span>();  <span class="comment">//基类默认构造函数</span></span><br><span class="line">    <span class="built_in">People</span>(<span class="type">char</span>*, <span class="type">int</span>);</span><br><span class="line">&#125;;</span><br><span class="line">People::<span class="built_in">People</span>(): <span class="built_in">m_name</span>(<span class="string">&quot;xxx&quot;</span>), <span class="built_in">m_age</span>(<span class="number">0</span>)&#123; &#125;</span><br><span class="line">People::<span class="built_in">People</span>(<span class="type">char</span> *name, <span class="type">int</span> age): <span class="built_in">m_name</span>(name), <span class="built_in">m_age</span>(age)&#123;&#125;</span><br><span class="line"><span class="comment">//派生类Student</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="keyword">public</span> People&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">float</span> m_score;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>();</span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">char</span> *name, <span class="type">int</span> age, <span class="type">float</span> score);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//People(name, age)就是调用基类的构造函数</span></span><br><span class="line">Student::<span class="built_in">Student</span>(): <span class="built_in">m_score</span>(<span class="number">0.0</span>)&#123; &#125;  <span class="comment">//派生类默认构造函数</span></span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="type">char</span> *name, <span class="type">int</span> age, <span class="type">float</span> score): <span class="built_in">People</span>(name, age), <span class="built_in">m_score</span>(score)&#123; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::display</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;m_name&lt;&lt;<span class="string">&quot;的年龄是&quot;</span>&lt;&lt;m_age&lt;&lt;<span class="string">&quot;，成绩是&quot;</span>&lt;&lt;m_score&lt;&lt;<span class="string">&quot;。&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    stu1.<span class="built_in">display</span>();</span><br><span class="line">    <span class="function">Student <span class="title">stu2</span><span class="params">(<span class="string">&quot;小明&quot;</span>, <span class="number">16</span>, <span class="number">90.5</span>)</span></span>;</span><br><span class="line">    stu2.<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>和构造函数类似，析构函数也不能被继承</p></li><li>与构造函数不同的是，在派生类的析构函数中不用显式地调用基类的析构函数，因为每个类只有一个析构函数，编译器知道如何选择，无需程序员干涉</li><li>析构函数的执行顺序和构造函数的执行顺序也刚好相反：<ul><li>创建派生类对象时，构造函数的执行顺序和继承顺序相同，即先执行基类构造函数，再执行派生类构造函数</li><li>而销毁派生类对象时，析构函数的执行顺序和继承顺序相反，即先执行派生类析构函数，再执行基类析构函数</li></ul></li></ul><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><ul><li><p>多继承（Multiple Inheritance）：一个派生类可以有两个或多个基类</p></li><li><p>多继承容易让代码逻辑复杂、思路混乱，一直备受争议，中小型项目中较少使用，后来的 Java、C#、PHP 等干脆取消了多继承</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> A, <span class="keyword">private</span> B, <span class="keyword">protected</span> C&#123;</span><br><span class="line">    <span class="comment">//类D新增加的成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>D 是多继承形式的派生类，它以公有的方式继承 A 类，以私有的方式继承 B 类，以保护的方式继承 C 类</p></li><li><p>D 根据不同的继承方式获取 A、B、C 中的成员，确定它们在派生类中的访问权限</p></li><li><p>多继承形式下的构造函数和单继承形式基本相同，只是要在派生类的构造函数中调用多个基类的构造函数</p></li><li><p>基类构造函数的调用顺序和和它们在派生类构造函数中出现的顺序无关，而是和声明派生类时基类出现的顺序相同</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">D</span>(形参列表): <span class="built_in">A</span>(实参列表), <span class="built_in">B</span>(实参列表), <span class="built_in">C</span>(实参列表)&#123;</span><br><span class="line">    <span class="comment">//其他操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当两个或多个基类中有同名的成员时，如果直接访问该成员，就会产生命名冲突，编译器不知道使用哪个基类的成员</p></li><li>命名冲突的时候需要在成员名字前面加上类名和域解析符<code>::</code>，以显式地指明到底使用哪个类的成员，消除二义性</li></ul><h4 id="虚继承和虚基类"><a href="#虚继承和虚基类" class="headerlink" title="虚继承和虚基类"></a>虚继承和虚基类</h4><ul><li><p>虚继承（Virtual Inheritance）：在继承方式前面加上 virtual 关键字，使得在派生类中只保留一份间接基类的成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//间接基类A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//直接基类B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;  <span class="comment">//虚继承</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//直接基类C</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;  <span class="comment">//虚继承</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//派生类D</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B, <span class="keyword">public</span> C&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">seta</span><span class="params">(<span class="type">int</span> a)</span></span>&#123; m_a = a; &#125;  <span class="comment">//正确</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setb</span><span class="params">(<span class="type">int</span> b)</span></span>&#123; m_b = b; &#125;  <span class="comment">//正确</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setc</span><span class="params">(<span class="type">int</span> c)</span></span>&#123; m_c = c; &#125;  <span class="comment">//正确</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setd</span><span class="params">(<span class="type">int</span> d)</span></span>&#123; m_d = d; &#125;  <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_d;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>虚继承的目的是让某个类做出声明，承诺愿意共享它的基类，这个被共享的基类就称为虚基类（Virtual Base Class）</p></li><li>必须在虚派生的真实需求出现前就已经完成虚派生的操作</li><li>虚派生只影响从指定了虚基类的派生类中进一步派生出来的类，它不会影响派生类本身</li><li>C++ 标准库中的 iostream 类就是一个虚继承的实际应用案例<ul><li>iostream 从 istream 和 ostream 直接继承而来，而 istream 和 ostream 又都继承自一个共同的名为 base_ios 的类</li><li>此时 istream 和 ostream 必须采用虚继承，否则将导致 iostream 类中保留两份 base_ios 类的成员</li></ul></li><li><p>不提倡在程序中使用多继承，只有在比较简单和不易出现二义性的情况或实在必要时才使用多继承，能用单一继承解决的问题就不要使用多继承</p></li><li><p>在虚继承中，虚基类是由最终的派生类初始化的，最终派生类的构造函数必须要调用虚基类的构造函数</p></li><li>对最终的派生类来说，虚基类是间接基类，而不是直接基类，这跟普通继承不同<ul><li>在普通继承中，派生类构造函数中只能调用直接基类的构造函数，不能调用间接基类的</li></ul></li></ul><h4 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h4><ul><li>数据类型转换的前提是，编译器知道如何对数据进行取舍</li><li>类其实也是一种数据类型，也可以发生数据类型转换</li><li>不过这种转换只有在基类和派生类之间才有意义，并且只能将派生类赋值给基类，包括将派生类对象赋值给基类对象、将派生类指针赋值给基类指针、将派生类引用赋值给基类引用，这称为向上转型（Upcasting）</li><li>相应地，将基类赋值给派生类称为向下转型（Downcasting）</li><li>向上转型非常安全，可以由编译器自动完成；向下转型有风险，需要程序员手动干预</li><li>赋值的本质是将现有的数据写入已分配好的内存中，对象的内存只包含了成员变量，所以对象之间的赋值是成员变量的赋值，成员函数不存在赋值问题</li><li>这种转换关系是不可逆的，只能用派生类对象给基类对象赋值，而不能用基类对象给派生类对象赋值</li><li>通过基类指针访问派生类的成员<ul><li>编译器通过指针来访问成员变量，指针指向哪个对象就使用哪个对象的数据</li><li>编译器通过指针的类型来访问成员函数，指针属于哪个类的类型就使用哪个类的函数</li></ul></li></ul><h3 id="多态与虚函数"><a href="#多态与虚函数" class="headerlink" title="多态与虚函数"></a>多态与虚函数</h3><ul><li>多态（polymorphism）：同一名字的事物可以完成不同的功能</li><li>多态可以分为编译时的多态和运行时的多态<ul><li>编译时的多态：主要是指函数的重载（包括运算符的重载）、对重载函数的调用，在编译时就能根据实参确定应该调用哪个函数</li><li>运行时的多态：通常所指的多态，和继承、虚函数等概念有关</li></ul></li><li>通过基类指针只能访问派生类的成员变量，但是不能访问派生类的成员函数<ul><li>为了消除这种尴尬，让基类指针能够访问派生类的成员函数，C++ 增加了虚函数（Virtual Function），只需要在函数声明前面增加 virtual 关键字即可</li></ul></li><li>有了虚函数，基类指针指向基类对象时就使用基类的成员（包括成员函数和成员变量），指向派生类对象时就使用派生类的成员</li><li>因此，基类指针可以按照基类的方式来做事，也可以按照派生类的方式来做事，它有多种形态，或者说有多种表现方式，称为多态（Polymorphism）</li><li>C++提供多态的目的：可以通过基类指针对所有派生类（包括直接派生和间接派生）的成员变量和成员函数进行全方位的访问，尤其是成员函数。如果没有多态，我们只能访问成员变量</li><li>借助引用也可以实现多态，不过引用不像指针灵活，指针可以随时改变指向，而引用只能指代固定的对象，在多态性方面缺乏表现力</li><li>为了方便，可以只将基类中的函数声明为虚函数，这样所有派生类中具有遮蔽关系的同名函数都将自动成为虚函数</li><li>当在基类中定义了虚函数时，如果派生类没有定义新的函数来遮蔽此函数，那么将使用基类的虚函数</li><li>只有派生类的虚函数覆盖基类的虚函数（函数原型相同）才能构成多态（通过基类指针访问派生类函数）<ul><li>例如基类虚函数的原型为<code>virtual void func();</code>，派生类虚函数的原型为<code>virtual void func(int);</code>，那么当基类指针 p 指向派生类对象时，语句<code>p -&gt; func(100);</code>将会出错，而语句<code>p -&gt; func();</code>将调用基类的函数</li></ul></li><li>派生类不继承基类的构造函数，将构造函数声明为虚函数没有什么意义</li><li>析构函数可以声明为虚函数，而且有时候必须要声明为虚函数</li></ul><h4 id="构成多态的条件"><a href="#构成多态的条件" class="headerlink" title="构成多态的条件"></a>构成多态的条件</h4><ul><li><p>必须存在继承关系</p></li><li><p>继承关系中必须有同名的虚函数，并且它们是覆盖关系（函数原型相同）</p></li><li><p>存在基类的指针，通过该指针调用虚函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基类Base</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Base::func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;void Base::func()&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Base::func</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;void Base::func(int)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//派生类Derived</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">char</span> *)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Derived::func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;void Derived::func()&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Derived::func</span><span class="params">(<span class="type">char</span> *str)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;void Derived::func(char *)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在基类中将void func()声明为虚函数，这样派生类中的void func()就会自动成为虚函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base *p = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">    p -&gt; <span class="built_in">func</span>();  <span class="comment">//调用的是派生类的虚函数，构成了多态，输出void Derived::func()</span></span><br><span class="line">    p -&gt; <span class="built_in">func</span>(<span class="number">10</span>);  <span class="comment">//调用的是基类的虚函数，因为派生类中没有函数覆盖它，输出void Base::func(int)</span></span><br><span class="line">    p -&gt; <span class="built_in">func</span>(<span class="string">&quot;abcd&quot;</span>);  <span class="comment">//compile error，因为通过基类的指针只能访问从基类继承过去的成员，不能访问派生类新增的成员</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>什么时候声明虚函数</p><ul><li>首先看成员函数所在的类是否会作为基类，然后看成员函数在类的继承后有无可能被更改功能</li><li>如果希望更改其功能的，一般应该将它声明为虚函数</li><li>如果成员函数在类被继承后功能不需修改，或派生类用不到该函数，则不要把它声明为虚函数</li></ul></li></ul><h4 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h4><ul><li><p>纯虚函数没有函数体，只有函数声明，在虚函数声明的结尾加上 <code>=0</code>，表明此函数为纯虚函数</p></li><li><p>包含纯虚函数的类称为抽象类（Abstract Class），无法实例化，也就是无法创建对象，原因很明显，纯虚函数没有函数体，不是完整的函数，无法调用，也无法为其分配内存空间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> 返回值类型 函数名 (函数参数) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>抽象基类除了约束派生类的功能，还可以实现多态</p></li><li><p>一个纯虚函数就可以使类成为抽象基类，但是抽象基类中除了包含纯虚函数外，还可以包含其它的成员函数（虚函数或普通函数）和成员变量</p></li><li><p>只有类中的虚函数才能被声明为纯虚函数，普通成员函数和顶层函数均不能声明为纯虚函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//顶层函数不能被声明为纯虚函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span> </span>= <span class="number">0</span>;   <span class="comment">//compile error</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">base</span>&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    <span class="comment">//普通成员函数不能被声明为纯虚函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;  <span class="comment">//compile error</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="typeid-运算符"><a href="#typeid-运算符" class="headerlink" title="typeid 运算符"></a>typeid 运算符</h4><ul><li><p>typeid 运算符用来获取一个表达式的类型信息</p></li><li><p>类型信息是创建数据的模板，数据占用多大内存、能进行什么样的操作、该如何操作等，这些都由它的类型信息决定</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">typeid</span>( dataType )</span><br><span class="line"><span class="built_in">typeid</span>( expression )    <span class="comment">//dataType 是数据类型，expression 是表达式</span></span><br></pre></td></tr></table></figure></li><li><p>typeid 会把获取到的类型信息保存到一个 <code>type_info</code> 类型的对象里面，并返回该对象的常引用,当需要具体的类型信息时，可以通过成员函数来提取</p></li><li><p>type_info 类位于 <code>typeinfo</code> 头文件，它的构造函数是 private 属性的，所以不能在代码中直接实例化，只能由编译器在内部实例化（借助友元），而且还重载了 private 属性的 <code>=</code> 运算符，所以也不能赋值</p></li></ul><h3 id="运算符重载（operator）"><a href="#运算符重载（operator）" class="headerlink" title="运算符重载（operator）"></a>运算符重载（operator）</h3><ul><li><p>运算符重载是通过函数实现的，它本质上是函数重载，运算符重载函数除了函数名有特定的格式，其它地方和普通函数并没有区别</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 <span class="keyword">operator</span> 运算符名称 (形参表列)&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重载后运算符的含义应该符合原有用法习惯，例如重载 <code>+</code> 运算符，完成的功能就应该类似于做加法</p></li><li><p>重载应尽量保留运算符原有的特性</p></li><li><p>运算符重载不改变运算符的优先级。</p></li><li><p><code>.、.*、::、? :、sizeof</code> 不能被重载</p></li><li><p>重载运算符 <code>()、[]、-&gt;</code> 或者赋值运算符 <code>=</code> 时，只能将它们重载为成员函数，不能重载为全局函数</p></li><li><p>运算符重载的实质是将运算符重载为一个函数，使用运算符的表达式就被解释为对重载函数的调用</p></li><li><p>运算符可以重载为全局函数，此时函数的参数个数就是运算符的操作数个数，运算符的操作数就成为函数的实参</p></li><li><p>运算符也可以重载为成员函数。此时函数的参数个数就是运算符的操作数个数减一，运算符的操作数有一个成为函数作用的对象，其余的成为函数的实参</p></li><li><p>必要时需要重载赋值运算符 <code>=</code>，以避免两个对象内部的指针指向同一片存储空间</p></li><li><p>运算符可以重载为全局函数，然后声明为类的友元</p></li><li><p><code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> 是在 iostream 中被重载，才成为所谓的“流插入运算符”和“流提取运算符”的</p></li><li><p>类型的名字可以作为强制类型转换运算符，也可以被重载为类的成员函数，它能使得对象被自动转换为某种类型</p></li><li><p>自增、自减运算符各有两种重载方式，用于区别前置用法和后置用法</p></li><li><p>运算符重载不改变运算符的优先级，重载运算符时，应该尽量保留运算符原本的特性</p></li></ul><h3 id="模板和泛型程序设计"><a href="#模板和泛型程序设计" class="headerlink" title="模板和泛型程序设计"></a>模板和泛型程序设计</h3><ul><li><p>泛型程序设计（generic programming）是一种算法在实现时不指定具体要操作的数据的类型的程序设计方法</p></li><li><p>所谓“泛型”，指的是算法只要实现一遍，就能适用于多种数据类型，泛型程序设计方法的优势在于能够减少重复代码的编写</p></li><li><p>泛型程序设计的概念最早出现于 1983 年的 Ada 语言，其最成功的应用就是 C++ 的标准模板库（STL）</p></li><li><p>在 C++ 中，模板分为函数模板和类模板两种，在编写函数时考虑能否将其写成函数模板，编写类时考虑能否将其写成类模板，以便实现重用</p></li><li><p>类型的参数化：数据的类型也可以通过参数来传递，在函数定义时可以不指明具体的数据类型，当发生函数调用时，编译器可以根据传入的实参自动推断数据类型</p></li><li><p>函数模板（Function Template）：建立一个通用函数，它所用到的数据的类型（包括返回值类型、形参类型、局部变量类型）可以不具体指定，而是用一个虚拟的类型来代替（实际上是用一个标识符来占位），等发生函数调用时再根据传入的实参来逆推出真正的类型</p></li><li><p>函数模板除了支持值的参数化，还支持类型的参数化</p></li><li><p>一但定义了函数模板（类模板），就可以将类型参数用于函数定义和函数声明了</p></li><li><p>函数模板也可以提前声明，不过声明时需要带上模板头，并且模板头和函数定义（声明）是一个不可分割的整体，它们可以换行，但中间不能有分号</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> 类型参数<span class="number">1</span> , <span class="keyword">typename</span> 类型参数<span class="number">2</span> , ...&gt; 返回值类型  函数名(形参列表)&#123;</span><br><span class="line">    <span class="comment">//在函数体中可以使用类型参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类模板和函数模板都是以 template 开头（当然也可以使用 class，目前来讲它们没有任何区别），后跟类型参数；类型参数不能为空，多个类型参数用逗号隔开</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> 类型参数<span class="number">1</span> , <span class="keyword">typename</span> 类型参数<span class="number">2</span> , …&gt; <span class="keyword">class</span> 类名&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>根据“在定义变量时是否需要显式地指明数据类型”可以分为强类型语言和弱类型语言</p><ul><li>强类型语言在定义变量时需要显式地指明数据类型，并且一旦为变量指明了某种数据类型，该变量以后就不能赋予其他类型的数据了，除非经过强制类型转换或隐式类型转换（C/C++、Java、C#）</li><li>弱类型语言在定义变量时不需要显式地指明数据类型，编译器（解释器）会根据赋给变量的数据自动推导出类型，并且可以赋给变量不同类型的数据（JavaScript、Python、PHP、Ruby、Shell、Perl）</li><li>不管是强类型语言还是弱类型语言，在编译器（解释器）内部都有一个类型系统来维护变量的各种信息</li></ul></li></ul><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul><li><p>程序的错误大致可以分为三种，分别是语法错误、逻辑错误和运行时错误：</p><ol><li>语法错误在编译和链接阶段就能发现，只有 100% 符合语法规则的代码才能生成可执行程序</li><li>编写的代码思路有问题，不能够达到最终的目标，这种错误可以通过调试来解决</li><li>运行时错误是指程序在运行期间发生的错误，例如除数为 0、内存分配失败、数组越界、文件不存在等</li></ol></li><li><p>C++ 异常（Exception）机制就是为解决运行时错误而引入的</p></li><li><p>抛出异常:报告一个运行时错误，程序员可以根据错误信息来进一步处理</p></li><li><p>捕获异常</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 可能抛出异常的语句</span></span><br><span class="line">&#125;<span class="built_in">catch</span>(exceptionType variable)&#123;</span><br><span class="line">    <span class="comment">// 处理异常的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发生异常时必须将异常明确地抛出，try 才能检测到；如果不抛出来，即使有异常 try 也检测不到</p></li><li><p>可以将 catch 看做一个没有返回值的函数，当异常发生后 catch 会被调用，并且会接收实参（异常数据），但catch 和真正的函数调用相比，多了一个「在运行阶段将实参和形参匹配」的过程</p></li><li><p>多级 catch</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能抛出异常的语句</span></span><br><span class="line">&#125;<span class="built_in">catch</span> (exception_type_1 e)&#123;</span><br><span class="line">    <span class="comment">//处理异常的语句</span></span><br><span class="line">&#125;<span class="built_in">catch</span> (exception_type_2 e)&#123;</span><br><span class="line">    <span class="comment">//处理异常的语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其他的catch</span></span><br><span class="line"><span class="built_in">catch</span> (exception_type_n e)&#123;</span><br><span class="line">    <span class="comment">//处理异常的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>throw 用作异常规范</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">func</span> <span class="params">(<span class="type">char</span> param)</span> <span class="title">throw</span> <span class="params">(<span class="type">int</span>, <span class="type">char</span>, exception)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="文件和流"><a href="#文件和流" class="headerlink" title="文件和流"></a>文件和流</h3><ul><li><p>打开文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, ios::openmode mode)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>关闭文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>读取 &amp; 写入</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">char</span> data[<span class="number">100</span>];</span><br><span class="line">   <span class="comment">// 以写模式打开文件</span></span><br><span class="line">   ofstream outfile;</span><br><span class="line">   outfile.<span class="built_in">open</span>(<span class="string">&quot;afile.dat&quot;</span>);</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Writing to the file&quot;</span> &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Enter your name: &quot;</span>; </span><br><span class="line">   cin.<span class="built_in">getline</span>(data, <span class="number">100</span>);</span><br><span class="line">   <span class="comment">// 向文件写入用户输入的数据</span></span><br><span class="line">   outfile &lt;&lt; data &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Enter your age: &quot;</span>; </span><br><span class="line">   cin &gt;&gt; data;</span><br><span class="line">   cin.<span class="built_in">ignore</span>();</span><br><span class="line">   <span class="comment">// 再次向文件写入用户输入的数据</span></span><br><span class="line">   outfile &lt;&lt; data &lt;&lt; endl;</span><br><span class="line">   <span class="comment">// 关闭打开的文件</span></span><br><span class="line">   outfile.<span class="built_in">close</span>();</span><br><span class="line">   <span class="comment">// 以读模式打开文件</span></span><br><span class="line">   ifstream infile; </span><br><span class="line">   infile.<span class="built_in">open</span>(<span class="string">&quot;afile.dat&quot;</span>); </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Reading from the file&quot;</span> &lt;&lt; endl; </span><br><span class="line">   infile &gt;&gt; data;  </span><br><span class="line">   <span class="comment">// 在屏幕上写入数据</span></span><br><span class="line">   cout &lt;&lt; data &lt;&lt; endl;   </span><br><span class="line">   <span class="comment">// 再次从文件读取数据，并显示它</span></span><br><span class="line">   infile &gt;&gt; data; </span><br><span class="line">   cout &lt;&lt; data &lt;&lt; endl; </span><br><span class="line">   <span class="comment">// 关闭打开的文件</span></span><br><span class="line">   infile.<span class="built_in">close</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>istream 和 ostream 都提供了用于重新定位文件位置指针的成员函数。这些成员函数包括关于 istream 的 seekg（”seek get”）和关于 ostream 的 seekp（”seek put”）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定位到 fileObject 的第 n 个字节（假设是 ios::beg）</span></span><br><span class="line">fileObject.<span class="built_in">seekg</span>( n );</span><br><span class="line"><span class="comment">// 把文件的读指针从 fileObject 当前位置向后移 n 个字节</span></span><br><span class="line">fileObject.<span class="built_in">seekg</span>( n, ios::cur );</span><br><span class="line"><span class="comment">// 把文件的读指针从 fileObject 末尾往回移 n 个字节</span></span><br><span class="line">fileObject.<span class="built_in">seekg</span>( n, ios::end );</span><br><span class="line"><span class="comment">// 定位到 fileObject 的末尾</span></span><br><span class="line">fileObject.<span class="built_in">seekg</span>( <span class="number">0</span>, ios::end );</span><br></pre></td></tr></table></figure></li></ul><h3 id="重用类代码"><a href="#重用类代码" class="headerlink" title="重用类代码"></a>重用类代码</h3><ul><li>用类定义对象</li><li>通过组合定义新的类（组合类）</li><li>多级访问</li><li>类的聚合（指针形式传递）</li><li>通过继承定义新的类（继承类）</li><li>基类，派生类（基类成员与新增成员）</li><li>同名覆盖</li><li>派生类对基类成员的二次封装</li><li><code>obj.Circle::input()</code></li><li>保护权限与保护继承</li><li>继承与派生主要用于重用类代码和凝练类代码</li><li>多态性：相同程序元素不同的语法解释</li><li>运算符的多态与重载</li><li>对象的替换和多态</li><li>Liskov 替换准则：将派生类对象当做基类对象使用</li><li>类族：基类和派生类</li><li>对象的多态性</li><li>虚函数（virtual关键字）</li><li>抽象类</li><li>多继承（从多个类中继承，JAVA和C#中没有）</li></ul><h3 id="流类库和文件读写"><a href="#流类库和文件读写" class="headerlink" title="流类库和文件读写"></a>流类库和文件读写</h3><ul><li>输入/输出流</li><li>流类库：以ios为基类的类族</li><li>数据缓冲区和流缓冲区</li><li>标准I/O（<code>&lt;iostream&gt;</code>，<code>cin</code>/<code>cout</code>）</li><li>文件I/O（<code>&lt;fstream&gt;</code>，<code>fin</code>/<code>fout</code>）</li><li>string类和字符串I/O（<code>&lt;string&gt;</code>，<code>&lt;sstream&gt;</code>，<code>str</code>）</li><li>基于Unicode编码的流类库（以wios为基类）</li></ul><h3 id="C-标准库"><a href="#C-标准库" class="headerlink" title="C++标准库"></a>C++标准库</h3><ul><li>系统函数和系统类库</li><li>模板技术：函数模板和类模板</li><li>使用typedef类型定义显示地实例化类模板</li><li>标准模板库STL（Standard Template Library）</li><li>异常处理机制：throw语句 / try-catch机制 / <code>&lt;exception&gt;</code></li><li>数据集合及处理算法（CRUD）</li><li>链表</li><li>迭代器（Iterator）</li><li>查找算法、增删改算法和排序相关算法</li><li>容器类：<code>&lt;vector&gt;</code>、<code>&lt;list&gt;</code>、<code>&lt;set&gt;</code>、<code>&lt;map&gt;</code></li></ul><h3 id="第三方开发的函数-类库"><a href="#第三方开发的函数-类库" class="headerlink" title="第三方开发的函数/类库"></a>第三方开发的函数/类库</h3><ul><li>微软基础类库 Microsoft Foundation Classes（MFC）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>必会新手 50 题之阶段一</title>
      <link href="/%E5%BF%85%E4%BC%9A%E6%96%B0%E6%89%8B50%E9%A2%98%E9%98%B6%E6%AE%B5%E4%B8%80/"/>
      <url>/%E5%BF%85%E4%BC%9A%E6%96%B0%E6%89%8B50%E9%A2%98%E9%98%B6%E6%AE%B5%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在线评测平台 LintCode 整合了当前各大IT企业技术求职的热门题库，拥有2000多道常见面试题，可有效提升算法与数据结构水平，助力通过知名IT企业面试，拿到满意的Offer。新手必刷编程50题为初到Lintcode所接触到的最基础的阶梯练习，必知必会。在新手50题阶段一中考验的是对基本数据类型的掌握。</p></blockquote><span id="more"></span><h3 id="37、反转一个3位整数"><a href="#37、反转一个3位整数" class="headerlink" title="37、反转一个3位整数"></a>37、反转一个3位整数</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>反转一个只有3位数的整数。</p><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>获得个位数并将它变成百位数，获得十位数并将它变成十位数，获得百位数并将它变成个数位。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverseInteger</span><span class="params">(<span class="type">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">10</span> * <span class="number">100</span> + number / <span class="number">10</span> % <span class="number">10</span> * <span class="number">10</span> + number / <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1、A-B问题"><a href="#1、A-B问题" class="headerlink" title="1、A+B问题"></a>1、A+B问题</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>给出两个整数a和b，求他们的和并以整数（int）的形式返回。</p><h4 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h4><p>不需要从标准输入流读入数据，只需要根据<code>aplusb</code>传入的两个参数a和b，计算他们的和并返回就行。</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">aplusb</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1300、巴什博弈"><a href="#1300、巴什博弈" class="headerlink" title="1300、巴什博弈"></a>1300、巴什博弈</h3><h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><p>你正在和朋友玩一个游戏：桌子上有一堆石头，每一次你们都会从中拿出1到3个石头。拿走最后一个石头的人赢得游戏。</p><p>游戏开始时，你是先手。假设两个人都绝对理性，都会做出最优决策。给定石头的数量，判断你是否会赢得比赛。</p><p>举例：有四个石头，那么你永远不会赢得游戏。不管拿几个，最后一个石头一定会被你的朋友拿走。</p><h4 id="问题分析-2"><a href="#问题分析-2" class="headerlink" title="问题分析"></a>问题分析</h4><p>巴什博弈：n个物品，两个人轮流从这堆物品中取物，规定每次至少取一个，最多取m个，最后取光者得胜。</p><p>如果物品数量 n 不能被 m+1 整除，则 n=k(m+1)+x（k为自然数，0&lt;x&lt;m+1），那么只要先手者第一次拿走 x 个物品，剩余物品数量变为 k(m+1)，接下来无论后手者怎么拿，先手者都可以让物品数量变 k(m+1) ，k逐渐变小直到最后变为 1，此时剩余物品为 m+1，接下来无论后手者拿多少都拿不完 ，并且会使剩余物品数量小于 m+1 ，而先手者则可以直接把剩下的拿完，先手者必胜。</p><p>如果物品数量为 k(m+1)，即 n 可被 (m+1) 整除，此时先手者就会面临上面的后手者的问题，先手者必输。</p><p>由题可知，m=3，所以物品数量不能被4整除，即n若是4的倍数则输出False，否则输出True。</p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canWinBash</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="764、计算圆周长和面积"><a href="#764、计算圆周长和面积" class="headerlink" title="764、计算圆周长和面积"></a>764、计算圆周长和面积</h3><h4 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h4><p>给定一个整数<code>r</code>代表一个圆的半径，返回一个数组，其中数组的第一个元素代表圆的周长，数组的第二个元素代表圆的面积。</p><h4 id="问题分析-3"><a href="#问题分析-3" class="headerlink" title="问题分析"></a>问题分析</h4><p>PI = 3.14。</p><p>向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container），是一个能够存放任意类型的动态数组。</p><p><code>#include&lt;vector&gt;;</code></p><h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">calculate</span><span class="params">(<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt;ans;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(<span class="number">2</span> * <span class="number">3.14</span> * r);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(<span class="number">3.14</span> * r * r);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LintCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础知识总结</title>
      <link href="/Python%E5%9F%BA%E7%A1%80/"/>
      <url>/Python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计的一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。</p></blockquote><span id="more"></span><h3 id="计算机的使用方式"><a href="#计算机的使用方式" class="headerlink" title="计算机的使用方式"></a>计算机的使用方式</h3><ul><li>Interface 交互界面</li><li>TUI（文本交互界面）和 GUI（图形化交互界面）</li><li>windows 的命令行</li><li>环境变量（environment variable）<ul><li>path 环境变量</li></ul></li></ul><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><ul><li>十进制（最常用的进制）</li><li>二进制（计算机底层使用的进制）<ul><li>bit 是计算机中的最小的单位</li><li>byte 是我们最小的可操作的单位</li></ul></li><li>八进制（一般不用）</li><li>十六进制</li><li>我们在查看二进制数据时，一般会以十六进制的形式显示</li></ul><h3 id="文本文件和字符集"><a href="#文本文件和字符集" class="headerlink" title="文本文件和字符集"></a>文本文件和字符集</h3><ul><li>文本分成两种，一种叫做纯文本，还有一种叫做富文本</li><li>编码；解码；字符集</li><li>常见的字符集：ASCII；ISO-8859-1；GB2312；Unicode，最常用的就是 UTF-8</li><li>乱码</li></ul><h3 id="计算机语言"><a href="#计算机语言" class="headerlink" title="计算机语言"></a>计算机语言</h3><ul><li>机器语言</li><li>符号语言（汇编）</li><li>高级语言</li><li>编译型语言和解释型语言</li></ul><h3 id="基本语法概念"><a href="#基本语法概念" class="headerlink" title="基本语法概念"></a>基本语法概念</h3><ul><li>表达式</li><li>语句</li><li>程序（program）</li><li>函数（function）</li><li>严格区分大小写</li><li>每一行语句不要过长（规范中建议每行不要超过 80 个字符）</li><li>多行编写时语句后边以\结尾</li><li>注释要求简单明了，一般习惯上#后边会跟着一个空格</li></ul><h3 id="字面量、变量和标识符"><a href="#字面量、变量和标识符" class="headerlink" title="字面量、变量和标识符"></a>字面量、变量和标识符</h3><ul><li>在程序中可以直接使用字面量</li><li>变量（variable）变量可以用来保存字面量</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>数据类型指的就是变量的值得类型，也就是可以为变量赋哪些值</li><li>数值：整数、浮点数、复数</li><li>整型：<code>0b</code>（二进制）<code>0x</code>（十六进制）<code>0o</code>（八进制）</li><li>字符串：<code>\t</code> 缩进 <code>\n</code> 换行 <code>\uxxxx</code>表示 unicode 编码</li><li>格式化字符串：<code>%s</code> 任意字符 <code>%f</code> 浮点数占位符 <code>%d</code> 整数占位符</li><li>布尔值：<code>True</code> <code>False</code></li><li>空值：<code>None</code></li><li>类型检查：<code>type()</code></li></ul><h3 id="对象（object）"><a href="#对象（object）" class="headerlink" title="对象（object）"></a>对象（object）</h3><ul><li>Python 是一门面向对象的语言</li><li>对象就是内存中专门用来存储指定数据的一块区域</li><li>数值、字符串、布尔值、None 都是对象</li><li>每个对象中都要保存三种数据<ol><li>id（标识）：唯一性，<code>id()</code>函数，解析器生成，不能改变</li><li>type（类型）：<code>type()</code>函数，强类型—创建类型后便不能修改</li><li>value（值）：可变对象、不可变对象</li></ol></li></ul><h3 id="变量和对象"><a href="#变量和对象" class="headerlink" title="变量和对象"></a>变量和对象</h3><ul><li>对象并没有直接存储到变量中，在 Python 中变量更像是给对象起了一个别名</li><li>变量中存储的不是对象的值，而是对象的 id，当我们使用变量时，实际上就是在通过对象 id 在查找对象</li><li>变量中保存的对象，只有在为变量重新赋值时才会改变</li><li>变量和变量之间是相互独立的，修改一个变量不会影响另一个变量</li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>类型转换是将一个类型的对象转换为其他对象</li><li><code>int()</code>、<code>float()</code>、<code>str()</code>、<code>bool()</code></li><li>类型转换不是改变对象本身的类型，而是根据当前对象的值创建一个新对象</li></ul><h3 id="运算符-操作符"><a href="#运算符-操作符" class="headerlink" title="运算符(操作符)"></a>运算符(操作符)</h3><ul><li>运算符可以对一个值或多个值进行运算或各种操作</li><li>运算符的分类：<ol><li>算术运算符：<code>//</code>整除、<code>%余</code>数</li><li>赋值运算符</li><li>比较运算符（关系运算符）：<code>==</code>等于、<code>!=</code>不等于、字符比较unicode 编码、<code>is (is not)</code>比较 id</li><li>逻辑运算符：<code>not</code>、<code>and</code>、<code>or</code></li><li>条件运算符（三元运算符）：<code>a if a&gt;b else b</code></li></ol></li></ul><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><ul><li>Python 代码在执行时是按照自上向下顺序执行的</li><li>通过流程控制语句，可以改变程序的执行顺序，也可以让指定的程序反复执行多次</li><li>流程控制语句分成两大类：条件判断语句，循环语句</li></ul><h3 id="条件判断语句（if-语句）"><a href="#条件判断语句（if-语句）" class="headerlink" title="条件判断语句（if 语句）"></a>条件判断语句（if 语句）</h3><ul><li>if、elif、else</li><li>try、except</li></ul><h3 id="循环语句（while、for-语句）"><a href="#循环语句（while、for-语句）" class="headerlink" title="循环语句（while、for 语句）"></a>循环语句（while、for 语句）</h3><ul><li>while、else、for</li><li>break、continue、pass（占位）</li></ul><h3 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h3><ul><li>外层循环控制图形的高度</li><li>内层循环控制图形的宽度</li><li><code>print(x, end=&quot; &quot;）</code>不换行输出</li></ul><h3 id="序列（sequence）"><a href="#序列（sequence）" class="headerlink" title="序列（sequence）"></a>序列（sequence）</h3><ul><li>序列是 Python 中最基本的一种数据结构</li><li>数据结构指计算机中数据存储的方式</li><li>序列用于保存一组有序的数据，所有的数据在序列当中都有一个唯一的位置（索引），并且序列中的数据会按照添加的顺序来分配索引</li><li>序列的分类：<ol><li>可变序列（序列中的元素可以改变）：<ul><li>列表（list）</li></ul></li><li>不可变序列（序列中的元素不能改变）：<ul><li>字符串（str）</li><li>元组（tuple）</li></ul></li></ol></li></ul><h3 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h3><ul><li>列表是 Python 中的一个对象</li><li>对象（object）就是内存中专门用来存储数据的一块区域</li><li>之前我们学习的对象，像数值，它只能保存一个单一的数据</li><li>列表中可以保存多个有序的数据</li><li>列表是用来存储对象的对象</li><li><code>len()</code>，所取长度 = 最后一位索引+1</li><li>列表<code>[0:8:2]</code>，<code>起始：结束：间隔</code>，包含开始不包含结束，间隔若为负数则从后往前取</li><li><code>min()</code>，<code>max()</code>，<code>in</code>，<code>not in</code></li><li><code>xxx.index(&#39;n&#39;,0,8)</code> 获取指定元素在列表中的位置，<code>xxx.count()</code>统计元素在列表中出现次数</li><li><code>xxx.append(x)</code>插入元素到末尾，<code>s.insert(&#39;x&#39;, 2)</code>插入元素+插入索引位置，<code>x.extend([x,y,z])</code>插入列表</li><li><code>del [1:2] = x.remove(1)</code>，<code>xxx[0:2] = [&#39;x&#39;,&#39;y&#39;]</code>替换元素，<code>x.pop(2)</code>删除索引位置的元素并返回此元素</li><li><code>x.reverse()</code>反转，<code>x.sort()</code>排序，默认升序，<code>x.sort(reverse=True)</code>为降序</li><li><code>for x in xlist</code> 遍历序列，<code>range()</code> 函数生成自然数列</li></ul><h3 id="元组（tuple）"><a href="#元组（tuple）" class="headerlink" title="元组（tuple）"></a>元组（tuple）</h3><ul><li>元组是不可变的序列 <code>tuple = (1, 2, 3, 4, 5)</code></li><li>当元组不是空元组时，括号可以省略</li><li>元组的解包 <code>a, b, *c = tuple</code>，c 为<code>[3, 4, 5]</code></li></ul><h3 id="可变对象"><a href="#可变对象" class="headerlink" title="可变对象"></a>可变对象</h3><ul><li>每个对象中都保存了三个数据：<ul><li>id（标识）</li><li>type（类型）</li><li>value（值）</li></ul></li><li>列表就是一个可变对象</li><li>一般只有在为变量赋值时才是修改变量，其余的都是修改对象</li><li><code>==</code>、<code>!=</code>比较对象的值，<code>is</code>、<code>is not</code> 比较对象的 <code>id</code></li></ul><h3 id="字典（dict）"><a href="#字典（dict）" class="headerlink" title="字典（dict）"></a>字典（dict）</h3><ul><li>字典属于一种新的数据结构，称为映射（mapping）</li><li>字典的作用和列表类似，都是用来存储对象的容器</li><li>列表存储数据的性能很好，但是查询数据的性能的很差</li><li>在字典中每一个元素都有一个唯一的名字，通过这个唯一的名字可以快速的查找到指定的元素</li><li>在查询元素时，字典的效率是非常快的</li><li>在字典中可以保存多个对象，每个对象都会有一个唯一的名字<ul><li>这个唯一的名字，我们称其为键（key），键可以是任意的不可变对象</li><li>通过 key 可以快速的查询 value</li><li>这个对象，我们称其为值（value），值可以是任意对象</li><li>所以字典，我们也称为叫做键值对（key-value）结构</li><li>每个字典中都可以有多个键值对，而每一个键值对我们称其为一项（item）</li></ul></li><li><code>&#123;key : value, key : value&#125;</code>、<code>d = dict(k1 = v1 , k2 = v2 , k3 = v3)</code>、<code>d = dict[ (k1 , v1) , (k2 , v2) , (k3 , v3) ]</code></li><li><code>d[key]</code>、<code>d.get(key , 默认值)</code> 如不存在 key 则返回默认值、<code>d[key] = value</code></li><li><code>in</code>、<code>not in</code> 检查键 key、</li><li><code>.setdefault(key[ , default ])</code>如果 key 存在，返回 key 的值，如果 key 不存在，添加并返回默认值</li><li><code>.update([other])</code> 将其他字典中的 key-value 添加到当前字典，若 key 重复则替换</li><li><code>.popiterm()</code> 默认删除最后一个键值对，返回的是元组<code>(key,value)</code>，<code>pop(key , 默认值)</code>返回 value 或默认值</li><li><code>.clear()</code>清空、<code>.copy()</code>用于对字典进行浅复制（复制后的对象和原对象相互独立）（不复制可变对象）</li><li><code>.keys()</code>会返回字典的所有 key，<code>.values()</code>返回字典的所有 value，<code>.items()</code>返回字典中所有项（双值子序列）、<code>for k, v in d.items(): print(k , v)</code></li></ul><h3 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h3><ul><li>集合和列表非常相似</li><li>不同点：<ol><li>集合中只能存储不可变对象</li><li>集合中存储的对象是无序（不是按照元素的插入顺序保存）</li><li>集合中不能出现重复的元素</li></ol></li><li><code>set()</code>、<code>&#123;&#125;</code>、<code>s = set(&#39;Hello&#39;) → &#123;&#39;H&#39; , &#39;e&#39; , &#39;l&#39; , &#39;o&#39;&#125;</code></li><li><code>.add()</code>向集合中添加元素、<code>.update()</code>将集合/元组/字典(key)中元素添加至集合中</li><li><code>.pop()</code>随机删除并返回元素、<code>.remove()</code>删除指定元素、<code>copy()</code>浅复制</li><li><code>s &amp; s2</code> 交集运算，<code>s | s2</code> 并集运算，<code>s - s2</code>差集运算，<code>s ^ s2</code>亦或运算</li></ul><h3 id="函数（function）"><a href="#函数（function）" class="headerlink" title="函数（function）"></a>函数（function）</h3><ul><li>函数也是一个对象</li><li>对象是内存中专门用来存储数据的一块区域</li><li>函数可以用来保存一些可执行的代码，并且可以在需要时，对这些语句进行多次的调用</li><li>创建函数：<ul><li><code>def 函数名([形参 1,形参 2,...形参 n])：代码块</code></li><li>函数名必须要符号标识符的规范（可以包含字母、数字、下划线、但是不能以数字开头）</li><li>函数中保存的代码不会立即执行，需要调用函数代码才会执行</li><li>调用函数：<code>函数对象()</code></li><li>定义函数一般都是要实现某种功能的</li></ul></li></ul><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><ul><li>在定义函数时，可以在函数名后的()中定义数量不等的形参，多个形参之间使用,隔开</li><li>形参（形式参数），定义形参就相当于在函数内部声明了变量，但是并不赋值<ul><li>定义形参时，可以指定默认值</li></ul></li><li>实参（实际参数）<ul><li>如果函数定义时指定了形参，那么在调用函数时也必须传递实参，实参将会赋值给对应的形参</li><li>有几个形参就得传几个实参</li></ul></li><li>实参的传递方式<ul><li>位置参数</li><li>关键字参数</li><li>混合使用时，必须把位置参数放前面</li></ul></li><li>实参可以传递任意类型的对象</li><li>在函数中对形参进行重新赋值不会影响其他变量</li><li>如果形参执行的是一个对象，那么通过形参修改对象会影响到所有指向该对象的变量</li><li>定义函数形参前加 <code>*</code>，那么这个形参会获取到所有实参（将所有实参保留到元组），使用时遍历元组</li><li>可变参数不是必须写最后，但带<code>*</code>后的所有参数必须用关键字参数传递</li><li><code>**</code>形参可以接收其他的关键字参数，并将它们保存在字典中</li><li>传递实参前加<code>*</code>可以将序列中元素依次传递（参数解包），<code>**</code>则对字典解包</li><li><code>return</code> 返回值，可返回任意对象，return 一旦指向函数自动结束</li></ul><h3 id="作用域与命名空间"><a href="#作用域与命名空间" class="headerlink" title="作用域与命名空间"></a>作用域与命名空间</h3><ul><li><code>help()</code></li><li>文档字符串就是定义函数的说明，在函数第一行写一个字符串就是文档字符串</li><li><code>def() -&gt; str</code>：表示返回值是字符串，同样为文档字符串</li><li>作用域（scope）指的是变量生效的区域</li><li>全局作用域与函数作用域</li><li><code>global a</code> 声明在函数内部使用的 a 是全局变量，此时再修改 a 就是修改全局 a</li><li>命名空间（namespace）指的是变量存储的位置，实际是一个储存变量的字典</li><li>每一个 scope 都有对应的 namespace</li><li>全局命名空间用来保存全局变量，函数命名空间用来保存函数的变量</li><li><code>locals()</code>用来获取当前作用域的命名空间</li><li><code>scope[&#39;c&#39;] = ...</code>向字典中添加 key-value 等于在当前作用域中创建了一个变量</li><li><code>global()</code>在任意位置获取全局命名空间</li></ul><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><ul><li>递归式函数（自己调用自己）<ol><li>基线条件（可被分成的最小问题，满足即停止指向）</li><li>递归条件（将问题继续分解的条件）</li></ol></li><li>在 Python 中，函数是一等对象</li><li>一等对象一般都会具有如下特点：<ol><li>对象是在运行时创建的</li><li>能赋值给变量或作为数据结构中的元素</li><li>能作为参数传递</li><li>能作为返回值返回</li></ol></li><li>高阶函数（接收函数作为参数或将函数作为返回值的函数）<ul><li><code>filter()</code>从序列中过滤出符合条件的元素并保存到新的序列（可迭代结构）</li></ul></li><li>匿名函数<ul><li>lambda 函数表达式（<code>lambda 参数列表: 返回值</code>）<code>(lambda a,b : a+b)</code></li><li>匿名函数也可以直接赋值给一个变量</li><li><code>map()</code> 函数可以对可跌倒对象中的元素修改并添加到新变量并返回</li><li>匿名函数一般作为参数使用</li></ul></li><li><code>sort()</code> 对列表中的元素进行排列，也可以接收关键字参数（key=…）比较函数返回值</li><li><code>sorted()</code>可对任意序列排序且不影响原来的对象，而是返回一个新对象</li><li>闭包是将函数作为返回值的函数，可以创建只有当前函数能访问的变量</li><li>装饰器<ul><li>在不修改原有函数的情况下扩展函数的功能<br><code>def funtion(*args ,**kwargs)</code><br><code>result = old(*args ,**kwargs)</code></li><li>@引用指定装饰器</li><li>一个函数指定多个装饰器时，函数安装从内向外引用装饰器</li></ul></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>对象是内存中专门用来存储数据的一块区域。</li><li>对象中可以存放各种数据（比如：数字、布尔值、代码）</li><li>对象由三部分组成：<ol><li>对象的标识（id）</li><li>对象的类型（type）</li><li>对象的值（value）</li></ol></li></ul><h3 id="面向对象（oop）"><a href="#面向对象（oop）" class="headerlink" title="面向对象（oop）"></a>面向对象（oop）</h3><ul><li>Python 是一门面向对象的编程语言</li><li>所谓的面向对象的语言，简单理解就是语言中的所有操作都是通过对象来进行的</li><li>面向过程的编程的语言<ul><li>面向过程指将我们的程序的逻辑分解为一个一个的步骤，通过对每个步骤的抽象，来完成程序</li><li>面向过程的编程思想将一个功能分解为一个一个小的步骤，我们通过完成一个一个的小的步骤来完成一个程序</li><li>这种编程方式，符合我们人类的思维，编写起来相对比较简单</li><li>但是这种方式编写代码的往往只适用于一个功能，如果要在实现别的功能，即使功能相差极小，也往往要重新编写代码，所以它可复用性比较低，并且难于维护</li></ul></li><li>面向对象的编程语言<ul><li>面向对象的编程语言，关注的是对象，而不关注过程</li><li>对于面向对象的语言来说，一切都是对象</li><li>面向对象的编程思想，将所有的功能统一保存到对应的对象中，要使用某个功能，直接找到对应的对象即可</li><li>这种方式编写的代码，比较容易阅读，并且比较易于维护，容易复用。</li><li>但是这种方式编写，不太符合常规的思维，编写起来稍微麻烦一点</li><li>简单归纳一下，面向对象的思想<ol><li>找对象</li><li>搞对象</li></ol></li></ul></li></ul><h3 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(class)</h3><ul><li>我们目前所学习的对象都是 Python 内置的对象</li><li>但是内置对象并不能满足所有的需求，所以我们在开发中经常需要自定义一些对象</li><li>类，简单理解它就相当于一个图纸。在程序中我们需要根据类来创建对象</li><li>类就是对象的图纸</li><li>我们也称对象是类的实例（instance）</li><li>如果多个对象是通过一个类创建的，我们称这些对象是一类对象</li><li>像 <code>int()</code>, <code>float()</code>, <code>bool()</code>, <code>str()</code>, <code>list()</code>,  <code>dict()</code> …. 这些都是类</li><li><code>a = int(10)</code> # 创建一个 <code>int</code> 类的实例 等价于 <code>a= 10</code></li><li>我们自定义的类都需要使用大写字母开头，使用大驼峰命名法（帕斯卡命名法）来对类命名</li><li>类也是一个对象</li><li>类就是一个用来创建对象的对象</li><li>类是 type 类型的对象，定义类实际上就是定义了一个 type 类型的对象</li><li><code>isinstance()</code>用来检查一个对象是否是一个类的实例</li></ul><h3 id="使用类创建对象的流程"><a href="#使用类创建对象的流程" class="headerlink" title="使用类创建对象的流程"></a>使用类创建对象的流程</h3><ol><li>创建一个变量</li><li>在内存中创建一个新对象</li><li>将对象的 id 赋值给变量</li></ol><ul><li>向对象中添加变量，对象中的变量称为属性</li><li>语法：<code>对象.属性名 = 属性值</code></li></ul><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><ul><li>类和对象都是对现实生活中的事物或程序中的内容的抽象</li><li>实际上所有的事物都由两部分构成：<ol><li>数据（属性）</li><li>行为（方法）</li></ol></li><li>在类中定义的函数称为方法，方法可通过该类的所有实例来访问</li><li>在类的代码块中，我们可以定义变量和函数<ul><li>变量会成为该类实例的公共属性，所有的该类实例都可以通过 <code>对象.属性名</code> 的形式访问</li><li>函数会成为该类实例的公共方法，所有该类实例都可以通过 <code>对象.方法名()</code> 的形式调用方法</li><li>注意：方法调用时，第一个参数由解析器自动传递，所以定义方法时，至少要定义一个形参</li></ul></li><li>实例为什么能访问到类中的属性和方法<ul><li>类中定义的属性和方法都是公共的，任何该类实例都可以访问</li></ul></li><li>属性和方法查找的流程<ul><li>当我们调用一个对象的属性时，解析器会先在当前对象中寻找是否含有该属性</li><li>如果有，则直接返回当前的对象的属性值，如果没有，则去当前对象的类对象中去寻找，如果有则返回类对象的属性值，如果类对象中依然没有，则报错</li></ul></li><li>类对象和实例对象中都可以保存属性（方法）<ul><li>如果这个属性（方法）是所有的实例共享的，则应该将其保存到类对象中</li><li>如果这个属性（方法）是某个实例独有，则应该保存到实例对象中</li></ul></li><li>一般情况下，属性保存到实例对象中，而方法需要保存到类对象中</li><li><code>def method(self):</code></li></ul><h3 id="类的特殊方法"><a href="#类的特殊方法" class="headerlink" title="类的特殊方法"></a>类的特殊方法</h3><ul><li>在类中可以定义一些特殊方法（魔术方法）</li><li>特殊方法都是以<code>__</code>开头，<code>__</code>结尾的方法，且不手动调用</li><li><code>def __init__(self):</code></li><li>创建对象的流程（ <code>p1 = Person()</code>的运行流程 ）<ol><li>创建一个变量</li><li>在内存中创建一个新对象</li><li><code>__init__(self)</code>方法执行</li><li>将对象的 id 赋值给变量</li></ol></li><li><code>init</code>会在对象创建以后立刻执行</li><li><code>init</code>可以用来向新创建的对象中初始化属性<code>（self.name）</code></li><li>直接通过 对象.属性 的方式可以来修改属性的值，但这样对象中的属性可以随意修改</li></ul><h3 id="类的基本结构"><a href="#类的基本结构" class="headerlink" title="类的基本结构"></a>类的基本结构</h3><ul><li>class 类名([父类]) :<br>公共的属性…<br><code>def __init__(self,...):</code>(对象的初始化方法)<br>…<br><code>def method_1(self,...):</code>(其他的方法)<br>…<br><code>def method_2(self,...):</code><br>…</li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li>封装是面向对象的三大特性之一</li><li>封装指的是隐藏对象中一些不希望被外部所访问到的属性或方法</li><li><code>getter</code> 和 <code>setter</code> 方法使外部可以访问到属性<ul><li><code>getter</code> 获取对象中的指定属性（<code>get_属性名</code>）(<code>return self.name</code>）</li><li><code>setter</code> 用来设置对象中的指定属性（<code>set_属性名</code>）</li><li>如果希望属性只读，去除 <code>setter</code> 方法</li><li>如果不希望属性被外部访问，则去除 <code>getter</code> 方法</li><li>使用 <code>setter</code> 方法设置属性，可以增加数据的验证，确保数据的值是正确的</li></ul></li><li>使用封装确实增加了类的定义的复杂程度，但是它也确保了数据的安全性</li></ul><h3 id="隐藏类中的属性"><a href="#隐藏类中的属性" class="headerlink" title="隐藏类中的属性"></a>隐藏类中的属性</h3><ul><li>可以为对象的属性使用双下划线开头，<code>__xxx</code><ul><li>双下划线开头的属性，是对象的隐藏属性，隐藏属性只能在类的内部访问，无法通过对象访问</li><li>其实隐藏属性只是 Python 自动将属性名改名为<code>_类名__属性名</code></li></ul></li><li>一般我们会将私有属性（不希望被外部访问的属性）以<code>_</code>开头，没有特殊需要不要修改私有属性</li></ul><h3 id="property-装饰器"><a href="#property-装饰器" class="headerlink" title="property 装饰器"></a>property 装饰器</h3><ul><li>property 装饰器，用来将一个 get 方法，转换为对象的属性</li><li>添加为<code>@property</code>装饰器以后，我们就可以像调用属性一样使用 <code>get</code>方法</li><li>使用 property 装饰的方法，必须和属性名是一样的</li><li>setter 方法的装饰器：<code>@属性名.setter</code></li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承是面向对象的三大特性之一</li><li>继承其他类中的属性和方法</li><li>在定义类时，可以在类名后的括号中指定当前类的父类（超类）</li><li>子类（衍生类）可以直接继承父类中的所有的属性和方法</li><li>我们经常需要通过继承来对一个类进行扩展</li><li>在创建类时，如果省略了父类，则默认父类为 object，object 是所有类的父类，即所有类都继承自 object</li><li><code>issubclass()</code> 检查一个类是否是另一个类的子类</li><li><code>isinstance()</code> 检查一个对象是否是一个类的实例，如果这个类是这个对象的父类，也会返回 true，所有对象都是 object 的实例</li></ul><h3 id="方法的重写（override）"><a href="#方法的重写（override）" class="headerlink" title="方法的重写（override）"></a>方法的重写（override）</h3><ul><li>如果在子类中如果有和父类同名的方法，则通过子类实例去调用方法时，会调用子类的方法为不是父类的方法</li><li>当我们调用一个对象的方法时，会优先去当前对象中寻找是否具有该方法<ul><li>如果有则直接调用，如果没有则去当前对象的父类中寻找</li><li>如果没有，则去父类的父类中寻找，以此类推到 object，如还没则报错</li></ul></li><li>父类中所有方法（包括特殊方法）都会被子类继承，也可以重写特殊方法</li><li><code>super()</code> 可以用来获取当前类的父类，并且通过 <code>super()</code>返回对象调用父类方法时，不需要传递 <code>self</code></li></ul><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><ul><li>在 Python 中是支持多重继承的，也就是我们可以为一个类同时指定多个父类</li><li>可以在类名的 <code>()</code>中添加多个类，来实现多重继承</li><li>多重继承，会使子类同时拥有多个父类，并且会获取到所有父类中的方法</li><li>在开发中没有特殊的情况，应该尽量避免使用多重继承，因为多重继承会让我们的代码过于复杂</li><li>如果多个父类中有同名的方法，则从前往后查找，即前边父类的方法会覆盖后边父类的方法</li><li>类名，<code>__bases__</code>这个属性可以用来获取当前类的所有父类</li><li><code>print(C.__bases__)</code> <code>(&lt;class &#39;__main__.B&#39;&gt;,)</code></li><li><code>print(B.__bases__)``(&lt;class &#39;object&#39;&gt;,)</code></li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li>多态是面向对象的三大特征之一</li><li>一个对象可以以不同的形态去呈现，即多态</li><li>如函数违反多态，只适用于一种类型的对象，无法处理其他类型对象，则函数适应性会变差</li><li>多态的描述：鸭子类型<ul><li>如果一个东西，走路像鸭子，叫声像鸭子，那么它就是鸭子</li></ul></li><li>对象通过 <code>len()</code> 来获取长度，是因为对象中有<code>__len__</code>特殊方法</li><li>只要对象中具有<code>__len__</code>特殊方法，就可以通过 <code>len()</code>来获取长度</li></ul><h3 id="面向对象的三大特征的总结"><a href="#面向对象的三大特征的总结" class="headerlink" title="面向对象的三大特征的总结"></a>面向对象的三大特征的总结</h3><ul><li>封装<ul><li>确保对象中的数据安全</li></ul></li><li>继承<ul><li>保证了对象的可扩展性</li></ul></li><li>多态<ul><li>保证了程序的灵活性</li></ul></li></ul><h3 id="类中的属性和方法"><a href="#类中的属性和方法" class="headerlink" title="类中的属性和方法"></a>类中的属性和方法</h3><ul><li>类属性<ul><li>类属性，直接在类中定义的属性是类属性</li><li>类属性可以通过类或类的实例访问到</li><li>类属性只能通过类对象来修改，无法通过实例对象修改</li></ul></li><li>实例属性和方法<ul><li>通过实例对象添加到属性属于实例属性</li><li>在类中定义，以 <code>self</code>为第一个参数的方法是实例方法</li><li>实例方法在调用时，Python 会调用对象作为 <code>self</code>传入</li><li>实例方法可以通过实例和类去调用<ul><li>当通过实例调用时，会自动将当前调用对象作为 <code>self</code> 传入</li><li>但通过类调用时，不会自动传递 <code>self</code>，此时我们必须手动传递 <code>self</code></li></ul></li></ul></li><li>类方法<ul><li>在类内部使用 <code>@classmethod</code> 来修饰的方法属于类方法</li><li>类方法的第一个参数是 <code>cls</code> ，也会被自动传递，<code>cls</code> 就是当前的类对象</li></ul></li><li>实例方法<ul><li>实例方法的第一个参数是 <code>self</code>，类方法的第一个参数是 <code>cls</code></li><li>类方法可以通过类去调用，也可以通过实例调用，没有区别</li></ul></li><li>静态方法<ul><li>在类中实用 <code>@staticmethod</code> 来修饰的方法属于静态方法</li><li>静态方法不需要指定任何的默认参数，静态方法可以通过类和实例去调用</li><li>静态方法基本是一个和当前类无关的方法，只是一个保存到当前类中的函数</li><li>静态方法一般都是一些工具方法，和当前的需要无关</li></ul></li></ul><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><ul><li>就像我们生活中会产生垃圾一样，程序在运行过程当中也会产生垃圾</li><li>程序运行过程中产生的垃圾会影响到程序的运行的运行性能，所以这些垃圾必须被及时清理</li><li>在程序中没有被引用的对象就是垃圾，这种垃圾对象过多以后会影响到程序的运行的性能，所以我们必须进行及时的垃圾回收</li><li>所谓的垃圾回收就是将垃圾对象从内存中删除</li><li>在 Python 中有自动的垃圾回收机制，它会自动将这些没有被引用的对象删除，所以我们不用手动处理垃圾回收</li></ul><h3 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h3><ul><li>特殊方法，也称为魔术方法</li><li>特殊方法都是使用<code>__</code>开头和结尾的</li><li>特殊方法一般不需要我们手动调用，需要在一些特殊情况下自动执行</li><li><code>__str__()</code>这个特殊方法会在尝试将对象转换为字符串的时候调用，它的作用可以用来指定对象转换为字符串的结果 （print 函数）</li><li><code>__repr__()</code>这个特殊方法会在对当前对象使用 repr()函数时调用，它的作用是指定对象在 “交互模式” 中直接输出的效果</li><li><code>object.__add__(self, other)</code></li><li><code>object.__sub__(self, other)</code></li><li><code>object.__mul__(self, other)</code></li><li><code>object.__matmul__(self, other)</code></li><li><code>object.__truediv__(self, other)</code></li><li><code>object.__floordiv__(self, other)</code></li><li><code>object.__mod__(self, other)</code></li><li><code>object.__divmod__(self, other)</code></li><li><code>object.__pow__(self, other[, modulo])</code></li><li><code>object.__lshift__(self, other)</code></li><li><code>object.__rshift__(self, other)</code></li><li><code>object.__and__(self, other)</code></li><li><code>object.__xor__(self, other)</code></li><li><code>object.__or__(self, other)</code></li><li><code>object.__lt__(self, other)</code> 小于 &lt;</li><li><code>object.__le__(self, other)</code>小于等于 &lt;=</li><li><code>object.__eq__(self, other)</code> 等于 ==</li><li><code>object.__ne__(self, other)</code> 不等于 !=</li><li><code>object.__gt__(self, other)</code> 大于 &gt;</li><li><code>object.__ge__(self, other)</code> 大于等于 &gt;=</li><li><code>__len__()</code>获取对象的长度</li><li><code>object.__bool__(self)</code>可以通过 bool 来指定对象转换为布尔值的情况</li><li><code>__gt__</code>会在对象做大于比较的时候调用，该方法的返回值将会作为比较的结果 他需要两个参数，一个 self 表示当前对象，other 表示和当前对象比较的对象：<code>self &gt; other</code></li></ul><h3 id="模块（module）"><a href="#模块（module）" class="headerlink" title="模块（module）"></a>模块（module）</h3><ul><li>模块化，模块化指将一个完整的程序分解为一个一个小的模块，通过将模块组合，来搭建出一个完整的程序<ul><li>不采用模块化，统一将所有的代码编写到一个文件中</li><li>采用模块化，将程序分别编写到多个文件中</li></ul></li><li>模块化的优点：<ol><li>方便开发</li><li>方便维护</li><li>模块可以复用</li></ol></li><li>在 Python 中一个 <code>.py</code> 文件就是一个模块，要想创建模块，实际上就是创建一个 python 文件</li><li>注意：模块名要符号标识符的规范</li><li>在一个模块中引入外部模块<ol><li><code>import 模块名</code> （模块名，就是 python 文件的名字，注意不要 py）</li><li><code>import 模块名 as 模块别名</code></li></ol></li><li>可以引入同一个模块多次，但是模块的实例只会创建一个</li><li>import 可以在程序的任意位置调用，但是一般情况下，import 语句都会统一写在程序的开头</li><li>在每一个模块内部都有一个<code>__name__</code>属性，通过这个属性可以获取到模块的名字</li><li><code>__name__</code>属性值为<code>__main__</code>的模块是主模块，一个程序中只会有一个主模块</li><li>主模块就是我们直接通过 python 执行的模块</li><li>访问模块中的变量：<code>模块名.变量名</code></li><li>只引入模块中的部分内容：<code>from 模块名 import 变量, 变量...</code></li><li><code>from m import *</code> 引入到模块中所有内容，一般不会使用</li><li>为引入的变量使用别名：<code>from 模块名 import 变量 as 别名</code></li></ul><h3 id="包（Package）"><a href="#包（Package）" class="headerlink" title="包（Package）"></a>包（Package）</h3><ul><li>包也是一个模块，当我们模块中代码过多时，或者一个模块需要被分解为多个模块时，这时就需要使用到包</li><li>普通的模块就是一个 <code>.py</code> 文件，而包是一个文件夹</li><li>包中必须要一个一个<code>__init__.py</code>这个文件，这个文件中可以包含有包中的主要内容</li><li><code>__pycache__</code>是模块的缓存文件</li><li><code>.py</code> 代码在执行前，需要被解析器先转换为机器码，然后再执行,所以我们在使用模块（包）时，也需要将模块的代码先转换为机器码然后再交由计算机执行</li><li>为了提高程序运行的性能，python 会在编译过一次以后，将代码保存到一个缓存文件中,这样在下次加载这个模块（包）时，就可以不再重新编译而是直接加载缓存中编译好的代码即可</li></ul><h3 id="Python-标准库"><a href="#Python-标准库" class="headerlink" title="Python 标准库"></a>Python 标准库</h3><ul><li>为了实现开箱即用的思想，Python 中为我们提供了一个模块的标准库</li><li>在这个标准库中，有很多很强大的模块我们可以直接使用，并且标准库会随 Python 的安装一同安装</li><li><code>sys</code> 模块，它里面提供了一些变量和函数，使我们可以获取到 Python 解析器的信息，或者通过函数来操作 Python 解析器</li><li><code>pprint</code> 模块它给我们提供了一个方法 <code>pprint()</code> 该方法可以用来对打印的数据做简单的格式化</li><li><code>sys.argv</code> 获取执行代码时，命令行中所包含的参数，该属性是一个列表，列表中保存了当前命令的所有参数</li><li><code>sys.modules</code> 获取当前程序中引入的所有模块</li><li>modules 是一个字典，字典的 key 是模块的名字，字典的 value 是模块对象</li><li><code>sys.path</code> 是一个列表，列表中保存的是模块的搜索路径</li><li><code>sys.platform</code> 表示当前 Python 运行的平台</li><li><code>sys.exit()</code> 函数用来退出程序</li><li><code>os</code> 模块让我们可以对操作系统进行访问</li><li><code>os.environ</code>. 通过这个属性可以获取到系统的环境变量</li><li><code>os.system()</code> 可以用来执行操作系统的名字<code>os.system(&#39;dir&#39;) os.system(&#39;notepad&#39;)</code></li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul><li>程序在运行过程当中，不可避免的会出现一些错误，比如：使用了没有赋值过的变量，使用了不存在的索引，除 0 等</li><li>这些错误在程序中，我们称其为异常</li><li>程序运行过程中，一旦出现异常将会导致程序立即终止，异常以后的代码全部都不会执行</li></ul><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><ul><li><p>程序运行时出现异常，目的并不是让我们的程序直接终止</p></li><li><p>Python 是希望在出现异常时，我们可以编写代码来对异常进行处理</p></li><li><p>try 语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">代码块（可能出现错误的语句）</span><br><span class="line"><span class="keyword">except</span> 异常类型 <span class="keyword">as</span> 异常名:</span><br><span class="line">代码块（出现错误以后的处理方式）</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">代码块（没出错时要执行的语句）  </span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">代码块（该代码块总会执行）</span><br></pre></td></tr></table></figure></li><li><p>try 是必须的；else 语句有没有都行；except 和 finally 至少有一个</p></li><li><p>可以将可能出错的代码放入到 try 语句，这样如果代码没有错误，则会正常执行</p></li><li><p>如果出现错误，则会执行 expect 子句中的代码，这样我们就可以通过代码来处理异常，避免因为一个异常导致整个程序的终止</p></li></ul><h3 id="异常的传播（抛出异常）"><a href="#异常的传播（抛出异常）" class="headerlink" title="异常的传播（抛出异常）"></a>异常的传播（抛出异常）</h3><ul><li>当在函数中出现异常时，如果在函数中对异常进行了处理，则异常不会再继续传播<ul><li>如果函数中没有对异常进行处理，则异常会继续向函数调用处传播,</li><li>如果函数调用处处理了异常，则不再传播，如果没有处理则继续向调用处传播</li><li>直到传递到全局作用域（主模块）如果依然没有处理，则程序终止，并且显示异常信息</li></ul></li><li>当程序运行过程中出现异常以后，所有的异常信息会被保存一个专门的异常对象中，而异常传播时，实际上就是异常对象抛给了调用处</li><li><code>ZeroDivisionError</code> 类的对象专门用来表示除 0 的异常，<code>NameError</code> 类的对象专门用来处理变量错误的异常</li><li>在 Python 为我们提供了多个异常对象</li><li>如果 except 后不跟任何的内容，则此时它会捕获到所有的异常</li><li>如果在 except 后跟着一个异常的类型，那么此时它只会捕获该类型的异常</li><li><code>Exception</code> 是所有异常类的父类，所以如果 except 后跟的是 Exception，他也会捕获到所有的异常</li><li>可以在异常类后边跟着一个 <code>as xx</code> 此时 xx 就是异常对象</li><li>也可以自定义异常类，只需要创建一个类继承 Exception 即可</li><li>可以使用 raise 语句来抛出异常，raise 语句后需要跟一个异常类 或 异常的实例</li><li><code>raise Exception</code> 抛出异常的目的，告诉调用者这里调用时出现问题，希望你自己处理一下</li></ul><h3 id="文件（File）"><a href="#文件（File）" class="headerlink" title="文件（File）"></a>文件（File）</h3><ul><li>通过 Python 程序来对计算机中的各种文件进行增删改查的操作</li><li><code>I/O(Input / Output)</code></li><li>操作文件的步骤：<ol><li>打开文件</li><li>对文件进行各种操作（读、写），然后保存</li><li>关闭文件</li></ol></li></ul><h3 id="打开关闭文件"><a href="#打开关闭文件" class="headerlink" title="打开关闭文件"></a>打开关闭文件</h3><ul><li>使用 <code>open 函数</code> 来打开一个文件</li><li>参数：<ul><li>file 要打开的文件的名字（路径）</li><li>返回值：返回一个对象，这个对象就代表了当前打开的文件</li></ul></li><li>创建一个变量，来保存文件的名字， 如果目标文件和当前文件在同一级目录下，则直接使用文件名即可</li><li>在 windows 系统使用路径时，可以使用/来代替 \ ；或者可以使用 \ 来代替 \ ；或者也可以使用原始字符串</li><li>表示路径，可以使用..来返回一级目录</li><li>如果目标文件距离当前文件比较远，此时可以使用绝对路径<ul><li>绝对路径应该从磁盘的根目录开始书写</li></ul></li><li><code>file_obj = open(file_name)</code>打开 <code>file_name</code> 对应的文件</li><li>调用 <code>close()</code> 方法来关闭文件</li><li><code>open()</code> 打开文件时，默认是以文本文件的形式打开的，但是 <code>open()</code> 默认的编码为 None</li><li>所以处理文本文件时，必须要指定文件的编码</li></ul><h3 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h3><ul><li>当我们获取了文件对象以后，所有的对文件的操作都应该通过对象来进行</li><li><code>read()</code> 方法，用来读取文件中的内容，它会将内容全部保存为一个字符串返回</li><li><code>with open() as file_obj</code>:在 with 语句中可以直接使用 <code>file_obj</code> 来做文件操作<ul><li>此时这个文件只能在 with 中使用，一旦 with 结束则文件会自动<code>close()</code></li></ul></li><li>如果要读取的文件较大的话，会一次性将文件的内容加载到内存中，容易导致内存泄漏，所以对于较大的文件，不要直接调用 <code>read()</code></li><li><code>help(file_obj.read)</code></li><li><code>read()</code> 可以接收一个 size 作为参数，该参数用来指定要读取的字符的数量，默认值为-1，它会读取文件中的所有字符</li><li>可以为 size 指定一个值，这样<code>read()</code>会读取指定数量的字符，</li><li>每一次读取都是从上次读取到位置开始读取的，如果字符的数量小于 size，则会读取剩余所有的，如果已经读取到了文件的最后了，则会返回’ ‘空串</li><li><code>readline()</code>方法可以用来读取一行内容</li><li><code>readlines()</code> 方法用于一行一行的读取内容，它会一次性将读取到的内容封装到一个列表中返回</li></ul><h3 id="文件的写入"><a href="#文件的写入" class="headerlink" title="文件的写入"></a>文件的写入</h3><ul><li>使用 <code>open()</code> 打开文件时必须要指定打开文件所要做的操作（读、写、追加）</li><li>如果不指定操作类型，则默认是 读取文件 ， 而读取文件时是不能向文件中写入的</li><li><code>r</code> 表示只读的</li><li><code>w</code> 表示是可写的，使用 <code>w</code> 来写入文件时，如果文件不存在会创建文件，如果文件存在则会截断文件，截断文件指删除原来文件中的所有内容</li><li><code>a</code> 表示追加内容，如果文件不存在会创建文件，如果文件存在则会向文件中追加内容</li><li><code>x</code> 用来新建文件，如果文件不存在则创建，存在则报错</li><li><code>-</code> 为操作符增加功能</li><li><code>r+</code> 即可读又可写，文件不存在会报错</li><li><code>w+</code></li><li><code>a+</code></li><li>例如：<code>with open(file_name , &#39;w&#39; , encoding=&#39;utf-8&#39;) as file_obj:</code></li><li><code>write()</code>来向文件中写入内容，如果操作的是一个文本文件的话，则 <code>write()</code> 需要传递一个字符串作为参数</li><li><code>write()</code> 方法会可以分多次向文件中写入内容，写入完成以后，该方法会返回写入的字符的个数</li></ul><h3 id="文件的其他操作"><a href="#文件的其他操作" class="headerlink" title="文件的其他操作"></a>文件的其他操作</h3><ul><li><code>t</code> 读取文本文件（默认值）</li><li><code>b</code> 读取二进制文件</li><li><code>with open(file_name , &#39;rb&#39;) as file_obj:</code></li><li>读取文本文件时，<code>size</code> 是以字符为单位的</li><li>读取二进制文件时，<code>size</code> 是以字节为单位</li><li>将读取到的内容写出来 定义一个新的文件</li><li><code>seek()</code> 可以修改当前读取的位置</li><li><code>seek()</code> 需要两个参数，第一个 是要切换到的位置，第二个 计算位置方式</li><li><code>seek</code> 计算位置可选值：0 从头计算（默认值）；1 从当前位置计算；2 从最后位置开始计算</li><li><code>tell()</code> 方法用来查看当前读取的位置</li><li><code>os.listdir()</code> 获取指定目录的目录结构，需要一个路径作为参数，会获取到该路径下的目录结构，默认路径为 . 当前目录<ul><li>该方法会返回一个列表，目录中的每一个文件（夹）的名字都是列表中的一个元素 <code>r = os.listdir()</code></li></ul></li><li><code>os.getcwd()</code> 获取当前所在的目录 <code>r = os.getcwd()</code></li><li><code>os.chdir()</code> 切换当前所在的目录 作用相当于 <code>cd os.chdir(&#39;c:/&#39;)</code></li><li><code>r = os.getcwd()</code></li><li>创建目录，<code>os.mkdir(&quot;aaa&quot;)</code> 在当前目录下创建一个名字为 aaa 的目录</li><li>删除目录， <code>os.rmdir(&#39;abc&#39;) open(&#39;aa.txt&#39;,&#39;w&#39;)</code></li><li>删除文件， <code>os.remove(&#39;aa.txt&#39;)</code></li><li><code>os.rename(&#39;旧名字&#39;,&#39;新名字&#39;)</code> 可以对一个文件进行重命名，也可以用来移动一个文件， <code>os.rename(&#39;aa.txt&#39;,&#39;bb.txt&#39;)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础知识总结</title>
      <link href="/JavaScript%E5%9F%BA%E7%A1%80/"/>
      <url>/JavaScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JavaScript 是一门跨平台、面向对象的脚本语言，它能使网页可交互，可以让你在网页上添加更多功能，另外还有高级的服务端 JavaScript 版本，在 web 浏览器中，JavaScript 能够通过其所连接的环境提供的编程接口进行控制。在之前我已经简单总结了<a href="/HTML和CSS基础">HTML5/CSS3的必会知识点</a>，为 Javascript 学习打下基础。</p></blockquote><span id="more"></span><h3 id="一、JavaScript-简介"><a href="#一、JavaScript-简介" class="headerlink" title="一、JavaScript 简介"></a>一、JavaScript 简介</h3><p>JavaScript 是一门跨平台、面向对象的脚本语言，不需要编译成字节码，由浏览器直接解析并执行。JavaScript 是用来控制网页行为的，它能使网页可交互，如改变页面内容、修改指定元素的属性值、对表单进行校验等。</p><p>JavaScript（简称：JS） 在 1995 年由 Brendan Eich 发明，并于 1997 年成为一部 ECMA 标准。ECMA 规定了一套标准 就叫 <code>ECMAScript</code> ，所有的客户端校验语言必须遵守这个标准，当然 JavaScript 也遵守了这个标准。ECMAScript 6 (简称ES6) 是最新的 JavaScript 版本（发布于 2015 年)。</p><h3 id="二、JavaScript-引入方式"><a href="#二、JavaScript-引入方式" class="headerlink" title="二、JavaScript 引入方式"></a>二、JavaScript 引入方式</h3><p>JavaScript 引入方式就是 HTML 和 JavaScript 的结合方式。JavaScript引入方式有两种：内部脚本（将 JS 代码定义在 HTML 页面中）和外部脚本（将 JS 代码定义在外部 JS 文件中，然后引入到 HTML 页面中）。</p><h4 id="内部脚本"><a href="#内部脚本" class="headerlink" title="内部脚本"></a>内部脚本</h4><p>在 HTML 中，JavaScript 代码必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间，在 HTML 文档中可以在任意地方，放置任意数量的 <code>&lt;script&gt;</code> 标签。</p><p><code>alert(数据)</code> 是 JavaScript 的一个方法，作用是将参数数据以浏览器弹框的形式输出出来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;hello js1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般把脚本置于 <code>&lt;body&gt;</code> 元素的底部，可改善显示速度，因为浏览器在加载页面的时候会从上往下进行加载并解析。 我们应该让用户看到页面内容，然后再展示动态的效果。</p><h4 id="外部脚本"><a href="#外部脚本" class="headerlink" title="外部脚本"></a>外部脚本</h4><p>定义外部 js 文件（demo.js），外部脚本不能包含 <code>&lt;script&gt;</code> 标签，在 js 文件中直接写 js 代码即可，不要在 js文件 中写 <code>script</code> 标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;hello js&quot;</span>);</span><br></pre></td></tr></table></figure><p>在 HTML 页面使用 <code>script</code> 标签中使用 <code>src</code> 属性指定 js 文件的 URL 路径，引入外部的 js 文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;script&gt;</code> 标签不能自闭合：在页面中引入外部 js 文件时，不能写成 <code>&lt;script src=&quot;../js/demo.js&quot; /&gt;</code>。</p><h3 id="三、JavaScript-基础语法"><a href="#三、JavaScript-基础语法" class="headerlink" title="三、JavaScript 基础语法"></a>三、JavaScript 基础语法</h3><h4 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h4><p>区分大小写：变量名、函数名以及其他一切东西都是区分大小写的。</p><p>每行结尾的分号可有可无，如果一行上写多个语句时，必须加分号用来区分多个语句。</p><p>注释</p><ol><li>单行注释：<code>// 注释内容</code></li><li>多行注释：<code>/* 注释内容 */</code></li><li>JavaScript 没有文档注释</li></ol><p>大括号表示代码块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (count == <span class="number">3</span>) &#123; </span><br><span class="line">   <span class="title function_">alert</span>(count); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h4><p>js 可以通过以下方式进行内容的输出，只不过不同的语句输出到的位置不同。</p><ol><li>使用 <code>window.alert()</code> 写入警告框。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;hello js&quot;</span>);<span class="comment">//写入警告框</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>使用 <code>document.write()</code> 写入 HTML 输出。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;hello js 2~&quot;</span>);<span class="comment">//写入html页面</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>使用 <code>console.log()</code> 写入浏览器控制台。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello js 3&quot;</span>);<span class="comment">//写入浏览器的控制台</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>JavaScript 中用 <code>var</code> 关键字（variable 的缩写）来声明变量。格式： <code>var 变量名 = 数据值;</code></p><p>JavaScript 提供八种不同的数据类型，它们是 <code>undefined</code>（未定义）、<code>null</code>（空）、<code>boolean</code>（布尔型）、<code>string</code>（字符串）、<code>symbol</code>、<code>number</code>（数字）、<code>bigint</code>（可以表示任意大的整数）和 <code>object</code>（对象）。</p><p>JavaScript 是一门弱类型语言，变量可以存放不同类型的值，如在定义变量时赋值为数字数据，还可以将变量的值改为字符串类型的数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="number">20</span>;</span><br><span class="line">test = <span class="string">&quot;张三&quot;</span>;</span><br></pre></td></tr></table></figure><p>js 中的变量名命名规则和 Java 语言基本都相同：组成字符可以是任何字母、数字、下划线（_）或美元符号（$），数字不能开头，使用驼峰命名。</p><p>JavaScript 中 <code>var</code> 关键字有点特殊，有以下地方和其他语言不一样：</p><ol><li>作用域：全局变量。</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(age);  <span class="comment">// 在代码块中定义的age 变量，在代码块外边还可以使用</span></span><br></pre></td></tr></table></figure><ol><li>变量可以重复定义。</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">30</span>;<span class="comment">//JavaScript 会用 30 将之前 age 变量的 20 替换掉</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(age); <span class="comment">//打印的结果是 30</span></span><br></pre></td></tr></table></figure><p>ECMAScript 6 新增了 <code>let</code>关键字来定义变量。它的用法类似于 <code>var</code>，但是所声明的变量，只在 <code>let</code> 关键字所在的代码块内有效，且不允许重复声明。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(age); </span><br></pre></td></tr></table></figure><p>ECMAScript 6 新增了 <code>const</code> 关键字，用来声明一个只读的常量。一旦声明，常量的值就不能改变。</p><h4 id="全局作用域和函数"><a href="#全局作用域和函数" class="headerlink" title="全局作用域和函数"></a>全局作用域和函数</h4><p>在 JavaScript 中，作用域涉及到变量的作用范围。 在函数外定义的变量具有 全局 作用域。 这意味着，具有全局作用域的变量可以在代码的任何地方被调用。</p><p>未使用 <code>let</code> 或 <code>const</code> 关键字声明的变量会在 <code>global</code> 范围内自动创建。 当在代码其他地方无意间定义了一个变量，刚好变量名与全局变量相同，这时会产生意想不到的后果。 你应该总是用 <code>let</code> 或 <code>const</code> 声明你的变量。</p><p>重载：一个程序中有可能具有相同名称的局部变量 和全局变量。 在这种情况下，局部变量将会优先于全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myGlobal、oopsGlobal 变量均为全局变量</span></span><br><span class="line"><span class="keyword">let</span> myGlobal = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    oopsGlobal = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>JavaScript 中提供了两类数据类型：原始类型 和 引用类型。使用 <code>typeof</code> 运算符可以获取数据类型。</p><p>原始数据类型：</p><ol><li>number：数字（整数、小数、NaN），NaN 是一个特殊的 number 类型的值（Not a number）。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> price = <span class="number">99.8</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> age); <span class="comment">// 结果是 ： number</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> price);<span class="comment">// 结果是 ： number</span></span><br></pre></td></tr></table></figure><ol><li>string：字符、字符串，单双引皆可。在 js 中 双引号和单引号都表示字符串类型的数据。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;张三&#x27;</span>; </span><br><span class="line"><span class="keyword">var</span> addr = <span class="string">&quot;北京&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> ch); <span class="comment">//结果是  string</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> name); <span class="comment">//结果是  string</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> addr); <span class="comment">//结果是  string</span></span><br></pre></td></tr></table></figure><ol><li>boolean：布尔。true，false。</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> flag2 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> flag); <span class="comment">//结果是 boolean</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> flag2); <span class="comment">//结果是 boolean</span></span><br></pre></td></tr></table></figure><ol><li>null：对象为空。</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> obj);<span class="comment">//结果是 object</span></span><br></pre></td></tr></table></figure><ol><li><p>undefined：当声明的变量未初始化时，该变量的默认值是 undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a ;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> a); <span class="comment">//结果是 undefined</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>JavaScript 提供了如下的运算符。大部分和 Java语言 都是一样的，不同的是 JS 关系运算符中的 <code>==</code> 和 <code>===</code>。</p><ul><li>一元运算符：<code>++</code>，<code>--</code></li></ul><ul><li>算术运算符：<code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>%</code></li></ul><ul><li>赋值运算符：<code>=</code>，<code>+=</code>，<code>-=</code>…</li></ul><ul><li>关系运算符：<code>&gt;</code>，<code>&lt;</code>，<code>&gt;=</code>，<code>&lt;=</code>，<code>!=</code>，<code>==</code>，<code>===</code>…</li></ul><ul><li>逻辑运算符：&amp;&amp;，||，!</li></ul><ul><li>三元运算符：条件表达式 <code>? true_value : false_value</code> </li></ul><p><code>==</code> 和 <code>===</code> 区别：</p><ul><li><p><code>==</code>：判断类型是否一样，如果不一样，则进行类型转换，再去比较其值。</p></li><li><p><code>===</code>：js 中的全等于，判断类型是否一样，如果不一样，直接返回 false，再去比较其值。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age1 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> age2 = <span class="string">&quot;20&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(age1 == age2);<span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(age1 === age2);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>string 转换为 number 类型：按照字符串的字面值，转为数字。如果字面值不是数字，则转为 NaN。</p><ol><li>使用 <code>+</code> 正号运算符：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = +<span class="string">&quot;20&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(str + <span class="number">1</span>) <span class="comment">//21</span></span><br></pre></td></tr></table></figure><ol><li>使用 <code>parseInt()</code> 函数(方法)：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;20&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(str) + <span class="number">1</span>); <span class="comment">//建议使用 `parseInt()` 函数进行转换</span></span><br></pre></td></tr></table></figure><p>boolean 转换为 number 类型：true 转为1，false 转为0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = +<span class="literal">false</span>;</span><br><span class="line"><span class="title function_">alert</span>(flag); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>number 类型转换为 boolean 类型：0 和 NaN 转为false，其他的数字转为true。</p><p>string 类型转换为 boolean 类型：空字符串转为false，其他的字符串转为true。</p><p>null类型转换为 boolean 类型是 false。</p><p>undefined 转换为 boolean 类型是 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var flag = 3;</span></span><br><span class="line"><span class="comment">// var flag = &quot;&quot;;</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转为true&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转为false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 中使用字符串前，一般都会先判断字符串不是null，并且不是空字符才会做其他的一些操作，JavaScript也有类型的操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="comment">//健壮性判断</span></span><br><span class="line"><span class="keyword">if</span>(str != <span class="literal">null</span> &amp;&amp; str.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转为true&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转为false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是由于 JavaScript 会自动进行类型转换，所以上述的判断可以进行简化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="comment">//健壮性判断</span></span><br><span class="line"><span class="keyword">if</span>(str)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转为true&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转为false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h4><p>if 语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;输入的星期有误&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for 循环语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123; <span class="comment">//建议for循环小括号中定义的变量使用let</span></span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(sum);</span><br></pre></td></tr></table></figure><p>while 循环语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(sum);</span><br></pre></td></tr></table></figure><p>dowhile 循环语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br><span class="line"><span class="title function_">alert</span>(sum);</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数（就是Java中的方法）是被设计为执行特定任务的代码块；JavaScript 函数通过 function 关键词进行定义。</p><p>定义格式</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数<span class="number">1</span>,参数<span class="number">2.</span>.)&#123;</span><br><span class="line">    要执行的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 函数名 = <span class="keyword">function</span> (<span class="params">参数列表</span>)&#123;</span><br><span class="line">    要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形式参数不需要类型，因为JavaScript是弱类型语言。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述函数的参数 a 和 b 不需要定义数据类型，因为在每个参数前加上 var 也没有任何意义。返回值也不需要定义类型，可以在函数内部直接使用 return 返回即可。</p><p>函数调用：<code>函数名称(实际参数列表);</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>JS 中，函数调用可以传递任意个数参数，例如  <code>let result = add(1,2,3);</code> ，它是将数据 1 传递给了变量 a，将数据 2 传递给了变量 b，而数据 3 没有变量接收。</p><h3 id="三、JavaScript-常用对象"><a href="#三、JavaScript-常用对象" class="headerlink" title="三、JavaScript 常用对象"></a>三、JavaScript 常用对象</h3><p>JavaScript 提供了很多对象供使用者来使用。这些对象总共分类三类：</p><ol><li>基本对象</li><li>BOM 对象</li><li>DOM对象</li></ol><h4 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array 对象"></a>Array 对象</h4><p>JavaScript Array对象用于定义数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">Array</span>(元素列表); </span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//1,2,3 是存储在数组中的数据（元素）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 变量名 = [元素列表];</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">//1,2,3 是存储在数组中的数据（元素）</span></span><br></pre></td></tr></table></figure><p>Java 中的数组静态初始化使用的是 <code>&#123;&#125;</code> 定义，而 JavaScript 中使用的是 <code>[]</code> 定义。</p><p>元素访问：<code>arr[索引] = 值;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// alert(arr);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">//alert(arr2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [[<span class="string">&quot;Str1&quot;</span>, <span class="number">1</span>], [<span class="string">&quot;Str2&quot;</span>, <span class="number">2</span>], [<span class="string">&quot;Str3&quot;</span>, <span class="number">3</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问</span></span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">arr3[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&quot;3&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(arr2)</span><br></pre></td></tr></table></figure><p>JavaScript 中的数组相当于 Java 中集合。数组的长度是可以变化的，而 JavaScript 是弱类型，所以可以存储任意的类型的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变长</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr3[<span class="number">10</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(arr3[<span class="number">10</span>]); <span class="comment">// 10</span></span><br><span class="line"><span class="title function_">alert</span>(arr3[<span class="number">9</span>]);  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>在 JavaScript 中没有赋值的话，默认就是 <code>undefined</code>。如果给 <code>arr3</code> 数组添加字符串的数据，也是可以添加成功的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr3[<span class="number">5</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(arr3[<span class="number">5</span>]); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>属性：Array 对象提供了很多属性。例如<code>length</code> 属性：该数组可以动态的获取数组的长度。而有这个属性，我们就可以遍历数组了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法：Array 对象同样也提供了很多方法。</p><p>push 函数：给数组添加元素，也就是在数组的末尾添加元素，参数表示要添加的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// push:添加方法</span></span><br><span class="line"><span class="keyword">var</span> arr5 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr5.<span class="title function_">push</span>(<span class="number">10</span>);</span><br><span class="line"><span class="title function_">alert</span>(arr5);  <span class="comment">//数组的元素是 &#123;1,2,3,10&#125;</span></span><br></pre></td></tr></table></figure><p>splice 函数：删除元素。</p><ol><li>参数1：索引。表示从哪个索引位置删除。</li><li>参数2：个数。表示删除几个元素。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// splice:删除元素</span></span><br><span class="line"><span class="keyword">var</span> arr5 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr5.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">//从 0 索引位置开始删除，删除一个元素 </span></span><br><span class="line"><span class="title function_">alert</span>(arr5); <span class="comment">// &#123;2,3&#125;</span></span><br></pre></td></tr></table></figure><p><code>pop()</code> 函数：用来移出数组中最后一个元素。 <code>.shift()</code> 函数用来移出数组中第一个元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = [<span class="string">&quot;Stimpson&quot;</span>, <span class="string">&quot;J&quot;</span>, [<span class="string">&quot;cat&quot;</span>]];</span><br><span class="line"><span class="keyword">const</span> removedFromOurArray = ourArray.<span class="title function_">shift</span>();   <span class="comment">//ourArray.pop()</span></span><br></pre></td></tr></table></figure><p><code>.unshift()</code> 函数：类似 <code>.push()</code> 函数，但不是在数组的末尾添加元素，<code>unshift()</code> 在数组的头部添加元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = [<span class="string">&quot;Stimpson&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;cat&quot;</span>];</span><br><span class="line">ourArray.<span class="title function_">shift</span>();   <span class="comment">// [&quot;J&quot;, &quot;cat&quot;]</span></span><br><span class="line">ourArray.<span class="title function_">unshift</span>(<span class="string">&quot;Happy&quot;</span>);   <span class="comment">// [&quot;Happy&quot;, &quot;J&quot;, &quot;cat&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h4><p>String对象的创建方式有两种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">String</span>(s); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="string">&quot;数组&quot;</span>; </span><br></pre></td></tr></table></figure><p>属性：String 对象提供了很多属性，属性 <code>length</code> ，是用于动态的获取字符串的长度。</p><p>函数：String 对象提供了很多函数（方法）。</p><p>函数 <code>trim()</code> ，该方法是用来去掉字符串两端的空格。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str4 = <span class="string">&#x27;  abc   &#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="number">1</span> + str4 + <span class="number">1</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="number">1</span> + str4.<span class="title function_">trim</span>() + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><code>trim()</code> 函数在开发中还是比较常用的，例如在登陆界面 ，用户在输入用户名和密码时，可能会习惯的输入一些空格，这样在我们后端程序中判断用户名和密码是否正确，结果肯定是失败。所以我们一般都会对用户输入的字符串数据进行去除前后空格的操作。</p><h4 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h4><p>在 JavaScript 中自定义对象特别简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名称 = &#123;</span><br><span class="line">    属性名称<span class="number">1</span>:属性值<span class="number">1</span>,</span><br><span class="line">    属性名称<span class="number">2</span>:属性值<span class="number">2</span>,</span><br><span class="line">    ...,</span><br><span class="line">    函数名称:<span class="keyword">function</span> (<span class="params">形参列表</span>)&#123;&#125;,</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>调用属性的格式：<code>对象名.属性名</code>；调用函数的格式：<code>对象名.函数名()</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">        name : <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">        age : <span class="number">23</span>,</span><br><span class="line">        <span class="attr">eat</span>: <span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;干饭~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(person.<span class="property">name</span>);  <span class="comment">//zhangsan</span></span><br><span class="line">person.<span class="title function_">eat</span>();  <span class="comment">//干饭~</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span>;  <span class="comment">//删除对象元素</span></span><br><span class="line">person.<span class="property">familyName</span> = <span class="string">&quot;zhang&quot;</span> <span class="comment">//添加对象元素</span></span><br></pre></td></tr></table></figure><p>有时检查一个对象属性是否存在是非常有用的。 我们可以用对象的 <code>.hasOwnProperty(propname)</code> 方法来检查对象是否有指定的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkObj</span>(<span class="params">obj, checkProp</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(checkProp)) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[checkProp];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Not Found&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他方法对象"><a href="#其他方法对象" class="headerlink" title="其他方法对象"></a>其他方法对象</h4><p>在 JavaScript 中，可以用 <code>Math.random()</code> 生成一个在<code>0</code>（包括 0）到 <code>1</code>（不包括 1）之间的随机小数。用 <code>Math.floor()</code> 向下取整，获得它最近的整数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成并返回 0 和 9 之间的随机整数</span></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><code>parseInt()</code> 函数解析一个字符串返回一个整数，它还可以传入第二个参数，指定了字符串中数字的基数。：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">parseInt</span>(<span class="string">&quot;007&quot;</span>);  <span class="comment">//7</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">parseInt</span>(<span class="string">&quot;11&quot;</span>, <span class="number">2</span>);  <span class="comment">//指示 11 在二进制系统中，输出：3</span></span><br></pre></td></tr></table></figure><h3 id="四、BOM"><a href="#四、BOM" class="headerlink" title="四、BOM"></a>四、BOM</h3><p>BOM：Browser Object Model 浏览器对象模型。也就是 JavaScript 将浏览器的各个组成部分封装为对象。</p><p>我们要操作浏览器的各个组成部分就可以通过操作 BOM 中的对象来实现。比如：我现在想将浏览器地址栏的地址改为 <code>https://www.itheima.com</code> 就可以通过使用 BOM 中定义的 <code>Location</code> 对象的 <code>href</code> 属性，代码： <code>location.href = &quot;https://itheima.com&quot;;</code> 。</p><p>BOM 中包含了如下对象</p><ol><li><p>Window：浏览器窗口对象</p></li><li><p>Navigator：浏览器对象</p></li><li><p>Screen：屏幕对象</p></li><li><p>History：历史记录对象</p></li><li><p>Location：地址栏对象</p></li></ol><h4 id="Window-对象"><a href="#Window-对象" class="headerlink" title="Window 对象"></a>Window 对象</h4><p>window 对象是 JavaScript 对浏览器的窗口进行封装的对象。</p><p>该对象不需要创建直接使用 <code>window</code>，其中 <code>window.</code> 可以省略。比如我们之前使用的 <code>alert()</code> 函数，其实就是 <code>window</code> 对象的函数，在调用是可以写成如下两种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显式使用 window 对象调用</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;abc&quot;</span>); </span><br><span class="line"><span class="comment">//隐式调用</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;abc&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>window</code> 对象提供了用于获取其他 BOM 组成对象的属性。也就是说，我们想使用 <code>Location</code> 对象的话，就可以使用 <code>window</code> 对象获取；写成 <code>window.location</code>，而 <code>window.</code> 可以省略，简化写成 <code>location</code> 来获取 <code>Location</code> 对象。</p><p>window 对象函数：<code>window</code> 对象提供了很多函数供我们使用，而很多都不常用。</p><ul><li><code>setTimeout(function,毫秒值)</code> : 在一定的时间间隔后执行一个function，只执行一次。</li><li><code>setInterval(function,毫秒值)</code> :在一定的时间间隔后执行一个function，循环执行。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// confirm()，点击确定按钮，返回true，点击取消按钮，返回false</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="title function_">confirm</span>(<span class="string">&quot;确认删除？&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(flag);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器，打开浏览器，3秒后才会弹框输出 hehe，并且只会弹出一次</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器，打开浏览器，每隔2秒都会弹框输出 hehe</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><h4 id="History-对象"><a href="#History-对象" class="headerlink" title="History 对象"></a>History 对象</h4><p>History 对象是 JavaScript 对历史记录进行封装的对象。</p><p>History 对象的获取：使用 <code>window.history</code> 获取，其中 <code>window.</code> 可以省略。</p><p>History 对象的函数：当我们点击向左的箭头，就跳转到前一个访问的页面，这就是 <code>back()</code> 函数的作用；当我们点击向右的箭头，就跳转到下一个访问的页面，这就是 <code>forward()</code> 函数的作用。</p><h4 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h4><p>Location 对象是 JavaScript 对地址栏封装的对象。可以通过操作该对象，跳转到任意页面。</p><p>获取 Location 对象：使用 <code>window.location</code> 获取，其中 <code>window.</code> 可以省略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.方法();</span><br><span class="line">location.方法();</span><br></pre></td></tr></table></figure><p>Location 对象属性：Location 对象提供了很对属性。常用的只有一个属性 <code>href</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;3秒跳转到首页...&quot;</span>); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    location.<span class="property">href</span> = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="五、DOM"><a href="#五、DOM" class="headerlink" title="五、DOM"></a>五、DOM</h3><p>DOM：Document Object Model 文档对象模型。也就是 JavaScript 将 HTML 文档的各个组成部分封装为对象。JavaScript 通过 DOM， 就能够对 HTML进行操作了，例如改变 HTML 元素的内容，改变 HTML 元素的样式（CSS），对 HTML DOM 事件作出反应，添加和删除 HTML 元素。</p><p>DOM 是 W3C（万维网联盟）定义了访问 HTML 和 XML 文档的标准。该标准被分为 3 个不同的部分：</p><ol><li><p>核心 DOM：针对任何结构化文档的标准模型。 XML 和 HTML 通用的标准。</p><ul><li>Document：整个文档对象。</li><li>Element：元素对象。</li><li>Attribute：属性对象。</li><li>Text：文本对象。</li><li>Comment：注释对象。</li></ul></li><li>XML DOM： 针对 XML 文档的标准模型。</li><li>HTML DOM： 针对 HTML 文档的标准模型。该标准是在核心 DOM 基础上，对 HTML 中的每个标签都封装成了不同的对象。<ul><li>例如：<code>&lt;img&gt;</code> 标签在浏览器加载到内存中时会被封装成 <code>Image</code> 对象，同时该对象也是 <code>Element</code> 对象。</li><li>例如：<code>&lt;input type=&#39;button&#39;&gt;</code> 标签在浏览器加载到内存中时会被封装成 <code>Button</code> 对象，同时该对象也是 <code>Element</code> 对象。</li></ul></li></ol><h4 id="获取-Element-对象"><a href="#获取-Element-对象" class="headerlink" title="获取 Element 对象"></a>获取 Element 对象</h4><p>HTML 中的 Element 对象可以通过 <code>Document</code> 对象获取，而 <code>Document</code> 对象是通过 <code>window</code> 对象获取。</p><p><code>Document</code> 对象中提供了以下获取 <code>Element</code> 元素对象的函数：</p><ul><li><p><code>getElementById()</code>：根据 id 属性值获取，返回单个 Element 对象。</p></li><li><p><code>getElementsByTagName()</code>：根据标签名称获取，返回 Element 对象数组。</p></li><li><p><code>getElementsByName()</code>：根据 name 属性值获取，返回 Element 对象数组。</p></li><li><p><code>getElementsByClassName()</code>：根据 class 属性值获取，返回 Element 对象数组。</p></li></ul><h4 id="HTML-Element-对象使用"><a href="#HTML-Element-对象使用" class="headerlink" title="HTML Element 对象使用"></a>HTML Element 对象使用</h4><p>HTML 中的 <code>Element</code> 元素对象有很多，不可能全部记住，以后是根据具体的需求查阅文档使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getElementById：根据 id 属性值获取上面的 img 元素对象，返回单个对象</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;light&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(img); </span><br><span class="line"><span class="comment">//getElementsByTagName：根据标签名称获取所有的 `div` 元素对象</span></span><br><span class="line"><span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>);<span class="comment">// 返回一个数组，数组中存储的是 div 元素对象</span></span><br><span class="line"><span class="comment">// alert(divs.length);  //输出 数组的长度</span></span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; divs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(divs[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//getElementsByName：根据name属性值获取，返回Element对象数组</span></span><br><span class="line"><span class="keyword">var</span> hobbys = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(hobbys[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getElementsByClassName：根据class属性值获取，返回Element对象数组</span></span><br><span class="line"><span class="keyword">var</span> clss = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; clss.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(clss[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、事件监听"><a href="#六、事件监听" class="headerlink" title="六、事件监听"></a>六、事件监听</h3><p>HTML 事件是发生在 HTML 元素上的“事情”。比如：页面上的 <code>按钮被点击</code>、<code>鼠标移动到元素之上</code>、<code>按下键盘按键</code> 等都是事件.事件监听是JavaScript 可以在事件被侦测到时执行一段逻辑代码.</p><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><p>JavaScript 提供了两种事件绑定方式：</p><ol><li>通过 HTML标签中的事件属性进行绑定，如下面代码，有一个按钮元素，我们是在该标签上定义 <code>事件属性</code>，在事件属性中绑定函数。<code>onclick</code> 就是 <code>单击事件</code> 的事件属性。<code>onclick=&#39;on（）&#39;</code> 表示该点击事件绑定了一个名为 <code>on()</code> 的函数。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&#x27;on()’&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">&lt;script&gt;&lt;/</span></span></span><br></pre></td></tr></table></figure><ul><li>下面是点击事件绑定的 <code>on()</code> 函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;我被点了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过 DOM 元素属性绑定，如下面代码是按钮标签，在该标签上我们并没有使用 <code>事件属性</code>，绑定事件的操作需要在 js 代码中实现。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>下面 js 代码是获取了 <code>id=&#39;btn&#39;</code> 的元素对象，然后将 <code>onclick</code> 作为该对象的属性，并且绑定匿名函数。该函数是在事件触发后自动执行。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我被点了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式1：在下面input标签上添加 onclick 属性，并绑定 on() 函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;on()&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;再点我&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;我被点了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//方式2：获取 id=&quot;btn&quot; 元素对象，通过调用 onclick 属性 绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;我被点了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h4><div class="table-container"><table><thead><tr><th>事件属性名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table></div><p>如下是带有表单的页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;register&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上代码的表单，当我们点击 <code>提交</code> 按钮后，表单就会提交，此处默认使用的是 <code>GET</code> 提交方式，会将提交的数据拼接到 URL 后。现需要通过 js 代码实现阻止表单提交的功能，js 代码实现如下：</p><ol><li>获取 <code>form</code> 表单元素对象。</li><li>给 <code>form</code> 表单元素对象绑定 <code>onsubmit</code> 事件，并绑定匿名函数。</li><li>该匿名函数如果返回的是true，提交表单；如果返回的是false，阻止表单提交。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;register&quot;</span>).<span class="property">onsubmit</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//onsubmit 返回true，则表单会被提交，返回false，则表单不提交</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、表单验证案例"><a href="#七、表单验证案例" class="headerlink" title="七、表单验证案例"></a>七、表单验证案例</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>有如下注册页面，对表单进行校验，如果输入的用户名、密码、手机号符合规则，则允许提交；如果不符合规则，则不允许提交。</p><p>完成以下需求：</p><ol><li><p>当输入框失去焦点时，验证输入内容是否符合要求。</p></li><li><p>当点击注册按钮时，判断所有输入框的内容是否都符合要求，如果不合符则阻止表单提交。</p></li></ol><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul><li>下面是初始页面：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;../css/register.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;reg-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>已有帐号？<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;reg-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;username_err&quot;</span> <span class="attr">class</span>=<span class="string">&quot;err_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>用户名不太受欢迎<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;password_err&quot;</span> <span class="attr">class</span>=<span class="string">&quot;err_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tel&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;tel_err&quot;</span> <span class="attr">class</span>=<span class="string">&quot;err_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>手机号格式有误<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;注 册&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reg_btn&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="验证输入框"><a href="#验证输入框" class="headerlink" title="验证输入框"></a>验证输入框</h4><p>校验用户名。当用户名输入框失去焦点时，判断输入的内容是否符合 <code>长度是 6-12 位</code> 规则，不符合使 <code>id=&#39;username_err&#39;</code> 的span标签显示出来，给出用户提示。</p><p>校验密码。当密码输入框失去焦点时，判断输入的内容是否符合 <code>长度是 6-12 位</code> 规则，不符合使 <code>id=&#39;password_err&#39;</code> 的span标签显示出来，给出用户提示。</p><p>校验手机号。当手机号输入框失去焦点时，判断输入的内容是否符合 <code>长度是 11 位</code> 规则，不符合使 <code>id=&#39;tel_err&#39;</code> 的span标签显示出来，给出用户提示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 验证用户名是否符合规则</span></span><br><span class="line"><span class="comment">//1.1 获取用户名的输入框</span></span><br><span class="line"><span class="keyword">var</span> usernameInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.2 绑定onblur事件 失去焦点</span></span><br><span class="line">usernameInput.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.3 获取用户输入的用户名</span></span><br><span class="line">    <span class="keyword">var</span> username = usernameInput.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.4 判断用户名是否符合规则：长度 6~12</span></span><br><span class="line">    <span class="keyword">if</span> (username.<span class="property">length</span> &gt;= <span class="number">6</span> &amp;&amp; username.<span class="property">length</span> &lt;= <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="comment">//符合规则</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//不合符规则</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 验证密码是否符合规则</span></span><br><span class="line"><span class="comment">//1.1 获取密码的输入框</span></span><br><span class="line"><span class="keyword">var</span> passwordInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.2 绑定onblur事件 失去焦点</span></span><br><span class="line">passwordInput.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.3 获取用户输入的密码</span></span><br><span class="line">    <span class="keyword">var</span> password = passwordInput.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.4 判断密码是否符合规则：长度 6~12</span></span><br><span class="line">    <span class="keyword">if</span> (password.<span class="property">length</span> &gt;= <span class="number">6</span> &amp;&amp; password.<span class="property">length</span> &lt;= <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="comment">//符合规则</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//不合符规则</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 验证手机号是否符合规则</span></span><br><span class="line"><span class="comment">//1.1 获取手机号的输入框</span></span><br><span class="line"><span class="keyword">var</span> telInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tel&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.2 绑定onblur事件 失去焦点</span></span><br><span class="line">telInput.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.3 获取用户输入的手机号</span></span><br><span class="line">    <span class="keyword">var</span> tel = telInput.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.4 判断手机号是否符合规则：长度 11</span></span><br><span class="line">    <span class="keyword">if</span> (tel.<span class="property">length</span> == <span class="number">11</span>) &#123;</span><br><span class="line">        <span class="comment">//符合规则</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tel_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//不合符规则</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tel_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="验证表单"><a href="#验证表单" class="headerlink" title="验证表单"></a>验证表单</h4><p>当用户点击 <code>注册</code> 按钮时，需要同时对输入的 <code>用户名</code>、<code>密码</code>、<code>手机号</code> ，如果都符合规则，则提交表单；如果有一个不符合规则，则不允许提交表单。实现该功能需要获取表单元素对象，并绑定 <code>onsubmit</code> 事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取表单对象</span></span><br><span class="line"><span class="keyword">var</span> regForm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reg-form&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 绑定onsubmit 事件</span></span><br><span class="line">regForm.<span class="property">onsubmit</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>onsubmit</code> 事件绑定的函数需要对输入的 <code>用户名</code>、<code>密码</code>、<code>手机号</code> 进行校验，这些校验我们之前都已经实现过了，这里我们还需要再校验一次吗？不需要，只需要对之前校验的代码进行改造，把每个校验的代码专门抽象到有名字的函数中，方便调用；并且每个函数都要返回结果来去决定是提交表单还是阻止表单提交。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 验证用户名是否符合规则</span></span><br><span class="line"><span class="comment">//1.1 获取用户名的输入框</span></span><br><span class="line"><span class="keyword">var</span> usernameInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.2 绑定onblur事件 失去焦点</span></span><br><span class="line">usernameInput.<span class="property">onblur</span> = checkUsername;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkUsername</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.3 获取用户输入的用户名</span></span><br><span class="line">    <span class="keyword">var</span> username = usernameInput.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.4 判断用户名是否符合规则：长度 6~12</span></span><br><span class="line">    <span class="keyword">var</span> flag = username.<span class="property">length</span> &gt;= <span class="number">6</span> &amp;&amp; username.<span class="property">length</span> &lt;= <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//符合规则</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//不合符规则</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 验证密码是否符合规则</span></span><br><span class="line"><span class="comment">//1.1 获取密码的输入框</span></span><br><span class="line"><span class="keyword">var</span> passwordInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.2 绑定onblur事件 失去焦点</span></span><br><span class="line">passwordInput.<span class="property">onblur</span> = checkPassword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkPassword</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.3 获取用户输入的密码</span></span><br><span class="line">    <span class="keyword">var</span> password = passwordInput.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.4 判断密码是否符合规则：长度 6~12</span></span><br><span class="line">    <span class="keyword">var</span> flag = password.<span class="property">length</span> &gt;= <span class="number">6</span> &amp;&amp; password.<span class="property">length</span> &lt;= <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//符合规则</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//不合符规则</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 验证手机号是否符合规则</span></span><br><span class="line"><span class="comment">//1.1 获取手机号的输入框</span></span><br><span class="line"><span class="keyword">var</span> telInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tel&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.2 绑定onblur事件 失去焦点</span></span><br><span class="line">telInput.<span class="property">onblur</span> = checkTel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkTel</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.3 获取用户输入的手机号</span></span><br><span class="line">    <span class="keyword">var</span> tel = telInput.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.4 判断手机号是否符合规则：长度 11</span></span><br><span class="line">    <span class="keyword">var</span> flag = tel.<span class="property">length</span> == <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//符合规则</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tel_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//不合符规则</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tel_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>onsubmit</code> 绑定的函数需要调用 <code>checkUsername()</code> 函数、<code>checkPassword()</code> 函数、<code>checkTel()</code> 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取表单对象</span></span><br><span class="line"><span class="keyword">var</span> regForm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reg-form&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 绑定onsubmit 事件</span></span><br><span class="line">regForm.<span class="property">onsubmit</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//挨个判断每一个表单项是否都符合要求，如果有一个不合符，则返回false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="title function_">checkUsername</span>() &amp;&amp; <span class="title function_">checkPassword</span>() &amp;&amp; <span class="title function_">checkTel</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、RegExp对象"><a href="#八、RegExp对象" class="headerlink" title="八、RegExp对象"></a>八、RegExp对象</h3><p>RegExp 是正则对象。正则对象是判断指定字符串是否符合规则。在 js 中对正则表达式封装的对象就是正则对象。</p><h4 id="正则对象使用"><a href="#正则对象使用" class="headerlink" title="正则对象使用"></a>正则对象使用</h4><ol><li>直接量方式：注意不要加引号</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/正则表达式/</span>;</span><br></pre></td></tr></table></figure><ol><li>创建 RegExp 对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;正则表达式&quot;</span>);</span><br></pre></td></tr></table></figure><p>函数：<code>test(str)</code> ：判断指定字符串是否符合规则，返回 true 或 false。</p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>正则表达式定义了字符串组成的规则。也就是判断指定的字符串是否符合指定的规则，如果符合返回 true，如果不符合返回 false。</p><p>正则表达式是和语言无关的。很多语言都支持正则表达式，Java 语言也支持，只不过正则表达式在不同的语言中的使用方式不同，js 中需要使用正则对象来使用正则表达式。</p><p>正则表达式常用的规则如下：</p><ul><li><p><code>^</code>：表示开始</p></li><li><p><code>$</code>：表示结束</p></li><li><p><code>[ ]</code>：代表某个范围内的单个字符，比如： [<code>0-9</code>] 单个数字字符</p></li><li><p><code>.</code>：代表任意单个字符，除了换行和行结束符</p></li><li><p><code>\w</code>：代表单词字符：字母、数字、下划线(<code>_</code>)，相当于 [<code>A-Za-z0-9_</code>]</p></li><li><p><code>\d</code>：代表数字字符： 相当于 [<code>0-9</code>]</p></li></ul><p>量词：</p><ul><li><p><code>+</code>：至少一个</p></li><li><p><code>*</code>：零个或多个</p></li><li><p><code>？</code>：零个或一个</p></li><li><p><code>&#123;x&#125;</code>：x个</p></li><li><p><code>&#123;m,&#125;</code>：至少m个</p></li><li><p><code>&#123;m,n&#125;</code>：至少m个，最多n个</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 规则：单词字符，6~12</span></span><br><span class="line"><span class="comment">//1,创建正则对象，对正则表达式进行封装</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\w&#123;6,12&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcccc&quot;</span>;</span><br><span class="line"><span class="comment">//2,判断 str 字符串是否符合 reg 封装的正则表达式的规则</span></span><br><span class="line"><span class="keyword">var</span> flag = reg.<span class="title function_">test</span>(str);</span><br><span class="line"><span class="title function_">alert</span>(flag);</span><br></pre></td></tr></table></figure><h4 id="改进表单校验案例"><a href="#改进表单校验案例" class="headerlink" title="改进表单校验案例"></a>改进表单校验案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;../css/register.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-div&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;reg-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>已有帐号？<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;reg-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;username_err&quot;</span> <span class="attr">class</span>=<span class="string">&quot;err_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>用户名不太受欢迎<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;password_err&quot;</span> <span class="attr">class</span>=<span class="string">&quot;err_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tel&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;tel_err&quot;</span> <span class="attr">class</span>=<span class="string">&quot;err_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>手机号格式有误<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;注 册&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reg_btn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 验证用户名是否符合规则</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.1 获取用户名的输入框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> usernameInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.2 绑定onblur事件 失去焦点</span></span></span><br><span class="line"><span class="language-javascript">    usernameInput.<span class="property">onblur</span> = checkUsername;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkUsername</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.3 获取用户输入的用户名</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> username = usernameInput.<span class="property">value</span>.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.4 判断用户名是否符合规则：长度 6~12,单词字符组成</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reg = <span class="regexp">/^\w&#123;6,12&#125;$/</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> flag = reg.<span class="title function_">test</span>(username);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//var flag = username.length &gt;= 6 &amp;&amp; username.length &lt;= 12;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (flag) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//符合规则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//不合符规则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> flag;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 验证密码是否符合规则</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.1 获取密码的输入框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> passwordInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.2 绑定onblur事件 失去焦点</span></span></span><br><span class="line"><span class="language-javascript">    passwordInput.<span class="property">onblur</span> = checkPassword;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkPassword</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.3 获取用户输入的密码</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> password = passwordInput.<span class="property">value</span>.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.4 判断密码是否符合规则：长度 6~12</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reg = <span class="regexp">/^\w&#123;6,12&#125;$/</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> flag = reg.<span class="title function_">test</span>(password);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//var flag = password.length &gt;= 6 &amp;&amp; password.length &lt;= 12;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (flag) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//符合规则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//不合符规则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> flag;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 验证手机号是否符合规则</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.1 获取手机号的输入框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> telInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tel&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.2 绑定onblur事件 失去焦点</span></span></span><br><span class="line"><span class="language-javascript">    telInput.<span class="property">onblur</span> = checkTel;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkTel</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.3 获取用户输入的手机号</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tel = telInput.<span class="property">value</span>.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.4 判断手机号是否符合规则：长度 11，数字组成，第一位是1</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//var flag = tel.length == 11;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reg = <span class="regexp">/^[1]\d&#123;10&#125;$/</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> flag = reg.<span class="title function_">test</span>(tel);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (flag) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//符合规则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tel_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//不合符规则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tel_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> flag;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 获取表单对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> regForm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reg-form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 绑定onsubmit 事件</span></span></span><br><span class="line"><span class="language-javascript">    regForm.<span class="property">onsubmit</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//挨个判断每一个表单项是否都符合要求，如果有一个不合符，则返回false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> flag = <span class="title function_">checkUsername</span>() &amp;&amp; <span class="title function_">checkPassword</span>() &amp;&amp; <span class="title function_">checkTel</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> flag;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 和 CSS 基础知识总结</title>
      <link href="/HTML%E5%92%8CCSS%E5%9F%BA%E7%A1%80/"/>
      <url>/HTML%E5%92%8CCSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对于前端开发来说，最基本的知识肯定是<code>HTML</code>, <code>CSS</code>, <code>JavaScript</code>三剑客了。前端技术更新快，因此对于文档的阅读和<a href="https://learn.freecodecamp.one/">实际操练</a>十分重要，基础阶段一定要打好，才能向更高峰攀登。本篇笔记是对一些我认为的 HTML5 和 CSS3 相关常用知识的总结。至于想看最全和最权威文档的朋友还是移步 <a href="https://developer.mozilla.org/zh-CN/">MDN web docs</a> 吧。</p></blockquote><span id="more"></span><h3 id="一、HTML"><a href="#一、HTML" class="headerlink" title="一、HTML"></a>一、HTML</h3><p>HTML(HyperText Markup Language)：超文本标记语言。</p><ul><li>超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</li><li>标记语言：由标签构成的语言。</li></ul><p>XML就是标记语言，由一个一个的标签组成，HTML 也是由标签组成。HTML中的标签都是预定义好的，运行在浏览器上并由浏览器解析，然后展示出对应的效果。例如我们想在浏览器上展示出图片就需要使用预定义的 <code>img</code> 标签；想展示可以点击的链接的效果就可以使用预定义的 <code>a</code> 标签等。</p><p>W3C标准：W3C是万维网联盟，这个组成是用来定义标准的。他们规定了一个网页是由三部分组成，分别是：</p><ol><li><p>结构：对应的是 HTML 语言</p></li><li><p>表现：对应的是 CSS 语言</p></li><li><p>行为：对应的是 JavaScript 语言</p></li></ol><p>HTML定义页面的整体结构；CSS是用来美化页面，让页面看起来更加美观；JavaScript可以使网页动起来，比如轮播图也就是多张图片自动的进行切换等效果。</p><h4 id="HTML-快速入门"><a href="#HTML-快速入门" class="headerlink" title="HTML 快速入门"></a>HTML 快速入门</h4><p>新建文本文件，后缀名改为 <code>.html</code>，编写 HTML 结构标签。</p><p>HTML 是由一个一个的标签组成的，但是它也用于表示结构的标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>html 标签是根标签，下面有 <code>head</code> 标签和 <code>body</code> 标签这两个子标签。而 <code>head</code> 标签的 <code>title</code> 子标签是用来定义页面标题名。</p><p><code>body</code> 标签的内容会被展示在内容区中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html 快速入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        乾坤未定，你我皆是黑马~</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用 <code>font</code>  标签更改字体颜色：该标签有一个 <code>color</code> 属性可以设置字体颜色，如：<code>&lt;font color=&#39;red&#39;&gt;&lt;/font&gt;</code> 就是将文字设置成了红颜色。那么我们只需要将需要变成红色的文字放在标签体部分就可以了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html 快速入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span>&gt;</span>乾坤未定，你我皆是黑马~<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>HTML 语法松散：不区分大小写，HTML 标签属性值单双引皆可。</p><h4 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h4><p>标题标签：创建页面文件，在 <code>body</code> 标签中书写标签。</p><p>书写标题标签：标题标签中 h1最大，h6最小。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题 h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题 h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是标题 h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是标题 h4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>我是标题 h5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>我是标题 h6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hr标签：<code>hr</code> 标签在浏览器中呈现出 横线 的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>font：字体标签（已不建议使用了，可以用 CSS 进行设置）。</p><ul><li>face 属性：用来设置字体。如 “楷体”、”宋体”等。</li></ul><ul><li><p>color 属性：设置文字颜色。颜色有三种表示方式：</p><ol><li><p>英文单词：red,pink,blue…</p></li><li><p><code>rgb(值1,值2,值3)</code>：值的取值范围：0~255  </p></li><li><p><code>#值1值2值3</code>：值的范围：00~FF</p></li></ol></li></ul><ul><li>size 属性：设置文字大小。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;楷体&quot;</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#ff0000&quot;</span>&gt;</span>传智教育<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><p>换行标签：<code>&lt;br&gt;</code> 标签。</p><p>段落标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">刚察草原绿草如茵，沙柳河水流淌入湖。藏族牧民索南才让家中，茶几上摆着馓子、麻花和水果，炉子上刚煮开的奶茶香气四溢……</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">6月8日下午，习近平总书记来到青海省海北藏族自治州刚察县沙柳河镇果洛藏贡麻村，走进牧民索南才让家中，看望慰问藏族群众。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加粗、斜体、下划线标签：</p><ul><li><p>b：加粗标签。</p></li><li><p>i：斜体标签。</p></li><li><p>u：下划线标签，在文字的下方有一条横线。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>沙柳河水流淌<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>沙柳河水流淌<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>沙柳河水流淌<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>居中标签 <code>&lt;center&gt;</code> ：文本居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>沙柳河水流淌<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="图片、音频、视频标签"><a href="#图片、音频、视频标签" class="headerlink" title="图片、音频、视频标签"></a>图片、音频、视频标签</h4><p><code>&lt;img&gt;</code>：定义图片</p><ul><li><p>src：规定显示图像的 URL（统一资源定位符）。</p></li><li><p>height：定义图像的高度。</p></li><li><p>width：定义图像的宽度。</p></li><li><p>audio：定义音频。支持的音频格式：MP3、WAV、OGG 。</p><ul><li><p>src：规定音频的 URL。</p></li><li><p>controls：显示播放控件。</p></li></ul></li></ul><ul><li><code>&lt;video&gt;</code>：定义视频。支持的音频格式：MP4, WebM、OGG。<ul><li>src：规定视频的 URL。</li><li>controls：显示播放控件。</li></ul></li></ul><ul><li><p>尺寸单位：height 属性和 width 属性有两种设置方式。</p><ul><li><p>像素：单位是px。</p></li><li><p>百分比。占父标签的百分比。例如宽度设置为 50%，意思就是占它的父标签宽度的一般（50%）。</p></li></ul></li><li><p>资源路径：图片，音频，视频标签都有 src 属性，而 src 是用来指定对应的图片，音频，视频文件的路径。</p><ul><li><p>绝对路径：协议://ip地址:端口号/资源名称。</p></li><li><p>相对路径：相对位置关系。</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/a.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;b.mp3&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;c.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><p>在网页中可以看到很多超链接标签，超链接使用的是 <code>a</code> 标签。</p><ul><li><p>href：指定访问资源的URL 。</p></li><li><p>target：指定打开资源的方式。</p><ul><li><p>_self：默认值，在当前页面打开。</p></li><li><p>_blank：在空白页面打开。</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.itcast.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>点我有惊喜<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><p>有序列表：<code>&lt;ol&gt;</code>。有序列表中的 <code>type</code> 属性用来指定标记的标号的类型（数字、字母、罗马数字等）。</p><p>无序列表：<code>&lt;ul&gt;。</code>无序列表中的 <code>type</code> 属性用来指定标记的形状。</p><p>列表项：<code>&lt;li&gt;。</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><p>table ：定义表格。</p><ul><li><p>border：规定表格边框的宽度。</p></li><li><p>width ：规定表格的宽度。</p></li><li><p>cellspacing：规定单元格之间的空白。</p></li></ul><p>tr ：定义行。</p><ul><li>align：定义表格行的内容对齐方式。</li></ul><p>td ：定义单元格。</p><ul><li><p>rowspan：规定单元格可横跨的行数。</p></li><li><p>colspan：规定单元格可横跨的列数。</p></li></ul><p>th：定义表头单元格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">cospan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>品牌logo<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  <span class="comment">&lt;!--合并单元格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>品牌名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>企业名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>010<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/三只松鼠.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>三只松鼠<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>三只松鼠<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>009<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/优衣库.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>优衣库<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>优衣库<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>008<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/小米.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小米<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小米科技有限公司<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h4><p><code>&lt;div&gt;</code>：定义 HTML 文档中的一个区域部分，经常与 CSS 一起使用，用来布局网页。</p><p><code>&lt;span&gt;</code>：用于组合行内元素。</p><p><code>div</code>标签 在浏览器上会有换行的效果，而 <code>span</code> 标签在浏览器上没有换行效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h4><p>表单就是用来采集用户输入的数据，然后将数据发送到服务端，服务端会对数据库进行操作，比如注册就是将数据保存到数据库中，而登陆就是根据用户名和密码进行数据库的查询操作。</p><p>表单：在网页中主要负责数据采集功能，使用 <code>&lt;form&gt;</code> 标签定义表单。<code>form</code> 是表单标签，它在页面上没有任何展示的效果。需要借助于表单项标签来展示不同的效果。</p><p>表单项（元素）：不同类型的 <code>input</code> 元素、下拉列表、文本域等。</p><ul><li><code>&lt;form&gt;</code>：定义表单</li><li><code>&lt;input&gt;</code>：定义表单项，通过 type属性控制输入形式</li><li><code>&lt;label&gt;</code>：为表单项定义标注</li><li><code>&lt;select&gt;</code>：定义下拉列表</li><li><code>&lt;option&gt;</code>：定义下拉列表的列表项</li><li><code>&lt;textarea&gt;</code>：定义文本域</li></ul><h4 id="form-标签属性"><a href="#form-标签属性" class="headerlink" title="form 标签属性"></a>form 标签属性</h4><p>action：规定当提交表单时向何处发送表单数据，该属性值就是 URL。action 会将数据提交到服务端，该属性需要书写服务端的 URL。可以书写 <code>#</code> ，表示提交到当前页面。</p><p>method ：规定用于发送表单数据的方式</p><ul><li>get：默认值。如果不设置 method 属性则默认就是该值。请求参数会拼接在 URL 后边。url的长度有限制 4KB。</li><li>post：浏览器会将数据放到 http 请求消息体中。请求参数无限制的。</li></ul><p>要想提交数据，<code>input</code> 输入框必须设置 <code>name</code> 属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h4><p><code>&lt;input&gt;</code>：表单项，通过type属性控制输入形式。</p><ul><li><code>input</code> 标签有个 <code>type</code> 属性。 <code>type</code> 属性的取值不同，展示的效果也不一样</li><li>text：默认值。定义单行的输入字段</li><li>password：定义密码字段</li><li>radio：定义单选按钮</li><li>checkbox：定义复选框</li><li>file：定义文件上传按钮</li><li>hidden：定义隐藏的输入字段</li><li>submit：定义提交按钮，提交按钮会把表单数据发送到服务器</li><li>reset：定义重置按钮，重置按钮会清除表单中的所有数据</li><li>button：定义可点击按钮</li></ul><p><code>&lt;select&gt;</code>：定义下拉列表，<code>&lt;option&gt;</code> 定义列表项。</p><p><code>&lt;textarea&gt;</code>：文本域，它可以输入多行文本，而 <code>input</code> 数据框只能输入一行文本。</p><p>以上标签项的内容要想提交，必须得定义 <code>name</code> 属性。</p><p>每一个标签都有 id 属性，id 属性值是唯一的标识。</p><p>单选框、复选框、下拉列表需要使用 <code>value</code> 属性指定提交的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        性别：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span> 旅游</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span> 电影</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span> 游戏</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        头像：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        城市:</span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        个人描述：</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">name</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;免费注册&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;一个按钮&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h3><p>CSS 是一门语言，用于控制网页表现。CSS也有一个专业的名字：Cascading Style Sheet（层叠样式表）。</p><p><code>style</code> 标签中定义的就是css代码。以下代码描述了将 <code>div</code> 标签的内容的字体颜色设置为 红色。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello CSS~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="css-导入方式"><a href="#css-导入方式" class="headerlink" title="css 导入方式"></a>css 导入方式</h4><p>css 导入方式其实就是 css 代码和 html 代码的结合方式。CSS 导入 HTML有三种方式：</p><ol><li>内联样式：在标签内部使用style属性，属性值是css属性键值对。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>Hello CSS~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>内部样式：定义 <code>&lt;style&gt;</code> 标签，在标签内部定义css样式。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>外部样式：定义link标签，引入外部的css文件（编写一个css文件。名为：demo.css）。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在html中引入 css 文件：<code>&lt;link rel=&quot;stylesheet&quot;  href=&quot;demo.css&quot;&gt;</code>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;../css/demo.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello css <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="css-选择器"><a href="#css-选择器" class="headerlink" title="css 选择器"></a>css 选择器</h4><p>css 选择器就是选取需设置样式的元素（标签）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元素选择器：<code>元素名称&#123;color: red;&#125;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">color</span>:red&#125;  <span class="comment">/*该代码表示将页面中所有的div标签的内容的颜色设置为红色*/</span></span><br></pre></td></tr></table></figure><p>id 选择器：<code>#id属性值&#123;color: red;&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span>hello css2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#name</span>&#123;<span class="attribute">color</span>: red;&#125;  <span class="comment">/*该代码表示将页面中所有的id属性值是 name 的标签的内容的颜色设置为红色*/</span></span><br></pre></td></tr></table></figure><p>类选择器：<code>.class属性值&#123;color: red;&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>hello css3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cls</span>&#123;<span class="attribute">color</span>: red;&#125; <span class="comment">/*该代码表示将页面中所有的class属性值是 cls 的标签的内容的颜色设置为红色*/</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#name</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.cls</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="CSS-基本样式属性"><a href="#CSS-基本样式属性" class="headerlink" title="CSS 基本样式属性"></a>CSS 基本样式属性</h4><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">background</td><td style="text-align:left">简写属性，作用是将背景属性设置在一个声明中。</td></tr><tr><td style="text-align:left">background-attachment</td><td style="text-align:left">背景图像是否固定或者随着页面的其余部分滚动。</td></tr><tr><td style="text-align:left">background-color</td><td style="text-align:left">设置元素的背景颜色。</td></tr><tr><td style="text-align:left">background-image</td><td style="text-align:left">把图像设置为背景。</td></tr><tr><td style="text-align:left">background-position</td><td style="text-align:left">设置背景图像的起始位置。</td></tr><tr><td style="text-align:left">background-repeat</td><td style="text-align:left">设置背景图像是否及如何重复。</td></tr><tr><td style="text-align:left">color</td><td style="text-align:left">设置文本颜色</td></tr><tr><td style="text-align:left">direction</td><td style="text-align:left">设置文本方向。</td></tr><tr><td style="text-align:left">line-height</td><td style="text-align:left">设置行高。</td></tr><tr><td style="text-align:left">letter-spacing</td><td style="text-align:left">设置字符间距。</td></tr><tr><td style="text-align:left">text-align</td><td style="text-align:left">对齐元素中的文本。</td></tr><tr><td style="text-align:left">text-decoration</td><td style="text-align:left">向文本添加修饰。</td></tr><tr><td style="text-align:left">text-indent</td><td style="text-align:left">缩进元素中文本的首行。</td></tr><tr><td style="text-align:left">text-shadow</td><td style="text-align:left">设置文本阴影。CSS2 包含该属性，但是 CSS2.1 没有保留该属性。</td></tr><tr><td style="text-align:left">text-transform</td><td style="text-align:left">控制元素中的字母。</td></tr><tr><td style="text-align:left">unicode-bidi</td><td style="text-align:left">设置文本方向。</td></tr><tr><td style="text-align:left">white-space</td><td style="text-align:left">设置元素中空白的处理方式。</td></tr><tr><td style="text-align:left">word-spacing</td><td style="text-align:left">设置字间距。</td></tr><tr><td style="text-align:left">font</td><td style="text-align:left">简写属性。作用是把所有针对字体的属性设置在一个声明中。</td></tr><tr><td style="text-align:left">font-family</td><td style="text-align:left">设置字体系列。</td></tr><tr><td style="text-align:left">font-size</td><td style="text-align:left">设置字体的尺寸。</td></tr><tr><td style="text-align:left">font-size-adjust</td><td style="text-align:left">当首选字体不可用时，对替换字体进行智能缩放。（CSS2.1 已删除该属性。）</td></tr><tr><td style="text-align:left">font-style</td><td style="text-align:left">设置字体风格。</td></tr><tr><td style="text-align:left">font-variant</td><td style="text-align:left">以小型大写字体或者正常字体显示文本。</td></tr><tr><td style="text-align:left">font-weight</td><td style="text-align:left">设置字体的粗细。</td></tr><tr><td style="text-align:left">list-style</td><td style="text-align:left">简写属性。用于把所有用于列表的属性设置于一个声明中。</td></tr><tr><td style="text-align:left">list-style-image</td><td style="text-align:left">将图象设置为列表项标志。</td></tr><tr><td style="text-align:left">list-style-position</td><td style="text-align:left">设置列表中列表项标志的位置。</td></tr><tr><td style="text-align:left">list-style-type</td><td style="text-align:left">设置列表项标志的类型。</td></tr><tr><td style="text-align:left">marker-offset</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">border-collapse</td><td style="text-align:left">设置是否把表格边框合并为单一的边框。</td></tr><tr><td style="text-align:left">border-spacing</td><td style="text-align:left">设置分隔单元格边框的距离。</td></tr><tr><td style="text-align:left">caption-side</td><td style="text-align:left">设置表格标题的位置。</td></tr><tr><td style="text-align:left">empty-cells</td><td style="text-align:left">设置是否显示表格中的空单元格。</td></tr><tr><td style="text-align:left">table-layout</td><td style="text-align:left">设置显示单元、行和列的算法。</td></tr><tr><td style="text-align:left">outline</td><td style="text-align:left">在一个声明中设置所有的轮廓属性。</td></tr><tr><td style="text-align:left">outline-color</td><td style="text-align:left">设置轮廓的颜色。</td></tr><tr><td style="text-align:left">outline-style</td><td style="text-align:left">设置轮廓的样式。</td></tr><tr><td style="text-align:left">outline-width</td><td style="text-align:left">设置轮廓的宽度。</td></tr></tbody></table></div><p>CSS链接的四种状态：</p><ul><li><code>a:link &#123;&#125;</code>- 普通的、未被访问的链接。</li><li><code>a:visited &#123;&#125;</code>- 用户已访问的链接。</li><li><code>a:hover &#123;&#125;</code>- 鼠标指针位于链接的上方。</li><li><code>a:active &#123;&#125;</code>- 链接被点击的时刻。</li></ul><p>CSS框模型：element : 元素，padding : 内边距，border : 边框，margin : 外边距。</p><p>CSS定位（position属性）：</p><ul><li>static：元素框正常生成。</li><li>relative：元素框偏移某个距离。</li><li>absolute：元素框从文档流完全删除，并相对于其包含块定位。</li><li>fixed：元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 的安装和使用</title>
      <link href="/MySQL%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
      <url>/MySQL%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>MySQL 是目前应用最广泛的开源关系数据库，在学习完 <a href="/SQL基础">SQL 语言基础</a>后，需要使用 MySQL 进行学习、开发、测试，部署，本篇笔记是对 MySQL 的安装和使用的记录，可供参考。</p></blockquote><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></li></ul><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><ul><li>在<code>系统变量</code>中新建 <code>MYSQL_HOME</code></li><li>在<code>系统变量</code>中找到并双击 <code>Path</code></li><li><code>新建</code> <code>%MYSQL_HOME%\bin</code></li><li>选择<code>命令提示符(管理员)</code>，敲入<code>mysql</code>，回车,如果提示 <code>Can&#39;t connect to MySQL server on &#39;localhost&#39;</code> 则证明添加成功</li></ul><h3 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h3><ul><li><p>新建一个文本文件，内容如下：</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=<span class="string">utf8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-server</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=<span class="string">INNODB</span></span><br><span class="line"><span class="attr">sql_mode</span>=<span class="string">STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span></span><br></pre></td></tr></table></figure></li><li><p>把上面的文本文件另存为 <code>my.ini</code>，存放的路径为 MySQL 的<code>根目录</code></p></li><li>上面代码意思就是配置数据库的默认编码集为utf-8和默认存储引擎为INNODB。</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure><ul><li>如果出现没有出现报错信息，则证明 data 目录初始化没有问题，此时再查看MySQL目录下已经有data目录生成。</li></ul><h3 id="注册-MySQL-服务"><a href="#注册-MySQL-服务" class="headerlink" title="注册 MySQL 服务"></a>注册 MySQL 服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></table></figure><ul><li>现在你的计算机上已经安装好了MySQL服务了</li></ul><h3 id="启动-MySQL-服务"><a href="#启动-MySQL-服务" class="headerlink" title="启动 MySQL 服务"></a>启动 MySQL 服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net start mysql  <span class="comment">// 启动mysql服务</span></span><br><span class="line">    </span><br><span class="line">net stop mysql  <span class="comment">// 停止mysql服务</span></span><br></pre></td></tr></table></figure><h3 id="默认账户密码"><a href="#默认账户密码" class="headerlink" title="默认账户密码"></a>默认账户密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password 1234</span><br></pre></td></tr></table></figure><ul><li>这里的 <code>1234</code> 就是指默认管理员（root 账户）的密码</li></ul><h3 id="登录-MySQL"><a href="#登录-MySQL" class="headerlink" title="登录 MySQL"></a>登录 MySQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p1234</span><br></pre></td></tr></table></figure><ul><li>下角为<code>mysql&gt;</code>，则登录成功</li></ul><h3 id="退出-MySQL"><a href="#退出-MySQL" class="headerlink" title="退出 MySQL"></a>退出 MySQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><h3 id="登陆参数"><a href="#登陆参数" class="headerlink" title="登陆参数"></a>登陆参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p密码 -h要连接的mysql服务器的ip地址(默认127.0.0.1) -P端口号(默认3306)</span><br></pre></td></tr></table></figure><h3 id="卸载-MySQL"><a href="#卸载-MySQL" class="headerlink" title="卸载 MySQL"></a>卸载 MySQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line"></span><br><span class="line">mysqld -remove mysql</span><br></pre></td></tr></table></figure><ul><li>删除MySQL目录及相关的环境变量。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言基础知识总结</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1972 年，为了移植与开发 UNIX 操作系统，丹尼斯·里奇在贝尔电话实验室设计开发了 C 语言。C 语言是一种通用的、面向过程式的计算机程序设计语言，它与 Java 编程语言一样普及，二者在现代软件程序员之间都得到广泛使用。强烈推荐郝斌老师的<a href="https://www.bilibili.com/video/BV1os411h77o">C语言自学教程</a>，在入门 C 语言时给了我很大的启发和帮助。</p></blockquote><span id="more"></span><h3 id="C编程预备"><a href="#C编程预备" class="headerlink" title="C编程预备"></a>C编程预备</h3><p>整数： <code>int</code>，<code>short int</code>，<code>long int</code>。</p><p>浮点数（实数）：<code>float</code>，<code>double</code>。</p><p>字符 ：<code>char</code>。</p><p>变量：本质就是内存中一段存储空间，变量必须的初始化。</p><p>定义变量： <code>数据类型变量名 = 要赋的值;</code>。</p><p>常量的表示：</p><ul><li>整数：十进制传统写法，十六进制前面加 Ox 或 0X，八进制前面加 0。</li><li>浮点数：<code>float x = 3.2</code> or <code>float x = 123.45e-2;</code>。</li><li>字符：单个字符用单引号括起来，字符串用双引号括起来。</li></ul><p>整数是以补码的形式转化为二进制代码存储在计算机中的。实数是以 IEEE754 标准转化为二进制代码存储在计算机中的。</p><p>字符的存储本质上与整数的存储方式相同。字符的本质实际也是与整数的存储方式相同。</p><p>字节就是存储数据的单位，并且是硬件所能访问的最小单位，1字节 = 8位。</p><p>不同类型数据之间相互赋值：<code>(数据类型)(表达式)</code>。</p><p>变量不能被重复定义。</p><h3 id="输入和输出函数"><a href="#输入和输出函数" class="headerlink" title="输入和输出函数"></a>输入和输出函数</h3><p>输入函数：<code>printf(&quot;输出控制符&quot;, 输出参数);</code>。</p><p>逻辑运算符：<code>!=</code>  <code>==</code>  <code>&amp;&amp;</code>。</p><p>输出控制符：<code>%d</code>, <code>%ld</code>, <code>%c</code>, <code>%lf</code>, <code>%x</code>, <code>%o</code>, <code>%s</code>。</p><p>输出函数：<code>scanf(&quot;输入控制符&quot;, 输入参数);</code>。</p><p>处理非法输入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="keyword">while</span> ( (ch=getchar0) != ’\n’）</span><br><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>流程控制：程序代码执行的顺序。流程控制的分类：顺序、选择、定义。</p><p>if 语句：<code>if...else...</code></p><ul><li>C语言对真假的处理：非零是真，真用1表示，假用零表示。</li><li><code>else</code>后不跟判断句。</li></ul><p><code>switch</code>：电梯程序。</p><p>循环：某些代码会被重复执行</p><ul><li><code>for</code>语句；</li><li>三目运算符 <code>(A? B: C)</code>；</li><li><code>while</code>语句：for 和 while 可以相互转换，但 for 的逻辑性更强，更不容易出错。</li><li><code>do...while</code>：do…while…并不等价于 for，当然也不等价于 while，主要用于人机交互。</li><li>break 用来终止循环。</li><li>continue 用于跳过本次循环佘下的语句。</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组：为了解决大量同类型数据的存储和使用间题，为了模拟现实世界。</p><p>一维数组：为n个变量连续分配存储空间，所有的变量数据类型必须相同，所有变量所占的字节大小必须相等，<code>int a[5];</code>。一维数组名不代表数组中所有的元素，一维数组名代表数组第一个元素的地址。</p><p>二维数组，<code>int a[3][4];</code>总共是12个元素， 可以当做3行4列看待。<code>a[i][j]</code> 表示第 i+1 行第 j+1 列的元素。</p><p><code>int a[m][n];</code>： 该二维数组右下角位置的元素只能是 <code>a[m-l][n-l]</code>。</p><p>C 语言中不存在多维数组，因为内存是线性一维的，n 维数组可以当做每个元素是 n-1 维数组的一维数组。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数：避免了重复性操作，有利于程序的模块化。逻辑上：函数是能够完成特定功能的独立的代码块。物理上：函数能够接收数据，能够对接受的数据进行处理能够将数据处理的结果返回。函数返回值的类型也称为函数的类型。</p><p>定义函数：函数定义的本质是详细描述函数之所以能够实现某个特定功能。</p><p>return 表达式：终止被调函数， 向主调函数返回表达式的值。break 是用来终止循环和 switch 的， return 是用来终止函数的。</p><p>函数的分类：</p><ul><li>有参函数和无参函数；</li><li>有返回值函数和无返回值函数；</li><li>库函数和用户自定函数；</li><li>值传递函数和地址传递函数；</li><li>普通函数和主函数（main 函数）。</li></ul><p>一个程序必须有且只能有一个主函数。主函数可以调用普通函数普通函数不能调用主函数。普通函数可以相互调用。</p><p>主函数是程序的入口，也是程序的出口。</p><p>函数调用和函数定义的顺序如果函数调用写在了函数定义的前面， 则必须加函数前置声明。</p><p>函数是 C 语言的基本单位，类是 Java, C#, C++ 的基本单位。</p><p>常用的系统函数：</p><ul><li><code>double sqrt(double x);</code>：求的 x 的平方根。</li><li><code>int abs(int x)</code> or <code>double fabs(double x)</code>：求 x 的绝对值。</li></ul><p>递归和栈。</p><h3 id="变量的作用域和存储方式"><a href="#变量的作用域和存储方式" class="headerlink" title="变量的作用域和存储方式"></a>变量的作用域和存储方式</h3><p>全局变量：在所有函数外部定义的变量叫全局变量。全局变量使用范围：从定义位置开始到整个程序结束。</p><p>局部变量：在一个函数内部定义的变量或者函数的形参都统称为局部变量。局部变量使用范围： 只能在本函数内部使用。</p><p>在一个函数内部如果定义的局部变量的名字和全局变量名一样时， 局部变量会屏蔽掉全局变量。</p><p>静态变量；自动变量；寄存器变量。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针：表示一些复杂的数据结构，快速的传递数据，减少内存的耗用，使函数返回一个以上的值，能直接访问硬件，能够方便的处理字符串，是理解面向对象语言中引用的基础，是C语言的灵魂。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*fun_ptr)</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>; <span class="comment">// 声明一个指向同样参数、返回值的函数指针类型</span></span><br></pre></td></tr></table></figure><p>地址：内存单元的编号，从零开始的非负整数，范围: <code>4G [0—4G-1]</code>。指针就是地址， 地址就是指针。</p><p>指针变量就是存放内存单元编号的变量，或者说指针变量就是存放地址的变量。</p><p>指针和指针变量是两个不同的概念。指针的本质就是一个操作受限的非负整数。</p><p>基本类型指针：<code>int * p;</code>。</p><p>指针运算符：放在已经定义好的指针变量的前面。如果 P 是一个已经定义好的指针变量，则 <code>*p</code> 表示以 p 的内容为地址的变量。</p><p>如何通过被调函数修改主调函数普通变量的值：</p><ol><li>实参必须为该普通变量的地址</li><li>形参必须为指针变量</li><li>在被调函数中通过</li></ol><p><code>*形参名 =</code> 的方式就可以修改主调函数相关变量的值。</p><p>指针和一维数组：</p><ul><li>一维数组名 a[0] 是个指针常量，存放的是一维数组第一个元素的地址。</li><li>下标和指针的关系：如果 P 是个指针变量， 则 <code>p[i]</code> 永远等价于 <code>*(P+i)</code>。</li><li>确定一个一维数组需要两个参数：数组第一个元素的地址和数组的长度。</li><li>指针变量不能相加不能相乘也不能相除。如果两个指针变量指向的是同一块连续空间中的不同存储单元，则这两个指针变量才可以相减。</li></ul><p><code>sizeof(数据类型)</code>：返回值就是该数据类型所占的字节数。指针变量，无论它指向的变量占几个字节，该指针变量本身只占四个字节。</p><p>一个变量的地址是用该变量首字节的地址来表示。</p><p>指针和二维数组：</p><ol><li>指针和函数；</li><li>指针和结构体；</li><li>多级指针。</li></ol><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><p>传统数组也叫静态数组。</p><p>传统数组的缺点：数组长度必须事先制定，且只能是常整数，不能是变量，一旦定义， 其长度就不能在更改。传统数组的内存程序员无法手动释放，在一个函数运行期间，系统为该函数中数组所分配的空间会一直存在，直到该函数运行完毕时，数组的空间才会被系统释放。传统方式定义的数组不能跨函数使用。</p><p>int 类动态数组：<code>int *p = (int *)malloc(int len);</code>。本语句分配了两块内存， 一块内存是动态分配的，总共 len 个字节， 另一块是静态分配的，并且这块静态内存是P变量本身所占的内存， 总共 4 个字节。malloc 只有一个 int 型的形参，表示要求系统分配的字节数。</p><p>malloc 函数的功能是请求系统 len 个字节的内存空间， 如果请求分配成功，则返回第一个字节的地址， 如果分配不成功， 则返回 NULL。</p><p>malloc 函数能且只能返回第一个字节的地址， 所以我们需要把这个无任何实际意义的第一个字节的地址（俗称干地址）转化为一个有实际意义的地址，因此 malloc 前面必须加（<code>数据类型 *</code>)， 表示把这个无实际意义的第一个字节的地址转化为相应类型的地址。</p><p><code>int *p = (int *)malloc(50);</code> 表示将系统分配好的 50 个字节的第一个字节的地址转化为 <code>int *</code> 型的地址。更准确的说是把第一个字节的地址转化为四个字节的地址，这样 P 就指向了第一个的四个字节，P+1 就指向了第2个的四个字节，p+i 就指向了第 i+1 个的4个字节。p[0] 就是第一个元素，p[i] 就是第 i+1 个元素。</p><p><code>free(p)</code>表示把P所指向的内存给释放掉。</p><p>静态内存是由系统自动分配，由系统自动释放，静态内存是在栈分配的。动态内存是由程序员手动分配，手动释放，动态内存是在堆分配的。静态内存不可以跨函数使用。</p><div class="table-container"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><strong>void *calloc(int num, int size);</strong></td><td style="text-align:left">在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0。</td></tr><tr><td style="text-align:left"><strong>void free(void *address);</strong></td><td style="text-align:left">释放 address 所指向的内存块,释放的是动态分配的内存空间。</td></tr><tr><td style="text-align:left"><strong>void *malloc(int num);</strong></td><td style="text-align:left">在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。</td></tr><tr><td style="text-align:left"><strong>void *realloc(void *address, int newsize);</strong></td><td style="text-align:left">重新分配内存，把内存扩展到 <strong>newsize</strong>。</td></tr></tbody></table></div><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>结构体：为了表示一些复杂的事物，而普通的基本类型无法满足实际要求，把一些基本类型数据组合在一起形成的一个新的复合数据类型，这个叫做结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tag</span> &#123;</span> </span><br><span class="line">    member-<span class="built_in">list</span></span><br><span class="line">    member-<span class="built_in">list</span> </span><br><span class="line">    member-<span class="built_in">list</span>  </span><br><span class="line">    ...</span><br><span class="line">&#125; variable-<span class="built_in">list</span> ;</span><br></pre></td></tr></table></figure><p>定义结构体：结构体变量定义的同时可以整体赋初值，如果定义完之后， 则只能单个的赋初值。</p><p>取出结构体变量中的每一个成员：</p><ol><li><code>结构体变量名.成员名</code>；</li><li><code>指针变量名-&gt;成员名</code>。</li></ol><p>使用结构体指针变量作为函数参数来传递。结构体变量不能相加减乘除，但结构体变量可以相互赋值。</p><p>共用体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> [<span class="title">union</span> <span class="title">tag</span>]</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   member definition;</span><br><span class="line">   member definition;</span><br><span class="line">   ...</span><br><span class="line">   member definition;</span><br><span class="line">&#125; [one or more <span class="class"><span class="keyword">union</span> <span class="title">variables</span>];</span></span><br></pre></td></tr></table></figure><p>位域声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  type [member_name] : width ;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>typedef：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> byte;</span><br></pre></td></tr></table></figure><h3 id="枚举和补码"><a href="#枚举和补码" class="headerlink" title="枚举和补码"></a>枚举和补码</h3><p>枚举：把一个事物所有可能的取值一一列举出来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span>　枚举名　&#123;</span>枚举元素<span class="number">1</span>,枚举元素<span class="number">2</span>,……&#125;;</span><br></pre></td></tr></table></figure><p>原码：也叫符号-绝对值码，最髙位 0 表示正，1表示负，其余二进制位是该数字的绝对值的二进制位。原码简单易懂，加减运算复杂，存在加减乘除四种运算，增加了CPU的复杂度，零的表示不唯一。</p><p>反码：反码运算不便，没有在计算机中应用。</p><p>移码：移码表示数值平移 n 位，n 称为移码量。移码主要用于浮点数的阶码的存储。</p><p>补码：</p><ul><li>求正整数的二进制：除 2 取余，直至商为零，余数倒叙排序。</li><li>求负整数的二进制：先求与该负数相对应的正整数的二进制代码，然后将所有位取反，末尾加1，不够位数时， 左边补1。</li><li>零的二进制全是零。</li><li>如果首位是 0，表明是正整数， 按普通方法来求。</li><li>如果首位是 1， 则表明是负整数，将所有位取反，末尾加1，所得数字就是该负数的绝对值。</li><li>int 类型变量所能存储的最大正数用十六进制表示是：7FFFFFFF。</li><li>int 类型变量所能存储的绝对值最大的负整数用十六进制表示是：80000000。</li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>算法：对存储数据的操作，对不同的存储结构，要完成某一个功能所执行的操作是不一样的。算法是依附于存储结构的，不同的存储结构， 所执行的算法是不一样的。广义的算法也叫泛型，无论数据是如何存储的，对该数据的操作都是一样的。</p><p>数组查找快，增删慢；链表查找慢，增删快，占位小。</p><p>首节点是存放第一个有效数据的节点。尾节点是存放最后一个有效数据的节点。头结点是首节点前面的那个节点。头结点的数据类型和首节点的类型是一摸一样的。头结点并不存放有效数据设置头结点的目的是为了方便对链表的操作。</p><p>确定一个链表需要一个参数：头指针，头指针是存放头结点地址的指针变量。</p><p>二进制全部为零的含义 <code>—0000000000000</code> 的含义：</p><ol><li>数值零；</li><li>字符串结束标记符 <code>\0</code>；</li><li>空指针 <code>NULL</code>。<code>NULL</code> 本质也是零，但这个零不代表数字零，而表示的是内存单元的编号零。以零为编号的存储单元的内容不可读，不可写。</li></ol><p>位运算符：</p><ul><li>按位与 <code>&amp;</code> ；</li><li>按位或 <code>|</code> ；</li><li>按位取反 <code>~</code> ；</li><li>按位异或 <code>^</code> ；</li><li>按位左移 <code>&lt;&lt;</code> ；</li><li>按位右移 <code>&gt;&gt;</code> 。</li></ul><h3 id="C-输入输出"><a href="#C-输入输出" class="headerlink" title="C 输入输出"></a>C 输入输出</h3><div class="table-container"><table><thead><tr><th style="text-align:left">标准文件</th><th style="text-align:left">文件指针</th><th style="text-align:left">设备</th></tr></thead><tbody><tr><td style="text-align:left">标准输入</td><td style="text-align:left">stdin</td><td style="text-align:left">键盘</td></tr><tr><td style="text-align:left">标准输出</td><td style="text-align:left">stdout</td><td style="text-align:left">屏幕</td></tr><tr><td style="text-align:left">标准错误</td><td style="text-align:left">stderr</td><td style="text-align:left">您的屏幕</td></tr></tbody></table></div><ul><li><code>getchar()</code> &amp; <code>putchar()</code> 函数；</li><li><code>gets()</code> &amp; <code>puts()</code> 函数；</li><li><code>scanf()</code> 和 <code>printf()</code> 函数。</li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>文件指针<code>fp</code>：<code>fopen(文件名, 使用方式);</code>、<code>fclose(文件名, 使用方式);</code>。</p><p>文件读取：</p><ul><li><code>fgets(str,n,fp)</code>、<code>fputs(str,fp)</code>；</li><li><code>fprintf(文件指针,格式字符串,输出表列)</code>、<code>fscanf(文件指针,格式字符串,输入表列)</code>；</li><li><code>fread(buffer,size,count,fp)</code>、<code>fwrite(buffer,size,count,fp)</code>；</li><li><code>ferror(fp);</code>、<code>clearerr(fp)</code>。</li></ul><p><code>fopen()</code>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">( <span class="type">const</span> <span class="type">char</span> * filename, <span class="type">const</span> <span class="type">char</span> * mode )</span>;</span><br></pre></td></tr></table></figure><h3 id="C-预处理器（C-Preprocessor）"><a href="#C-预处理器（C-Preprocessor）" class="headerlink" title="C 预处理器（C Preprocessor）"></a>C 预处理器（C Preprocessor）</h3><p>C 预处理器不是编译器的组成部分，但是它是编译过程中一个单独的步骤，它们会指示编译器在实际编译之前完成所需的预处理。</p><p>所有的预处理器命令都是以井号（#）开头。它必须是第一个非空字符，为了增强可读性，预处理器指令应从第一列开始。</p><div class="table-container"><table><thead><tr><th style="text-align:left">指令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">#define</td><td style="text-align:left">定义宏</td></tr><tr><td style="text-align:left">#include</td><td style="text-align:left">包含一个源代码文件</td></tr><tr><td style="text-align:left">#undef</td><td style="text-align:left">取消已定义的宏</td></tr><tr><td style="text-align:left">#ifdef</td><td style="text-align:left">如果宏已经定义，则返回真</td></tr><tr><td style="text-align:left">#ifndef</td><td style="text-align:left">如果宏没有定义，则返回真</td></tr><tr><td style="text-align:left">#if</td><td style="text-align:left">如果给定条件为真，则编译下面代码</td></tr><tr><td style="text-align:left">#else</td><td style="text-align:left">#if 的替代方案</td></tr><tr><td style="text-align:left">#elif</td><td style="text-align:left">如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td></tr><tr><td style="text-align:left">#endif</td><td style="text-align:left">结束一个 #if……#else 条件编译块</td></tr><tr><td style="text-align:left">#error</td><td style="text-align:left">当遇到标准错误时，输出错误消息</td></tr><tr><td style="text-align:left">#pragma</td><td style="text-align:left">使用标准化方法，向编译器发布特殊的命令到编译器中</td></tr></tbody></table></div><h3 id="C-错误处理"><a href="#C-错误处理" class="headerlink" title="C 错误处理"></a>C 错误处理</h3><p>C 语言不提供对错误处理的直接支持，但是作为一种系统编程语言，它以返回值的形式允许您访问底层数据。</p><p>在发生错误时，大多数的 C 或 UNIX 函数调用返回 1 或 NULL，同时会设置一个错误代码 <code>errno</code>，该错误代码是全局变量，表示在函数调用期间发生了错误。您可以在 <code>errno.h</code> 头文件中找到各种各样的错误代码。</p><p>C 语言提供了 <code>perror()</code> 和 <code>strerror()</code> 函数来显示与 <code>errno</code> 相关的文本消息。</p><h3 id="C-命令行参数"><a href="#C-命令行参数" class="headerlink" title="C 命令行参数"></a>C 命令行参数</h3><p>执行程序时，可以从命令行传值给 C 程序，这些值被称为命令行参数，它们对程序很重要，特别是当您想从外部控制程序，而不是在代码内对这些值进行硬编码时，就显得尤为重要了。命令行参数是使用 main() 函数参数来处理的，其中，<code>argc</code> 是指传入参数的个数，<code>argv[]</code> 是一个指针数组，指向传递给程序的每个参数。</p><p>对命令行参数解析：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *optstr = <span class="string">&quot;p:n:m:c:&quot;</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">opts</span>[] =</span> &#123;</span><br><span class="line">        &#123;<span class="string">&quot;path&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;p&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;n&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;mtime&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;ctime&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;c&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> opt;</span><br><span class="line">    <span class="keyword">while</span>((opt = getopt_long(argc, argv, optstr, opts, <span class="literal">NULL</span>)) != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">                <span class="built_in">strcpy</span>(path, optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">                <span class="built_in">strcpy</span>(targetname, optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;m&#x27;</span>:</span><br><span class="line">                modifiedtime = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                changetime = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">strchr</span>(optstr, optopt) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;unknown option &#x27;-%c&#x27;\n&quot;</span>, optopt);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;option requires an argument &#x27;-%c&#x27;\n&quot;</span>, optopt);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    findInDir(path);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="C-库函数"><a href="#C-库函数" class="headerlink" title="C 库函数"></a>C 库函数</h3><p><a href="https://www.runoob.com/cprogramming/c-standard-library.html">C 标准库</a>是一组 C 内置函数、常量和头文件，比如 <code>&lt;stdio.h&gt;</code>、<code>&lt;stdlib.h&gt;</code>、<code>&lt;math.h&gt;</code>，等等。</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL 语法总结</title>
      <link href="/SQL%E5%9F%BA%E7%A1%80/"/>
      <url>/SQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>现代程序离不开关系数据库，要使用关系数据库就必须掌握 SQL 语言。SQL 是用于访问和处理数据库的标准的计算机语言。常见的关系型数据库包括：MySQL、SQL Server、Access、Oracle、Sybase、DB2 等等，MySQL 是目前使用最多的 SQL 数据库，本文也是以 MySQL 的操作为例阐释 SQL 语法。</p></blockquote><span id="more"></span><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="数据库术语"><a href="#数据库术语" class="headerlink" title="数据库术语"></a>数据库术语</h4><p>数据库（database）：保存有组织的数据的容器（通常是一个文件或一组文件）</p><p>数据表（table）：某种特定类型数据的结构化清单</p><p>模式（schema）：关于数据库和表的布局及特性的信息</p><ul><li>模式定义了数据在表中如何存储，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息</li><li>数据库和表都有模式</li></ul><p>列（column）：表中的一个字段，所有表都是由一个或多个列组成的</p><p>行（row）：表中的一个记录</p><p>主键（primary key）：一列（或一组列），其值能够唯一标识表中每一行</p><h3 id="SQL-语法"><a href="#SQL-语法" class="headerlink" title="SQL 语法"></a>SQL 语法</h3><p>SQL（Structured Query Language)：标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL</p><p>SQL 让您可以访问和处理数据库，包括数据插入、查询、更新和删除</p><p>各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等</p><h4 id="SQL-语法结构"><a href="#SQL-语法结构" class="headerlink" title="SQL 语法结构"></a>SQL 语法结构</h4><p>子句：是语句和查询的组成成分（在某些情况下，这些都是可选的）</p><p>表达式：可以产生任何标量值，或由列和行的数据库表</p><p>谓词：给需要评估的 SQL 三值逻辑（3VL）（true/false/unknown）或布尔真值指定条件，并限制语句和查询的效果，或改变程序流程</p><p>查询：基于特定条件检索数据，这是 SQL 的一个重要组成部分</p><p>语句：可以持久地影响纲要和数据，也可以控制数据库事务、程序流程、连接、会话或诊断</p><h4 id="SQL-语法要点"><a href="#SQL-语法要点" class="headerlink" title="SQL 语法要点"></a>SQL 语法要点</h4><p>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分，依赖于具体的 DBMS 以及配置</p><p>多条 SQL 语句必须以分号（<code>;</code>）分隔</p><p>处理 SQL 语句时，所有空格都被忽略，SQL 语句可以写成一行，也可以分写为多行</p><p>一行 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> username<span class="operator">=</span><span class="string">&#x27;robot&#x27;</span>, password<span class="operator">=</span><span class="string">&#x27;robot&#x27;</span> <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><p>多行 SQL 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> username<span class="operator">=</span><span class="string">&#x27;robot&#x27;</span>, password<span class="operator">=</span><span class="string">&#x27;robot&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><p>SQL 支持三种注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##注释1</span><br><span class="line">-- 注释2</span><br><span class="line">/* 注释3 */</span><br></pre></td></tr></table></figure><h4 id="SQL-分类"><a href="#SQL-分类" class="headerlink" title="SQL 分类"></a>SQL 分类</h4><ul><li>数据定义语言（DDL）<ul><li>数据定义语言（Data Definition Language，DDL）是 SQL 语言集中负责数据结构定义与数据库对象定义的语言</li><li>DDL 的主要功能是定义数据库对象</li><li>DDL 的核心指令是 <code>CREATE</code>、<code>ALTER</code>、<code>DROP</code></li></ul></li><li>数据操纵语言（DML）<ul><li>数据操纵语言（Data Manipulation Language, DML）是用于数据库操作，对数据库其中的对象和数据运行访问工作的编程语句</li><li>DML 的主要功能是 访问数据，因此其语法都是以读写数据库为主</li><li>DML 的核心指令是 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>SELECT</code>，这四个指令合称 CRUD(Create, Read, Update, Delete)，即增删改查</li></ul></li><li>事务控制语言（TCL）<ul><li>事务控制语言 (Transaction Control Language, TCL) 用于管理数据库中的事务</li><li>这些事务用于管理由 DML 语句所做的更改，它还允许将语句分组为逻辑事务</li><li>TCL 的核心指令是 <code>COMMIT</code>、<code>ROLLBACK</code></li></ul></li><li>数据控制语言（DCL）<ul><li>数据控制语言 (Data Control Language, DCL) 是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权</li><li>DCL 的核心指令是 <code>GRANT</code>、<code>REVOKE</code></li><li>DCL 以控制用户的访问权限为主，因此其指令作法并不复杂</li><li>可利用 DCL 控制的权限有：<code>CONNECT</code>、<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>EXECUTE</code>、<code>USAGE</code>、<code>REFERENCES</code></li></ul></li><li>根据不同的 DBMS 以及不同的安全性实体，其支持的权限控制也有所不同</li></ul><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ul><li>增删改查，又称为 CRUD，数据库基本操作中的基本操作<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4></li><li><code>INSERT INTO</code> 语句用于向表中插入新记录</li><li><p>插入完整的行</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;xxxx@163.com&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>插入行的一部分</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span>(username, password, email)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;xxxx@163.com&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>插入查询出来的数据</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span>(username)</span><br><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> account;</span><br></pre></td></tr></table></figure></li></ul><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><ul><li><p><code>UPDATE</code> 语句用于更新表中的记录</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> username<span class="operator">=</span><span class="string">&#x27;robot&#x27;</span>, password<span class="operator">=</span><span class="string">&#x27;robot&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><ul><li><p><code>DELETE</code> 语句用于删除表中的记录</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span>  ##可以清空表，也就是删除所有行</span><br></pre></td></tr></table></figure></li><li><p>删除表中的指定数据</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;robot&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>清空表中的数据</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><ul><li><code>SELECT</code> 语句用于从数据库中查询数据</li><li><code>DISTINCT</code> 用于返回唯一不同的值，它作用于所有列，也就是说所有列的值都相同才算相同</li><li><code>LIMIT</code> 限制返回的行数，有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数</li><li><code>ASC</code> ：升序（默认）</li><li><code>DESC</code> ：降序</li><li><p>查询单列</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure></li><li><p>查询多列</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure></li><li><p>查询所有列</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ELECT <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure></li><li><p>查询不同的值</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">vend_id <span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure></li><li><p>限制查询结果</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 返回前 5 行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable LIMIT <span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable LIMIT <span class="number">0</span>, <span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 返回第 3 ~ 5 行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable LIMIT <span class="number">2</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li>子查询是嵌套在较大查询中的 SQL 查询</li><li>子查询也称为内部查询或内部选择，而包含子查询的语句也称为外部查询或外部选择</li><li>子查询可以嵌套在 <code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code> 或 <code>DELETE</code> 语句内或另一个子查询中</li><li>子查询通常会在另一个 <code>SELECT</code> 语句的 <code>WHERE</code> 子句中添加</li><li>您可以使用比较运算符，如 &gt;，&lt;，或 =，比较运算符也可以是多行运算符，如 <code>IN</code>，<code>ANY</code> 或 <code>ALL</code></li><li>子查询必须被 <code>()</code> 括起来</li><li>内部查询首先在其父查询之前执行，以便可以将内部查询的结果传递给外部查询</li><li><p>子查询的子查询</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id</span><br><span class="line">                  <span class="keyword">FROM</span> orders</span><br><span class="line">                  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">                                      <span class="keyword">FROM</span> orderitems</span><br><span class="line">                                      <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>));</span><br></pre></td></tr></table></figure></li></ul><h4 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h4><ul><li><code>WHERE</code> 子句用于过滤记录，即缩小访问数据的范围</li><li><code>WHERE</code> 后跟一个返回 <code>true</code> 或 <code>false</code> 的条件</li><li><code>WHERE</code> 可以与 <code>SELECT</code>，<code>UPDATE</code> 和 <code>DELETE</code> 一起使用</li><li><p><code>WHERE</code> 子句中使用的操作符</p><p>| 运算符    | 描述                                                     |<br>| ————- | ———————————————————————————— |<br>| <code>=</code>       | 等于                                                     |<br>| <code>&lt;&gt;</code>      | 不等于，注释：在 SQL 的一些版本中，该操作符可被写成 <code>!=</code> |<br>| <code>&gt;</code>       | 大于                                                     |<br>| <code>&lt;</code>       | 小于                                                     |<br>| <code>&gt;=</code>      | 大于等于                                                 |<br>| <code>&lt;=</code>      | 小于等于                                                 |<br>| <code>BETWEEN</code> | 在某个范围内                                             |<br>| <code>LIKE</code>    | 搜索某种模式                                             |<br>| <code>IN</code>      | 指定针对某个列的多个可能值                               |</p></li><li><p>SELECT 语句中的 WHERE 子句</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Kids Place&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>UPDATE 语句中的 WHERE 子句</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Customers</span><br><span class="line"><span class="keyword">SET</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Jack Jones&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Kids Place&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>DELETE 语句中的 WHERE 子句</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Kids Place&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="IN-和-BETWEEN"><a href="#IN-和-BETWEEN" class="headerlink" title="IN 和 BETWEEN"></a>IN 和 BETWEEN</h4><ul><li><p><code>IN</code> 操作符在 <code>WHERE</code> 子句中使用，作用是在指定的几个特定值中任选一个值</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="string">&#x27;DLL01&#x27;</span>, <span class="string">&#x27;BRS01&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>BETWEEN</code> 操作符在 <code>WHERE</code> 子句中使用，作用是选取介于某个范围内的值</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="AND、OR、NOT"><a href="#AND、OR、NOT" class="headerlink" title="AND、OR、NOT"></a>AND、OR、NOT</h4><ul><li><code>AND</code>、<code>OR</code>、<code>NOT</code> 是用于对过滤条件的逻辑处理指令</li><li><code>AND</code> 优先级高于 <code>OR</code>，为了明确处理顺序，可以使用 <code>()</code></li><li><p><code>AND</code> 操作符表示左右条件都要满足</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">AND</span> prod_price <span class="operator">&lt;=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>OR</code> 操作符表示左右条件满足任意一个即可</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="string">&#x27;BRS01&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>NOT</code> 操作符用于否定一个条件</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h4><ul><li><code>LIKE</code> 操作符在 <code>WHERE</code> 子句中使用，作用是确定字符串是否匹配模式</li><li>只有字段是文本值时才使用 <code>LIKE</code></li><li>LIKE 支持两个通配符匹配选项：<code>%</code> 和 <code>_</code></li><li>不要滥用通配符，通配符位于开头处匹配会非常慢</li><li><p><code>%</code> 表示任何字符出现任意次数</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;%bean bag%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>_</code> 表示任何字符出现一次</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;__ inch teddy bear&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="连接和组合"><a href="#连接和组合" class="headerlink" title="连接和组合"></a>连接和组合</h3><h4 id="连接（JOIN）"><a href="#连接（JOIN）" class="headerlink" title="连接（JOIN）"></a>连接（JOIN）</h4><ul><li>如果一个 <code>JOIN</code> 至少有一个公共字段并且它们之间存在关系，则该 <code>JOIN</code> 可以在两个或多个表上工作</li><li>连接用于连接多个表，使用 <code>JOIN</code> 关键字，并且条件语句使用 <code>ON</code> 而不是 <code>WHERE</code></li><li><code>JOIN</code> 保持基表（结构和数据）不变</li><li><code>JOIN</code> 有两种连接类型：内连接和外连接</li><li><p>内连接又称等值连接，使用 <code>INNER JOIN</code> 关键字，在没有条件语句的情况下返回笛卡尔积</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> products</span><br><span class="line"><span class="keyword">ON</span> vendors.vend_id <span class="operator">=</span> products.vend_id;</span><br></pre></td></tr></table></figure></li><li><p>自连接可以看成内连接的一种，只是连接的表是自身而已</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact</span><br><span class="line"><span class="keyword">FROM</span> customers c1, customers c2WHERE c1.cust_name <span class="operator">=</span> c2.cust_name</span><br><span class="line"><span class="keyword">AND</span> c2.cust_contact <span class="operator">=</span> <span class="string">&#x27;Jim Jones&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>自然连接（<code>NATURAL JOIN</code>）是把同名列通过 <code>=</code> 测试连接起来的，同名列可以有多个</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Customers;</span><br></pre></td></tr></table></figure></li><li><p>左外连接（LEFT JOIN）就是保留左表没有关联的行</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_id, orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders</span><br><span class="line"><span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id;</span><br></pre></td></tr></table></figure></li><li><p>右外连接（RIGHT JOIN）就是保留右表没有关联的行</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_id, orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> orders</span><br><span class="line"><span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id;</span><br></pre></td></tr></table></figure></li><li><p>内连接 vs 自然连接</p><ul><li>内连接提供连接的列，而自然连接自动连接所有同名列</li><li>外连接返回一个表中的所有行，并且仅返回来自次表中满足连接条件的那些行，即两个表中的列是相等的</li><li>外连接分为左外连接、右外连接、全外连接（<code>Mysql</code> 不支持）</li></ul></li><li>连接 vs 子查询：连接可以替换子查询，并且比子查询的效率一般会更快</li></ul><h4 id="组合（UNION）"><a href="#组合（UNION）" class="headerlink" title="组合（UNION）"></a>组合（UNION）</h4><ul><li><code>UNION</code> 运算符将两个或更多查询的结果组合起来，并生成一个结果集，其中包含来自 <code>UNION</code> 中参与查询的提取行</li><li><code>UNION</code> 基本规则<ul><li>所有查询的列数和列顺序必须相同</li><li>每个查询中涉及表的列的数据类型必须相同或兼容</li><li>通常返回的列名取自第一个查询</li><li>默认会去除相同行，如果需要保留相同行，使用 <code>UNION ALL</code></li><li>只能包含一个 <code>ORDER BY</code> 子句，并且必须位于语句的最后</li></ul></li><li><code>UNION</code> 应用场景<ul><li>在一个查询中从不同的表返回结构数据</li><li>对一个表执行多个查询，按一个查询返回数据</li></ul></li><li><p>组合查询</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>, <span class="string">&#x27;IN&#x27;</span>, <span class="string">&#x27;MI&#x27;</span>)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>JOIN</code> vs <code>UNION</code></p><ul><li><code>JOIN</code> 中连接表的列可能不同，但在 <code>UNION</code> 中，所有查询的列数和列顺序必须相同</li><li><code>UNION</code> 将查询之后的行放在一起（垂直放置），但 <code>JOIN</code> 将查询之后的列放在一起（水平放置），即它构成一个笛卡尔积</li></ul></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h4><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>LEFT()</code>、<code>RIGHT()</code></td><td>左边或者右边的字符</td></tr><tr><td><code>LOWER()</code>、<code>UPPER()</code></td><td>转换为小写或者大写</td></tr><tr><td><code>LTRIM()</code>、<code>RTIM()</code></td><td>去除左边或者右边的空格</td></tr><tr><td><code>LENGTH()</code></td><td>长度</td></tr><tr><td><code>SOUNDEX()</code></td><td>转换为语音值</td></tr></tbody></table></div><ul><li><p><code>SOUNDEX()</code> 可以将一个字符串转换为描述其语音表示的字母数字模式</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> SOUNDEX(col1) <span class="operator">=</span> SOUNDEX(<span class="string">&#x27;apple&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>日期和时间处理</p><ul><li>日期格式：<code>YYYY-MM-DD</code></li><li>时间格式：<code>HH:MM:SS</code></li></ul><p>| 函 数           | 说 明                          |<br>| ———————- | ——————————————— |<br>| <code>AddDate()</code>     | 增加一个日期（天、周等）       |<br>| <code>AddTime()</code>     | 增加一个时间（时、分等）       |<br>| <code>CurDate()</code>     | 返回当前日期                   |<br>| <code>CurTime()</code>     | 返回当前时间                   |<br>| <code>Date()</code>        | 返回日期时间的日期部分         |<br>| <code>DateDiff()</code>    | 计算两个日期之差               |<br>| <code>Date_Add()</code>    | 高度灵活的日期运算函数         |<br>| <code>Date_Format()</code> | 返回一个格式化的日期或时间串   |<br>| <code>Day()</code>         | 返回一个日期的天数部分         |<br>| <code>DayOfWeek()</code>   | 对于一个日期，返回对应的星期几 |<br>| <code>Hour()</code>        | 返回一个时间的小时部分         |<br>| <code>Minute()</code>      | 返回一个时间的分钟部分         |<br>| <code>Month()</code>       | 返回一个日期的月份部分         |<br>| <code>Now()</code>         | 返回当前日期和时间             |<br>| <code>Second()</code>      | 返回一个时间的秒部分           |<br>| <code>Time()</code>        | 返回一个日期时间的时间部分     |<br>| <code>Year()</code>        | 返回一个日期的年份部分         |</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT NOW();</span><br><span class="line">2020-11-14 20:11:11</span><br></pre></td></tr></table></figure></li><li><p>数值处理</p><p>| 函数     | 说明   |<br>| ———— | ——— |<br>| <code>SIN()</code>  | 正弦   |<br>| <code>COS()</code>  | 余弦   |<br>| <code>TAN()</code>  | 正切   |<br>| <code>ABS()</code>  | 绝对值 |<br>| <code>SQRT()</code> | 平方根 |<br>| <code>MOD()</code>  | 余数   |<br>| <code>EXP()</code>  | 指数   |<br>| <code>PI()</code>   | 圆周率 |<br>| <code>RAND()</code> | 随机数 |</p></li><li><p>汇总</p><p>| 函 数     | 说 明            |<br>| ————- | ———————— |<br>| <code>AVG()</code>   | 返回某列的平均值 |<br>| <code>COUNT()</code> | 返回某列的行数   |<br>| <code>MAX()</code>   | 返回某列的最大值 |<br>| <code>MIN()</code>   | 返回某列的最小值 |<br>| <code>SUM()</code>   | 返回某列值之和   |<br>| <code>AVG()</code>   | 会忽略 <code>NULL</code> 行 |</p></li><li><p>使用 <code>DISTINCT</code> 可以让汇总函数值汇总不同的值</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(DISTINCT col1) AS avg_col</span><br><span class="line">FROM mytable</span><br></pre></td></tr></table></figure></li></ul><h3 id="排序和分组"><a href="#排序和分组" class="headerlink" title="排序和分组"></a>排序和分组</h3><h4 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h4><ul><li><code>ORDER BY</code> 用于对结果集进行排序</li><li><code>ASC</code> ：升序（默认）</li><li><code>DESC</code> ：降序</li><li><code>ORDER BY</code> 可以按多个列进行排序，并且为每个列指定不同的排序方式</li><li><p><code>ORDER BY</code> 指定多个列的排序方向</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>, prod_name <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><ul><li><code>GROUP BY</code> 子句将记录分组到汇总行中</li><li><code>GROUP BY</code> 为每个组返回一个记录</li><li><code>GROUP BY</code> 通常还涉及聚合：<code>COUNT</code>，<code>MAX</code>，<code>SUM</code>，<code>AVG</code> 等</li><li><code>GROUP BY</code> 可以按一列或多列进行分组</li><li><p><code>GROUP BY</code> 按分组字段进行排序后，<code>ORDER BY</code> 可以以汇总字段来进行排序</p></li><li><p>分组</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, <span class="built_in">COUNT</span>(cust_address) <span class="keyword">AS</span> addr_num</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure></li><li><p>分组后排序</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, <span class="built_in">COUNT</span>(cust_address) <span class="keyword">AS</span> addr_num</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h4><ul><li><code>HAVING</code> 用于对汇总的 <code>GROUP BY</code> 结果进行过滤</li><li><code>HAVING</code> 要求存在一个 <code>GROUP BY</code> 子句</li><li><code>WHERE</code> 和 <code>HAVING</code> 可以在相同的查询中</li><li><code>HAVING</code> vs <code>WHERE</code><ul><li><code>WHERE</code> 和 <code>HAVING</code> 都是用于过滤</li><li><code>HAVING</code> 适用于汇总的组记录；而 <code>WHERE</code> 适用于单个记录</li></ul></li><li><p>使用 <code>WHERE</code> 和 <code>HAVING</code> 过滤数据</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据定义（-DDL-语句用法）"><a href="#数据定义（-DDL-语句用法）" class="headerlink" title="数据定义（ DDL 语句用法）"></a>数据定义（ DDL 语句用法）</h3><ul><li>DDL 的主要功能是定义数据库对象，如数据库、数据表、视图、索引等</li></ul><h4 id="数据库（DATABASE）"><a href="#数据库（DATABASE）" class="headerlink" title="数据库（DATABASE）"></a>数据库（DATABASE）</h4><ul><li><p>创建数据库</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE test;</span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE test;</span><br></pre></td></tr></table></figure></li><li><p>选择数据库</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE test;</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据表（TABLE）"><a href="#数据表（TABLE）" class="headerlink" title="数据表（TABLE）"></a>数据表（TABLE）</h4><ul><li><p>创建数据表</p></li><li><p>普通创建</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;Id&#x27;</span>,</span><br><span class="line">  username <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  email <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span></span><br><span class="line">) COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>根据已有的表创建新表</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> vip_user <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除数据表</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改数据表</p></li><li><p>添加列</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">ADD</span> age <span class="type">int</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>删除列</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> age;</span><br></pre></td></tr></table></figure></li><li><p>修改列</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> age tinyint;</span><br></pre></td></tr></table></figure></li><li><p>添加主键</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (id);</span><br></pre></td></tr></table></figure></li><li><p>删除主键</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure></li></ul><h4 id="视图（VIEW）"><a href="#视图（VIEW）" class="headerlink" title="视图（VIEW）"></a>视图（VIEW）</h4><ul><li>视图是基于 SQL 语句的结果集的可视化的表</li><li>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作</li><li>对视图的操作和对普通表的操作一样</li><li>视图的作用：简化复杂的 SQL 操作，比如复杂的联结；只使用实际表的一部分数据；通过只给用户访问视图的权限，保证数据的安全性；更改数据格式和表示</li><li><p>创建视图</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> top_10_user_view <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> id, username</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">&lt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除视图</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> top_10_user_view;</span><br></pre></td></tr></table></figure></li><li><p>索引（INDEX）</p></li><li>通过索引可以更加快速高效地查询数据</li><li>用户无法看到索引，它们只能被用来加速查询</li><li>注意：更新一个包含索引的表需要比更新一个没有索引的表花费更多的时间，这是由于索引本身也需要更新，因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引</li><li>唯一索引表明此索引的每一个索引值只对应唯一的数据记录</li><li><p>创建索引</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX user_index</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">user</span> (id);</span><br></pre></td></tr></table></figure></li><li><p>创建唯一索引</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX user_index</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">user</span> (id);</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX user_index;</span><br></pre></td></tr></table></figure></li><li><p>约束</p></li><li>SQL 约束用于规定表中的数据规则</li><li>如果存在违反约束的数据行为，行为会被约束终止</li><li>约束可以在创建表时规定（通过 <code>CREATE TABLE</code> 语句）或者在表创建之后规定（通过 <code>ALTER TABLE</code> 语句）</li><li>约束类型<ul><li><code>NOT NULL</code>：指示某列不能存储 <code>NULL</code> 值</li><li><code>UNIQUE</code>：保证某列的每行必须有唯一的值</li><li><code>PRIMARY KEY</code>：<code>NOT NULL</code> 和 <code>UNIQUE</code> 的结合</li><li>确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录</li><li><code>FOREIGN KEY</code>：保证一个表中的数据匹配另一个表中的值的参照完整性</li><li><code>CHECK</code>：保证列中的值符合指定的条件</li><li><code>DEFAULT</code>：规定没有给列赋值时的默认值</li></ul></li><li><p>创建表时使用约束条件：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Users (</span><br><span class="line">  Id <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  Username <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  Password <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  Email <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;邮箱地址&#x27;</span>,</span><br><span class="line">  Enabled TINYINT(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否有效&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (Id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="事务处理（-TCL-语句用法）"><a href="#事务处理（-TCL-语句用法）" class="headerlink" title="事务处理（ TCL 语句用法）"></a>事务处理（ TCL 语句用法）</h3><ul><li>不能回退 <code>SELECT</code> 语句，也不能回退 <code>CREATE</code> 和 <code>DROP</code> 语句</li><li><code>MySQL</code> 默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交，当出现 <code>START TRANSACTION</code> 语句时，会关闭隐式提交</li><li>当 <code>COMMIT</code> 或 <code>ROLLBACK</code> 语句执行后，事务会自动关闭，重新恢复隐式提交</li><li>通过 <code>set autocommit=0</code> 可以取消自动提交，直到 <code>set autocommit=1</code> 才会提交</li><li><code>autocommit</code> 标记是针对每个连接而不是针对服务器的</li><li><p><code>START TRANSACTION</code> 指令用于标记事务的起始点，开始事务</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br></pre></td></tr></table></figure></li><li><p><code>AINSERT INTO user</code> 插入操作 </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VALUES (1, &#x27;root1&#x27;, &#x27;root1&#x27;, &#x27;xxxx@163.com&#x27;);</span><br></pre></td></tr></table></figure></li><li><p><code>SAVEPOINT</code> 指令用于创建保留点 <code>updateA</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAVEPOINT updateA;</span><br></pre></td></tr></table></figure></li><li><p>插入操作 B</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `user`</span><br><span class="line">VALUES (2, &#x27;root2&#x27;, &#x27;root2&#x27;, &#x27;xxxx@163.com&#x27;);</span><br></pre></td></tr></table></figure></li><li><p><code>ROLLBACK TO</code> 指令用于回滚到指定的保留点 <code>updateA</code>；如果没有设置保留点，则回退到 <code>START TRANSACTION</code> 语句处</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROLLBACK TO updateA;</span><br></pre></td></tr></table></figure></li><li><p>提交事务，只有操作 A 生效</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMIT;</span><br></pre></td></tr></table></figure></li></ul><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><ul><li><code>GRANT</code> 和 <code>REVOKE</code> 可在几个层次上控制访问权限：<ul><li>整个服务器，使用 <code>GRANT ALL</code> 和 <code>REVOKE ALL</code></li><li>整个数据库，使用 <code>ON database.*</code></li><li>特定的表，使用 <code>ON database.table</code></li><li>特定的列</li><li>特定的存储过程</li></ul></li><li>新创建的账户没有任何权限</li><li>账户用 <code>username@host</code> 的形式定义，<code>username@%</code> 使用的是默认主机名</li><li><p><code>MySQL</code> 的账户信息保存在 <code>mysql</code> 这个数据库中</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">SELECT user FROM user;</span><br></pre></td></tr></table></figure></li><li><p>复制代码</p></li><li><p>创建账户</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER myuser IDENTIFIED BY &#x27;mypassword&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>修改账户名</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user SET user=&#x27;newuser&#x27; WHERE user=&#x27;myuser&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li><li><p>删除账户</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> myuser;</span><br></pre></td></tr></table></figure></li><li><p>查看权限</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW GRANTS FOR myuser;</span><br></pre></td></tr></table></figure></li><li><p>授予权限</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT SELECT, INSERT ON *.* TO myuser;</span><br></pre></td></tr></table></figure></li><li><p>删除权限</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE SELECT, INSERT ON *.* FROM myuser;</span><br></pre></td></tr></table></figure></li><li><p>更改密码</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD FOR myuser = &#x27;mypass&#x27;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><ul><li>存储过程可以看成是对一系列 SQL 操作的批处理</li><li><p>使用存储过程的好处：代码封装，保证了一定的安全性；代码复用；由于是预先编译，因此具有很高的性能</p></li><li><p>命令行中创建存储过程需要自定义分隔符，因为命令行是以 <code>;</code> 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误</p></li><li><p>给变量赋值都需要用 <code>select into</code> 语句</p></li><li><p>每次只能给一个变量赋值，不支持集合的操作</p></li><li><p>创建存储过程，包含 <code>in</code>、<code>out</code> 和 <code>inout</code> 三种参数</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE IF EXISTS `proc_adder`;</span><br><span class="line">DELIMITER ;;</span><br><span class="line">CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_adder`(IN a int, IN b int, OUT sum int)</span><br><span class="line">BEGIN</span><br><span class="line">    DECLARE c int;</span><br><span class="line">    if a is null then set a = 0;</span><br><span class="line">    end if;</span><br><span class="line">if b is null then set b = 0;</span><br><span class="line">end if;</span><br><span class="line">set sum  = a + b;</span><br><span class="line">END</span><br><span class="line">;;</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></li><li><p>使用存储过程</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set @b=5;</span><br><span class="line">call proc_adder(2,@b,@s);</span><br><span class="line">select @s as sum;</span><br></pre></td></tr></table></figure></li></ul><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><ul><li>游标（cursor）是一个存储在 DBMS 服务器上的数据库查询，它不是一条 SELECT 语句，而是被该语句检索出来的结果集</li><li><p>在存储过程中使用游标可以对一个结果集进行移动遍历</p></li><li><p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改</p></li><li><p>使用游标的四个步骤：</p><ul><li>声明游标，这个过程没有实际检索出数据</li><li>打开游标</li><li>取出数据</li><li><p>关闭游标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line">CREATE  PROCEDURE getTotal()</span><br><span class="line">BEGIN</span><br><span class="line">    DECLARE total INT;</span><br><span class="line">    -- 创建接收游标数据的变量</span><br><span class="line">    DECLARE sid INT;</span><br><span class="line">    DECLARE sname VARCHAR(10);</span><br><span class="line">    -- 创建总数变量</span><br><span class="line">    DECLARE sage INT;</span><br><span class="line">    -- 创建结束标志变量    DECLARE done INT DEFAULT false;</span><br><span class="line">    -- 创建游标</span><br><span class="line">    DECLARE cur CURSOR FOR SELECT id,name,age from cursor_table where age&gt;30;</span><br><span class="line">    -- 指定游标循环结束时的返回值</span><br><span class="line">    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = true;</span><br><span class="line">    SET total = 0;</span><br><span class="line">    OPEN cur;</span><br><span class="line">    FETCH cur INTO sid, sname, sage;</span><br><span class="line">    WHILE(NOT done)</span><br><span class="line">    DO</span><br><span class="line">        SET total = total + 1;</span><br><span class="line">        FETCH cur INTO sid, sname, sage;</span><br><span class="line">    END WHILE;</span><br><span class="line">    CLOSE cur;</span><br><span class="line">    SELECT total;</span><br><span class="line">END $</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>调用存储过程</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call getTotal();</span><br></pre></td></tr></table></figure></li></ul><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><ul><li>触发器是一种与表操作有关的数据库对象，当触发器所在表上出现指定事件时，将调用该对象，即表的操作事件触发表上的触发器的执行</li><li><p>可以使用触发器来进行审计跟踪，把修改记录到另外一张表中</p></li><li><p><code>MySQL</code> 不允许在触发器中使用 <code>CALL</code> 语句 ，也就是不能调用存储过程</p></li><li><p><code>BEGIN</code> 和 <code>END</code></p><ul><li>当触发器的触发条件满足时，将会执行 <code>BEGIN</code> 和 <code>END</code> 之间的触发器执行动作</li><li>注意：在 <code>MySQL</code> 中，分号 <code>;</code> 是语句结束的标识符，遇到分号表示该段语句已经结束，<code>MySQL</code> 可以开始执行了，因此，解释器遇到触发器执行动作中的分号后就开始执行，然后会报错，因为没有找到和 <code>BEGIN</code> 匹配的 <code>END</code></li><li>这时就会用到 <code>DELIMITER</code> 命令（<code>DELIMITER</code> 是分隔符的意思），不需要语句结束标识<ul><li><code>DELIMITER new_delemiter</code></li><li><code>new_delemiter</code> 可以设为 1 个或多个长度的符号，默认的是 <code>;</code></li><li>我们可以把<code>;</code>修改为其他符号，如 <script type="math/tex">- DELIMITER</script> </li><li>在这之后的语句，以分号结束，解释器不会有什么反应，只有遇到了 <code>$</code>，才认为是语句结束</li><li>注意，使用完之后，我们还应该记得把它给修改回来</li></ul></li></ul></li><li><code>NEW</code> 和 <code>OLD</code><ul><li><code>MySQL</code> 中定义了 <code>NEW</code> 和 <code>OLD</code> 关键字，用来表示触发器的所在表中，触发了触发器的那一行数据</li><li>在 <code>INSERT</code> 型触发器中，<code>NEW</code> 用来表示将要（<code>BEFORE</code>）或已经（<code>AFTER</code>）插入的新数据</li><li>在 <code>UPDATE</code> 型触发器中，<code>OLD</code> 用来表示将要或已经被修改的原数据，<code>NEW</code> 用来表示将要或已经修改为的新数据</li><li>在 <code>DELETE</code> 型触发器中，<code>OLD</code> 用来表示将要或已经被删除的原数据</li></ul></li><li>使用方法： <code>NEW.columnName</code> （<code>columnName</code> 为相应数据表某一列名）</li><li><p><code>CREATE TRIGGER</code> 指令用于创建触发器</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER trigger_name</span><br><span class="line">trigger_time</span><br><span class="line">trigger_event</span><br><span class="line">ON table_name</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">  trigger_statements</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></li><li><p><code>trigger_name</code>：触发器名</p></li><li><code>trigger_time</code>: 触发器的触发时机，取值为 <code>BEFORE</code> 或 <code>AFTER</code></li><li><code>trigger_event</code>: 触发器的监听事件，取值为 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code></li><li><code>table_name</code>: 触发器的监听目标，指定在哪张表上建立触发器</li><li><code>FOR EACH ROW</code>: 行级监视，<code>Mysql</code> 固定写法，与其他 <code>DBMS</code> 不同</li><li><p><code>trigger_statements</code>: 触发器执行动作，是一条或多条  <code>SQL</code> 语句的列表，列表内的每条语句都必须用 <code>;</code> 来结尾</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line">CREATE TRIGGER `trigger_insert_user`</span><br><span class="line">AFTER INSERT ON `user`</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    INSERT INTO `user_history`(user_id, operate_type, operate_time)</span><br><span class="line">    VALUES (NEW.id, &#x27;add a user&#x27;,  now());</span><br><span class="line">END $</span><br><span class="line">DELIMITER ;</span><br><span class="line">查看触发器</span><br><span class="line">SHOW TRIGGERS;</span><br><span class="line">删除触发器</span><br><span class="line">DROP TRIGGER IF EXISTS trigger_insert_user;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Creative Thinking：Techniques and Tools for Success</title>
      <link href="/Creative-Thinking-for-Success/"/>
      <url>/Creative-Thinking-for-Success/</url>
      
        <content type="html"><![CDATA[<blockquote><p>The greatest innovators aren’t necessarily the people who have the most original idea. Often, they are people- or teams- that have harnessed their creativity to develop a new perspective or more effective way of communicating an idea. You can train your imagination to seize opportunities, break away from routine and habit, and tap into your natural creativity. This course provided by IMPERIAL COLLEGE LONDON equips us with a tool-box, introducing us to a selection of behaviors and techniques that augments our innate creativity.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/creative-thinking.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="1-Principle-of-Creativity"><a href="#1-Principle-of-Creativity" class="headerlink" title="1. Principle of Creativity"></a>1. Principle of Creativity</h3><p>Necessity is the mother of invention. Opportunity is the father of invention.</p><p>Creativity is imagination with responsibility. Creativity is the ability to imagine or invent something new of value.</p><p>Levels of Creativity: Big C vs Little C, Eminent vs Everyday.</p><p>The value of patronage: The Renaissance → Industrial Revolution → Neuroscience → Data and AI</p><p>Creative Environments: Create a low stress environment with reassurance and high trust. Relaxation aids production and realization of ideas are also important.</p><h3 id="2-Creativity-Tools"><a href="#2-Creativity-Tools" class="headerlink" title="2. Creativity Tools"></a>2. Creativity Tools</h3><p>Creativity Tools to Enhance: Fluency, Flexibility, Originality.</p><p>Various Types of Brainstorming Techniques: Flipchart, Post-its, Brainwriting, Alphabet, Grid, Circle brainstorming.</p><p>Morphological Analysis: A creative tool that helps generate ideas that would not normally spring to mind.</p><ul><li>Generic morphological analysis chart.</li><li>Subsystems and Means.</li><li>Explore the design space systematically or experimentally.</li><li>Sketching synthesises the subsystems.</li><li>Small variation in selection = Substantial difference in outcome.</li><li>The sub-functions and potential means of fulfilling each of these sub-functions can be arranged in a grid.</li><li>Morphological Analysis applied to Plot Line.</li></ul><p>Six Thinking Hats: The Value of Diversity. The six thinking hat technique aids and augments creativity.</p><ul><li>White Hat (facts, figures, information)</li><li>Red Hat (intuition, gut reaction, emotion)</li><li>Black Hat (critically, cautiously, defensively)</li><li>Yellow Hat (optimistic viewpoint)</li><li>Green Hat (creativity)</li><li>Blue Hat (control and organization)</li></ul><p>TRIZ: Theory of intensive problem solving</p><ul><li>Invented by Genrich Altshuller</li><li>Specific Problem —Abstraction-&gt; General Problem -&gt; General Solutions —Analogy-&gt; Solution to Specific Problem</li><li>39 Parameters</li><li>40 principles</li><li>The concept of contradiction</li></ul><p>Scamper</p><ul><li>Substitute</li><li>Combine</li><li>Adapt</li><li>Magnify/ Minify/ Modify</li><li>Put to other uses</li><li>Eliminate</li><li>Reverse/ Rearrange</li></ul><p>Using the Tools in Combination</p><ul><li>The Double Diamond Model</li><li>Circle Brainstorming</li></ul>]]></content>
      
      
      <categories>
          
          <category> 慕课MOOC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Marketing Analytics</title>
      <link href="/Marketing-Analytics/"/>
      <url>/Marketing-Analytics/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Marketing analytics enables marketers to measure, manage and analyze marketing performance to maximize its effectiveness and optimize return on investment (ROI). Beyond the obvious sales and lead generation applications, offers profound insights into customer preferences and trends, which can be further utilized for future marketing and business decisions. The Marketing Analytics course is provided by UNIVERSITY OF VIRGINIA.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Coursera-Marketing-Analytics.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="1-Marketing-Analytics"><a href="#1-Marketing-Analytics" class="headerlink" title="1. Marketing Analytics"></a>1. Marketing Analytics</h3><p>Descriptive analytics</p><p>Predictive analytics</p><p>Prescriptive analytics</p><h3 id="2-Marketing-Process"><a href="#2-Marketing-Process" class="headerlink" title="2. Marketing Process"></a>2. Marketing Process</h3><p>Objectives: Customer, Company, Competitor, Collaborators, Context</p><p>Strategy: Segmentation, Targeting, Positioning</p><p>Tactics: Product, Price, Place, Promotion</p><p>Financials: Margin, ROI, CLV</p><h3 id="3-Marketing-Strategy-with-Data"><a href="#3-Marketing-Strategy-with-Data" class="headerlink" title="3. Marketing Strategy with Data"></a>3. Marketing Strategy with Data</h3><p>Mental models</p><p>Text analytics</p><h3 id="4-Brand-Architecture"><a href="#4-Brand-Architecture" class="headerlink" title="4. Brand Architecture"></a>4. Brand Architecture</h3><p>Brand value</p><p>Brand personality: Sincerity / Excitement / Competence / Sophistication / Ruggedness</p><p>Brand Architecture</p><ol><li>Brand core / Essence</li><li>Brand personality</li><li>Emotional benefits</li><li>Product benefits</li><li>Product attributes</li></ol><h3 id="5-Calculating-Brand-Value"><a href="#5-Calculating-Brand-Value" class="headerlink" title="5. Calculating Brand Value"></a>5. Calculating Brand Value</h3><p>Interbrand brand valuation model</p><ul><li>Financial analysis -&gt; Residual earnings -&gt; Brand earnings</li><li>Marketing analysis -&gt; Role of branding -&gt; Brand earnings</li><li>Brand analysis -&gt; Brand strength score -&gt; Risk rate</li></ul><p>Y &amp;R brand asset valuator</p><ul><li>Brand strength (Strength / Vatality) -&gt; Differentiation &amp; Relevance</li><li>Brand stature (Emotional capital) -&gt; Esteem &amp; Knowledge</li></ul><p>Brand equity: long term estimate</p><p>Revenue Premium</p><ul><li>Equity = Annual revenue premium * (1 + discount rate) / (1 + discount rate - stability factor)</li><li>Annual revenue premium = Revenue premium - Additional variable cost</li></ul><h3 id="6-Customer-Lifetime-Value-CLV"><a href="#6-Customer-Lifetime-Value-CLV" class="headerlink" title="6. Customer Lifetime Value (CLV)"></a>6. Customer Lifetime Value (CLV)</h3><p>Both backward looking and forward looking</p><p>Net present value (NPV)</p><p>CLV = (Gross margin - Detention spending) * (1 + discount rate) / (1+discount rate - retention rate)</p><p>Cohort and incubators</p><h3 id="7-Experimental-Design"><a href="#7-Experimental-Design" class="headerlink" title="7. Experimental Design"></a>7. Experimental Design</h3><p>Correlation and causation / Causality</p><p>Marketing return on investment</p><p>Test group &amp; Control group / Randomization</p><p>Experiments assess cause and effect</p><h3 id="8-Calculating-Break-Even-and-Lift"><a href="#8-Calculating-Break-Even-and-Lift" class="headerlink" title="8. Calculating Break Even and Lift"></a>8. Calculating Break Even and Lift</h3><p>Full factorial design</p><p>Projrcting lift</p><p>Pitfalls of marketing experiments</p><p>Maximizing effectiveness</p><p>Experiments provide forecasts of expected ROI</p><h3 id="9-Regression-Basics"><a href="#9-Regression-Basics" class="headerlink" title="9. Regression Basics"></a>9. Regression Basics</h3><p>Regression analysis</p><p>Regression outputs (about intuition)</p><ul><li>R-squared (sales/promotion)</li><li>P-value (lower than 10% is trustable)</li></ul><p>Multivariable regressions</p><p>Omitted variable bias: price -&gt; Units sold + feature / display</p><h3 id="10-Price-Elasticity"><a href="#10-Price-Elasticity" class="headerlink" title="10. Price Elasticity"></a>10. Price Elasticity</h3><p>PED = (Change in Sales / Change in Price) <code>*</code> (Price / Sales)</p><p>Coefficient * Average price/ Average sales</p><p>Measures the impact of a change in price on sales</p><p>Enhances your ability to utilize regressions</p><p>Allows you to track marketing efforts over time</p><h3 id="11-Log-Log-Models"><a href="#11-Log-Log-Models" class="headerlink" title="11. Log-Log Models"></a>11. Log-Log Models</h3><p>LOG = Percentage Change</p><h3 id="12-Marketing-Mix-Model"><a href="#12-Marketing-Mix-Model" class="headerlink" title="12. Marketing Mix Model"></a>12. Marketing Mix Model</h3><p>Statistical significance &amp; Economic significance</p><ol><li>Product line</li><li>Place</li><li>Price</li><li>Promotion</li></ol>]]></content>
      
      
      <categories>
          
          <category> 慕课MOOC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Managing Machine Learning Projects with Google Cloud</title>
      <link href="/Managing-Machine-Learning-Projects/"/>
      <url>/Managing-Machine-Learning-Projects/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This course provided by GOOGLE CLOUD is intended to be an introduction to machine learning for business professionals. It teaches me how to translate business problems into machine learning use cases and vet them for feasibility and impact.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Coursera-Managing-Machine-Learning-Projects.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="1-What-is-Machine-Learning"><a href="#1-What-is-Machine-Learning" class="headerlink" title="1. What is Machine Learning ?"></a>1. What is Machine Learning ?</h3><p>ML is a way to use standard algorithms to derive predictive insights from data and make repeated decisions.</p><h4 id="Phases-of-ML"><a href="#Phases-of-ML" class="headerlink" title="Phases of ML"></a>Phases of ML</h4><ol><li>Collecting data.</li><li>Labeling data.</li><li>Training using chosen metrics and objectives.</li><li>Evaluate a model.</li><li>Deploy a model.</li></ol><h3 id="2-Good-data-characteristic"><a href="#2-Good-data-characteristic" class="headerlink" title="2. Good data characteristic"></a>2. Good data characteristic</h3><ol><li>Has coverage.</li><li>Is clean.</li><li>Is complete.</li></ol><h3 id="3-ML-vs-AI"><a href="#3-ML-vs-AI" class="headerlink" title="3. ML vs AI"></a>3. ML vs AI</h3><p>ML is a type of Artificial intelligence.</p><p>Logic vs Machine Learning.</p><p>Neural networks &amp; Deep learning.</p><p>Use AI responsibly —- responsible AI = successful AI.</p><h3 id="4-Why-ML-now"><a href="#4-Why-ML-now" class="headerlink" title="4. Why ML now ?"></a>4. Why ML now ?</h3><ol><li>Increasing availability of data.</li><li>Increasing maturity and sophistication of ML algorithms.</li><li>Increasing power and availability of computing hardware and software.</li></ol><h3 id="5-Labeling-data"><a href="#5-Labeling-data" class="headerlink" title="5. Labeling data"></a>5. Labeling data</h3><p>Label is the true answer for a given input.</p><p>Regression vs Classification.</p><p>Every example needs to have features and a label.</p><p>Ways to label your data:</p><ol><li>Use a proxy label.</li><li>Build a labeling system.</li><li>Use a labeling service.</li></ol><h3 id="6-Modeling-Training"><a href="#6-Modeling-Training" class="headerlink" title="6. Modeling Training"></a>6. Modeling Training</h3><p>Continuous training keeps models fresh.</p><p><a href="https://github.com/tensorflow">https://github.com/tensorflow</a>.</p><h4 id="Formulating-the-ML-problem"><a href="#Formulating-the-ML-problem" class="headerlink" title="Formulating the ML problem"></a>Formulating the ML problem</h4><ol><li>Choosing input features.</li><li>Get labels.</li><li>Choose an objective.</li></ol><h3 id="7-Modeling-Evaluation"><a href="#7-Modeling-Evaluation" class="headerlink" title="7. Modeling Evaluation"></a>7. Modeling Evaluation</h3><p>Test data (20%)</p><p>Confusion matrices measure performance relative to expectations for classification.</p><h3 id="8-ML-Best-Practices"><a href="#8-ML-Best-Practices" class="headerlink" title="8. ML Best Practices"></a>8. ML Best Practices</h3><ol><li>ML involves experimentation.</li><li>start simple.</li><li>Don’t use your test data during experimentation.</li><li>Do pilot projects with end-users.</li></ol><h3 id="9-Human-Bias-in-ML"><a href="#9-Human-Bias-in-ML" class="headerlink" title="9. Human Bias in ML"></a>9. Human Bias in ML</h3><p>Decisions made as you do ML have real world impact for you and your customers.</p><p>Unconscious biases exist in data.</p><p>Fairness in ML.</p><h3 id="10-Discovering-ML-Use-Cases"><a href="#10-Discovering-ML-Use-Cases" class="headerlink" title="10. Discovering ML Use Cases"></a>10. Discovering ML Use Cases</h3><p>Simplifying rule-based systems.</p><p>Streaming business processes.</p><p>Understanding unstructured data.</p><p>Personalizing experiences: Adds significant value to users.</p><p>Recommender systems.</p><p>ML in Series.</p><h3 id="11-Data-Strategy"><a href="#11-Data-Strategy" class="headerlink" title="11. Data Strategy"></a>11. Data Strategy</h3><p>ML is about repeated decisions:</p><ol><li>Design a system so that you will have more data next year.</li><li>Break down data silos.</li><li>Transition from data lakes to data warehouses.</li><li>Learn about your data.</li><li>Integrate pilots into your tools.</li><li>Run ML models on real-time data to extract the most value.</li><li>Collect more data.</li></ol><h3 id="12-Data-Governance"><a href="#12-Data-Governance" class="headerlink" title="12. Data Governance"></a>12. Data Governance</h3><p>Data access must be balanced against security.</p><p>Three goals for ML and Privacy:</p><ol><li>Identify sensitive data.</li><li>Protect sensitive data by removing, masking or coarsening.</li><li>Create public governance documentation.</li></ol><p>Types of sensitive data:</p><ol><li>Specific columns in structured datasets.</li><li>Patterned text, e.g., credit card numbers.</li><li>Unstructured data, like audio, video and images.</li><li>Combination of fields.</li></ol><p>Common principles for establishing a policy framework:</p><ol><li>Establish a secure location for documentation.</li><li>Exclude sensitive information from documentation.</li><li>Document all sources and processes.</li><li>Establish a process to review and enforce policies.</li></ol><p>Build your ML team:</p><ol><li>Data engineers.</li><li>ML engineers.</li><li>Data analysts.</li></ol><h3 id="13-Create-a-Culture-of-Innovation"><a href="#13-Create-a-Culture-of-Innovation" class="headerlink" title="13. Create a Culture of Innovation"></a>13. Create a Culture of Innovation</h3><p>Starts with a dedicated mindset.</p><p>Focus on the user.</p><p>10X thinking.</p><p>Launch and iterate.</p><p>Change is inevitable.</p>]]></content>
      
      
      <categories>
          
          <category> 慕课MOOC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Python 程序画画</title>
      <link href="/Python%E7%94%BB%E7%94%BB/"/>
      <url>/Python%E7%94%BB%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>turtle 库是 Python 的标准库之一，属于入门级的图形绘制函数库，其原理是让一只海龟在画布上游走，走过的轨迹形成了绘制的图形，海龟由程序控制，可以自由改变颜色、方向宽度等。我们也可以依赖这个库完成一些简单的画画，以下为一些经典图像的代码实现笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="turtle-简介"><a href="#turtle-简介" class="headerlink" title="turtle 简介"></a>turtle 简介</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="comment"># 设置窗体大小</span></span><br><span class="line">turtle.setup(width,height,startx,starty)    <span class="comment">#后两个参数非必选参数</span></span><br><span class="line"><span class="comment">#turtle的移动</span></span><br><span class="line">turtle.goto(x,y)</span><br><span class="line"><span class="comment">#画圆</span></span><br><span class="line">turtle.circle(r,angle)</span><br><span class="line"><span class="comment">#当前距离后退</span></span><br><span class="line">turtle.bk(d)</span><br><span class="line"><span class="comment">#当前距离前进</span></span><br><span class="line">turtle.fd(d)    <span class="comment">#turtle.forward(d)</span></span><br><span class="line"><span class="comment">#改变海龟行进方向，angle为绝对角度</span></span><br><span class="line">turtle.seth(angle)    <span class="comment">#只改变呢方向不行进</span></span><br><span class="line"><span class="comment">#向左右前进</span></span><br><span class="line">turtle.right(angle)</span><br><span class="line">turtle.left(angle)</span><br><span class="line"><span class="comment">#抬起画笔</span></span><br><span class="line">turtle.pu()    <span class="comment">#turtle.penup()</span></span><br><span class="line"><span class="comment">#画笔落下</span></span><br><span class="line">turtle.pd()    <span class="comment">#turtle.pendown()</span></span><br><span class="line"><span class="comment">#画笔宽度</span></span><br><span class="line">turtle.width(width)    <span class="comment">#turtle.pensize(width)</span></span><br><span class="line"><span class="comment">#画笔颜色</span></span><br><span class="line">turtle.pencolor(color):color</span><br></pre></td></tr></table></figure><h3 id="画笑脸"><a href="#画笑脸" class="headerlink" title="画笑脸"></a>画笑脸</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> fucksisu</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eye</span>(<span class="params">col, rad</span>):</span><br><span class="line">fucksisu.down()</span><br><span class="line">fucksisu.fillcolor(col)</span><br><span class="line">fucksisu.begin_fill()</span><br><span class="line">fucksisu.circle(rad)</span><br><span class="line">fucksisu.end_fill()</span><br><span class="line">fucksisu.up()</span><br><span class="line">fucksisu.fillcolor(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">fucksisu.begin_fill()</span><br><span class="line">fucksisu.circle(<span class="number">100</span>)</span><br><span class="line">fucksisu.end_fill()</span><br><span class="line">fucksisu.up()</span><br><span class="line">fucksisu.goto(-<span class="number">40</span>, <span class="number">120</span>)</span><br><span class="line">eye(<span class="string">&#x27;white&#x27;</span>, <span class="number">15</span>)</span><br><span class="line">fucksisu.goto(-<span class="number">37</span>, <span class="number">125</span>)</span><br><span class="line">eye(<span class="string">&#x27;black&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">fucksisu.goto(<span class="number">40</span>, <span class="number">120</span>)</span><br><span class="line">eye(<span class="string">&#x27;white&#x27;</span>, <span class="number">15</span>)</span><br><span class="line">fucksisu.goto(<span class="number">40</span>, <span class="number">125</span>)</span><br><span class="line">eye(<span class="string">&#x27;black&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">fucksisu.goto(<span class="number">0</span>, <span class="number">75</span>)</span><br><span class="line">eye(<span class="string">&#x27;black&#x27;</span>, <span class="number">8</span>)</span><br><span class="line">fucksisu.goto(-<span class="number">40</span>, <span class="number">85</span>)</span><br><span class="line">fucksisu.down()</span><br><span class="line">fucksisu.right(<span class="number">90</span>)</span><br><span class="line">fucksisu.circle(<span class="number">40</span>, <span class="number">180</span>)</span><br><span class="line">fucksisu.up()</span><br><span class="line">fucksisu.goto(-<span class="number">10</span>, <span class="number">45</span>)</span><br><span class="line">fucksisu.down()</span><br><span class="line">fucksisu.right(<span class="number">180</span>)</span><br><span class="line">fucksisu.fillcolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">fucksisu.begin_fill()</span><br><span class="line">fucksisu.circle(<span class="number">10</span>, <span class="number">180</span>)</span><br><span class="line">fucksisu.end_fill()</span><br><span class="line">fucksisu.hideturtle()</span><br></pre></td></tr></table></figure><h3 id="画柱状图"><a href="#画柱状图" class="headerlink" title="画柱状图"></a>画柱状图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.title(<span class="string">&quot;柱状图名称&quot;</span>)</span><br><span class="line">heights = [<span class="number">834</span>, <span class="number">620</span>,<span class="number">460</span>,<span class="number">260</span>,<span class="number">105</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    t = turtle.Turtle()</span><br><span class="line">    t.hideturtle()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        drawFilledRectangle(t,-<span class="number">200</span>+(<span class="number">76</span>*i),<span class="number">0</span>,<span class="number">76</span>,heights[i]/<span class="number">4</span>,<span class="string">&quot;black&quot;</span>,<span class="string">&quot;light blue&quot;</span>)</span><br><span class="line">    displayText(t)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawFilledRectangle</span>(<span class="params">t,x,y,w,h,colorP=<span class="string">&quot;black&quot;</span>,colorF=<span class="string">&quot;white&quot;</span></span>):</span><br><span class="line">    t.pencolor(colorP)</span><br><span class="line">    t.fillcolor(colorF)</span><br><span class="line">    t.up()</span><br><span class="line">    t.goto(x,y)</span><br><span class="line">    t.down()</span><br><span class="line">    t.begin_fill()</span><br><span class="line">    t.goto(x+w,y)</span><br><span class="line">    t.goto(x+w,y+h)</span><br><span class="line">    t.goto(x,y+h)</span><br><span class="line">    t.goto(x,y)</span><br><span class="line">    t.end_fill()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">displayText</span>(<span class="params">t</span>):</span><br><span class="line">    languages = [<span class="string">&quot;柱状图1&quot;</span>, <span class="string">&quot;柱状图2&quot;</span>, <span class="string">&quot;柱状图3&quot;</span>, <span class="string">&quot;柱状图4&quot;</span>, <span class="string">&quot;柱状图5&quot;</span>]</span><br><span class="line">    t.pencolor(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">    t.up()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t.goto((-<span class="number">162</span>+<span class="number">76</span>*i),heights[i] / <span class="number">4</span>)</span><br><span class="line">        t.write(<span class="built_in">str</span>(heights[i]),align=<span class="string">&quot;center&quot;</span>,font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">10</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">        t.goto((-<span class="number">162</span>+<span class="number">76</span>*i),<span class="number">10</span>)</span><br><span class="line">        t.write(languages[i],align=<span class="string">&quot;center&quot;</span>,font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">10</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">        t.goto(-<span class="number">200</span>,-<span class="number">25</span>)</span><br><span class="line">        t.write(<span class="string">&quot;柱状图1名称&quot;</span>,font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">10</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">        t.goto(-<span class="number">200</span>,-<span class="number">45</span>)</span><br><span class="line">        t.write(<span class="string">&#x27;(柱状图1注解)&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">10</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="画皮卡丘"><a href="#画皮卡丘" class="headerlink" title="画皮卡丘"></a>画皮卡丘</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sisuisrubbishl</span>(<span class="params">x, y</span>):</span><br><span class="line">    turtle.setx(x)</span><br><span class="line">    turtle.sety(y)</span><br><span class="line">    <span class="built_in">print</span>(x, y)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cartoon</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.t = turtle.Turtle()</span><br><span class="line">        t = self.t</span><br><span class="line">        t.pensize(<span class="number">3</span>)</span><br><span class="line">        t.speed(<span class="number">9</span>)</span><br><span class="line">        t.ondrag(sisuisrubbishl)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">meme</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.t.penup()</span><br><span class="line">        self.t.goto(x, y)</span><br><span class="line">        self.t.pendown()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ihatesisu1</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.meme(x, y)</span><br><span class="line">        t = self.t</span><br><span class="line">        t.seth(<span class="number">0</span>)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#333333&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.circle(<span class="number">22</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        self.meme(x, y + <span class="number">10</span>)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#000000&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.circle(<span class="number">10</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        self.meme(x + <span class="number">6</span>, y + <span class="number">22</span>)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.circle(<span class="number">10</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ihatesisu2</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.meme(x, y)</span><br><span class="line">        t = self.t</span><br><span class="line">        t.seth(<span class="number">0</span>)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#333333&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.circle(<span class="number">22</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        self.meme(x, y + <span class="number">10</span>)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#000000&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.circle(<span class="number">10</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        self.meme(x - <span class="number">6</span>, y + <span class="number">22</span>)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.circle(<span class="number">10</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fucksisu</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.meme(x, y)</span><br><span class="line">        t = self.t</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#88141D&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        l1 = []</span><br><span class="line">        l2 = []</span><br><span class="line">        t.seth(<span class="number">190</span>)</span><br><span class="line">        a = <span class="number">0.7</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>):</span><br><span class="line">            a += <span class="number">0.1</span></span><br><span class="line">            t.right(<span class="number">3</span>)</span><br><span class="line">            t.fd(a)</span><br><span class="line">            l1.append(t.position())</span><br><span class="line">        self.meme(x, y)</span><br><span class="line">        t.seth(<span class="number">10</span>)</span><br><span class="line">        a = <span class="number">0.7</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>):</span><br><span class="line">            a += <span class="number">0.1</span></span><br><span class="line">            t.left(<span class="number">3</span>)</span><br><span class="line">            t.fd(a)</span><br><span class="line">            l2.append(t.position())</span><br><span class="line">        t.seth(<span class="number">10</span>)</span><br><span class="line">        t.circle(<span class="number">50</span>, <span class="number">15</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(-<span class="number">50</span>, <span class="number">15</span>)</span><br><span class="line">        t.circle(-<span class="number">50</span>, <span class="number">40</span>)</span><br><span class="line">        t.seth(<span class="number">233</span>)</span><br><span class="line">        t.circle(-<span class="number">50</span>, <span class="number">55</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(<span class="number">50</span>, <span class="number">12.1</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        self.meme(<span class="number">17</span>, <span class="number">54</span>)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#DD716F&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.seth(<span class="number">145</span>)</span><br><span class="line">        t.circle(<span class="number">40</span>, <span class="number">86</span>)</span><br><span class="line">        t.penup()</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">reversed</span>(l1[:<span class="number">20</span>]):</span><br><span class="line">            t.goto(pos[<span class="number">0</span>], pos[<span class="number">1</span>] + <span class="number">1.5</span>)</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> l2[:<span class="number">20</span>]:</span><br><span class="line">            t.goto(pos[<span class="number">0</span>], pos[<span class="number">1</span>] + <span class="number">1.5</span>)</span><br><span class="line">        t.pendown()</span><br><span class="line">        t.end_fill()</span><br><span class="line">        self.meme(-<span class="number">17</span>, <span class="number">94</span>)</span><br><span class="line">        t.seth(<span class="number">8</span>)</span><br><span class="line">        t.fd(<span class="number">4</span>)</span><br><span class="line">        t.back(<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fucksisu4</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        turtle.tracer(<span class="literal">False</span>)</span><br><span class="line">        t = self.t</span><br><span class="line">        self.meme(x, y)</span><br><span class="line">        t.seth(<span class="number">300</span>)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#DD4D28&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        a = <span class="number">2.3</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= i &lt; <span class="number">30</span> <span class="keyword">or</span> <span class="number">60</span> &lt;= i &lt; <span class="number">90</span>:</span><br><span class="line">                a -= <span class="number">0.05</span></span><br><span class="line">                t.lt(<span class="number">3</span>)</span><br><span class="line">                t.fd(a)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a += <span class="number">0.05</span></span><br><span class="line">                t.lt(<span class="number">3</span>)</span><br><span class="line">                t.fd(a)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        turtle.tracer(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fucksisu5</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        t = self.t</span><br><span class="line">        turtle.tracer(<span class="literal">False</span>)</span><br><span class="line">        self.meme(x, y)</span><br><span class="line">        t.seth(<span class="number">60</span>)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#DD4D28&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        a = <span class="number">2.3</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= i &lt; <span class="number">30</span> <span class="keyword">or</span> <span class="number">60</span> &lt;= i &lt; <span class="number">90</span>:</span><br><span class="line">                a -= <span class="number">0.05</span></span><br><span class="line">                t.lt(<span class="number">3</span>)</span><br><span class="line">                t.fd(a)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a += <span class="number">0.05</span></span><br><span class="line">                t.lt(<span class="number">3</span>)</span><br><span class="line">                t.fd(a)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        turtle.tracer(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fucksisu6</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        t = self.t</span><br><span class="line">        self.meme(x, y)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#000000&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.seth(<span class="number">330</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">35</span>)</span><br><span class="line">        t.seth(<span class="number">219</span>)</span><br><span class="line">        t.circle(-<span class="number">300</span>, <span class="number">19</span>)</span><br><span class="line">        t.seth(<span class="number">110</span>)</span><br><span class="line">        t.circle(-<span class="number">30</span>, <span class="number">50</span>)</span><br><span class="line">        t.circle(-<span class="number">300</span>, <span class="number">10</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fucksisu7</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        t = self.t</span><br><span class="line">        self.meme(x, y)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#000000&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.seth(<span class="number">300</span>)</span><br><span class="line">        t.circle(-<span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line">        t.seth(<span class="number">35</span>)</span><br><span class="line">        t.circle(<span class="number">300</span>, <span class="number">15</span>)</span><br><span class="line">        t.circle(<span class="number">30</span>, <span class="number">50</span>)</span><br><span class="line">        t.seth(<span class="number">190</span>)</span><br><span class="line">        t.circle(<span class="number">300</span>, <span class="number">17</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fucksisu8</span>(<span class="params">self</span>):</span><br><span class="line">        t = self.t</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#F6D02F&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.penup()</span><br><span class="line">        t.circle(<span class="number">130</span>, <span class="number">40</span>)</span><br><span class="line">        t.pendown()</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">105</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(-<span class="number">100</span>, <span class="number">5</span>)</span><br><span class="line">        t.seth(<span class="number">20</span>)</span><br><span class="line">        t.circle(<span class="number">300</span>, <span class="number">30</span>)</span><br><span class="line">        t.circle(<span class="number">30</span>, <span class="number">50</span>)</span><br><span class="line">        t.seth(<span class="number">190</span>)</span><br><span class="line">        t.circle(<span class="number">300</span>, <span class="number">36</span>)</span><br><span class="line">        t.seth(<span class="number">150</span>)</span><br><span class="line">        t.circle(<span class="number">150</span>, <span class="number">70</span>)</span><br><span class="line">        t.seth(<span class="number">200</span>)</span><br><span class="line">        t.circle(<span class="number">300</span>, <span class="number">40</span>)</span><br><span class="line">        t.circle(<span class="number">30</span>, <span class="number">50</span>)</span><br><span class="line">        t.seth(<span class="number">20</span>)</span><br><span class="line">        t.circle(<span class="number">300</span>, <span class="number">35</span>) </span><br><span class="line">        t.seth(<span class="number">240</span>)</span><br><span class="line">        t.circle(<span class="number">105</span>, <span class="number">95</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(-<span class="number">105</span>, <span class="number">5</span>)</span><br><span class="line">        t.seth(<span class="number">210</span>)</span><br><span class="line">        t.circle(<span class="number">500</span>, <span class="number">18</span>)</span><br><span class="line">        t.seth(<span class="number">200</span>)</span><br><span class="line">        t.fd(<span class="number">10</span>)</span><br><span class="line">        t.seth(<span class="number">280</span>)</span><br><span class="line">        t.fd(<span class="number">7</span>)</span><br><span class="line">        t.seth(<span class="number">210</span>)</span><br><span class="line">        t.fd(<span class="number">10</span>)</span><br><span class="line">        t.seth(<span class="number">300</span>)</span><br><span class="line">        t.circle(<span class="number">10</span>, <span class="number">80</span>)</span><br><span class="line">        t.seth(<span class="number">220</span>)</span><br><span class="line">        t.fd(<span class="number">10</span>)</span><br><span class="line">        t.seth(<span class="number">300</span>)</span><br><span class="line">        t.circle(<span class="number">10</span>, <span class="number">80</span>)</span><br><span class="line">        t.seth(<span class="number">240</span>)</span><br><span class="line">        t.fd(<span class="number">12</span>)</span><br><span class="line">        t.seth(<span class="number">0</span>)</span><br><span class="line">        t.fd(<span class="number">13</span>)</span><br><span class="line">        t.seth(<span class="number">240</span>)</span><br><span class="line">        t.circle(<span class="number">10</span>, <span class="number">70</span>)</span><br><span class="line">        t.seth(<span class="number">10</span>)</span><br><span class="line">        t.circle(<span class="number">10</span>, <span class="number">70</span>)</span><br><span class="line">        t.seth(<span class="number">10</span>)</span><br><span class="line">        t.circle(<span class="number">300</span>, <span class="number">18</span>)</span><br><span class="line">        t.seth(<span class="number">75</span>)</span><br><span class="line">        t.circle(<span class="number">500</span>, <span class="number">8</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(-<span class="number">500</span>, <span class="number">15</span>)</span><br><span class="line">        t.seth(<span class="number">250</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">65</span>)</span><br><span class="line">        t.seth(<span class="number">320</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">5</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(-<span class="number">100</span>, <span class="number">5</span>)</span><br><span class="line">        t.seth(<span class="number">220</span>)</span><br><span class="line">        t.circle(<span class="number">200</span>, <span class="number">20</span>)</span><br><span class="line">        t.circle(<span class="number">20</span>, <span class="number">70</span>)</span><br><span class="line">        t.seth(<span class="number">60</span>)</span><br><span class="line">        t.circle(-<span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">        t.seth(<span class="number">300</span>)</span><br><span class="line">        t.circle(<span class="number">10</span>, <span class="number">70</span>)</span><br><span class="line">        t.seth(<span class="number">60</span>)</span><br><span class="line">        t.circle(-<span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">        t.seth(<span class="number">10</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">60</span>)</span><br><span class="line">        t.seth(<span class="number">180</span>)</span><br><span class="line">        t.circle(-<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">        t.seth(<span class="number">5</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">        t.circle(-<span class="number">100</span>, <span class="number">40</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">35</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(-<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">        t.seth(<span class="number">290</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">55</span>)</span><br><span class="line">        t.circle(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line">        t.seth(<span class="number">120</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(-<span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">        t.seth(<span class="number">0</span>)</span><br><span class="line">        t.circle(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line">        t.seth(<span class="number">110</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(-<span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">        t.seth(<span class="number">30</span>)</span><br><span class="line">        t.circle(<span class="number">20</span>, <span class="number">50</span>)</span><br><span class="line">        t.seth(<span class="number">100</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">40</span>)</span><br><span class="line">        t.seth(<span class="number">200</span>)</span><br><span class="line">        t.circle(-<span class="number">100</span>, <span class="number">5</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">5</span>)</span><br><span class="line">        t.left(<span class="number">30</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">75</span>)</span><br><span class="line">        t.right(<span class="number">15</span>)</span><br><span class="line">        t.circle(-<span class="number">300</span>, <span class="number">21</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(<span class="number">300</span>, <span class="number">3</span>)</span><br><span class="line">        t.seth(<span class="number">43</span>)</span><br><span class="line">        t.circle(<span class="number">200</span>, <span class="number">60</span>)</span><br><span class="line">        t.right(<span class="number">10</span>)</span><br><span class="line">        t.fd(<span class="number">10</span>)</span><br><span class="line">        t.circle(<span class="number">5</span>, <span class="number">160</span>)</span><br><span class="line">        t.seth(<span class="number">90</span>)</span><br><span class="line">        t.circle(<span class="number">5</span>, <span class="number">160</span>)</span><br><span class="line">        t.seth(<span class="number">90</span>)</span><br><span class="line">        t.fd(<span class="number">10</span>)</span><br><span class="line">        t.seth(<span class="number">90</span>)</span><br><span class="line">        t.circle(<span class="number">5</span>, <span class="number">180</span>)</span><br><span class="line">        t.fd(<span class="number">10</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.left(<span class="number">20</span>)</span><br><span class="line">        t.fd(<span class="number">10</span>)</span><br><span class="line">        t.circle(<span class="number">5</span>, <span class="number">170</span>)</span><br><span class="line">        t.fd(<span class="number">10</span>)</span><br><span class="line">        t.seth(<span class="number">240</span>)</span><br><span class="line">        t.circle(<span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        self.meme(<span class="number">130</span>, <span class="number">125</span>)</span><br><span class="line">        t.seth(-<span class="number">20</span>)</span><br><span class="line">        t.fd(<span class="number">5</span>)</span><br><span class="line">        t.circle(-<span class="number">5</span>, <span class="number">160</span>)</span><br><span class="line">        t.fd(<span class="number">5</span>)</span><br><span class="line">        self.meme(<span class="number">166</span>, <span class="number">130</span>)</span><br><span class="line">        t.seth(-<span class="number">90</span>)</span><br><span class="line">        t.fd(<span class="number">3</span>)</span><br><span class="line">        t.circle(-<span class="number">4</span>, <span class="number">180</span>)</span><br><span class="line">        t.fd(<span class="number">3</span>)</span><br><span class="line">        t.seth(-<span class="number">90</span>)</span><br><span class="line">        t.fd(<span class="number">3</span>)</span><br><span class="line">        t.circle(-<span class="number">4</span>, <span class="number">180</span>)</span><br><span class="line">        t.fd(<span class="number">3</span>)</span><br><span class="line">        self.meme(<span class="number">168</span>, <span class="number">134</span>)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#F6D02F&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.seth(<span class="number">40</span>)</span><br><span class="line">        t.fd(<span class="number">200</span>)</span><br><span class="line">        t.seth(-<span class="number">80</span>)</span><br><span class="line">        t.fd(<span class="number">150</span>)</span><br><span class="line">        t.seth(<span class="number">210</span>)</span><br><span class="line">        t.fd(<span class="number">150</span>)</span><br><span class="line">        t.left(<span class="number">90</span>)</span><br><span class="line">        t.fd(<span class="number">100</span>)</span><br><span class="line">        t.right(<span class="number">95</span>)</span><br><span class="line">        t.fd(<span class="number">100</span>)</span><br><span class="line">        t.left(<span class="number">110</span>)</span><br><span class="line">        t.fd(<span class="number">70</span>)</span><br><span class="line">        t.right(<span class="number">110</span>)</span><br><span class="line">        t.fd(<span class="number">80</span>)</span><br><span class="line">        t.left(<span class="number">110</span>)</span><br><span class="line">        t.fd(<span class="number">30</span>)</span><br><span class="line">        t.right(<span class="number">110</span>)</span><br><span class="line">        t.fd(<span class="number">32</span>)</span><br><span class="line">        t.right(<span class="number">106</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">25</span>)</span><br><span class="line">        t.right(<span class="number">15</span>)</span><br><span class="line">        t.circle(-<span class="number">300</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="comment">############## </span></span><br><span class="line">        t.seth(<span class="number">30</span>)</span><br><span class="line">        t.fd(<span class="number">40</span>)</span><br><span class="line">        t.left(<span class="number">100</span>)</span><br><span class="line">        t.fd(<span class="number">70</span>)</span><br><span class="line">        t.right(<span class="number">100</span>)</span><br><span class="line">        t.fd(<span class="number">80</span>)</span><br><span class="line">        t.left(<span class="number">100</span>)</span><br><span class="line">        t.fd(<span class="number">46</span>)</span><br><span class="line">        t.seth(<span class="number">66</span>)</span><br><span class="line">        t.circle(<span class="number">200</span>, <span class="number">38</span>)</span><br><span class="line">        t.right(<span class="number">10</span>)</span><br><span class="line">        t.fd(<span class="number">10</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#923E24&#x27;</span>)</span><br><span class="line">        self.meme(<span class="number">126.82</span>, -<span class="number">156.84</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.seth(<span class="number">30</span>)</span><br><span class="line">        t.fd(<span class="number">40</span>)</span><br><span class="line">        t.left(<span class="number">100</span>)</span><br><span class="line">        t.fd(<span class="number">40</span>)</span><br><span class="line">        t.pencolor(<span class="string">&#x27;#923e24&#x27;</span>)</span><br><span class="line">        t.seth(-<span class="number">30</span>)</span><br><span class="line">        t.fd(<span class="number">30</span>)</span><br><span class="line">        t.left(<span class="number">140</span>)</span><br><span class="line">        t.fd(<span class="number">20</span>)</span><br><span class="line">        t.right(<span class="number">150</span>)</span><br><span class="line">        t.fd(<span class="number">20</span>)</span><br><span class="line">        t.left(<span class="number">150</span>)</span><br><span class="line">        t.fd(<span class="number">20</span>)</span><br><span class="line">        t.right(<span class="number">150</span>)</span><br><span class="line">        t.fd(<span class="number">20</span>)</span><br><span class="line">        t.left(<span class="number">130</span>)</span><br><span class="line">        t.fd(<span class="number">18</span>)</span><br><span class="line">        t.pencolor(<span class="string">&#x27;#000000&#x27;</span>)</span><br><span class="line">        t.seth(-<span class="number">45</span>)</span><br><span class="line">        t.fd(<span class="number">67</span>)</span><br><span class="line">        t.right(<span class="number">110</span>)</span><br><span class="line">        t.fd(<span class="number">80</span>)</span><br><span class="line">        t.left(<span class="number">110</span>)</span><br><span class="line">        t.fd(<span class="number">30</span>)</span><br><span class="line">        t.right(<span class="number">110</span>)</span><br><span class="line">        t.fd(<span class="number">32</span>)</span><br><span class="line">        t.right(<span class="number">106</span>)</span><br><span class="line">        t.circle(<span class="number">100</span>, <span class="number">25</span>)</span><br><span class="line">        t.right(<span class="number">15</span>)</span><br><span class="line">        t.circle(-<span class="number">300</span>, <span class="number">2</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        self.fucksisu9(-<span class="number">134.07</span>, <span class="number">147.81</span>)</span><br><span class="line">        self.fucksisu(-<span class="number">5</span>, <span class="number">25</span>)</span><br><span class="line">        self.fucksisu4(-<span class="number">126</span>, <span class="number">32</span>)</span><br><span class="line">        self.fucksisu5(<span class="number">107</span>, <span class="number">63</span>)</span><br><span class="line">        self.fucksisu6(-<span class="number">250</span>, <span class="number">100</span>)</span><br><span class="line">        self.fucksisu7(<span class="number">140</span>, <span class="number">270</span>)</span><br><span class="line">        self.ihatesisu1(-<span class="number">85</span>, <span class="number">90</span>)</span><br><span class="line">        self.ihatesisu2(<span class="number">50</span>, <span class="number">110</span>)</span><br><span class="line">        t.hideturtle()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fucksisu9</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.meme(x, y)</span><br><span class="line">        t = self.t</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#CD0000&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.seth(<span class="number">200</span>)</span><br><span class="line">        t.circle(<span class="number">400</span>, <span class="number">7</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(-<span class="number">400</span>, <span class="number">30</span>)</span><br><span class="line">        t.circle(<span class="number">30</span>, <span class="number">60</span>)</span><br><span class="line">        t.fd(<span class="number">50</span>)</span><br><span class="line">        t.circle(<span class="number">30</span>, <span class="number">45</span>)</span><br><span class="line">        t.fd(<span class="number">60</span>)</span><br><span class="line">        t.left(<span class="number">5</span>)</span><br><span class="line">        t.circle(<span class="number">30</span>, <span class="number">70</span>)</span><br><span class="line">        t.right(<span class="number">20</span>)</span><br><span class="line">        t.circle(<span class="number">200</span>, <span class="number">70</span>)</span><br><span class="line">        t.circle(<span class="number">30</span>, <span class="number">60</span>)</span><br><span class="line">        t.fd(<span class="number">70</span>) </span><br><span class="line">        t.right(<span class="number">35</span>)</span><br><span class="line">        t.fd(<span class="number">50</span>)</span><br><span class="line">        t.circle(<span class="number">8</span>, <span class="number">100</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        self.meme(-<span class="number">168.47</span>, <span class="number">185.52</span>)</span><br><span class="line">        t.seth(<span class="number">36</span>)</span><br><span class="line">        t.circle(-<span class="number">270</span>, <span class="number">54</span>)</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(<span class="number">270</span>, <span class="number">27</span>)</span><br><span class="line">        t.circle(-<span class="number">80</span>, <span class="number">98</span>)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#444444&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.left(<span class="number">180</span>)</span><br><span class="line">        t.circle(<span class="number">80</span>, <span class="number">197</span>)</span><br><span class="line">        t.left(<span class="number">58</span>)</span><br><span class="line">        t.circle(<span class="number">200</span>, <span class="number">45</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        self.meme(-<span class="number">58</span>, <span class="number">270</span>)</span><br><span class="line">        t.pencolor(<span class="string">&#x27;#228B22&#x27;</span>)</span><br><span class="line">        t.dot(<span class="number">35</span>)</span><br><span class="line">        self.meme(-<span class="number">30</span>, <span class="number">280</span>)</span><br><span class="line">        t.fillcolor(<span class="string">&#x27;#228B22&#x27;</span>)</span><br><span class="line">        t.begin_fill()</span><br><span class="line">        t.seth(<span class="number">100</span>)</span><br><span class="line">        t.circle(<span class="number">30</span>, <span class="number">180</span>)</span><br><span class="line">        t.seth(<span class="number">190</span>)</span><br><span class="line">        t.fd(<span class="number">15</span>)</span><br><span class="line">        t.seth(<span class="number">100</span>)</span><br><span class="line">        t.circle(-<span class="number">45</span>, <span class="number">180</span>)</span><br><span class="line">        t.right(<span class="number">90</span>)</span><br><span class="line">        t.fd(<span class="number">15</span>)</span><br><span class="line">        t.end_fill()</span><br><span class="line">        t.pencolor(<span class="string">&#x27;#000000&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        self.fucksisu8()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    turtle.screensize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">    turtle.title(<span class="string">&#x27;皮卡丘&#x27;</span>)</span><br><span class="line">    cartoon = Cartoon()</span><br><span class="line">    cartoon.start()</span><br><span class="line">    turtle.mainloop()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="画哆啦A梦"><a href="#画哆啦A梦" class="headerlink" title="画哆啦A梦"></a>画哆啦A梦</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line">turtle.title(<span class="string">&quot;哆啦A梦&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fucksisu1</span>(<span class="params">x, y</span>):</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fucksisu2</span>():</span><br><span class="line">    fillcolor(<span class="string">&quot;#ffffff&quot;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    tracer(<span class="literal">False</span>)</span><br><span class="line">    a = <span class="number">2.5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= i &lt; <span class="number">30</span> <span class="keyword">or</span> <span class="number">60</span> &lt;= i &lt; <span class="number">90</span>:</span><br><span class="line">            a -= <span class="number">0.05</span></span><br><span class="line">            lt(<span class="number">3</span>)</span><br><span class="line">            fd(a)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a += <span class="number">0.05</span></span><br><span class="line">            lt(<span class="number">3</span>)</span><br><span class="line">            fd(a)</span><br><span class="line">    tracer(<span class="literal">True</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fucksisu3</span>():</span><br><span class="line">    fucksisu1(-<span class="number">32</span>, <span class="number">135</span>)</span><br><span class="line">    seth(<span class="number">165</span>)</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line">    fucksisu1(-<span class="number">32</span>, <span class="number">125</span>)</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line">    fucksisu1(-<span class="number">32</span>, <span class="number">115</span>)</span><br><span class="line">    seth(<span class="number">193</span>)</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line">    fucksisu1(<span class="number">37</span>, <span class="number">135</span>)</span><br><span class="line">    seth(<span class="number">15</span>)</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line">    fucksisu1(<span class="number">37</span>, <span class="number">125</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line">    fucksisu1(<span class="number">37</span>, <span class="number">115</span>)</span><br><span class="line">    seth(-<span class="number">13</span>)</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fucksisu4</span>():</span><br><span class="line">    fucksisu1(<span class="number">5</span>, <span class="number">148</span>)</span><br><span class="line">    seth(<span class="number">270</span>)</span><br><span class="line">    fd(<span class="number">100</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    circle(<span class="number">120</span>, <span class="number">50</span>)</span><br><span class="line">    seth(<span class="number">230</span>)</span><br><span class="line">    circle(-<span class="number">120</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fucksisu5</span>():</span><br><span class="line">    fillcolor(<span class="string">&#x27;#e70010&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fd(<span class="number">200</span>)</span><br><span class="line">    circle(-<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    circle(-<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">207</span>)</span><br><span class="line">    circle(-<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    circle(-<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fucksisu6</span>():</span><br><span class="line">    fucksisu1(-<span class="number">10</span>, <span class="number">158</span>)</span><br><span class="line">    seth(<span class="number">315</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#e70010&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">20</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">black_fucksisu2</span>():</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fucksisu1(-<span class="number">20</span>, <span class="number">195</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#000000&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">13</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    pensize(<span class="number">6</span>)</span><br><span class="line">    fucksisu1(<span class="number">20</span>, <span class="number">205</span>)</span><br><span class="line">    seth(<span class="number">75</span>)</span><br><span class="line">    circle(-<span class="number">10</span>, <span class="number">150</span>)</span><br><span class="line">    pensize(<span class="number">3</span>)</span><br><span class="line">    fucksisu1(-<span class="number">17</span>, <span class="number">200</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">5</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fucksisu1(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">face</span>():</span><br><span class="line">    fd(<span class="number">183</span>)</span><br><span class="line">    lt(<span class="number">45</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">120</span>, <span class="number">100</span>)</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">121</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    seth(<span class="number">215</span>)</span><br><span class="line">    circle(<span class="number">120</span>, <span class="number">100</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fucksisu1(<span class="number">63.56</span>, <span class="number">218.24</span>)</span><br><span class="line">    seth(<span class="number">90</span>)</span><br><span class="line">    fucksisu2()</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    penup()</span><br><span class="line">    fd(<span class="number">60</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    seth(<span class="number">90</span>)</span><br><span class="line">    fucksisu2()</span><br><span class="line">    penup()</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">64</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fucksisu7</span>():</span><br><span class="line">    penup()</span><br><span class="line">    circle(<span class="number">150</span>, <span class="number">40</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    fillcolor(<span class="string">&#x27;#00a0de&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">150</span>, <span class="number">280</span>)</span><br><span class="line">    end_fill()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fucksisu8</span>():</span><br><span class="line">    fucksisu7()</span><br><span class="line">    fucksisu5()</span><br><span class="line">    face()</span><br><span class="line">    fucksisu6()</span><br><span class="line">    fucksisu4()</span><br><span class="line">    fucksisu3()</span><br><span class="line">    fucksisu1(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    penup()</span><br><span class="line">    circle(<span class="number">150</span>, <span class="number">50</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    seth(<span class="number">30</span>)</span><br><span class="line">    fd(<span class="number">40</span>)</span><br><span class="line">    seth(<span class="number">70</span>)</span><br><span class="line">    circle(-<span class="number">30</span>, <span class="number">270</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#00a0de&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    seth(<span class="number">230</span>)</span><br><span class="line">    fd(<span class="number">80</span>)</span><br><span class="line">    seth(<span class="number">90</span>)</span><br><span class="line">    circle(<span class="number">1000</span>, <span class="number">1</span>)</span><br><span class="line">    seth(-<span class="number">89</span>)</span><br><span class="line">    circle(-<span class="number">1000</span>, <span class="number">10</span>)</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">70</span>)</span><br><span class="line">    seth(<span class="number">90</span>)</span><br><span class="line">    circle(<span class="number">30</span>, <span class="number">180</span>)</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">70</span>)</span><br><span class="line">    seth(<span class="number">100</span>)</span><br><span class="line">    circle(-<span class="number">1000</span>, <span class="number">9</span>)</span><br><span class="line">    seth(-<span class="number">86</span>)</span><br><span class="line">    circle(<span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">    seth(<span class="number">230</span>)</span><br><span class="line">    fd(<span class="number">40</span>)</span><br><span class="line">    circle(-<span class="number">30</span>, <span class="number">230</span>)</span><br><span class="line">    seth(<span class="number">45</span>)</span><br><span class="line">    fd(<span class="number">81</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fd(<span class="number">203</span>)</span><br><span class="line">    circle(<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    circle(<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">7</span>)</span><br><span class="line">    seth(<span class="number">40</span>)</span><br><span class="line">    circle(<span class="number">150</span>, <span class="number">10</span>)</span><br><span class="line">    seth(<span class="number">30</span>)</span><br><span class="line">    fd(<span class="number">40</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    seth(<span class="number">70</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(-<span class="number">30</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fucksisu1(<span class="number">103.74</span>, -<span class="number">182.59</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    circle(-<span class="number">15</span>, <span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">90</span>)</span><br><span class="line">    circle(-<span class="number">15</span>, <span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fucksisu1(-<span class="number">96.26</span>, -<span class="number">182.59</span>)</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    circle(<span class="number">15</span>, <span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">90</span>)</span><br><span class="line">    circle(<span class="number">15</span>, <span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fucksisu1(-<span class="number">133.97</span>, -<span class="number">91.81</span>)</span><br><span class="line">    seth(<span class="number">50</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">30</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fucksisu1(-<span class="number">103.42</span>, <span class="number">15.09</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fd(<span class="number">38</span>)</span><br><span class="line">    seth(<span class="number">230</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(<span class="number">90</span>, <span class="number">260</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    fucksisu1(<span class="number">5</span>, -<span class="number">40</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fd(<span class="number">70</span>)</span><br><span class="line">    seth(-<span class="number">90</span>)</span><br><span class="line">    circle(-<span class="number">70</span>, <span class="number">180</span>)</span><br><span class="line">    seth(<span class="number">0</span>)</span><br><span class="line">    fd(<span class="number">70</span>)</span><br><span class="line">    fucksisu1(-<span class="number">103.42</span>, <span class="number">15.09</span>)</span><br><span class="line">    fd(<span class="number">90</span>)</span><br><span class="line">    seth(<span class="number">70</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffd200&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(-<span class="number">20</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    seth(<span class="number">170</span>)</span><br><span class="line">    fillcolor(<span class="string">&#x27;#ffd200&#x27;</span>)</span><br><span class="line">    begin_fill()</span><br><span class="line">    circle(-<span class="number">2</span>, <span class="number">180</span>)</span><br><span class="line">    seth(<span class="number">10</span>)</span><br><span class="line">    circle(-<span class="number">100</span>, <span class="number">22</span>)</span><br><span class="line">    circle(-<span class="number">2</span>, <span class="number">180</span>)</span><br><span class="line">    seth(<span class="number">180</span> - <span class="number">10</span>)</span><br><span class="line">    circle(<span class="number">100</span>, <span class="number">22</span>)</span><br><span class="line">    end_fill()</span><br><span class="line">    goto(-<span class="number">13.42</span>, <span class="number">15.09</span>)</span><br><span class="line">    seth(<span class="number">250</span>)</span><br><span class="line">    circle(<span class="number">20</span>, <span class="number">110</span>)</span><br><span class="line">    seth(<span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    dot(<span class="number">10</span>)</span><br><span class="line">    fucksisu1(<span class="number">0</span>, -<span class="number">150</span>)</span><br><span class="line">    black_fucksisu2()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    screensize(<span class="number">800</span>, <span class="number">600</span>, <span class="string">&quot;#f0f0f0&quot;</span>)</span><br><span class="line">    pensize(<span class="number">3</span>)</span><br><span class="line">    speed(<span class="number">9</span>)</span><br><span class="line">    fucksisu8()</span><br><span class="line">    mainloop()</span><br></pre></td></tr></table></figure><h3 id="钢铁侠"><a href="#钢铁侠" class="headerlink" title="钢铁侠"></a>钢铁侠</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">fucksisu1 = [[(-<span class="number">40</span>, <span class="number">120</span>), (-<span class="number">70</span>, <span class="number">260</span>), (-<span class="number">130</span>, <span class="number">230</span>), (-<span class="number">170</span>, <span class="number">200</span>), (-<span class="number">170</span>, <span class="number">100</span>), (-<span class="number">160</span>, <span class="number">40</span>), (-<span class="number">170</span>, <span class="number">10</span>), (-<span class="number">150</span>, -<span class="number">10</span>), (-<span class="number">140</span>, <span class="number">10</span>),</span><br><span class="line">           (-<span class="number">40</span>, -<span class="number">20</span>), (<span class="number">0</span>, -<span class="number">20</span>)],</span><br><span class="line">          [(<span class="number">0</span>, -<span class="number">20</span>), (<span class="number">40</span>, -<span class="number">20</span>), (<span class="number">140</span>, <span class="number">10</span>), (<span class="number">150</span>, -<span class="number">10</span>), (<span class="number">170</span>, <span class="number">10</span>), (<span class="number">160</span>, <span class="number">40</span>), (<span class="number">170</span>, <span class="number">100</span>), (<span class="number">170</span>, <span class="number">200</span>), (<span class="number">130</span>, <span class="number">230</span>), (<span class="number">70</span>, <span class="number">260</span>),</span><br><span class="line">           (<span class="number">40</span>, <span class="number">120</span>), (<span class="number">0</span>, <span class="number">120</span>)]]</span><br><span class="line">fucksisu2 = [[(-<span class="number">40</span>, -<span class="number">30</span>), (-<span class="number">50</span>, -<span class="number">40</span>), (-<span class="number">100</span>, -<span class="number">46</span>), (-<span class="number">130</span>, -<span class="number">40</span>), (-<span class="number">176</span>, <span class="number">0</span>), (-<span class="number">186</span>, -<span class="number">30</span>), (-<span class="number">186</span>, -<span class="number">40</span>), (-<span class="number">120</span>, -<span class="number">170</span>), (-<span class="number">110</span>, -<span class="number">210</span>),</span><br><span class="line">           (-<span class="number">80</span>, -<span class="number">230</span>), (-<span class="number">64</span>, -<span class="number">210</span>), (<span class="number">0</span>, -<span class="number">210</span>)],</span><br><span class="line">          [(<span class="number">0</span>, -<span class="number">210</span>), (<span class="number">64</span>, -<span class="number">210</span>), (<span class="number">80</span>, -<span class="number">230</span>), (<span class="number">110</span>, -<span class="number">210</span>), (<span class="number">120</span>, -<span class="number">170</span>), (<span class="number">186</span>, -<span class="number">40</span>), (<span class="number">186</span>, -<span class="number">30</span>), (<span class="number">176</span>, <span class="number">0</span>), (<span class="number">130</span>, -<span class="number">40</span>),</span><br><span class="line">           (<span class="number">100</span>, -<span class="number">46</span>), (<span class="number">50</span>, -<span class="number">40</span>), (<span class="number">40</span>, -<span class="number">30</span>), (<span class="number">0</span>, -<span class="number">30</span>)]]</span><br><span class="line">fucksisu3 = [[(-<span class="number">60</span>, -<span class="number">220</span>), (-<span class="number">80</span>, -<span class="number">240</span>), (-<span class="number">110</span>, -<span class="number">220</span>), (-<span class="number">120</span>, -<span class="number">250</span>), (-<span class="number">90</span>, -<span class="number">280</span>), (-<span class="number">60</span>, -<span class="number">260</span>), (-<span class="number">30</span>, -<span class="number">260</span>), (-<span class="number">20</span>, -<span class="number">250</span>),</span><br><span class="line">           (<span class="number">0</span>, -<span class="number">250</span>)],</span><br><span class="line">          [(<span class="number">0</span>, -<span class="number">250</span>), (<span class="number">20</span>, -<span class="number">250</span>), (<span class="number">30</span>, -<span class="number">260</span>), (<span class="number">60</span>, -<span class="number">260</span>), (<span class="number">90</span>, -<span class="number">280</span>), (<span class="number">120</span>, -<span class="number">250</span>), (<span class="number">110</span>, -<span class="number">220</span>), (<span class="number">80</span>, -<span class="number">240</span>), (<span class="number">60</span>, -<span class="number">220</span>),</span><br><span class="line">           (<span class="number">0</span>, -<span class="number">220</span>)]]</span><br><span class="line">turtle.hideturtle()</span><br><span class="line">turtle.bgcolor(<span class="string">&#x27;#ba161e&#x27;</span>)  <span class="comment"># Dark Red</span></span><br><span class="line">turtle.setup(<span class="number">500</span>, <span class="number">600</span>)</span><br><span class="line">turtle.title(<span class="string">&quot;钢铁侠&quot;</span>)</span><br><span class="line">fucksisu1Goto = (<span class="number">0</span>, <span class="number">120</span>)</span><br><span class="line">fucksisu2Goto = (<span class="number">0</span>, -<span class="number">30</span>)</span><br><span class="line">fucksisu3Goto = (<span class="number">0</span>, -<span class="number">220</span>)</span><br><span class="line">turtle.speed(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logo</span>(<span class="params">a, b</span>):</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(b)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.color(<span class="string">&#x27;#fab104&#x27;</span>)  <span class="comment"># Light Yellow</span></span><br><span class="line">    turtle.begin_fill()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a[<span class="number">0</span>])):</span><br><span class="line">        x, y = a[<span class="number">0</span>][i]</span><br><span class="line">        turtle.goto(x, y)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a[<span class="number">1</span>])):</span><br><span class="line">        x, y = a[<span class="number">1</span>][i]</span><br><span class="line">        turtle.goto(x, y)</span><br><span class="line">    turtle.end_fill()</span><br><span class="line">logo(fucksisu1, fucksisu1Goto)</span><br><span class="line">logo(fucksisu2, fucksisu2Goto)</span><br><span class="line">logo(fucksisu3, fucksisu3Goto)</span><br><span class="line">turtle.hideturtle()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><h3 id="蝙蝠侠"><a href="#蝙蝠侠" class="headerlink" title="蝙蝠侠"></a>蝙蝠侠</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">turtle.title(<span class="string">&quot;蝙蝠侠&quot;</span>)</span><br><span class="line">fucksisu1 = turtle.Turtle()</span><br><span class="line">fucksisu1.speed(<span class="number">500</span>)</span><br><span class="line">window = turtle.Screen()</span><br><span class="line">window.bgcolor(<span class="string">&quot;#000000&quot;</span>)</span><br><span class="line">fucksisu1.color(<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">fucksisu2 = <span class="number">20</span></span><br><span class="line">fucksisu1.left(<span class="number">90</span>)</span><br><span class="line">fucksisu1.penup()</span><br><span class="line">fucksisu1.goto(-<span class="number">7</span> * fucksisu2, <span class="number">0</span>)</span><br><span class="line">fucksisu1.pendown()</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">7</span> * fucksisu2, -<span class="number">3</span> * fucksisu2, <span class="number">1</span>):</span><br><span class="line">    x = a / fucksisu2</span><br><span class="line">    rel = math.fabs(x)</span><br><span class="line">    y = <span class="number">1.5</span> * math.sqrt((-math.fabs(rel - <span class="number">1</span>)) * math.fabs(<span class="number">3</span> - rel) / ((rel - <span class="number">1</span>) * (<span class="number">3</span> - rel))) * (</span><br><span class="line">                <span class="number">1</span> + math.fabs(rel - <span class="number">3</span>) / (rel - <span class="number">3</span>)) * math.sqrt(<span class="number">1</span> - (x / <span class="number">7</span>) ** <span class="number">2</span>) + (</span><br><span class="line">                    <span class="number">4.5</span> + <span class="number">0.75</span> * (math.fabs(x - <span class="number">0.5</span>) + math.fabs(x + <span class="number">0.5</span>)) - <span class="number">2.75</span> * (</span><br><span class="line">                        math.fabs(x - <span class="number">0.75</span>) + math.fabs(x + <span class="number">0.75</span>))) * (<span class="number">1</span> + math.fabs(<span class="number">1</span> - rel) / (<span class="number">1</span> - rel))</span><br><span class="line">    fucksisu1.goto(a, y * fucksisu2)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">3</span> * fucksisu2, -<span class="number">1</span> * fucksisu2 - <span class="number">1</span>, <span class="number">1</span>):</span><br><span class="line">    x = a / fucksisu2</span><br><span class="line">    rel = math.fabs(x)</span><br><span class="line">    y = (<span class="number">2.71052</span> + <span class="number">1.5</span> - <span class="number">0.5</span> * rel - <span class="number">1.35526</span> * math.sqrt(<span class="number">4</span> - (rel - <span class="number">1</span>) ** <span class="number">2</span>)) * math.sqrt(</span><br><span class="line">        math.fabs(rel - <span class="number">1</span>) / (rel - <span class="number">1</span>))</span><br><span class="line">    fucksisu1.goto(a, y * fucksisu2)</span><br><span class="line">fucksisu1.goto(-<span class="number">1</span> * fucksisu2, <span class="number">3</span> * fucksisu2)</span><br><span class="line">fucksisu1.goto(<span class="built_in">int</span>(-<span class="number">0.5</span> * fucksisu2), <span class="built_in">int</span>(<span class="number">2.2</span> * fucksisu2))</span><br><span class="line">fucksisu1.goto(<span class="built_in">int</span>(<span class="number">0.5</span> * fucksisu2), <span class="built_in">int</span>(<span class="number">2.2</span> * fucksisu2))</span><br><span class="line">fucksisu1.goto(<span class="number">1</span> * fucksisu2, <span class="number">3</span> * fucksisu2)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> * fucksisu2 + <span class="number">1</span>, <span class="number">3</span> * fucksisu2 + <span class="number">1</span>, <span class="number">1</span>):</span><br><span class="line">    x = a / fucksisu2</span><br><span class="line">    rel = math.fabs(x)</span><br><span class="line">    y = (<span class="number">2.71052</span> + <span class="number">1.5</span> - <span class="number">0.5</span> * rel - <span class="number">1.35526</span> * math.sqrt(<span class="number">4</span> - (rel - <span class="number">1</span>) ** <span class="number">2</span>)) * math.sqrt(</span><br><span class="line">        math.fabs(rel - <span class="number">1</span>) / (rel - <span class="number">1</span>))</span><br><span class="line">    fucksisu1.goto(a, y * fucksisu2)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span> * fucksisu2 + <span class="number">1</span>, <span class="number">7</span> * fucksisu2 + <span class="number">1</span>, <span class="number">1</span>):</span><br><span class="line">    x = a / fucksisu2</span><br><span class="line">    rel = math.fabs(x)</span><br><span class="line">    y = <span class="number">1.5</span> * math.sqrt((-math.fabs(rel - <span class="number">1</span>)) * math.fabs(<span class="number">3</span> - rel) / ((rel - <span class="number">1</span>) * (<span class="number">3</span> - rel))) * (</span><br><span class="line">                <span class="number">1</span> + math.fabs(rel - <span class="number">3</span>) / (rel - <span class="number">3</span>)) * math.sqrt(<span class="number">1</span> - (x / <span class="number">7</span>) ** <span class="number">2</span>) + (</span><br><span class="line">                    <span class="number">4.5</span> + <span class="number">0.75</span> * (math.fabs(x - <span class="number">0.5</span>) + math.fabs(x + <span class="number">0.5</span>)) - <span class="number">2.75</span> * (</span><br><span class="line">                        math.fabs(x - <span class="number">0.75</span>) + math.fabs(x + <span class="number">0.75</span>))) * (<span class="number">1</span> + math.fabs(<span class="number">1</span> - rel) / (<span class="number">1</span> - rel))</span><br><span class="line">    fucksisu1.goto(a, y * fucksisu2)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span> * fucksisu2, <span class="number">4</span> * fucksisu2, -<span class="number">1</span>):</span><br><span class="line">    x = a / fucksisu2</span><br><span class="line">    rel = math.fabs(x)</span><br><span class="line">    y = (-<span class="number">3</span>) * math.sqrt(<span class="number">1</span> - (x / <span class="number">7</span>) ** <span class="number">2</span>) * math.sqrt(math.fabs(rel - <span class="number">4</span>) / (rel - <span class="number">4</span>))</span><br><span class="line">    fucksisu1.goto(a, y * fucksisu2)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span> * fucksisu2, -<span class="number">4</span> * fucksisu2, -<span class="number">1</span>):</span><br><span class="line">    x = a / fucksisu2</span><br><span class="line">    rel = math.fabs(x)</span><br><span class="line">    y = math.fabs(x / <span class="number">2</span>) - <span class="number">0.0913722</span> * x ** <span class="number">2</span> - <span class="number">3</span> + math.sqrt(<span class="number">1</span> - (math.fabs(rel - <span class="number">2</span>) - <span class="number">1</span>) ** <span class="number">2</span>)</span><br><span class="line">    fucksisu1.goto(a, y * fucksisu2)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">4</span> * fucksisu2 - <span class="number">1</span>, -<span class="number">7</span> * fucksisu2 - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    x = a / fucksisu2</span><br><span class="line">    rel = math.fabs(x)</span><br><span class="line">    y = (-<span class="number">3</span>) * math.sqrt(<span class="number">1</span> - (x / <span class="number">7</span>) ** <span class="number">2</span>) * math.sqrt(math.fabs(rel - <span class="number">4</span>) / (rel - <span class="number">4</span>))</span><br><span class="line">    fucksisu1.goto(a, y * fucksisu2)</span><br><span class="line">fucksisu1.penup()</span><br><span class="line">fucksisu1.goto(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Data Science Math Skills</title>
      <link href="/Data-Science-Math-Skills/"/>
      <url>/Data-Science-Math-Skills/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Data Science Math Skills course provided by DUKE UNIVERSITY is designed to teach the vocabulary, notation, concepts, and algebra rules that all data scientists must know before moving on to more advanced material. The following are the notes I took during this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Coursera-DSMS.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><h4 id="What-is-a-set"><a href="#What-is-a-set" class="headerlink" title="What is a set?"></a>What is a set?</h4><ul><li>A set is made up of elements.</li></ul><h4 id="Cardinality"><a href="#Cardinality" class="headerlink" title="Cardinality"></a>Cardinality</h4><ul><li><p>The cardinality (size) of a set is the number of elements in it.</p></li><li><p>$|A| = 4$ (there are 4 elements in A, so the cardinality is 4)</p></li></ul><h4 id="Intersections"><a href="#Intersections" class="headerlink" title="Intersections"></a>Intersections</h4><ul><li><p>The intersection is defined as elements that are in both sets. Symbol $∩$: “intersects” (and)</p></li><li><p>$A ∩ B = {x : x ∈ A and x ∈ B}$</p></li><li><p>If there are no elements in common, the answer is the empty set ∅. The cardinality of the empty set $|∅| = 0$</p></li></ul><h4 id="Unions"><a href="#Unions" class="headerlink" title="Unions"></a>Unions</h4><ul><li><p>The union is defined as elements that are in either set. Symbol ∪: “union” (or)</p></li><li><p>$A ∪ B = {x ∈ A or x ∈ B}$</p></li></ul><h4 id="Visualizing-sets"><a href="#Visualizing-sets" class="headerlink" title="Visualizing sets"></a>Visualizing sets</h4><ul><li>Venn diagrams</li></ul><h4 id="Inclusion-exclusion-formula"><a href="#Inclusion-exclusion-formula" class="headerlink" title="Inclusion-exclusion formula"></a>Inclusion-exclusion formula</h4><ul><li>Inclusion-exclusion formula: $|A ∪ B| = |A| + |B| − |A ∩ B|$</li></ul><h3 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h3><h4 id="Integers-and-rational-numbers"><a href="#Integers-and-rational-numbers" class="headerlink" title="Integers and rational numbers"></a>Integers and rational numbers</h4><ul><li>Some real numbers terminate, and some do not. The number π = 3.14159… is irrational, it does not repeat after the decimal point.</li></ul><h4 id="Absolute-value"><a href="#Absolute-value" class="headerlink" title="Absolute value"></a>Absolute value</h4><ul><li>The absolute value of a number x, |x|, is the distance from x to 0.</li></ul><h4 id="Intervals-and-Interval-Notation"><a href="#Intervals-and-Interval-Notation" class="headerlink" title="Intervals and Interval Notation"></a>Intervals and Interval Notation</h4><ul><li><p>Closed intervals $[2, 3.1]$</p></li><li><p>Open intervals $(5, 8)$</p></li><li><p>Half-open intervals $(2, 3], [20, 20.3)$</p></li></ul><h3 id="Sigma-Notation"><a href="#Sigma-Notation" class="headerlink" title="Sigma Notation"></a>Sigma Notation</h3><h4 id="Sigma-notation-Σ"><a href="#Sigma-notation-Σ" class="headerlink" title="Sigma notation (Σ)"></a>Sigma notation (Σ)</h4><ul><li><p>distributive property: $a(b + c) = ab + ac$</p></li><li><p>commutative property: $a + b = b + a$</p></li></ul><h3 id="Cartesian-Plane"><a href="#Cartesian-Plane" class="headerlink" title="Cartesian Plane"></a>Cartesian Plane</h3><h4 id="Axes-and-quadrants"><a href="#Axes-and-quadrants" class="headerlink" title="Axes and quadrants"></a>Axes and quadrants</h4><ul><li>X−axis</li><li>Y−axis</li><li>first quadrant</li><li>second quadrant</li><li>third quadrant</li><li>fourth quadrant</li></ul><h4 id="Pythagorean-theorem"><a href="#Pythagorean-theorem" class="headerlink" title="Pythagorean theorem"></a>Pythagorean theorem</h4><h4 id="Derivation-using-point-slope-form"><a href="#Derivation-using-point-slope-form" class="headerlink" title="Derivation using point-slope form"></a>Derivation using point-slope form</h4><h4 id="Slope-intercept-form"><a href="#Slope-intercept-form" class="headerlink" title="Slope-intercept form"></a>Slope-intercept form</h4><ul><li>If L has slope m, and hits the y-axis at (0, b), then y = mx + b is an equation for L, where m is the slope and b is the y-intercept.</li></ul><h4 id="Point-Slope-Formula-for-Lines"><a href="#Point-Slope-Formula-for-Lines" class="headerlink" title="Point-Slope Formula for Lines"></a>Point-Slope Formula for Lines</h4><ul><li><p>$y-y<em>{0}=m\left( x-x</em>{0}\right)$ Point-slope form</p></li><li><p>$y=mx+b$ Slope-intercept form</p></li></ul><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><ul><li>f : A → B</li></ul><h3 id="Tangent-Lines"><a href="#Tangent-Lines" class="headerlink" title="Tangent Lines"></a>Tangent Lines</h3><h4 id="The-Slope-of-a-Graph-at-a-Point"><a href="#The-Slope-of-a-Graph-at-a-Point" class="headerlink" title="The Slope of a Graph at a Point"></a>The Slope of a Graph at a Point</h4><ul><li>The slope of the tangent line gives the instantaneous rate of change. This is also called the derivative of the function at that point, or f(a).</li></ul><h4 id="The-Derivative-Function"><a href="#The-Derivative-Function" class="headerlink" title="The Derivative Function"></a>The Derivative Function</h4><ul><li>Derivative formula: $\lim _{n\rightarrow 0}\dfrac{f\left( a+h\right) -f\left( a\right) }{h}$</li></ul><h3 id="Fast-Growth-Slow-Growth"><a href="#Fast-Growth-Slow-Growth" class="headerlink" title="Fast Growth, Slow Growth"></a>Fast Growth, Slow Growth</h3><h4 id="Integer-Exponents"><a href="#Integer-Exponents" class="headerlink" title="Integer Exponents"></a>Integer Exponents</h4><ol><li><p>Multiplication rule: $x^{n}x^{m}=x^{m+n}$</p></li><li><p>Power to a power: $x^{n^{m}}=x^{nm}$</p></li><li><p>Product to a power: $\left( x\cdot y\right) ^{n}=x^{n}\cdot y^{n}$</p></li><li><p>Fraction to a power: $\left( \dfrac{x}{y}\right) ^{n}=\dfrac{x^{n}}{y^{n}}$</p></li><li><p>Division and negative powers</p></li></ol><h4 id="How-Logarithms-and-Exponents-Are-Related"><a href="#How-Logarithms-and-Exponents-Are-Related" class="headerlink" title="How Logarithms and Exponents Are Related"></a>How Logarithms and Exponents Are Related</h4><ul><li><p>$b^{x}=N$ “exponential form”</p></li><li><p>$x=\log _{b}N$ “logarithmic form”</p></li></ul><ol><li><p>Product rule: $\log(xy) = \log(x) + \log(y)$</p></li><li><p>Quotient rule: $\log ( \dfrac{x}{y}) = \log(x) − \log(y)$</p></li><li><p>Power and root rule: $\log \left( x^{n}\right) =nlog\left( x\right)$</p></li></ol><h3 id="Basic-Probability-Definitions"><a href="#Basic-Probability-Definitions" class="headerlink" title="Basic Probability Definitions"></a>Basic Probability Definitions</h3><ul><li>probability—the degree of belief in the truth or falsity of a statement</li><li>Range of uncertainty from 0 to 1</li><li>P(x) probability of x</li><li>∼x negation of statement x</li><li>joint probability—probability that two separate events with separate probability distributions are both true.</li><li>P(A and B) is written P(A, B), and read “the joint probability of A and B” or “the probability that A is true and B is true.”</li></ul><h3 id="Problem-Solving-Methods"><a href="#Problem-Solving-Methods" class="headerlink" title="Problem Solving Methods"></a>Problem Solving Methods</h3><h4 id="Permutations-and-Combinations"><a href="#Permutations-and-Combinations" class="headerlink" title="Permutations and Combinations"></a>Permutations and Combinations</h4><ul><li>permutation—order matters, $\dfrac{n!}{\left( n-m\right) !}$</li><li>combination—order does not matter, n! / (m! * (n-m)!)</li></ul><h4 id="Using-Factorial-and-“M-Choose-N”"><a href="#Using-Factorial-and-“M-Choose-N”" class="headerlink" title="Using Factorial and “M Choose N”"></a>Using Factorial and “M Choose N”</h4><ul><li>(m n) = m! / ((m − n)! · n!)</li></ul><h4 id="The-Sum-Rule-Conditional-Probability-and-the-Product-Rule"><a href="#The-Sum-Rule-Conditional-Probability-and-the-Product-Rule" class="headerlink" title="The Sum Rule, Conditional Probability, and the Product Rule"></a>The Sum Rule, Conditional Probability, and the Product Rule</h4><ul><li>P(A) = P(A, B1) + P(A, B2) + … + P(A, Bn)</li><li>P(A | B) = (relevant outcomes) / (total outcomes remaining in universe, when B is true)</li><li>P(A | B) = P(A, B) / P(B)</li></ul><h3 id="Bayes’-Theorem"><a href="#Bayes’-Theorem" class="headerlink" title="Bayes’ Theorem"></a>Bayes’ Theorem</h3><ul><li>P(A | B) = P(B | A) * P(A) / P(B)</li><li>Technical vocabulary of Bayesian inverse probability: posterior probability = likelihood * prior probability / marginal probability<ul><li>posterior probability—probability after new data is observed</li><li>prior probability—probability before any data is observed or before new data is observed</li><li>likelihood—standard forward probability of data given parameters</li><li>marginal probability—probability of the data</li></ul></li></ul><h4 id="The-Binomial-Theorem-and-Bayes’-Theorem"><a href="#The-Binomial-Theorem-and-Bayes’-Theorem" class="headerlink" title="The Binomial Theorem and Bayes’ Theorem"></a>The Binomial Theorem and Bayes’ Theorem</h4><ul><li>Binomial theorem used when there are two possible outcomes—a success or a non-success, for example, flipping a coin—heads are a success, binary outcome.</li><li>Not limited to fair coins, where the probability of success is 0.5. Probability can be any value &gt; 0 and &lt; 1.</li><li>Probability of s successes in n trials, when probability of 1 success is p: (n s) <em> p^s </em> (1 − p)^(n−s)<ul><li>where n is the number of independent trials (with replacement), s is the number of successes,and p is the probability of one success</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 慕课MOOC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python for everybody</title>
      <link href="/Python-for-Everybody/"/>
      <url>/Python-for-Everybody/</url>
      
        <content type="html"><![CDATA[<blockquote><p>The Python for Everybody Specialization provided by UNIVERSITY OF MICHIGAN introduces fundamental programming concepts including data structures, networked application program interfaces, and databases, using the Python programming language. Python for Everybody is a completely open-source course, you can find all the notes and textbooks on its official <a href="https://www.py4e.com/">website</a>, so this note will only contain my solution to all post-lesson exercises in this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/Coursera-py4e.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h4><p>Write a program that uses a <strong>print</strong> statement to say ‘hello world’ as shown in ‘Desired Output’.<br><strong>Desired Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Chapter-2"><a href="#Chapter-2" class="headerlink" title="Chapter 2"></a>Chapter 2</h3><h4 id="Question-1-1"><a href="#Question-1-1" class="headerlink" title="Question 1"></a>Question 1</h4><p>Write a program to prompt the user for hours and rate per hour using input to compute gross pay. Use 35 hours and a rate of 2.75 per hour to test the program (the pay should be 96.25). You should use <strong>input</strong> to read a string and <strong>float()</strong> to convert the string to a number. Do not worry about error checking or bad user data.<br><strong>Desired Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pay: 96.25</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hrs = input(&quot;Enter Hours: &quot;)</span><br><span class="line">rat = input(&quot;Enter Rates: &quot;)</span><br><span class="line">pay = float(hrs) * float(rat)</span><br><span class="line">print(&quot;Pay: &quot; + str(pay))</span><br></pre></td></tr></table></figure><h3 id="Chapter-3"><a href="#Chapter-3" class="headerlink" title="Chapter 3"></a>Chapter 3</h3><h4 id="Question-1-2"><a href="#Question-1-2" class="headerlink" title="Question 1"></a>Question 1</h4><p>Write a program to prompt the user for hours and rate per hour using input to compute gross pay. Pay the hourly rate for the hours up to 40 and 1.5 times the hourly rate for all hours worked above 40 hours. Use 45 hours and a rate of 10.50 per hour to test the program (the pay should be 498.75). You should use <strong>input</strong> to read a string and <strong>float()</strong> to convert the string to a number. Do not worry about error checking the user input - assume the user types numbers properly.<br><strong>Desired Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">498.75</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hrs = input(&quot;Enter Hours:&quot;)</span><br><span class="line">h = float(hrs)</span><br><span class="line">rat = input(&quot;Enter Rates:&quot;)</span><br><span class="line">r = float(rat)</span><br><span class="line">if h &lt;=40:</span><br><span class="line">    pay = h * r</span><br><span class="line">else:</span><br><span class="line">    pay = 40 * r + (h - 40) * r * 1.5</span><br><span class="line">print(str(pay))</span><br></pre></td></tr></table></figure><h4 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h4><p>Write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error. If the score is between 0.0 and 1.0, print a grade using the following table:<br>Score Grade<br>>= 0.9 A<br>>= 0.8 B<br>>= 0.7 C<br>>= 0.6 D<br>&lt; 0.6 F<br>If the user enters a value out of range, print a suitable error message and exit. For the test, enter a score of 0.85.<br><strong>Desired Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">score = input(&quot;Enter Score: &quot;)</span><br><span class="line">sco = float(score)</span><br><span class="line">if 0.0 &lt;= sco &lt;= 1.0:</span><br><span class="line">    if sco &gt;= 0.9:</span><br><span class="line">        grade = &quot;A&quot;</span><br><span class="line">    elif sco &gt;= 0.8:</span><br><span class="line">        grade = &quot;B&quot;</span><br><span class="line">    elif sco &gt;= 0.7:</span><br><span class="line">        grade = &quot;C&quot;</span><br><span class="line">    elif sco &gt;= 0.6:</span><br><span class="line">        grade = &quot;D&quot;</span><br><span class="line">    else:</span><br><span class="line">        grade = &quot;F&quot;</span><br><span class="line">    print(grade)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;error&quot;)</span><br></pre></td></tr></table></figure><h3 id="Chapter-4"><a href="#Chapter-4" class="headerlink" title="Chapter 4"></a>Chapter 4</h3><h4 id="Question-1-3"><a href="#Question-1-3" class="headerlink" title="Question 1"></a>Question 1</h4><p>Write a program to prompt the user for hours and rate per hour using input to compute gross pay. Pay should be the normal rate for hours up to 40 and time-and-a-half for the hourly rate for all hours worked above 40 hours. Put the logic to do the computation of pay in a function called <strong>computepay()</strong> and use the function to do the computation. The function should return a value. Use 45 hours and a rate of 10.50 per hour to test the program (the pay should be 498.75). You should use <strong>input</strong> to read a string and <strong>float()</strong> to convert the string to a number. Do not worry about error checking the user input unless you want to - you can assume the user types numbers properly. Do not name your variable sum or use the sum() function.<br><strong>Desired Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pay 498.75</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def computepay(h,r):</span><br><span class="line">    if h &lt;= 40:</span><br><span class="line">        p = h * r</span><br><span class="line">    else:</span><br><span class="line">        p = 40 * r + (h - 40) * 1.5 * r</span><br><span class="line">    return p</span><br><span class="line">hrs = input(&quot;Enter Hours:&quot;)</span><br><span class="line">ho = float(hrs)</span><br><span class="line">rat = input(&quot;Enter Rates:&quot;)</span><br><span class="line">ro = float(rat)</span><br><span class="line">p = computepay(ho,ro)</span><br><span class="line">print(&quot;Pay&quot;,p)</span><br></pre></td></tr></table></figure><h3 id="Chapter-5"><a href="#Chapter-5" class="headerlink" title="Chapter 5"></a>Chapter 5</h3><h4 id="Question-1-4"><a href="#Question-1-4" class="headerlink" title="Question 1"></a>Question 1</h4><p>Write a program that repeatedly prompts a user for integer numbers until the user enters ‘done’. Once ‘done’ is entered, print out the largest and smallest of the numbers. If the user enters anything other than a valid number catch it with a try/except and put out an appropriate message and ignore the number. Enter 7, 2, bob, 10, and 4 and match the output below.<br><strong>Desired Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Invalid input</span><br><span class="line">Maximum is 10</span><br><span class="line">Minimum is 2</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">largest = None</span><br><span class="line">smallest = None</span><br><span class="line">shuzi = []</span><br><span class="line">while True:</span><br><span class="line">    num = input(&quot;Enter a number: &quot;)</span><br><span class="line">    if num == &quot;done&quot; : break</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            numm = int(num)</span><br><span class="line">            shuzi.append(numm)</span><br><span class="line">        except:</span><br><span class="line">            print(&quot;Invalid input&quot;)</span><br><span class="line">            continue</span><br><span class="line">largest = max(shuzi)</span><br><span class="line">smallest = min(shuzi)</span><br><span class="line">print(&quot;Maximum is&quot;, largest)</span><br><span class="line">print(&quot;Minimum is&quot;, smallest)</span><br></pre></td></tr></table></figure><h3 id="Chapter-6"><a href="#Chapter-6" class="headerlink" title="Chapter 6"></a>Chapter 6</h3><h4 id="Question-1-5"><a href="#Question-1-5" class="headerlink" title="Question 1"></a>Question 1</h4><p>Write code using find() and string slicing (see section 6.10) to extract the number at the end of the line below. Convert the extracted value to a floating point number and print it out.<br><strong>Desired Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.8475</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = &quot;X-DSPAM-Confidence:    0.8475&quot;;</span><br><span class="line">shuziqian = text.find(&#x27;:&#x27;)</span><br><span class="line">number = float(text[shuziqian+1:])</span><br><span class="line">print(number)</span><br></pre></td></tr></table></figure><h3 id="Chapter-7"><a href="#Chapter-7" class="headerlink" title="Chapter 7"></a>Chapter 7</h3><h4 id="Question-1-6"><a href="#Question-1-6" class="headerlink" title="Question 1"></a>Question 1</h4><p>Write a program that prompts for a file name, then opens that file and reads through the file, looking for lines of the form:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-DSPAM-Confidence:    0.8475</span><br></pre></td></tr></table></figure><p>Count these lines and extract the floating point values from each of the lines and compute the average of those values and produce an output as shown below. Do not use the sum() function or a variable named sum in your solution.<br>You can download the sample data at <a href="https://www.py4e.com/code3/mbox-short.txt">http://www.py4e.com/code3/mbox-short.txt</a> when you are testing below enter <strong>mbox-short.txt</strong> as the file name.<br><strong>Desired Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Average spam confidence: 0.750718518519</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Use the file name mbox-short.txt as the file name</span><br><span class="line">fname = input(&quot;Enter file name: &quot;)</span><br><span class="line">fh = open(fname)</span><br><span class="line">value = 0</span><br><span class="line">count = 0</span><br><span class="line">for line in fh:</span><br><span class="line">    if not line.startswith(&quot;X-DSPAM-Confidence:&quot;) :</span><br><span class="line">        continue</span><br><span class="line">    shuziqian = line.find(&#x27;:&#x27;)+1</span><br><span class="line">    value = float(line[shuziqian:]) + value</span><br><span class="line">    count = count + 1</span><br><span class="line">print(&quot;Average spam confidence:&quot;,value / count)</span><br></pre></td></tr></table></figure><h3 id="Chapter-8"><a href="#Chapter-8" class="headerlink" title="Chapter 8"></a>Chapter 8</h3><h4 id="Question-1-7"><a href="#Question-1-7" class="headerlink" title="Question 1"></a>Question 1</h4><p>Open the file <strong>romeo.txt</strong> and read it line by line. For each line, split the line into a list of words using the <strong>split()</strong> method. The program should build a list of words. For each word on each line check to see if the word is already in the list and if not append it to the list. When the program completes, sort and print the resulting words in alphabetical order.<br>You can download the sample data at <a href="https://www.py4e.com/code3/romeo.txt">http://www.py4e.com/code3/romeo.txt</a><br><strong>Desired Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;Arise&#x27;, &#x27;But&#x27;, &#x27;It&#x27;, &#x27;Juliet&#x27;, &#x27;Who&#x27;, &#x27;already&#x27;, &#x27;and&#x27;, &#x27;breaks&#x27;, &#x27;east&#x27;, &#x27;envious&#x27;, &#x27;fair&#x27;, &#x27;grief&#x27;, &#x27;is&#x27;, &#x27;kill&#x27;, &#x27;light&#x27;, &#x27;moon&#x27;, &#x27;pale&#x27;, &#x27;sick&#x27;, &#x27;soft&#x27;, &#x27;sun&#x27;, &#x27;the&#x27;, &#x27;through&#x27;, &#x27;what&#x27;, &#x27;window&#x27;, &#x27;with&#x27;, &#x27;yonder&#x27;]</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fname = input(&quot;Enter file name: &quot;)</span><br><span class="line">fh = open(fname)</span><br><span class="line">lst = list()</span><br><span class="line">for line in fh:</span><br><span class="line">    line = line.strip()</span><br><span class="line">    words = line.split()</span><br><span class="line">    for word in words:</span><br><span class="line">        if word not in lst:</span><br><span class="line">            lst.append(word)</span><br><span class="line">print(sorted(lst))</span><br></pre></td></tr></table></figure><h4 id="Question-2-1"><a href="#Question-2-1" class="headerlink" title="Question 2"></a>Question 2</h4><p>Open the file <strong>mbox-short.txt</strong> and read it line by line. When you find a line that starts with ‘From ‘ like the following line:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008</span><br></pre></td></tr></table></figure><p>You will parse the From line using split() and print out the second word in the line (i.e. the entire address of the person who sent the message). Then print out a count at the end.<br><strong>Hint:</strong> make sure not to include the lines that start with ‘From:’.<br>You can download the sample data at <a href="https://www.py4e.com/code3/mbox-short.txt">http://www.py4e.com/code3/mbox-short.txt</a><br><strong>Desired Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">stephen.marquard@uct.ac.za</span><br><span class="line">louis@media.berkeley.edu</span><br><span class="line">zqian@umich.edu</span><br><span class="line">rjlowe@iupui.edu</span><br><span class="line">zqian@umich.edu</span><br><span class="line">rjlowe@iupui.edu</span><br><span class="line">cwen@iupui.edu</span><br><span class="line">cwen@iupui.edu</span><br><span class="line">gsilver@umich.edu</span><br><span class="line">gsilver@umich.edu</span><br><span class="line">zqian@umich.edu</span><br><span class="line">gsilver@umich.edu</span><br><span class="line">wagnermr@iupui.edu</span><br><span class="line">zqian@umich.edu</span><br><span class="line">antranig@caret.cam.ac.uk</span><br><span class="line">gopal.ramasammycook@gmail.com</span><br><span class="line">david.horwitz@uct.ac.za</span><br><span class="line">david.horwitz@uct.ac.za</span><br><span class="line">david.horwitz@uct.ac.za</span><br><span class="line">david.horwitz@uct.ac.za</span><br><span class="line">stephen.marquard@uct.ac.za</span><br><span class="line">louis@media.berkeley.edu</span><br><span class="line">louis@media.berkeley.edu</span><br><span class="line">ray@media.berkeley.edu</span><br><span class="line">cwen@iupui.edu</span><br><span class="line">cwen@iupui.edu</span><br><span class="line">cwen@iupui.edu</span><br><span class="line">There were 27 lines in the file with From as the first word</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fname = input(&quot;Enter file name: &quot;)</span><br><span class="line">if len(fname) &lt; 1 : fname = &quot;mbox-short.txt&quot;</span><br><span class="line">fh = open(fname)</span><br><span class="line">count = 0</span><br><span class="line">for line in fh:</span><br><span class="line">    line = line.strip()</span><br><span class="line">    if not line.startswith(&quot;From &quot;):</span><br><span class="line">        continue</span><br><span class="line">    words = line.split()</span><br><span class="line">    print(words[1])</span><br><span class="line">    count = count + 1</span><br><span class="line">print(&quot;There were&quot;, count, &quot;lines in the file with From as the first word&quot;)</span><br></pre></td></tr></table></figure><h3 id="Chapter-9"><a href="#Chapter-9" class="headerlink" title="Chapter 9"></a>Chapter 9</h3><h4 id="Question-1-8"><a href="#Question-1-8" class="headerlink" title="Question 1"></a>Question 1</h4><p>Write a program to read through the <strong>mbox-short.txt</strong> and figure out who has sent the greatest number of mail messages. The program looks for ‘From ‘ lines and takes the second word of those lines as the person who sent the mail. The program creates a Python dictionary that maps the sender’s mail address to a count of the number of times they appear in the file. After the dictionary is produced, the program reads through the dictionary using a maximum loop to find the most prolific committer.<br><strong>Desired Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cwen@iupui.edu 5</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fname = input(&quot;Enter file name: &quot;)</span><br><span class="line">if len(fname) &lt; 1 : fname = &quot;mbox-short.txt&quot;</span><br><span class="line"></span><br><span class="line">fh = open(fname)</span><br><span class="line">count_dict = dict()</span><br><span class="line"></span><br><span class="line">for line in fh:</span><br><span class="line">    line = line.strip()</span><br><span class="line">    if not line.startswith(&#x27;From &#x27;):</span><br><span class="line">        continue</span><br><span class="line">    words = line.split()</span><br><span class="line">    count_dict[words[1]] = 1 + count_dict.get(words[1],0)</span><br><span class="line">sort_list = sorted([(v,k) for k,v in count_dict.items()],reverse=True)</span><br><span class="line">print(sort_list[0][1],sort_list[0][0])</span><br></pre></td></tr></table></figure><h3 id="Chapter-10"><a href="#Chapter-10" class="headerlink" title="Chapter 10"></a>Chapter 10</h3><h4 id="Question-1-9"><a href="#Question-1-9" class="headerlink" title="Question 1"></a>Question 1</h4><p>Write a program to read through the <strong>mbox-short.txt</strong> and figure out the distribution by hour of the day for each of the messages. You can pull the hour out from the ‘From ‘ line by finding the time and then splitting the string a second time using a colon.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008</span><br></pre></td></tr></table></figure><p>Once you have accumulated the counts for each hour, print out the counts, sorted by hour as shown below.<br><strong>Desired Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">04 3</span><br><span class="line">06 1</span><br><span class="line">07 1</span><br><span class="line">09 2</span><br><span class="line">10 3</span><br><span class="line">11 6</span><br><span class="line">14 1</span><br><span class="line">15 2</span><br><span class="line">16 4</span><br><span class="line">17 2</span><br><span class="line">18 1</span><br><span class="line">19 1</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fname = input(&quot;Enter file name: &quot;)</span><br><span class="line">if len(fname) &lt; 1 : fname = &quot;mbox-short.txt&quot;</span><br><span class="line">fh = open(fname)</span><br><span class="line">count_dict = dict()</span><br><span class="line">for line in fh:</span><br><span class="line">    line = line.strip()</span><br><span class="line">    if not line.startswith(&#x27;From &#x27;):</span><br><span class="line">        continue</span><br><span class="line">    words = line.split()</span><br><span class="line">    times = words[5].split(&#x27;:&#x27;)</span><br><span class="line">    hours = times[0]</span><br><span class="line">    count_dict[hours] = 1 + count_dict.get(hours,0)</span><br><span class="line">count_list = sorted([(k,v) for k,v in count_dict.items()])</span><br><span class="line">for k,v in count_list:</span><br><span class="line">    print(k,v)</span><br></pre></td></tr></table></figure><h3 id="Chapter-11"><a href="#Chapter-11" class="headerlink" title="Chapter 11"></a>Chapter 11</h3><h4 id="Question-1-10"><a href="#Question-1-10" class="headerlink" title="Question 1"></a>Question 1</h4><p><strong>Handling The Data</strong><br>The basic outline of this problem is to read the file, look for integers using the <strong>re.findall()</strong>, looking for a regular expression of <strong>‘[0-9]+’</strong> and then converting the extracted strings to integers and summing up the integers.<br><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">file = open(&#x27;C:/Users/dell/Desktop/regex_sum_501451.txt&#x27;, &#x27;r&#x27;)</span><br><span class="line">file_data = file.read()</span><br><span class="line">numbers_str = re.findall(&#x27;[0-9]+&#x27;, file_data)</span><br><span class="line">total = 0</span><br><span class="line">for number_str in numbers_str:</span><br><span class="line">    total = total + int(number_str)</span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure><h3 id="Chapter-12"><a href="#Chapter-12" class="headerlink" title="Chapter 12"></a>Chapter 12</h3><h4 id="Question-1-11"><a href="#Question-1-11" class="headerlink" title="Question 1"></a>Question 1</h4><p><strong>Exploring the HyperText Transport Protocol</strong><br>You are to retrieve the following document using the HTTP protocol in a way that you can examine the HTTP Response headers.</p><ul><li><a href="http://data.pr4e.org/intro-short.txt">http://data.pr4e.org/intro-short.txt</a><br>There are three ways that you might retrieve this web page and look at the response headers:</li><li><strong>Preferred:</strong> Modify the <a href="https://www.py4e.com/code3/socket1.py">socket1.py</a> program to retrieve the above URL and print out the headers and data. Make sure to <strong>change</strong> the code to retrieve the above URL - the values are different for each URL.</li><li>Open the URL in a web browser with a developer console or FireBug and manually examine the headers that are returned.</li><li>Use the <strong>telnet</strong> program as shown in lecture to retrieve the headers and content.<br><strong>Desired Output</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sun, 01 Oct 2017 05:25:59 GMT</span><br><span class="line">Server: Apache/2.4.7 (Ubuntu)</span><br><span class="line">Last-Modified: Sat, 13 May 2017 11:22:22 GMT</span><br><span class="line">ETag: “1d3-54f6609240717”</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 467</span><br><span class="line">Cache-Control: max-age=0, no-cache, no-store, must-revalidate</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Expires: Wed, 11 Jan 1984 05:00:00 GMT</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">mysock.connect((&#x27;data.pr4e.org&#x27;, 80))</span><br><span class="line">cmd = &#x27;GET http://data.pr4e.org/intro-short.txt HTTP/1.0\r\n\r\n&#x27;.encode()</span><br><span class="line">mysock.send(cmd)</span><br><span class="line">while True:</span><br><span class="line">    data = mysock.recv(512)</span><br><span class="line">    if (len(data) &lt; 1):</span><br><span class="line">        break</span><br><span class="line">    print(data.decode())</span><br><span class="line">mysock.close()</span><br></pre></td></tr></table></figure><h4 id="Question-2-2"><a href="#Question-2-2" class="headerlink" title="Question 2"></a>Question 2</h4><p><strong>Scraping Numbers from HTML using BeautifulSoup</strong> In this assignment you will write a Python program similar to <a href="https://www.py4e.com/code3/urllink2.py">http://www.py4e.com/code3/urllink2.py</a>. The program will use <strong>urllib</strong> to read the HTML from the data files below, and parse the data, extracting numbers and compute the sum of the numbers in the file.<br>We provide two files for this assignment. One is a sample file where we give you the sum for your testing and the other is the actual data you need to process for the assignment.</p><ul><li>Sample data: <a href="http://py4e-data.dr-chuck.net/comments_42.html">http://py4e-data.dr-chuck.net/comments_42.html</a> (Sum=2553)</li><li>Actual data: <a href="http://py4e-data.dr-chuck.net/comments_501453.html">http://py4e-data.dr-chuck.net/comments_501453.html</a> (Sum ends with 35)<br>You do not need to save these files to your folder since your program will read the data directly from the URL. <strong>Note:</strong> Each student will have a distinct data url for the assignment - so only use your own data url for analysis.<br><strong>Solution</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from urllib.request import urlopen</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import ssl</span><br><span class="line"># Ignore SSL certificate errors</span><br><span class="line">ctx = ssl.create_default_context()</span><br><span class="line">ctx.check_hostname = False</span><br><span class="line">ctx.verify_mode = ssl.CERT_NONE</span><br><span class="line">url = input(&#x27;Enter - &#x27;)</span><br><span class="line">html = urlopen(url, context=ctx).read()</span><br><span class="line"># html.parser is the HTML parser included in the standard Python 3 library.</span><br><span class="line"># information on other HTML parsers is here:</span><br><span class="line"># http://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser</span><br><span class="line">soup = BeautifulSoup(html, &quot;html.parser&quot;)</span><br><span class="line"># Retrieve all of the anchor tags</span><br><span class="line">tags = soup(&#x27;span&#x27;)</span><br><span class="line">total = 0</span><br><span class="line">for tag in tags:</span><br><span class="line">    # Look at the parts of a tag</span><br><span class="line">    total = total + int(tag.contents[0])</span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure><h4 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h4><p><strong>Following Links in Python</strong><br>In this assignment you will write a Python program that expands on <a href="https://www.py4e.com/code3/urllinks.py">http://www.py4e.com/code3/urllinks.py</a>. The program will use <strong>urllib</strong> to read the HTML from the data files below, extract the href= vaues from the anchor tags, scan for a tag that is in a particular position relative to the first name in the list, follow that link and repeat the process a number of times and report the last name you find.<br>We provide two files for this assignment. One is a sample file where we give you the name for your testing and the other is the actual data you need to process for the assignment</p><ul><li>Sample problem: Start at <a href="http://py4e-data.dr-chuck.net/known_by_Fikret.html">http://py4e-data.dr-chuck.net/known_by_Fikret.html</a><br>Find the link at position <strong>3</strong> (the first name is 1). Follow that link. Repeat this process <strong>4</strong> times. The answer is the last name that you retrieve.<br>Sequence of names: Fikret Montgomery Mhairade Butchi Anayah<br>Last name in sequence: Anayah</li><li>Actual problem: Start at: <a href="http://py4e-data.dr-chuck.net/known_by_Malaeka.html">http://py4e-data.dr-chuck.net/known_by_Malaeka.html</a><br>Find the link at position <strong>18</strong> (the first name is 1). Follow that link. Repeat this process <strong>7</strong> times. The answer is the last name that you retrieve.<br>Hint: The first character of the name of the last page that you will load is: K<br><strong>Solution</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  import urllib.request</span><br><span class="line">import urllib.parse</span><br><span class="line">import urllib.error</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import ssl</span><br><span class="line">def findUrl(url, position):</span><br><span class="line">    html = urllib.request.urlopen(url, context=ctx).read()</span><br><span class="line">    soup = BeautifulSoup(html, &#x27;html.parser&#x27;)</span><br><span class="line">    # Retrieve all of the anchor tags</span><br><span class="line">    tags = soup(&#x27;a&#x27;)</span><br><span class="line">    return tags[position].get(&#x27;href&#x27;, None)</span><br><span class="line"># Ignore SSL certificate errors</span><br><span class="line">ctx = ssl.create_default_context()</span><br><span class="line">ctx.check_hostname = False</span><br><span class="line">ctx.verify_mode = ssl.CERT_NONE</span><br><span class="line">count_str = input(&#x27;Enter count - &#x27;)</span><br><span class="line">count = int(count_str)</span><br><span class="line">position_str = input(&#x27;Enter position - &#x27;)</span><br><span class="line">position = int(position_str)-1</span><br><span class="line">for i in range(count):</span><br><span class="line">    if i == 0:</span><br><span class="line">        url_now = input(&#x27;Enter - &#x27;)</span><br><span class="line">        print(url_now)</span><br><span class="line">        url_now = findUrl(url_now, position)</span><br><span class="line">        print(url_now)</span><br><span class="line">    else:</span><br><span class="line">        url_now = findUrl(url_now, position)</span><br><span class="line">        print(url_now)</span><br></pre></td></tr></table></figure><h3 id="Chapter-13"><a href="#Chapter-13" class="headerlink" title="Chapter 13"></a>Chapter 13</h3><h4 id="Question-1-12"><a href="#Question-1-12" class="headerlink" title="Question 1"></a>Question 1</h4><p><strong>Extracting Data from XML</strong><br>In this assignment you will write a Python program somewhat similar to <a href="https://www.py4e.com/code3/geoxml.py">http://www.py4e.com/code3/geoxml.py</a>. The program will prompt for a URL, read the XML data from that URL using <strong>urllib</strong> and then parse and extract the comment counts from the XML data, compute the sum of the numbers in the file.<br>We provide two files for this assignment. One is a sample file where we give you the sum for your testing and the other is the actual data you need to process for the assignment.</p><ul><li>Sample data: <a href="http://py4e-data.dr-chuck.net/comments_42.xml">http://py4e-data.dr-chuck.net/comments_42.xml</a> (Sum=2553)</li><li>Actual data: <a href="http://py4e-data.dr-chuck.net/comments_501455.xml">http://py4e-data.dr-chuck.net/comments_501455.xml</a> (Sum ends with 78)<br>You do not need to save these files to your folder since your program will read the data directly from the URL. <strong>Note:</strong> Each student will have a distinct data url for the assignment - so only use your own data url for analysis.<br><strong>Solution</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import urllib.parse</span><br><span class="line">import urllib.error</span><br><span class="line">import xml.etree.ElementTree as ET</span><br><span class="line">url = &#x27;http://py4e-data.dr-chuck.net/comments_501455.xml&#x27;</span><br><span class="line">print(&#x27;Retrieving&#x27;, url)</span><br><span class="line">uh = urllib.request.urlopen(url)</span><br><span class="line">data = uh.read()</span><br><span class="line">print(&#x27;Retrieved&#x27;, len(data), &#x27;characters&#x27;)</span><br><span class="line">tree = ET.fromstring(data)</span><br><span class="line">comments_node = tree.findall(&#x27;comments&#x27;)</span><br><span class="line">comment_node = comments_node[0].findall(&#x27;comment&#x27;)</span><br><span class="line">total = 0</span><br><span class="line">for node in comment_node:</span><br><span class="line">    total = total + int(node.find(&#x27;count&#x27;).text)</span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure><h4 id="Question-2-3"><a href="#Question-2-3" class="headerlink" title="Question 2"></a>Question 2</h4><p><strong>Extracting Data from JSON</strong><br>In this assignment you will write a Python program somewhat similar to <a href="https://www.py4e.com/code3/json2.py">http://www.py4e.com/code3/json2.py</a>. The program will prompt for a URL, read the JSON data from that URL using <strong>urllib</strong> and then parse and extract the comment counts from the JSON data, compute the sum of the numbers in the file and enter the sum below:<br>We provide two files for this assignment. One is a sample file where we give you the sum for your testing and the other is the actual data you need to process for the assignment.</p><ul><li>Sample data: <a href="http://py4e-data.dr-chuck.net/comments_42.json">http://py4e-data.dr-chuck.net/comments_42.json</a> (Sum=2553)</li><li>Actual data: <a href="http://py4e-data.dr-chuck.net/comments_501456.json">http://py4e-data.dr-chuck.net/comments_501456.json</a> (Sum ends with 42)<br>You do not need to save these files to your folder since your program will read the data directly from the URL. <strong>Note:</strong> Each student will have a distinct data url for the assignment - so only use your own data url for analysis.<br><strong>Solution</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import urllib.parse</span><br><span class="line">import urllib.error</span><br><span class="line">import json</span><br><span class="line">url = &#x27;http://py4e-data.dr-chuck.net/comments_501456.json&#x27;</span><br><span class="line">print(&#x27;Retrieving&#x27;, url)</span><br><span class="line">uh = urllib.request.urlopen(url)</span><br><span class="line">data = uh.read()</span><br><span class="line">info = json.loads(data.decode())</span><br><span class="line">print(&#x27;User count:&#x27;, len(info))</span><br><span class="line">comments_dic = info[&#x27;comments&#x27;]</span><br><span class="line">total = 0</span><br><span class="line">for item in comments_dic:</span><br><span class="line">    total = total + int(item[&#x27;count&#x27;])</span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure><h4 id="Question-3-1"><a href="#Question-3-1" class="headerlink" title="Question 3"></a>Question 3</h4><p><strong>Calling a JSON API</strong><br>In this assignment you will write a Python program somewhat similar to <a href="https://www.py4e.com/code3/geojson.py">http://www.py4e.com/code3/geojson.py</a>. The program will prompt for a location, contact a web service and retrieve JSON for the web service and parse that data, and retrieve the first <strong>place_id</strong> from the JSON. A place ID is a textual identifier that uniquely identifies a place as within Google Maps.<br><strong>API End Points</strong><br>To complete this assignment, you should use this API endpoint that has a static subset of the Google Data:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://py4e-data.dr-chuck.net/json?</span><br></pre></td></tr></table></figure><p>This API uses the same parameter (address) as the Google API. This API also has no rate limit so you can test as often as you like. If you visit the URL with no parameters, you get “No address…” response.<br>To call the API, you need to include a <strong>key=</strong> parameter and provide the address that you are requesting as the <strong>address=</strong> parameter that is properly URL encoded using the <strong>urllib.parse.urlencode()</strong> function as shown in <a href="https://www.py4e.com/code3/geojson.py">http://www.py4e.com/code3/geojson.py</a><br>Make sure to check that your code is using the API endpoint is as shown above. You will get <em>different</em> results from the <strong>geojson</strong> and <strong>json</strong> endpoints so make sure you are using the same end point as this autograder is using.<br><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import urllib.parse</span><br><span class="line">import urllib.error</span><br><span class="line">import json</span><br><span class="line">import ssl</span><br><span class="line">api_key = False</span><br><span class="line"># If you have a Google Places API key, enter it here</span><br><span class="line"># api_key = &#x27;AIzaSy___IDByT70&#x27;</span><br><span class="line"># https://developers.google.com/maps/documentation/geocoding/intro</span><br><span class="line">if api_key is False:</span><br><span class="line">    api_key = 42</span><br><span class="line">    serviceurl = &#x27;http://py4e-data.dr-chuck.net/json?&#x27;</span><br><span class="line">else:</span><br><span class="line">    serviceurl = &#x27;https://maps.googleapis.com/maps/api/geocode/json?&#x27;</span><br><span class="line"># Ignore SSL certificate errors</span><br><span class="line">ctx = ssl.create_default_context()</span><br><span class="line">ctx.check_hostname = False</span><br><span class="line">ctx.verify_mode = ssl.CERT_NONE</span><br><span class="line">while True:</span><br><span class="line">    address = input(&#x27;Enter location: &#x27;)</span><br><span class="line">    if len(address) &lt; 1:</span><br><span class="line">        break</span><br><span class="line">    parms = dict()</span><br><span class="line">    parms[&#x27;address&#x27;] = address</span><br><span class="line">    if api_key is not False:</span><br><span class="line">        parms[&#x27;key&#x27;] = api_key</span><br><span class="line">    url = serviceurl + urllib.parse.urlencode(parms)</span><br><span class="line">    print(&#x27;Retrieving&#x27;, url)</span><br><span class="line">    uh = urllib.request.urlopen(url, context=ctx)</span><br><span class="line">    data = uh.read().decode()</span><br><span class="line">    print(&#x27;Retrieved&#x27;, len(data), &#x27;characters&#x27;)</span><br><span class="line">    try:</span><br><span class="line">        js = json.loads(data)</span><br><span class="line">    except:</span><br><span class="line">        js = None</span><br><span class="line">    if not js or &#x27;status&#x27; not in js or js[&#x27;status&#x27;] != &#x27;OK&#x27;:</span><br><span class="line">        print(&#x27;==== Failure To Retrieve ====&#x27;)</span><br><span class="line">        print(data)</span><br><span class="line">        continue</span><br><span class="line">    print(json.dumps(js, indent=4))</span><br><span class="line">    lat = js[&#x27;results&#x27;][0][&#x27;geometry&#x27;][&#x27;location&#x27;][&#x27;lat&#x27;]</span><br><span class="line">    lng = js[&#x27;results&#x27;][0][&#x27;geometry&#x27;][&#x27;location&#x27;][&#x27;lng&#x27;]</span><br><span class="line">    print(&#x27;lat&#x27;, lat, &#x27;lng&#x27;, lng)</span><br><span class="line">    location = js[&#x27;results&#x27;][0][&#x27;formatted_address&#x27;]</span><br><span class="line">    print(location)</span><br></pre></td></tr></table></figure><h3 id="Chapter-15"><a href="#Chapter-15" class="headerlink" title="Chapter 15"></a>Chapter 15</h3><h4 id="Question-1-13"><a href="#Question-1-13" class="headerlink" title="Question 1"></a>Question 1</h4><p>create a SQLITE database or use an existing database and create a table in the database called “Ages”:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Ages (</span><br><span class="line">  name VARCHAR(128),</span><br><span class="line">  age INTEGER</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Then make sure the table is empty by deleting any rows that you previously inserted, and insert these rows and only these rows with the following commands:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM Ages;</span><br><span class="line">INSERT INTO Ages (name, age) VALUES (&#x27;Muqadaas&#x27;, 29);</span><br><span class="line">INSERT INTO Ages (name, age) VALUES (&#x27;Sabine&#x27;, 13);</span><br><span class="line">INSERT INTO Ages (name, age) VALUES (&#x27;Brydon&#x27;, 35);</span><br><span class="line">INSERT INTO Ages (name, age) VALUES (&#x27;Jayla&#x27;, 39);</span><br></pre></td></tr></table></figure><p>Once the inserts are done, run the following SQL command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT hex(name || age) AS X FROM Ages ORDER BY X</span><br></pre></td></tr></table></figure><h4 id="Question-2-4"><a href="#Question-2-4" class="headerlink" title="Question 2"></a>Question 2</h4><p><strong>Counting Organizations</strong><br>This application will read the mailbox data (mbox.txt) and count the number of email messages per organization (i.e. domain name of the email address) using a database with the following schema to maintain the counts.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Counts (org TEXT, count INTEGER)</span><br></pre></td></tr></table></figure><p>When you have run the program on <strong>mbox.txt</strong> upload the resulting database file above for grading.<br>If you run the program multiple times in testing or with dfferent files, make sure to empty out the data before each run.<br>You can use this code as a starting point for your application: <a href="https://www.py4e.com/code3/emaildb.py">http://www.py4e.com/code3/emaildb.py</a>.<br>The data file for this application is the same as in previous assignments: <a href="https://www.py4e.com/code3/mbox.txt">http://www.py4e.com/code3/mbox.txt</a>.<br><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import sqlite3</span><br><span class="line">conn = sqlite3.connect(&#x27;emaildb2.sqlite&#x27;)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">cur.execute(&#x27;&#x27;&#x27;</span><br><span class="line">DROP TABLE IF EXISTS Counts&#x27;&#x27;&#x27;)</span><br><span class="line">cur.execute(&#x27;&#x27;&#x27;</span><br><span class="line">CREATE TABLE Counts (org TEXT, count INTEGER)&#x27;&#x27;&#x27;)</span><br><span class="line">fh = open(&#x27;C:/Users/dell/Desktop/mbox.txt&#x27;, &#x27;r&#x27;)</span><br><span class="line">list_1 = []</span><br><span class="line">for line in fh:</span><br><span class="line">    if not line.startswith(&#x27;From: &#x27;):</span><br><span class="line">        continue</span><br><span class="line">    pieces = line.split()</span><br><span class="line">    email = pieces[1]</span><br><span class="line">    dom = email.find(&#x27;@&#x27;)</span><br><span class="line">    org = email[dom+1:len(email)]</span><br><span class="line">    cur.execute(&#x27;SELECT count FROM Counts WHERE org = ? &#x27;, (org,))</span><br><span class="line">    row = cur.fetchone()</span><br><span class="line">    if row is None:</span><br><span class="line">        cur.execute(&#x27;&#x27;&#x27;INSERT INTO Counts (org, count)</span><br><span class="line">                VALUES (?, 1)&#x27;&#x27;&#x27;, (org,))</span><br><span class="line">    else:</span><br><span class="line">        cur.execute(&#x27;UPDATE Counts SET count = count + 1 WHERE org = ?&#x27;,</span><br><span class="line">                    (org,))</span><br><span class="line">conn.commit()</span><br><span class="line"># https://www.sqlite.org/lang_select.html</span><br><span class="line">sqlstr = &#x27;SELECT org, count FROM Counts ORDER BY count DESC LIMIT 10&#x27;</span><br><span class="line">for row in cur.execute(sqlstr):</span><br><span class="line">    print(str(row[0]), row[1])</span><br><span class="line">cur.close()</span><br></pre></td></tr></table></figure><h4 id="Question-3-2"><a href="#Question-3-2" class="headerlink" title="Question 3"></a>Question 3</h4><p><strong>Musical Track Database</strong><br>This application will read an iTunes export file in XML and produce a properly normalized database with this structure:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Artist (</span><br><span class="line">    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,</span><br><span class="line">    name    TEXT UNIQUE</span><br><span class="line">);</span><br><span class="line">CREATE TABLE Genre (</span><br><span class="line">    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,</span><br><span class="line">    name    TEXT UNIQUE</span><br><span class="line">);</span><br><span class="line">CREATE TABLE Album (</span><br><span class="line">    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,</span><br><span class="line">    artist_id  INTEGER,</span><br><span class="line">    title   TEXT UNIQUE</span><br><span class="line">);</span><br><span class="line">CREATE TABLE Track (</span><br><span class="line">    id  INTEGER NOT NULL PRIMARY KEY</span><br><span class="line">        AUTOINCREMENT UNIQUE,</span><br><span class="line">    title TEXT  UNIQUE,</span><br><span class="line">    album_id  INTEGER,</span><br><span class="line">    genre_id  INTEGER,</span><br><span class="line">    len INTEGER, rating INTEGER, count INTEGER</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>If you run the program multiple times in testing or with different files, make sure to empty out the data before each run.<br>You can use this code as a starting point for your application: <a href="https://www.py4e.com/code3/tracks.zip">http://www.py4e.com/code3/tracks.zip</a>. The ZIP file contains the <strong>Library.xml</strong> file to be used for this assignment. You can export your own tracks from iTunes and create a database, but for the database that you turn in for this assignment, only use the <strong>Library.xml</strong> data that is provided.<br>To grade this assignment, the program will run a query like this on your uploaded database and look for the data it expects to see:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT Track.title, Artist.name, Album.title, Genre.name</span><br><span class="line">    FROM Track JOIN Genre JOIN Album JOIN Artist</span><br><span class="line">    ON Track.genre_id = Genre.ID and Track.album_id = Album.id</span><br><span class="line">        AND Album.artist_id = Artist.id</span><br><span class="line">    ORDER BY Artist.name LIMIT 3</span><br></pre></td></tr></table></figure><p>The expected result of the modified query on your database is: (shown here as a simple HTML table with titles)<br><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">import xml.etree.ElementTree as ET</span><br><span class="line">import sqlite3</span><br><span class="line">conn = sqlite3.connect(&#x27;trackdb.sqlite&#x27;)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># Make some fresh tables using executescript()</span><br><span class="line">cur.executescript(&#x27;&#x27;&#x27;</span><br><span class="line">DROP TABLE IF EXISTS Artist;</span><br><span class="line">DROP TABLE IF EXISTS Album;</span><br><span class="line">DROP TABLE IF EXISTS Genre;</span><br><span class="line">DROP TABLE IF EXISTS Track;</span><br><span class="line">CREATE TABLE Artist (</span><br><span class="line">    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,</span><br><span class="line">    name    TEXT UNIQUE</span><br><span class="line">);</span><br><span class="line">CREATE TABLE Album (</span><br><span class="line">    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,</span><br><span class="line">    artist_id  INTEGER,</span><br><span class="line">    title   TEXT UNIQUE</span><br><span class="line">);</span><br><span class="line">CREATE TABLE Genre (</span><br><span class="line">    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,</span><br><span class="line">    name   TEXT UNIQUE</span><br><span class="line">);</span><br><span class="line">CREATE TABLE Track (</span><br><span class="line">    id  INTEGER NOT NULL PRIMARY KEY</span><br><span class="line">        AUTOINCREMENT UNIQUE,</span><br><span class="line">    title TEXT  UNIQUE,</span><br><span class="line">    album_id  INTEGER,</span><br><span class="line">    genre_id  INTEGER,</span><br><span class="line">    len INTEGER, rating INTEGER, count INTEGER</span><br><span class="line">);</span><br><span class="line">&#x27;&#x27;&#x27;)</span><br><span class="line">fname = input(&#x27;Enter file name: &#x27;)</span><br><span class="line">if (len(fname) &lt; 1):</span><br><span class="line">    fname = &#x27;Library.xml&#x27;</span><br><span class="line"># &lt;key&gt;Track ID&lt;/key&gt;&lt;integer&gt;369&lt;/integer&gt;</span><br><span class="line"># &lt;key&gt;Name&lt;/key&gt;&lt;string&gt;Another One Bites The Dust&lt;/string&gt;</span><br><span class="line"># &lt;key&gt;Artist&lt;/key&gt;&lt;string&gt;Queen&lt;/string&gt;</span><br><span class="line">def lookup(d, key):</span><br><span class="line">    found = False</span><br><span class="line">    for child in d:</span><br><span class="line">        if found:</span><br><span class="line">            return child.text</span><br><span class="line">        if child.tag == &#x27;key&#x27; and child.text == key:</span><br><span class="line">            found = True</span><br><span class="line">    return None</span><br><span class="line">stuff = ET.parse(fname)</span><br><span class="line">all = stuff.findall(&#x27;dict/dict/dict&#x27;)</span><br><span class="line">print(&#x27;Dict count:&#x27;, len(all))</span><br><span class="line">for entry in all:</span><br><span class="line">    if (lookup(entry, &#x27;Track ID&#x27;) is None):</span><br><span class="line">        continue</span><br><span class="line">    name = lookup(entry, &#x27;Name&#x27;)</span><br><span class="line">    artist = lookup(entry, &#x27;Artist&#x27;)</span><br><span class="line">    album = lookup(entry, &#x27;Album&#x27;)</span><br><span class="line">    genre = lookup(entry, &#x27;Genre&#x27;)</span><br><span class="line">    count = lookup(entry, &#x27;Play Count&#x27;)</span><br><span class="line">    rating = lookup(entry, &#x27;Rating&#x27;)</span><br><span class="line">    length = lookup(entry, &#x27;Total Time&#x27;)</span><br><span class="line">    if name is None or artist is None or album is None:</span><br><span class="line">        continue</span><br><span class="line">    print(name, artist, album, genre, count, rating, length)</span><br><span class="line">    cur.execute(&#x27;&#x27;&#x27;INSERT OR IGNORE INTO Artist (name)</span><br><span class="line">        VALUES ( ? )&#x27;&#x27;&#x27;, (artist, ))</span><br><span class="line">    cur.execute(&#x27;SELECT id FROM Artist WHERE name = ? &#x27;, (artist, ))</span><br><span class="line">    artist_id = cur.fetchone()[0]</span><br><span class="line">    cur.execute(&#x27;&#x27;&#x27;INSERT OR IGNORE INTO Album (title, artist_id)</span><br><span class="line">        VALUES ( ?, ? )&#x27;&#x27;&#x27;, (album, artist_id))</span><br><span class="line">    cur.execute(&#x27;SELECT id FROM Album WHERE title = ? &#x27;, (album, ))</span><br><span class="line">    album_id = cur.fetchone()[0]</span><br><span class="line">    cur.execute(&#x27;&#x27;&#x27;INSERT OR IGNORE INTO Genre (name)</span><br><span class="line">    VALUES ( ? )&#x27;&#x27;&#x27;, (genre, ))</span><br><span class="line">    cur.execute(&#x27;SELECT id FROM Genre WHERE name = ? &#x27;, (genre, ))</span><br><span class="line">    genre_id = cur.fetchone()[0]</span><br><span class="line">    cur.execute(&#x27;&#x27;&#x27;INSERT OR REPLACE INTO Track</span><br><span class="line">        (title, album_id, genre_id, len, rating, count)</span><br><span class="line">        VALUES ( ?, ?, ?, ?, ?, ?)&#x27;&#x27;&#x27;,</span><br><span class="line">                (name, album_id, genre_id, length, rating, count))</span><br><span class="line">    conn.commit()</span><br></pre></td></tr></table></figure><h4 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h4><p>This application will read roster data in JSON format, parse the file, and then produce an SQLite database that contains a User, Course, and Member table and populate the tables from the data file.<br>You can base your solution on this code: <a href="https://www.py4e.com/code3/roster/roster.py">http://www.py4e.com/code3/roster/roster.py</a> - this code is incomplete as you need to modify the program to store the <strong>role</strong> column in the <strong>Member</strong> table to complete the assignment.<br>Each student gets their own file for the assignment. Download <a href="https://www.py4e.com/tools/sql-intro/roster_data.php?PHPSESSID=4e9bbaef3d818a7530c32084639a353c">this file</a> and save it as <code>roster_data.json</code>. Move the downloaded file into the same folder as your <code>roster.py</code> program.<br>Once you have made the necessary changes to the program and it has been run successfully reading the above JSON data, run the following SQL command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT hex(User.name || Course.title || Member.role ) AS X FROM</span><br><span class="line">    User JOIN Member JOIN Course</span><br><span class="line">    ON User.id = Member.user_id AND Member.course_id = Course.id</span><br><span class="line">    ORDER BY X</span><br></pre></td></tr></table></figure><p>Find the <strong>first</strong> row in the resulting record set and enter the long string that looks like <strong>53656C696E613333</strong>.<br><strong>Solution</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import sqlite3</span><br><span class="line"># PART 1: Creating the database</span><br><span class="line">dbname = &quot;roster.sqlite&quot;</span><br><span class="line">conn = sqlite3.connect(dbname)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">cur.executescript(&#x27;&#x27;&#x27;</span><br><span class="line">DROP TABLE IF EXISTS User;</span><br><span class="line">DROP TABLE IF EXISTS Course;</span><br><span class="line">DROP TABLE IF EXISTS Member;</span><br><span class="line">CREATE TABLE User (</span><br><span class="line">id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,</span><br><span class="line">name TEXT UNIQUE</span><br><span class="line">);</span><br><span class="line">CREATE TABLE Course (</span><br><span class="line">id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,</span><br><span class="line">title TEXT UNIQUE</span><br><span class="line">);</span><br><span class="line">CREATE TABLE Member (</span><br><span class="line">user_id INTEGER,</span><br><span class="line">course_id INTEGER,</span><br><span class="line">role INTEGER,</span><br><span class="line">PRIMARY KEY(user_id, course_id)</span><br><span class="line">)</span><br><span class="line">&#x27;&#x27;&#x27;)</span><br><span class="line"># Note: if we don&#x27;t add UNIQUE after &quot;User.name&quot; and &quot;Course.title&quot;,</span><br><span class="line"># the IGNORE statement won&#x27;t work and therefore we&#x27;ll have duplicates</span><br><span class="line"># PART 2: DESERIALIZING THE data</span><br><span class="line"># The JSON data we&#x27;re going to process is stored in an array form, with each</span><br><span class="line"># item being also an array of three elements: one corresponding to the username</span><br><span class="line"># one corresponding to the course name, and one indicating if the user is instructor</span><br><span class="line"># None of them has any field title.</span><br><span class="line">filename = &quot;roster_data.json&quot;</span><br><span class="line">jsondata = open(&#x27;C:/Users/dell/Desktop/roster_data.json&#x27;)</span><br><span class="line">data = json.load(jsondata)</span><br><span class="line"># PART 3: INSERTING DATA</span><br><span class="line">for entry in data:</span><br><span class="line">    user = entry[0]</span><br><span class="line">    course = entry[1]</span><br><span class="line">    instructor = entry[2]</span><br><span class="line">    # Inserting user</span><br><span class="line">    user_statement = &quot;&quot;&quot;INSERT OR IGNORE INTO User(name) VALUES( ? )&quot;&quot;&quot;</span><br><span class="line">    SQLparams = (user, )</span><br><span class="line">    cur.execute(user_statement, SQLparams)</span><br><span class="line">    # Inserting course</span><br><span class="line">    course_statement = &quot;&quot;&quot;INSERT OR IGNORE INTO Course(title) VALUES( ? )&quot;&quot;&quot;</span><br><span class="line">    SQLparams = (course, )</span><br><span class="line">    cur.execute(course_statement, SQLparams)</span><br><span class="line">    # Getting user and course id</span><br><span class="line">    courseID_statement = &quot;&quot;&quot;SELECT id FROM Course WHERE title = ?&quot;&quot;&quot;</span><br><span class="line">    SQLparams = (course, )</span><br><span class="line">    cur.execute(courseID_statement, SQLparams)</span><br><span class="line">    courseID = cur.fetchone()[0]</span><br><span class="line">    userID_statement = &quot;&quot;&quot;SELECT id FROM User WHERE name = ?&quot;&quot;&quot;</span><br><span class="line">    SQLparams = (user, )</span><br><span class="line">    cur.execute(userID_statement, SQLparams)</span><br><span class="line">    userID = cur.fetchone()[0]</span><br><span class="line">    # Inserting the entry</span><br><span class="line">    member_statement = &quot;&quot;&quot;INSERT INTO Member(user_id, course_id, role)</span><br><span class="line">VALUES(?, ?, ?)&quot;&quot;&quot;</span><br><span class="line">    SQLparams = (userID, courseID, instructor)</span><br><span class="line">    cur.execute(member_statement, SQLparams)</span><br><span class="line"># Saving the changes</span><br><span class="line">conn.commit()</span><br><span class="line"># PART 4: Testing and obtaining the results</span><br><span class="line">test_statement = &quot;&quot;&quot;</span><br><span class="line">SELECT hex(User.name || Course.title || Member.role ) AS X FROM</span><br><span class="line">    User JOIN Member JOIN Course</span><br><span class="line">    ON User.id = Member.user_id AND Member.course_id = Course.id</span><br><span class="line">    ORDER BY X</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">cur.execute(test_statement)</span><br><span class="line">result = cur.fetchone()</span><br><span class="line">print(&quot;RESULT: &quot; + str(result))</span><br><span class="line"># Closing the connection</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sport-Related Concussion Training</title>
      <link href="/Sport-Related-Concussion-Training/"/>
      <url>/Sport-Related-Concussion-Training/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Some common sports injuries can occur when engaging in confrontational sports like basketball, therefore it’s important to have some knowledge of avoiding and dealing with them. The Michigan Sport-Related Concussion Training Certification satisfies the state-mandated requirement for concussion training in the state of Michigan and can be helpful under certain circumstances. The following are the notes I took during this course.</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/michigan-sport-related-concussion-training-certificate.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="Identifying-a-Concussion"><a href="#Identifying-a-Concussion" class="headerlink" title="Identifying a Concussion"></a>Identifying a Concussion</h3><ul><li>A concussion, sometimes called a mild traumatic brain injury, can occur from a sudden fall, a blow from another person or a hit from the piece of equipment that causes the brain to move quickly within the skull. This motion changes the way the brain communicates which can lead to changes in how someone thinks or behaves.</li></ul><h4 id="On-field-Signs"><a href="#On-field-Signs" class="headerlink" title="On-field Signs"></a>On-field Signs</h4><ul><li>Dazed or stunned</li><li>Displaying the motions that are uncharacteristic of the athlete</li><li>Slowly responding to play calls</li><li>Holding their head</li><li>Difficulty recalling events</li></ul><h4 id="Concussion-symptoms"><a href="#Concussion-symptoms" class="headerlink" title="Concussion symptoms"></a>Concussion symptoms</h4><ul><li>Physical</li><li>Cognitive</li><li>Emotional</li><li>Sleep-related</li></ul><h4 id="Emergency-“Red-Flags”"><a href="#Emergency-“Red-Flags”" class="headerlink" title="Emergency “Red Flags”"></a>Emergency “Red Flags”</h4><ul><li>Severe or increasing headache</li><li>Intense neck pain particularly down the middle with weakness or burning into both arms or legs</li><li>Athlete reporting double vision</li><li>Seizing or convulsing body movements</li><li>Loss of consciousness for greater than one minute</li><li>A deteriorating mental state such as going in and out of consciousness</li><li>Repetitive vomiting</li><li>Increasingly combative</li></ul><h4 id="Michigan’s-Youth-Concussion-Law"><a href="#Michigan’s-Youth-Concussion-Law" class="headerlink" title="Michigan’s Youth Concussion Law"></a>Michigan’s Youth Concussion Law</h4><ol><li>Every athlete and their parent or guardian must provide written informed consent of concussion education materials</li><li>Each coach, employee or volunteer is required to complete a concussion awareness training program once every three years</li><li>Any athlete who is suspected of having concussion must be immediately removed from participation</li><li>Any athlete removed from participation because of a possible concussion cannot return to full sport participation until an appropriate health professional has provided written clearance for the athlete to return to full sport participation</li></ol><h3 id="Remove-from-Play"><a href="#Remove-from-Play" class="headerlink" title="Remove from Play"></a>Remove from Play</h3><ul><li>Do not attempt to diagnose a concussion yourself.</li></ul><h4 id="Goal-of-Removal"><a href="#Goal-of-Removal" class="headerlink" title="Goal of Removal"></a>Goal of Removal</h4><ul><li>The goal is not to diagnose a concussion on the sideline, but to remove the athlete from risk, risk of another concussion, or risk of a more serious brain injury.</li></ul><h4 id="For-Athletes"><a href="#For-Athletes" class="headerlink" title="For Athletes"></a>For Athletes</h4><ul><li>It’s important to know that you don’t need to be able to diagnose concussion.</li><li>What we want you to be able to do is recognize signs and symptoms of concussion, so that when a suspected concussion occurs, you’ll be able to manage it, and feel calm, and safe during that situation.</li></ul><h4 id="Responsibilities-of-Coaches-and-Parents"><a href="#Responsibilities-of-Coaches-and-Parents" class="headerlink" title="Responsibilities of Coaches and Parents"></a>Responsibilities of Coaches and Parents</h4><ol><li>Make sure they’re not participating anymore</li><li>You need to get him to a medical professional</li><li>You need to keep them quiet</li><li>The law in Michigan requires immediate removal of student-athlete whenever there is concern for concussion</li><li>Before return to full participation, a written authorization from a healthcare provider must be obtained</li><li>Forms must be kept on file at the school for seven years following the students graduation</li></ol><h3 id="Rest-and-Rehabilitation"><a href="#Rest-and-Rehabilitation" class="headerlink" title="Rest and Rehabilitation"></a>Rest and Rehabilitation</h3><h4 id="The-first-few-Days"><a href="#The-first-few-Days" class="headerlink" title="The first few Days"></a>The first few Days</h4><ol><li>If red flags symptoms should develop, medical care should be sought immediately</li><li>Activities that makes symptoms worse should be avoided</li><li>Activities that put one at an increased risk for concussion should be avoided</li></ol><h4 id="Reintroduction-of-Physical-School-and-Work-Activities"><a href="#Reintroduction-of-Physical-School-and-Work-Activities" class="headerlink" title="Reintroduction of Physical School and Work Activities"></a>Reintroduction of Physical School and Work Activities</h4><ul><li>Getting restful sleep</li><li>Adequate hydration of 60-80 ounces</li><li>A healthy diet</li><li>Use of electronic devices during recovery from concussion can be undertaken as long as it doesn’t markedly worsen symptoms</li></ul><h3 id="Return-to-Learn-and-Activity"><a href="#Return-to-Learn-and-Activity" class="headerlink" title="Return to Learn and Activity"></a>Return to Learn and Activity</h3><h4 id="Return-to-Learn"><a href="#Return-to-Learn" class="headerlink" title="Return to Learn"></a>Return to Learn</h4><ol><li>Daily activities</li><li>School activities</li><li>Return to school Part-time</li><li>Return to school Full-time</li></ol><h4 id="Return-to-Athletic-Activity-Stages"><a href="#Return-to-Athletic-Activity-Stages" class="headerlink" title="Return to Athletic Activity Stages"></a>Return to Athletic Activity Stages</h4><ol><li>Symptom-limited activity</li><li>Light aerobic exercise</li><li>Sport-specific exercise</li><li>Non-contact training drills</li><li>Full contact practice</li><li>Return to sport</li></ol><h3 id="Long-Term-Effects"><a href="#Long-Term-Effects" class="headerlink" title="Long-Term Effects"></a>Long-Term Effects</h3><ul><li>It’s important to remember that most people have a normal recovery within 30 days of injury</li><li>When prolonged recovery occurs, it’s very important to identify the factors that cause the symptoms and to initiate treatment immediately</li><li>Care at a healthcare facility with expertise in concussion can aid in this process</li><li>Management of prolonged recovery should be individualized, and best takes place by those with expertise in concussion care</li><li>Studies do not suggest that there’s an increased risk of dementia, depression, or suicide later in life</li></ul>]]></content>
      
      
      <categories>
          
          <category> 慕课MOOC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 操作指令总结</title>
      <link href="/Git%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/Git%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件，是目前世界上最先进的分布式版本控制系统。Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。Git 指令操作简单易上手。</p></blockquote><span id="more"></span><h3 id="一、Git-基本概念"><a href="#一、Git-基本概念" class="headerlink" title="一、Git 基本概念"></a>一、Git 基本概念</h3><h4 id="Git-操作指令"><a href="#Git-操作指令" class="headerlink" title="Git 操作指令"></a>Git 操作指令</h4><p><img src="https://blog.zhuangzhihao.top/img/Git.png" alt></p><h4 id="集中式（SVN）-VS-分布式（Git）"><a href="#集中式（SVN）-VS-分布式（Git）" class="headerlink" title="集中式（SVN） VS 分布式（Git）"></a>集中式（SVN） VS 分布式（Git）</h4><ol><li>SVN 和 Git 主要的区别在于历史版本维护的位置;</li><li>Git 本地仓库包含代码库还有历史库，在本地的环境开发就可以记录历史而 SVN 的历史库存在于中央仓库，每次对比与提交代码都必须连接到中央仓库才能进行;</li><li>这样的好处在于：自己可以在脱机环境查看开发的版本历史。并且多人开发时如果充当中央仓库的 Git 仓库挂了，可以随时创建一个新的中央仓库然后同步就立刻恢复了中央库。</li></ol><h4 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h4><p><code>git init</code>初始化一个 Git 仓库。</p><p><code>git add ‘&lt;name&gt;’</code>or <code>git add .</code> 暂存文件。</p><p><code>git commit -m ‘&lt;name&gt;’</code> 提交到Git仓库。</p><h4 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h4><p><code>git status</code> 随时掌握工作区的状态。</p><p><code>git diff</code> 比较工作区与缓存区，查看修改内容。</p><p><code>git diff -- cached</code> 比较缓存区与本地库最近一次commit内容。</p><p><code>git diff HEAD</code>比较工作区与本地最近一次commit内容。</p><h4 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h4><p><code>git config --list</code> 列出当前配置。</p><p><code>git config --local --list</code> 列出Repository配置。</p><p><code>git config --global --list</code> 列出全局配置。</p><p><code>git config --system --list</code>  列出系统配置。</p><p><code>git config --global user.name &quot;your name&quot;</code> 配置用户名。</p><p><code>git config --global user.email &quot;youremail@github.com&quot;</code>  配置用户邮箱。</p><p>配置 Git 的时候，加上<code>--global</code> 是针对当前用户起作用的；如果不加，那只针对当前的仓库起作用。</p><p>每个仓库的 Git 配置文件都放在<code>.git/config</code> 文件中。</p><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p><code>HEAD</code>指向的版本就是当前版本。</p><p><code>git log</code> 可以查看提交历史，以便确定要回退到哪个版本。</p><p><code>git reflog</code> 查看命令历史，以便确定要回到未来的哪个版本。</p><p><code>git reset --hard commit_id</code> 在版本的历史之间穿梭。</p><p>工作区和暂存区（Working Directory and Repository）。</p><h4 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h4><p><code>git add</code> 实际上是把文件添加到暂存区。</p><p><code>git commit</code> 实际上是把暂存区的所有内容提交到当前分支。</p><p>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</p><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><p>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code> 。</p><p>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，用命令<code>git reset HEAD &#39;&lt;name&gt;&#39;</code> 回到上一步。</p><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考’’版本回退’’，不过前提是没有推送到远程库。</p><p><code>git rm</code> 删除一个文件。</p><h3 id="二、远程仓库"><a href="#二、远程仓库" class="headerlink" title="二、远程仓库"></a>二、远程仓库</h3><h4 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h4><p><code>git remote add origin git@server-name:path/repo-name.git</code> 关联一个远程库。</p><p><code>git push -u origin main</code> 第一次推送 main 分支的所有内容。</p><p><code>git push origin main</code> 推送最新修改。</p><h4 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h4><p><code>git clone</code> 命令克隆克隆一个仓库。</p><p>Git 支持多种协议，包括 https，但 ssh 协议速度最快。</p><h4 id="远程库操作"><a href="#远程库操作" class="headerlink" title="远程库操作"></a>远程库操作</h4><p><code>git push origin -d &lt;branch-name&gt;</code> 删除远程分支。</p><p><code>git branch -m &lt;oldbranch-name&gt; &lt;newbranch-name&gt;</code> 重命名分支。</p><p><code>git checkout -b 本地分支名x origin/远程分支名x</code> 拉取远程分支并创建本地分支。</p><p><code>git fetch origin &lt;branch-name&gt;:&lt;local-branch-name&gt;</code> 将远程仓库内容更新到本地。</p><h3 id="三、分支管理"><a href="#三、分支管理" class="headerlink" title="三、分支管理"></a>三、分支管理</h3><h4 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h4><p><code>git branch</code> 查看分支。</p><p><code>git branch &lt;name&gt;</code> 创建分支。</p><p><code>git checkout &lt;name&gt;</code> 或者<code>git switch &lt;name&gt;</code> 切换分支。</p><p><code>git branch -r</code> 查看远程分支或者 <code>git branch -a</code> 查看本地和远程分支。</p><p><code>git checkout -b &lt;name&gt;</code> 或者<code>git switch -c &lt;name&gt;</code> 创建+切换分支。</p><p><code>git merge &lt;name&gt;</code> 合并某分支到当前分支。</p><p><code>git branch --merged</code> 查看哪些分支已经合并到当前分支。</p><p><code>git branch --no-merged</code> 查看哪些分支没有合并到当前分支。</p><p><code>git branch -v</code> 查看各个分支最后一个提交对象的信息。</p><p><code>git branch -d &lt;name&gt;</code> 删除分支。</p><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>当 Git 无法自动合并分支时，就必须首先解决冲突，解决冲突后，再提交，合并完成。</p><p>解决冲突就是把 Git 合并失败的文件手动编辑为我们希望的内容，再提交。</p><p><code>git log --graph</code> 查看分支合并图。</p><p>合并分支时，加上 <code>--no-ff</code> 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，<code>fast forward</code> 合并就看不出来曾经做过合并。</p><p>修复 bug 时，我们会通过创建新的 bug 分支进行修复，然后合并，最后删除。</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code> 一下（文件暂存），然后去修复 bug。</p><p><code>git stash save -a “message”</code> 添加改动到stash。</p><p><code>git stash drop &lt;stash@&#123;ID&#125;&gt;</code> 删除暂存，<code>git stash clear</code> 删除全部缓存。</p><p><code>git stash list</code> 查看stash列表。</p><p>修复后，再<code>git stash pop</code>，回到工作现场。</p><p>在 main 分支上修复的 bug，想要合并到当前 dev 分支，可以用<code>git cherry-pick &lt;commit&gt;</code> 命令，把 bug 提交的修改“复制”到当前分支，避免重复劳动。</p><p>开发一个新 feature，最好新建一个分支。</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p><h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><p><code>git remote -v</code> 查看远程库信息。</p><p>本地新建的分支如果不推送到远程，对其他人就是不可见的。</p><p><code>git pull</code> 抓取远程的分支，如果有冲突，要先处理冲突。</p><p><code>git push origin branch-name</code> 从本地推送分支。</p><p><code>git checkout -b branch-name origin/branch-name</code> 在本地创建和远程分支对应的分支。</p><p><code>git branch --set-upstream branch-name origin/branch-name</code> 建立本地分支和远程分支的关联。 </p><h4 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h4><p>rebase 操作可以把本地未 push 的分叉提交历史整理成直线。</p><p>rebase 的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p><h3 id="四、标签管理"><a href="#四、标签管理" class="headerlink" title="四、标签管理"></a>四、标签管理</h3><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><p><code>git tag &lt;tagname&gt;</code> 用于新建一个标签，默认为 HEAD，也可以指定一个 commit id 。</p><p><code>git tag -a &lt;tagname&gt; -m &quot;  &quot;</code>可以指定标签信息。</p><p><code>git tag</code> 查看所有标签。</p><h4 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h4><p><code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签。</p><p><code>git push origin --tags</code> 可以推送全部未推送过的本地标签。</p><p><code>git tag -d &lt;tagname&gt;</code> 可以删除一个本地标签。</p><p><code>git push origin :refs/tags/&lt;tagname&gt;</code> 可以删除一个远程标签。</p><h3 id="五、自定义-Git"><a href="#五、自定义-Git" class="headerlink" title="五、自定义 Git"></a>五、自定义 Git</h3><h4 id="gitgonore-忽略特殊文件"><a href="#gitgonore-忽略特殊文件" class="headerlink" title="gitgonore 忽略特殊文件"></a><a href="https://github.com/github/gitignore">gitgonore</a> 忽略特殊文件</h4><p>忽略某些文件时，需要编写<code>.gitignore</code>。</p><p><code>.gitignore</code> 文件本身要放到版本库里，并且可以对<code>.gitignore</code> 做版本管理。</p><h4 id="搭建-Git-服务器"><a href="#搭建-Git-服务器" class="headerlink" title="搭建 Git 服务器"></a>搭建 <a href="http://git-scm.com/">Git</a> 服务器</h4><p>要方便管理公钥，用 <a href="https://github.com/sitaramc/gitolite">Gitosis</a>。</p><p>要像 SVN 那样变态地控制权限，用 <a href="https://github.com/sitaramc/gitolite">Gitolite</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 其他开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.bilibili.com/video/av21376839/">计算机科学速成课程</a>的授课老师是英国树莓派基金会教育部长Carrie Anne，她以入门级大学教材和 AP 计算机科学原理指南为基础，在短短40节课中概述了计算机的历史、设计决策、编程和软件的基本要素、硬件的基本组件及其作用，对新手小白可以说是非常友好了。</p></blockquote><span id="more"></span><h3 id="一、计算机的早期历史和电子计算机"><a href="#一、计算机的早期历史和电子计算机" class="headerlink" title="一、计算机的早期历史和电子计算机"></a>一、计算机的早期历史和电子计算机</h3><p>最早的计算设备是算盘，其次是步进计算器，差分机，分析机，打孔卡片制表机。步进计算器是第一个可以做加减乘除的机器，Charles Babbage 提出了“差分机”，在构造差分机期间，想出了分析机, 分析机是通用计算机。</p><p>Ada Lovelace 给分析机写了假想程序，因此成为了第一位程序员，后来 Herman Hollerith 的打孔卡片制表机又大大提升了人口普查效率。</p><p>电子计算机组成核心最初由继电器组成。继电器一秒最多 50 次开关，bug 原指继电器上的虫子。</p><p>IBM 于 1944 年制造哈佛 Mark I。1904 年，热电子管出现成为第一个真空管。改进后和继电器的功能一样，”巨人 1 号” 计算机在英国布莱切利园首次大规模使用真空管，但编程麻烦，还要配置。1946 年，宾夕法尼亚大学的 ENIAC 是第一个通用可编程计算机。1947 年，贝尔实验室做出了晶体管，晶体管有诸多好处，IBM 很快全面转向晶体管。</p><p>当时，很多晶体管和半导体的开发都是硅谷做的。而生产半导体最常见的材料是硅，著名的有肖克利半导体、仙童半导体和英特尔。</p><h3 id="二、布尔逻辑、逻辑门和二进制"><a href="#二、布尔逻辑、逻辑门和二进制" class="headerlink" title="二、布尔逻辑、逻辑门和二进制"></a>二、布尔逻辑、逻辑门和二进制</h3><p>George Boole 提出布尔逻辑（真假），也称 Boolean Algebra。基本操作有：NOT，AND，OR，以及异或 XOR。</p><p>存储单位有 MB（Megabyte），GB（Gigabyte），TB（Terabyte），树型单位有正数、负数、整数、浮点数。</p><p>美国信息交换标准代码 ASCII：用来表示字符。1992 年诞生 UNICODE，16 位，是字符编码标准，解决 ASCII 不够表达所有语言的问题。</p><h3 id="三、算数逻辑单元（ALU）"><a href="#三、算数逻辑单元（ALU）" class="headerlink" title="三、算数逻辑单元（ALU）"></a>三、算数逻辑单元（ALU）</h3><p>ALU（Arithmetic and Logic Unit）有 2 个单元，1 个算术单元和 1 个逻辑单元。</p><p>算术单元分为半加器 （处理 1 个 bit，2 个输入）和全加器（处理 1 个 bit，3 个输入），8 bit 加法就包括（1 个半加器，7 个全加器），溢出为 Overflow。</p><p>逻辑单元是检测数字是否为 0 的电路（一堆 OR 门最后加个 NOT 门）。</p><p>8 位 ALU 抽象成一个 V 符号。</p><p>Flag 标志判断是否相等，是否小于，是否溢出等。</p><p>最早的处理器为英特尔 74181。</p><h3 id="四、寄存器和内存"><a href="#四、寄存器和内存" class="headerlink" title="四、寄存器和内存"></a>四、寄存器和内存</h3><p>Memory 有存储、内存两种含义：Gated Latch（锁存器）存 1 位字节，Register（寄存器）存 8 位，16x16 的矩阵存 256 位，Opcode 操作码。</p><p>数据选择器/多路复用器 （Multiplexer）用来解码 8 位地址（4 位代表行，4 位代表列），定位到单个锁存器，组合 256 位内存 + 多路复用器 Multiplexer。</p><p>可寻址的 256 字节内存：8 个模块，每个模块有 32 个小方块，每个小方块有 4 个小块，每个小块是 128 位 x 64 位。</p><p>一条 1980 年代的内存有 1M 大小。</p><h3 id="五、中央处理器（CPU）以及指令和程序"><a href="#五、中央处理器（CPU）以及指令和程序" class="headerlink" title="五、中央处理器（CPU）以及指令和程序"></a>五、中央处理器（CPU）以及指令和程序</h3><p>Instruction Register、Instruction Address Register。</p><p>RAM + 寄存器 + ALU =  CPU。</p><p>取指令 → 解释 → 执行循环。</p><p>时钟 clock：时钟速度和赫兹，超频提升性能, 降频省电。</p><p>”指令集”，LOAD_A，LOAD_B，SUB，JUMP，ADD，HALT 等指令，带条件跳转：JUMP NEGATIVE 是负数才跳转，还有其他类型的 JUMP。</p><p>真正现代 CPU 用更多指令集。位数更长，1971 年的英特尔 4004 处理器，有 46 个指令，如今英特尔酷睿 i7, 有上千条指令。CPU 发展早期是加快晶体管切换速度，来提升 CPU 速度，现在给 CPU 专门的除法电路 + 其他电路来做复杂操作，比如游戏，视频解码，或是给 CPU 加缓存，提高数据存取速度，更快喂给 CPU。</p><p>专有名词：脏位（Dirty bit）、流水线设计（pipeline）、并行处理（parallelize）、乱序执行（out-of-order execution）、推测执行（speculative execution）、分支预测（branch prediction）。</p><p>多个 ALU 组成多核放大为多个独立 CPU 放大为超级计算机（中国的神威太湖之光）。</p><h3 id="六、编程语言发展史"><a href="#六、编程语言发展史" class="headerlink" title="六、编程语言发展史"></a>六、编程语言发展史</h3><p>早期的编程发展从纺织业开始，给机器编程的需求远在计算机出现前就有了，于是有了打孔纸卡（Punched card）和插线板（Plugboard）。</p><p>冯诺依曼架构（Von Neumann Architecture）是编程的鼻祖，在这之上演变出面板编程（Panel programming）。第一款取得商业成功的家用计算机是 Altair 8800。</p><p>二进制写程序，先纸上写伪代码，手工转二进制，很快就烦了，于是用助记符（mnemonic）写代码（LOAD_A 14），为了把助记符转二进制，汇编器（Assembler）诞生。</p><p>Grace Hopper 设计了编程语言 A-0，并在 1952 年做了第一个编译器（Compiler），实现 A-0。IBM 在 1957 年开发出 FORTRAN，随后 COBOL（Common Business-Oriented Language）诞生。</p><p>1960 年代：ALGOL，LISP，BASIC。</p><p>1970 年代：Pascal，C，Smalltalk。</p><p>1980 年代：C++，Objective-C，Perl。</p><p>1990 年代：Python，Ruby，Java。</p><p>New millennium：Swift，C#，Go。</p><h3 id="七、函数、算法和数据结构"><a href="#七、函数、算法和数据结构" class="headerlink" title="七、函数、算法和数据结构"></a>七、函数、算法和数据结构</h3><p>最经典的是 Grace Hopper 拍虫子游戏。</p><p>专有名词：变量、赋值语句、if 判断、while 循环、for 循环、函数。</p><p>最简单的算法有：选择排序（Selection sort O(n^2)）、归并排序（Merge sort O(n log n)）、Dijkstra 算法（（graph search algorithms） O(n log n +1)）。</p><p>大 O 表示法（Big O notation）用来表示算法复杂度。</p><p>数据结构要点：数组（Array）、下标（Index）、字符串（String）、矩阵（Matrix）、结构体（Struct）、指针（Pointer）、节点（Node）、链表（Linked List）。</p><p>队列（Queue）(First in first out)，栈（Stack）(Last in first out) push、pop。</p><p>不同数据结构适用不同场景：树（Tree）root/ leaf nodes，二叉树（Binary Tree），图（Graph），红黑树和堆。</p><h3 id="八、阿兰·图灵"><a href="#八、阿兰·图灵" class="headerlink" title="八、阿兰·图灵"></a>八、阿兰·图灵</h3><p>阿兰·图灵生于 1912，是计算机之父，他首先提出可判定性问题（Entscheidungs problem）和停机问题，阿隆佐·丘奇研究 Lambda 算子。图灵机是计算机的蓝本而 Bombe 则破解了德军英格玛加密机。</p><p>图灵测试和图灵奖。</p><h3 id="九、软件工程"><a href="#九、软件工程" class="headerlink" title="九、软件工程"></a>九、软件工程</h3><p>对象（Object）以及面向对象编程（Object Oriented Programming）。</p><p>API（Application Programming Interface）和集成开发环境 IDE（Integrated Development Environments）。</p><p>其他专有名词：调试（debugging），文档和注释（readme, comment）版本控制（Version control）质量控制（Quality Assurance testing，QA）。</p><h3 id="十、集成电路与摩尔定律"><a href="#十、集成电路与摩尔定律" class="headerlink" title="十、集成电路与摩尔定律"></a>十、集成电路与摩尔定律</h3><p>晶圆的制作：光刻（Photolithography）、晶圆（Wafer）、光刻胶（Photoresist）、光掩膜（Photomask）、掺杂（Doping）、分立元件（Discrete components）。</p><p>数字暴政（Tyranny of Numbers）是 1960 年代工程师碰到的问题（如果想加强电脑性能，就要更多部件，这导致更多线路，更复杂。所以很难做）。</p><p>摩尔定律 Moore’s Law。晶体管数量大幅度增长, 1980 年三万个，1990 年一百万个，2000 年三千万个，2010 年十亿个，进一步小型化会碰到 2 个问题：1、光的波长不足以制作更精细的设计，2、量子隧穿效应。</p><h3 id="十一、操作系统"><a href="#十一、操作系统" class="headerlink" title="十一、操作系统"></a>十一、操作系统</h3><p>操作系统（Operating systems）：计算机变便宜变多，有不同配置，写程序处理不同硬件细节很痛苦，因此操作系统负责抽象硬件。</p><p>专有名词：批处理（Batch processing）、外部设备（Peripherals）、设备驱动程序（Device drivers）、多任务处理（Multitasking）、虚拟内存（Virtual Memory）、动态内存分配（Dynamic memory allocation）、内存保护（Memory Protection）。</p><p>1970 年代，计算机足够便宜，大学买了让学生用，多个学生用多个 “终端” 连接到主机。</p><p>多用户分时操作系统，Multics、Unix、MS-DOS。</p><h3 id="十二、内存和文件"><a href="#十二、内存和文件" class="headerlink" title="十二、内存和文件"></a>十二、内存和文件</h3><p>存储技术的发展，首先是纸卡（Paper punch cards），随后发展为延迟线存储器（Delay Line Memory）、磁芯（Magnetic Core Memory）、磁带（Magnetic Tape）、磁鼓（Magnetic Drum Memory）。</p><p>硬盘（Hard Disk Drives）有内存层次结构（Memory Hierarchy）。</p><p>软盘（Floppy Disk）、光盘（Compact Disk）、固态硬盘（Solid State Drives）。</p><p>文件格式：可以随便存文件数据，但按格式存会更方便。</p><ul><li>TXT 文本文件：ASCII。</li><li>WAV 音频文件：每秒上千次的音频采样数字。</li><li>BMP 图片文件：像素的红绿蓝 RGB 值。</li></ul><p>文件系统：很早期时空间小，整个存储器就像一整个文件。后来随容量增长，多文件非常必要。</p><p>目录文件：用来解决多文件问题，存其他文件的信息，比如开头，结尾，创建时间等。</p><p>平面文件系统（Flat File System）：文件都在同一个层次，早期空间小，只有十几个文件，平面系统够用，如果文件紧密的一个个前后排序会造成问题，所以文件系统会： 1. 把空间划分成一块块 2. 文件拆分存在多个块里，文件的增删改查会不可避免的造成文件散落在各个块里，如果是磁带这样的存储介质就会造成问题，所以做碎片整理。</p><p>分层文件系统（Hierarchical File System）：有不同文件夹，文件夹可以层层嵌套。</p><p>压缩的好处是能存更多文件，传输也更快。</p><p>无损压缩（Lossless compression）：游程编码（Run-Length Encoding）和字典编码（Dictionary coders）。</p><p>霍夫曼树 Huffman Tree、消除冗余和用更紧凑的表示方法，这些方法通常会组合使用。</p><p>感知编码（Perceptual coding）、有损压缩，如 jpeg 格式、时间冗余（Temporal redundancy）、MPEG-4 视频编码。</p><h3 id="十三、命令行界面与-图形用户界面（GUI）"><a href="#十三、命令行界面与-图形用户界面（GUI）" class="headerlink" title="十三、命令行界面与 图形用户界面（GUI）"></a>十三、命令行界面与 图形用户界面（GUI）</h3><p>最早计算机程序从运行开始直到结束，中间没有人类进行操作，原因是计算机很贵，不能等人类慢慢输入，执行完结果打印到纸上，到 1950 年代，计算机足够便宜+快，人类和计算机交互式操作变得可行，为了让人类输入到计算机，改造之前就有的打字机，变成电传打字机，到 1970 年代末，屏幕成本足够低，屏幕代替电传打字机，屏幕成为标配。</p><p>人机交互（Human-Computer Interaction）：早期输出数据是打印到纸上，而输入是用纸卡/纸带一次性把程序和数据都给进去。</p><p>克里斯托弗·莱瑟姆·肖尔斯于 1868 年发明 QWERTY 打字机，随后诞生电传打字机（Teletype machine），输入指令打印在纸上，电脑会将返回指令打印在纸上完成交互。</p><p>命令行界面（Command line interface）：ls 命令、cd 命令、早期文字游戏 Zork（1977 年）。</p><p>图形界面先驱：道格拉斯·恩格尔巴特（Douglas Engelbart），施乐公司则在 1970 年成立 帕洛阿尔托研究中心（Palo Alto Research Center），1973 年完成 Xerox Alto 计算机。</p><p>1981 年的 Xerox Star system，史蒂夫·乔布斯去施乐参观，所见即所得 WYSIWYG，1983 年推出 Apple Lisa，1984 年推出 Macintosh。</p><p>微软则在 1985 年推出 Windows 1.0，之后出到 3.1，1995 年推出 Windows 95 提供图形界面，1995 年微软失败的 Microsoft Bob。</p><h3 id="十四、冷战、消费主义和个人计算机发展"><a href="#十四、冷战、消费主义和个人计算机发展" class="headerlink" title="十四、冷战、消费主义和个人计算机发展"></a>十四、冷战、消费主义和个人计算机发展</h3><p>范内瓦·布什预见了计算机的潜力，提出假想机器 Memex，帮助建立国家科学基金会，给科学研究提供资金。</p><p>1950 年代消费者开始买晶体管设备，收音机大卖，日本取得晶体管授权后，索尼做了晶体管收音机，为日本半导体行业崛起埋下种子。</p><p>苏联 1961 年把宇航员加加林送上太空，导致美国提出登月，NASA 预算大大增加，用集成电路来制作登月计算机，集成电路的发展实际上是由军事应用大大推进的，阿波罗登月毕竟只有 17 次，美国造超级计算机进一步推进集成电路。</p><p>美国半导体行业一开始靠政府高利润合同活着，忽略消费者市场，1970 年代冷战渐消，行业开始衰败，很多公司倒闭，英特尔转型处理器，政府和消费者推动了计算机的发展，早期靠政府资金，让技术发展到足够商用，然后消费者购买商用产品继续推动产品发展。</p><p>1970 年代初成本下降，个人计算机变得可行，Altair 8800 大卖。比尔·盖茨和保罗·艾伦写了 BASIC 解释器，乔布斯提议卖组装好的计算机，Apple-I 诞生。1977 年出现 3 款开箱即用计算机：Apple-II、TRS-80 Model I、Commodore PET 2001。</p><p>IBM 意识到个人计算机市场，IBM PC 发布，采用开放架构，兼容的机器都叫 IBM Compatible（IBM 兼容），生态系统产生雪球效应：因为用户多，软硬件开发人员更愿意花精力在这个平台，因为软硬件多，用户也更乐意买 “IBM 兼容” 的计算机。苹果选封闭架构，一切都自己来，只有苹果在非 “IBM 兼容” 下保持了足够市场份额。</p><h3 id="十五、2D-图形和3D-图形显示"><a href="#十五、2D-图形和3D-图形显示" class="headerlink" title="十五、2D 图形和3D 图形显示"></a>十五、2D 图形和3D 图形显示</h3><p>屏幕对于临时值的表现比纸张打印好太多，所以人们把键盘和显示器分开，屏幕显示临时值。（PDP-1 计算机）。</p><p>阴极射线管（Cathode Ray Tube(CRT)），有两种绘图方式：1、矢量扫描（Vector Scanning），2、光栅扫描（Raster Scanning）。</p><p>其他显示有关：液晶显示器（Liquid Crystal Displays (LCD)）、像素（Pixel））、字符生成器（Character generator）、屏幕缓冲区（Screen buffer）、矢量命令画图、Sketchpad、光笔（Light pen）、函数画线、矩形。</p><p>3D 投影包括：线框渲染（Wireframe Rendering）、正交投影（Orthographic Projection）、透视投射（Perspective Projection）。</p><p>相对于网格（Mesh），三角形更常用因为能定义唯一的平面，扫描线渲染（Scanline Rendering）。</p><p>为了处理遮挡（Occlusion），使用画家算法（Painter’s Algorithm）、深度缓冲 Z Buffering、Z Fighting 错误出现穿模。</p><p>其他处理：背面剔除（Back Face Culling）、表面法线（Surface Normal）、平面着色（Flat Shading）、高洛德着色（Gouraud shading）, 冯氏着色（Phong Shading）、纹理映射（Texture Mapping）。</p><p>图形处理单元 GPU（Graphics Processing Unit）。</p><h3 id="十六、计算机网络和互联网"><a href="#十六、计算机网络和互联网" class="headerlink" title="十六、计算机网络和互联网"></a>十六、计算机网络和互联网</h3><p>局域网 LAN（Local Area Networks），最著名的是 1970 年代的以太网，需要每个电脑（网卡）有独立的媒体访问控制地址 MAC（Media Access Control address），载波侦听多路访问 CSMA（Carrier Sense Multiple Access）是多电脑共享的传输媒介，传输速度用带宽（bandwidth）表示。</p><p>多线路的冲突使用指数退避（Exponential Backoff），同时分组、引入交换机减少冲突域（Collision Domain）的范围。</p><p>电路交换（Circuit Switching）、报文交换（Message Switching）、分组交换（Packet Switching）、阻塞控制、ICMP、BGP。</p><p>IP 互联网协议（Internet Protocol），负责把数据包送到正确的计算机。UDP 用户数据报协议（User Datagram Protocol）在数据包中跟在 IP 之后，负责把数据包送到正确的程序。UDP 头部包含校验数（Checksum）。</p><p>但是要保证所有数据必须到达，则要使用 TCP 传输控制协议（Transmission Control Protocol），含有序号，发送确认码，调整传输率。</p><p>IP 地址复杂难记，DNS 域名系统（Domain Name System），分为 TLD、二级域名、子域名。</p><p>OSI 开放式系统互联通信参考模型（Open System Interconnection）从下至上：物理层、数据链路层、网络层、传输层、会话层、表示层、应用程序层。</p><p>超链接（Hyperlinks）形成巨大的网络：万维网。</p><p>URL 统一资源定位器（Uniform Resource Locator）、HTTP 超文本传输协议（HyperText Transfer Protocol）定位服务器中的内容。</p><p>HTML 超文本标记语言（HyperText Markup Language）。</p><p>第一个浏览器和服务器是 Tim Berners-Lee 花了 2 个月在 CERN 写的，1991 年正式发布，万维网就此诞生。</p><p>Jerry 和 David 的万维网指南 后来改名成 Yahoo，其他搜索引擎：JumpStation、Google。</p><p>网络中立性：平等对待所有数据包。</p><h3 id="十七、计算机安全与黑客攻击"><a href="#十七、计算机安全与黑客攻击" class="headerlink" title="十七、计算机安全与黑客攻击"></a>十七、计算机安全与黑客攻击</h3><p>计算机安全三大要素：保密性, 完整性, 可用性（Secrecy, Integrity, Availability）。</p><p>使用威胁模型（Threat Model）模拟黑客攻击。</p><p>身份验证（Authentication）的三种方式：What you know、What you have、What you are。</p><p>访问控制（Access Control）：公开、机密/只读、可写、完全控制，例如美国国防部的 Bell LaPadula model 不能向上读取，不能向下写入。</p><p>安全内核、隔离（Isolation）：沙盒（Sandbox）建立在虚拟机上。</p><p>社会工程学（Social Engineering）：钓鱼（Phishing）、假托（Pretexting）、木马（Trojan Horses）。</p><p>NAND 镜像（NAND Mirroring）：物理连接复制内存，覆盖错误。</p><p>漏洞利用（Exploit）在远程端：利用缓冲区溢出（Buffer Overflow），通过边界检查（Bounds Checking）可以避免。</p><p>代码注入（Code Injection）植入 bug。</p><p>零日漏洞（Zero Day Vulnerability）是发现后立即被恶意利用的安全漏洞。</p><p>计算机蠕虫（Worms）、僵尸网络（Botnet）、拒绝服务攻击（DDoS）。</p><h3 id="十八、加密"><a href="#十八、加密" class="headerlink" title="十八、加密"></a>十八、加密</h3><p>多层防御（Defence in depth）：加密（Encryption）、解密（Decryption）。</p><p>替换加密（Substitution cipher）、移位加密（Permutation cipher）：如凯撒加密（Caesar cipher）：字母向前移位 3 位。</p><p>列移位加密（Columnar transposition cipher）：读取方向和列表大小。</p><p>德国 Enigma 加密机，利用转子替换加密。</p><p>IBM 和 NSA1977 年制定数据加密标准（Data Encryption Standard (DES)）。</p><p>2001 年出现高级加密标准（Advanced Encryption Standard (AES)）。</p><p>密钥交换（Key exchange）：单向函数和密钥加密、迪菲-赫尔曼密钥交换（Diffie-Hellman Key Exchange）属于对称加密。</p><p>非对称加密（Asymmetric encryption）只能加密不能解密或只能解密不能加密、非对称加密算法（RSA）。</p><h3 id="十九、机器学习与人工智能"><a href="#十九、机器学习与人工智能" class="headerlink" title="十九、机器学习与人工智能"></a>十九、机器学习与人工智能</h3><p>分类（Classification）：使用分类器（Classifier）辨别特征（Feature），再标记数据（Labeled data）记录。</p><p>数据分析会出现决策边界（Decision boundaries）、混淆矩阵（Confusion matrix）、未标签数据（Unlabeled data）。</p><p>决策树（Decision tree）是机器学习算法的一种。还有支持向量机（Support Vector Machines）都源于统计学。</p><p>人工神经网络（Artificial Neural Network）和深度学习（Deep learning）。</p><p>弱 AI/窄 AI（Weak AI/Narrow AI）复杂但只能做一件事，强 AI（Strong AI）接近人类智能。强化学习（Reinforcement Learning）：和人类学习方式类似。</p><h3 id="二十、计算机视觉"><a href="#二十、计算机视觉" class="headerlink" title="二十、计算机视觉"></a>二十、计算机视觉</h3><p>计算机视觉算法：检验颜色/垂直边缘。</p><p>核/过滤器（kernel or filter）包含做像素乘法的数字、卷积（convolution）。</p><p>Prewitt 算子（Prewitt Operators）、维奥拉·琼斯人脸检测（Viola-Jones Face Detection）、卷积神经网络（Convolutional Neural Networks）。</p><p>情感识别算法在识别出脸之后，可以进一步用其他算法定位面部标志，如眼睛和眉毛具体位置，从而判断心情等信息，也可用其他算法跟踪全身的标记点，如肩部，手臂等。</p><h3 id="二十一、自然语言处理（NLP）"><a href="#二十一、自然语言处理（NLP）" class="headerlink" title="二十一、自然语言处理（NLP）"></a>二十一、自然语言处理（NLP）</h3><ul><li>把句子分块，区分出词性（Parts of speech）、短语结构规则（Phrase structure rules）。</li><li>分析树（Parse tree）、知识图谱。</li><li>语音识别（Speech recognition）：谱图（Spectrogram）、快速傅立叶变换（Fast Fourier Transform）。</li><li>音素（Phonemes）识别、语音合成（Speech Synthesis）。</li></ul><h3 id="二十二、机器人和计算机心理学"><a href="#二十二、机器人和计算机心理学" class="headerlink" title="二十二、机器人和计算机心理学"></a>二十二、机器人和计算机心理学</h3><p>机器人早期雏形：法国吃饭鸭（Digesting Duck, Canard Digerateur）、土耳其行棋傀儡下国际象棋。</p><p>第一台计算机控制的机器出现在 1940 年代晚期，叫数控机器（Computer Numerical Control(CNC)）。</p><p>1960 年 Unimate 是第一个商业贩卖的可编程工业机器人。</p><p>简单控制回路（simple control loop）、负反馈回路（negative feedback loop）。</p><p>比例-积分-微分控制器（Proportional–Integral–Derivative controller）即 PID 控制器。</p><p>机器人三定律（Three Laws of Robotics）。</p><p>我们需要了解人类心理学，做出更好的计算机。</p><p>易用度（Usability）：颜色强度排序比颜色排序好，分组更好记，电话号码 317-555-3897 比 3175553897 好记。</p><p>直观功能（Affordances）：认出 vs 回想（Recognition vs Recall）、Facebook 研究正面情绪影响。</p><p>用软件修正注视位置，让视频通话时看起来像盯着对方，而不是盯着下方。</p><p>让机器有一定情商，把机器人做的像人，恐怖谷理论。</p><p>计算机心理学有很多开放式的问题，心理学帮助我们明白不同选择可能带来的影响。</p><h3 id="二十三、教育科技和计算机的未来"><a href="#二十三、教育科技和计算机的未来" class="headerlink" title="二十三、教育科技和计算机的未来"></a>二十三、教育科技和计算机的未来</h3><p>大型开放式在线课程（Massive Open Online Courses (MOOC)）。</p><p>智能辅导系统（Intelligent Tutoring Systems）：判断规则（Production rule）、域模型（Domain Model）、贝叶斯知识追踪（Bayesian knowledge tracing）：学生已经学会的概率、瞎猜的概率、失误的概率、做题过程中学会的概率、教育数据挖掘（Educational Data Mining）。</p><p>普适计算（Ubiquitous Computing）的愿景。</p><p>奇点（Singularity）：冯诺依曼提出，计算机发展爆炸性增长。</p><p>把工作分为 4 个象限，讨论自动化带来的影响。</p><p>机器人的存在时间可能长过人类，可以长时间探索宇宙。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学与技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理</title>
      <link href="/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86/"/>
      <url>/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>经济学原理是经管类学生的一门基础核心课程，基本理论通常分为微观经济学与宏观经济学两大部分，主要介绍经济学的基本概念、基本理论和基本分析方法。经济学通才保罗·萨缪尔森说过：“在当今社会，谁不学习经济学，谁就不懂得怎样生活”。学习经济学原理知识有助于培养对现实生活中经济行为与经济现象的观察能力，了解现实世界的运作，训练经济学直觉。</p></blockquote><span id="more"></span><div class="row">    <embed src="/pdf/BasicEcon.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="微观经济学"><a href="#微观经济学" class="headerlink" title="微观经济学"></a>微观经济学</h3><h4 id="经济名词概念"><a href="#经济名词概念" class="headerlink" title="经济名词概念"></a>经济名词概念</h4><ul><li>稀缺性：社会拥有的资源是有限的，因此不能生产人们希望拥有的所有物品与劳务。</li><li>经济学：研究社会如何管理自己的稀缺资源。</li><li>经济学家研究：人们如何作出决策、人们如何相互交易、影响整体经济的力量和趋势。</li><li>效率：社会能从其稀缺资源中得到最大利益的特性。</li><li>平等：经济成果在社会成员中平均分配的特性。</li><li>效率：经济蛋糕的大小，而平等则是指如何分割这块蛋糕。</li><li>机会成本：为了得到某种东西所必须放弃的东西。</li><li>理性人：系统而有目的地尽最大努力实现其目标的人。</li><li>边际变动<ul><li>对行动计划的微小增量调整。</li><li>理性人通常通过比较边际利益与边际成本来做出决策。当且仅当一种行为的 边际利益 <code>＞</code> 边际成本 时，一个理性决策者才会采取这种行动。</li></ul></li><li>激励：引起一个人做出某种行为的某种东西。激励在经济学中起着中心作用。</li><li>市场经济：当许多企业和家庭在物品与劳务市场上相互交易时，通过它们的分散决策配置资源的经济。</li><li>价格：“看不见的手”，用来指引经济活动的工具。</li><li>产权：个人拥有并控制稀缺资源的能力。产权包括所有权，使用权，处置权，收益权。</li><li><p>市场失灵</p><ul><li>市场本身不能有效配置资源的情况</li><li>市场失灵的原因：垄断、信息不对称、外部性、市场势力。</li></ul></li><li><p>外部性：一个人的行为对旁观者福利的影响。</p></li><li>市场势力：单个或一小群经济活动者对市场价格有显著影响的能力。</li><li>生产率：每一单位劳动投入所生产的物品与劳务数量。生产率取决于设备，劳动者的技能以及可用的技术。</li><li>通货膨胀：经济中物价总水平的上升。</li><li>经济周期：就业和生产等经济活动的波动。</li></ul><h4 id="经济学十大原理"><a href="#经济学十大原理" class="headerlink" title="经济学十大原理"></a>经济学十大原理</h4><ol><li>人们面临权衡取舍</li><li>某种东西的成本是为了得到它所放弃的东西</li><li>理性人考虑边际量</li><li>人们会对激励做出反应</li><li>贸易可以使每个人的状况都变得更好</li><li>市场通常是组织经济活动的一种好办法</li><li>政府有时可以改善市场结果</li><li>一国的生活水平取决于它生产物品与劳务的能力</li><li>当政府发行了过多货币时，物价上升</li><li>社会面临通货膨胀与失业之间的短期权衡取舍</li></ol><h4 id="像经济学家一样思考"><a href="#像经济学家一样思考" class="headerlink" title="像经济学家一样思考"></a>像经济学家一样思考</h4><ul><li>循环流向图：说明货币如何通过市场在家庭与企业之间流动的直观经济模型。</li><li><p>生产可能性边界</p><ul><li>表示在可得到的生产要素与生产技术既定时，一个经济所能生产的产品数量的各种组合的图形。</li><li>生产可能性边界表明在某一特定时期内生产不同物品之间的权衡取舍，但随着时间的推移，这种权衡取舍可以改变。</li></ul></li><li><p>微观经济学：研究家庭和企业如何做出决策，以及它们如何在市场上相互交易。</p></li><li>宏观经济学：研究整体经济现象，包括通货膨胀、失业和经济增长。</li><li>实证表述：试图描述世界是什么样子的观点。（描述性的）</li><li>规范表述：试图描述世界应该是什么样子的观点。（规范性的）</li></ul><h4 id="相互依存性与贸易的好处"><a href="#相互依存性与贸易的好处" class="headerlink" title="相互依存性与贸易的好处"></a>相互依存性与贸易的好处</h4><ul><li>绝对优势：用比另一个生产者更少的投入生产某种物品的能力。</li><li>机会成本：为了得到某样东西而必须放弃的东西。</li><li>比较优势：一个生产者以低于另一个生产者的机会成本生产一种物品的行为。</li><li>学会运用比较优势原理分析交易的机会成本：当每个人专门生产自己有比较优势的物品时，经济的总产量就增加了。贸易可以使社会上每个人都获益，因为它使人们可以专门从事他们具有比较优势的活动。</li><li>进口品：在国外生产而在国内销售的物品。</li><li>出口品：在国内生产而在国外销售的物品。</li></ul><h4 id="供给与需求的市场力量"><a href="#供给与需求的市场力量" class="headerlink" title="供给与需求的市场力量"></a>供给与需求的市场力量</h4><ul><li>市场：由某种物品或劳务的买者与卖者组成的一个群体。</li><li>竞争市场：有许多买者与卖者，以至于每个人对市场价格的影响都微乎其微的市场。</li><li>完全竞争市场必须具备两个特征：<ol><li>可供销售的物品时完全相同的</li><li>买者和卖者人数众多，以至于没有任何一个买者或卖者可以影响市场价格</li></ol></li><li>需求量：买者愿意并且能够购买的一种物品的数量。</li><li>需求定理：认为在其他条件不变时，一种物品的价格上升，对该物品的需求量减少的观点。</li><li>需求表：表示一种物品的价格与需求量之间关系的表格。</li><li>需求曲线：表示一种物品的价格与需求量之间关系的图形。</li><li>正常物品：在其他条件相同时，收入增加引起需求量增加的物品。</li><li>低档物品：在其他条件相同时，收入增加引起需求量减少的物品。</li><li>替代品：一种物品价格上升引起另一种物品需求量增加的两种物品。</li><li>互补品：一种物品价格上升引起另一种物品需求量减少的两种物品。</li><li>影响买者的变量：价格、收入、相关物品的价格、嗜好、预期、买者的数量。</li><li>商品本身的价格是影响需求量的因素，价格变动表现为沿着需求曲线的变动。其它都是影响需求的因素，其变动使需求曲线移动。</li><li>供给量：卖者愿意并且能够出售的一种物品的数量。</li><li>供给定理：认为在其他条件不变时，一种物品价格上升，该物品供给量增加的观点。</li><li>供给表：表示一种物品的价格与供给量之间关系的表格。</li><li>供给曲线：表示一种物品的价格与供给量之间关系的图形。</li><li>影响卖者的变量：<ol><li>价格、投入品价格、技术、预期、卖者的数量</li><li>商品本身的价格，变动表现为沿着供给曲线的变动</li><li>其他变量的变动将使供给曲线移动</li></ol></li><li>均衡：市场价格达到使供给量与需求量相等的水平时的状态。</li><li>均衡价格：使供给与需求平衡的价格。</li><li>均衡数量：均衡价格下的供给量与需求量。</li><li>过剩：供给量＞需求量的状态。</li><li>短缺：需求量＞供给量的状态。</li><li>供求定理：任何一种物品价格的调整都会使该物品的供给与需求达到平衡。</li><li><p>分析均衡变动的三个步骤：</p><ol><li>确定该事件是使供给曲线移动还是使需求曲线移动（还是使两者都移动）</li><li>确定曲线移动的方向</li><li>用供求图说明这种移动如何改变均衡价格和均衡数量</li></ol></li><li><p>当供给或需求变动时，价格和数量会发生什么变动</p><p>  |          | 供给未变          | 供给增加            | 供给减少                |<br>  | ———— | ————————- | —————————- | —————————- |<br>  | 需求未变 | 价格相同 数量相同 | 价格下降 数量增加   | 价格上升 数量减少   |<br>  | 需求增加 | 价格上升 数量增加 | 价格不确定 数量增加 | 价格上升 数量不确定 |<br>  | 需求减少 | 价格下降 数量减少 | 价格下降 数量不确定 | 价格不确定 数量减少 |</p></li></ul><h4 id="弹性及其应用"><a href="#弹性及其应用" class="headerlink" title="弹性及其应用"></a>弹性及其应用</h4><ul><li>弹性：衡量需求量或供给量对其某种决定因素的反应程度的指标。</li><li>需求价格弹性：衡量一种物品需求量对其价格变动反应程度的指标。</li><li>需求价格弹性 = 需求量变动百分比 ÷ 价格变动百分比</li><li>决定需求价格弹性的因素：相近替代品的可获得性、必需品与奢侈品、市场的定义、时间框架。</li><li>需求收入弹性：衡量一种物品需求量对消费者收入变动反应程度的指标。</li><li>需求收入弹性 = 需求量变动百分比 ÷ 收入变动百分比</li><li>需求的交叉价格弹性：衡量一种物品需求量对另一种物品价格变动的反应程度的指标。</li><li>需求的交叉价格弹性 = 物品 1 的需求量变动百分比 ÷ 物品 2 的价格变动百分比</li><li>供给价格弹性：衡量一种物品供给量对其价格变动反应程度的指标。</li><li>供给价格弹性 = 供给量变动百分比 ÷ 价格变动百分比</li><li>总收益：一种物品的买者支付从而卖者得到的量。</li><li>总收益 = 该物品的价格 × 销售量 （P×Q）</li><li>利用弹性的定义计算价格或需求量的变动</li><li>需求价格弹性的中点法</li><li>理解需求曲线形状与弹性的关系，以及弹性与总收入之间的关系<ul><li>Ep &gt; 1 富有弹性 曲线平坦 降价销售可以增加销售收入</li><li>Ep &lt; 1 缺乏弹性 曲线陡峭 提价销售才能增加销售收入</li><li>但是，由于同一条直线上弹性值不同，这就决定了在陡峭的曲线的上部，降价也能增加销售收入，反之，在平坦曲线的下部，降价则要减少销售收入。</li><li>Ep = 1 单位弹性 价格变动，总收益不动</li><li>Ep = 0 完全无弹性，一条垂线</li><li>Ep = ∞ 完全富有弹性，一条水平线</li></ul></li><li>“谷贱伤农”的含义：当粮食供给增加，导致价格下降时，也导致了销售量的增加。但因为粮食的需求缺乏弹性，所以价格下降的幅度大于销售量增加的幅度，所以总收益下降。</li></ul><h4 id="供给、需求与政府政策"><a href="#供给、需求与政府政策" class="headerlink" title="供给、需求与政府政策"></a>供给、需求与政府政策</h4><ul><li>价格上限：出售一种物品的法定最高价格。</li><li>价格下限：出售一种物品的法定最低价格。</li><li>价格上限与下限对市场结果的影响：当政府对竞争市场实行限制性价格上限时，就产生了物品的短缺，而且，卖者必须在大量潜在买者中配给稀缺物品。</li><li>价格下限引起了过剩。</li><li>税收归宿：税收负担在市场参与者之间进行分配的方式。</li><li>学会利用供求模型分析税收对买方价格和卖方价格的影响<ul><li>税收抑制了市场活动。当对一种物品征税时，该物品在新均衡时的销售量减少了。</li><li>买者与卖者分摊了税收负担。在新均衡时，买者为该物品支付的更多了，而卖者得到的更少了。</li><li>对买者征税和对卖者征税是相同的。唯一区别是谁把钱交给政府。</li></ul></li><li>理解供求曲线的弹性与税收负担之间的关系<ul><li>税收归宿取决于供给和需求的弹性，税收负担更多得落在缺乏弹性的市场一方身上。</li><li>因为，在本质上，弹性衡量当条件变得不利时，买者或卖者离开市场的意愿。</li><li>需求弹性小意味着买者对消这某种物品没有适当的替代品。供给弹性小意味着卖者对生产这某种物品没有适当的替代品。</li><li>当对这种物品征税时，市场中其他好的选择少的一方不能轻而易举地离开市场，从而必须承担更多的税收负担。</li></ul></li></ul><h4 id="消费者、生产者与市场效率"><a href="#消费者、生产者与市场效率" class="headerlink" title="消费者、生产者与市场效率"></a>消费者、生产者与市场效率</h4><ul><li>福利经济学：研究资源配置如何影响经济福利的一门学问。</li><li>掌握支付意愿、消费者剩余、生产者剩余以及总剩余等概念</li><li>支付意愿：买者愿意为某种物品支付的最高量。</li><li>消费者剩余：买者愿意为一种物品支付的量减去其为此实际支付的量。（=买者的支付意愿—市场价格）</li><li>需求曲线以下和价格以上的面积衡量一个市场上的消费者剩余。反映了经济福利。</li><li>成本：卖者为了生产一种物品而必须放弃的每种东西的价值。</li><li>生产者剩余：卖者出售一种物品得到的量减去其生产成本。（=市场价格—卖者成本）</li><li>价格之下和供给曲线以上的面积衡量一个市场上的生产者剩余。</li><li>总剩余：两者消费者剩余和生产者剩余的总和（=买者的支付意愿—卖者成本）是供给曲线和需求曲线到均衡数量之间的面积。</li><li>理解经济效率的含义</li><li>效率：资源配置使社会所有成员得到的总剩余最大化的性质。</li><li>平等：在社会成员中平均地分配经济成果的特性。</li><li>关于市场结果的观点：<ol><li>自由市场把物品的供给分配給对这些物品评价最高的买者，这种评价用买者的支付意愿来衡量</li><li>自由市场把物品的需求分配給可以以最低成本生产这些物品的卖者</li><li>自由市场生产使消费者和生产者剩余总和最大化的产量，均衡结果是资源的有效配置。</li></ol></li><li>学会利用供求曲线衡量消费者剩余与生产者剩余及其变动</li><li>市场均衡时的消费者剩余与生产者剩余</li></ul><h4 id="赋税的代价"><a href="#赋税的代价" class="headerlink" title="赋税的代价"></a>赋税的代价</h4><ul><li>无谓损失：市场扭曲（例如税收）引起的总剩余减少。</li><li>税收引起无谓损失是因为它使买者和卖者不能实现某些贸易的好处。</li><li>贸易的好处——买者评价与卖者成本之间的差额——小于税收。一旦征税，这些贸易就无法进行。无谓损失就是由于税收阻止了这些互利的贸易而引起的剩余损失。</li><li>税收引起无谓损失是因为它使买者和卖者不能实现某些贸易的好处。由于供给和需曲弹性衡量市场参与者对市场状况的反应程度，所以供给和需求的弹性越大，税收的无谓损失也就越大。</li><li>随着税收规模提高，无谓损失的增加越来越快，且快于税收规模。税收收入起初随着税收规模扩大而增加，但最终由于高税收减少了市场规模，也就减少了税收收入。</li></ul><h4 id="国际贸易"><a href="#国际贸易" class="headerlink" title="国际贸易"></a>国际贸易</h4><ul><li>世界价格：一种物品在世界市场上所通行的价格。</li><li>学会应用供求曲线分析自由贸易与关税对国内生产者剩余和消费者剩余的影响</li><li>自由贸易对出口国的影响：当一国允许贸易并成为一种物品的出口者时，国内该物品的生产者状况变好，而国内该物品的消费者状况变坏；从赢家收益超过了输家损失的意义上说，贸易使一国的经济福利增加了。</li><li>自由贸易对进口国的影响：当一国贸允许贸易并成为一种物品的进口者时，国内该物品消费者的状况变好，而国内该物品生产者的状况变坏；从赢家收益超过了输家损失的意义上说，贸易使一国的经济福利增加了。</li><li>关税：对国外生产而在国内销售的物品征收的税。</li><li>关税的影响：<ol><li>关税减少了进口量，并使国内市场向没有贸易时的均衡移动。</li><li>关税会引起无谓损失，仅仅是因为它是一种税。它扭曲了激励，并使稀缺资源配置背离了最适水平</li></ol></li><li>一部分是国内企业以高成本生产造成的无谓损失，一部分是消费不足的无谓损失。</li><li>国际贸易的其他利益：增加了物品的多样性，通过规模经济降低了成本，增加了竞争，加强了思想交流。</li></ul><h4 id="外部性"><a href="#外部性" class="headerlink" title="外部性"></a>外部性</h4><ul><li>理解正外部性、负外部性的含义及其对资源配置的影响</li><li>外部性：一个人的行为对旁观者福利的无补偿的影响。</li><li>外部性有负，也有正，前者增加别人的福利，后者减少别人的福利。</li><li>负外部性：社会成本大于私人成本，社会最适量小于私人市场决定的数量，征税</li><li>正外部性：社会价值大于私人价值，社会最适量大于私人市场决定的数量，补贴</li><li>外部性的内在化：改变激励，以使人们考虑到自己行为的外部效应。</li><li>负外部性使市场生产的数量大于社会合意的数量，正外部性使市场生产的数量小于社会合意的数量。为了解决这个问题，政府可以通过对有负外部性的物品征税并给予有正外部性的物品补贴来使外部性内在化。</li><li>矫正税（庇古税）：旨在引导私人决策者考虑负外部性引起的社会成本的税收。</li><li>科斯定理：认为如果私人各方可以无成本地就资源配置进行协商，那么，他们就可以自己解决外部性问题的一个命题。</li><li>科斯定理说明，私人经济主体可以解决他们之间的外部性问题。无论最初的权利如何分配，有关各方总可以达成一种协议，在这种协议中，每个人的状况都可以变好，而且，结果是有效率的。</li><li>交易成本：各方在达成协议与遵守协议过程中所发生的成本。</li></ul><h4 id="公共物品和公共资源"><a href="#公共物品和公共资源" class="headerlink" title="公共物品和公共资源"></a>公共物品和公共资源</h4><ul><li>理解公共品的经济含义（非竞争性与非排他性）以及由此引发的免费搭车问题</li><li>排他性：一种物品具有的可以阻止一个人使用该物品的特性。</li><li>消费中的竞争性：一个人使用一种物品将减少其他人对该物品的使用的特性。</li><li>根据这两个特点，把物品分成了四种类型：<ol><li>私人物品：既有排他性又有竞争性的物品。</li><li>公共物品：既无排他性又无竞争性的物品。 如国防、灯塔、知识、基础研究和反贫困。</li><li>公共资源：有竞争性但无排他性的物品。 如清洁的空气和水、畅通的交通和野生动物。</li><li>自然垄断：有排他性但无竞争性的物品。</li></ol></li><li>搭便车者：得到一种物品的利益但避开为此付费的人。</li><li>由于公共物品没有排他性，搭便车者问题的存在就使私人市场无法提供公共物品。但是，政府可以潜在地解决这个问题。如果政府确信一种公共物品的总利益大于成本，他就可以提供该公共物品，并用税收收入对其进行支付，从而可以使每个人的状况变好。</li><li>成本——收益分析：比较提供一种公共物品的社会成本与社会收益的研究。</li><li>公地悲剧：一个寓言，说明从整个社会的角度看，为什么公共资源的使用大于合意的水平。</li></ul><h4 id="税制的设计"><a href="#税制的设计" class="headerlink" title="税制的设计"></a>税制的设计</h4><ul><li>预算赤字：政府支出大于政府收入。</li><li>预算盈余：政府收入大于政府支出。</li><li>平均税率：支付的总税收除以总收入。</li><li>边际税率：增加 1 美元收入所支付的额外税收。</li><li>定额税：对每个人等量征收的税收。</li><li>受益原则：认为人们应该根据他们从政府服务中得到的利益来纳税的思想。</li><li>支付能力原则：认为应该根据一个人可以承受的负担来对这个人征税的思想。</li><li>纵向平等：主张支付能力更强的纳税人应该缴纳更多税收的思想。</li><li>横向平等：主张有相似支付能力的纳税人应该缴纳等量税收的思想。</li><li>比例税：高收入纳税人和低收入纳税人缴纳收入中相同比例的税收。</li><li>累退税：高收入纳税人缴纳的税收在收入中的比例低于低收入纳税人的税收。</li><li>累进税：高收入纳税人缴纳的税收在收入中的比例高于低收入纳税人的税收。</li></ul><h4 id="生产成本"><a href="#生产成本" class="headerlink" title="生产成本"></a>生产成本</h4><ul><li>总收益：企业出售其产品所得到的货币量。</li><li>总成本：企业用于生产的投入品的市场价值。</li><li>利润：=总收益—总成本。</li><li>显性成本：需要企业支出货币的投入成本。</li><li>隐性成本：不需要企业支出货币的投入成本。</li><li>经济利润：总收益减总成本，包括显性成本与隐性成本。</li><li>会计利润：总收益减总显性成本。</li><li>生产函数：用于生产一种物品的投入量与该物品产量之间的关系。</li><li>边际产量：增加一单位投入所引起的产量增加。</li><li>边际产量递减：一种投入的边际产量随着投入量增加而减少的特征。例如：因为超过了劳动力与设备的最佳配比点，工人越多，每个新增工人的产量就越小。</li><li>成本的各种衡量指标</li><li>固定成本（FC）：不随着产量变动而变动的成本。 主要有厂房设备和管理人员的工资。</li><li>可变成本（VC）：随着产量变动而变动的成本。 主要指原材料、能源和工人的工资等。</li><li>平均总成本（ATC）：总成本除以产量。</li><li>平均固定成本（AFC）：固定成本除以产量。</li><li>平均可变成本（AVC）：可变成本除以产量。</li><li>边际成本（MC）：额外一单位产量所引起的总成本的增加。(=总成本变动量/产量变动量)</li><li>平均成本告诉我们，如果总成本在所生产的所有单位中平均分摊，普通一单位产量的成本。</li><li>边际成本告诉我们，多生产一单位产量引起的总成本变动。</li><li>有效规模：使平均总成本最小的产量。只要边际成本小于平均总成本，平均总成本就下降；只要边际成本大于平均总成本，平均总成本就上升。</li><li>边际成本曲线与平均总成本曲线相交于有效规模点。</li><li>一个典型企业的成本曲线的重要特征：<ol><li>随着产量增加，边际成本最终要上升。</li><li>平均总成本曲线是 U 形的。</li><li>边际成本曲线与平均总成本曲线在平均总成本曲线的最低点相交。（有效规模）</li></ol></li><li>短期成本是指至少有一个要素不变时期中的成本。</li><li>长期成本是指在所有投入要素都发生变化时期中发生的成本。长期中没有固定成本。</li><li>规模经济：长期平均总成本随产量增加而减少的特性。</li><li>规模不经济：长期平均总成本随产量增加而增加的特性。</li><li>规模收益不变：长期平均总成本在产量变动时保持不变的特性。</li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>定义</th><th>数学表述</th></tr></thead><tbody><tr><td><strong>显性成本</strong></td><td>要求企业支出货币的成本</td><td></td></tr><tr><td><strong>隐性成本</strong></td><td>不要求企业支出货币的成本</td><td></td></tr><tr><td><strong>固定成本</strong></td><td>不随产量变动而变动的成本</td><td>FC</td></tr><tr><td><strong>可变成本</strong></td><td>随产量变动而变动的成本</td><td>VC</td></tr><tr><td><strong>总成本</strong></td><td>企业在生产中使用的所有投入的市场价值</td><td>TC=FC+VC</td></tr><tr><td><strong>平均固定成本</strong></td><td>固定成本除以产量</td><td>AFC=FC/Q</td></tr><tr><td><strong>平均可变成本</strong></td><td>可变成本除以产量</td><td>AVC=VC/Q</td></tr><tr><td><strong>平均总成本</strong></td><td>总成本除以产量</td><td>ATC=TC/Q</td></tr><tr><td><strong>边际成本</strong></td><td>多生产一单位产品所引起的总成本增加量</td><td>MC=△TC/△Q</td></tr></tbody></table></div><h4 id="竞争市场上的企业"><a href="#竞争市场上的企业" class="headerlink" title="竞争市场上的企业"></a>竞争市场上的企业</h4><ul><li>竞争市场：有许多交易相同产品的买者与卖者，以至于每一个买者和卖者都是价格接受者的市场。</li><li>竞争市场的特点：<ol><li>市场上有许多买者和许多卖者。</li><li>各个卖者提供的物品大体上是相同的。</li><li>企业可以自由地进入或退出市场。</li></ol></li><li>平均收益：总收益除以销售量。</li><li>边际收益：增加一单位销售量引起的总收益变动。</li><li>竞争企业的短期供给曲线是边际成本曲线在平均可变成本曲线以上的那一部分。</li><li>竞争企业的长期供给曲线是边际成本曲线位于平均总成本曲线之上的那一部分。</li><li>沉没成本：已经发生而且无法收回的成本。</li></ul><h4 id="垄断"><a href="#垄断" class="headerlink" title="垄断"></a>垄断</h4><ul><li>垄断企业：一种没有相近替代品的产品的唯一卖者的企业。</li><li>垄断产生的基本原因是进入壁垒，进入壁垒有三个主要形成条件：<ol><li>垄断资源：生产所需要的关键资源由单个企业所拥有；</li><li>政府管制：政府给予单个企业排他性地生产某种物品或劳务的权利；</li><li>生产流程：某个企业能以低于大量生产者的成本生产产品。</li></ol></li><li>自然垄断：由于一个企业能以低于两个或更多企业的成本向整个市场供给一种物品或劳务而产生的垄断。当相关产量范围存在规模经济时，自然垄断就产生了。</li><li>垄断者利润最大化产量是由边际收益曲线与边际成本曲线的交点决定的。</li><li>供给曲线告诉我们，企业在任何一种既定价格时选择的供给量。当我们分析作为价格接受者的竞争企业时，这个概念是有意义的。但垄断企业是价格制定者，而不是价格接受者。企业在选择供给量的同时确定价格。</li><li>实际上，垄断者关于供给多少的决策不可能与它所面临的需求曲线分开。需求曲线的形状决定边际收益曲线的形状，边际收益曲线的形状又决定了垄断者的利润最大化产量。在竞争市场上，可以在不了解需求曲线的情况下分析供给决策，但在垄断市场上，这是不正确的。因此，我们从不谈论垄断者的供给曲线。</li></ul><div class="table-container"><table><thead><tr><th>竞争与垄断</th><th></th><th><strong>竞争</strong></th><th><strong>垄断</strong></th></tr></thead><tbody><tr><td><strong>相似之处</strong></td><td>企业目标</td><td>利润最大化</td><td></td></tr><tr><td>最大化原则</td><td>MR=MC</td><td></td><td></td></tr><tr><td>短期中能赚到经济利润吗？</td><td>能</td><td></td><td></td></tr><tr><td><strong>不同之处</strong></td><td>企业数量</td><td>许多</td><td>一家</td></tr><tr><td>边际收益</td><td>MR=P</td><td>MR&lt;P</td><td></td></tr><tr><td>价格</td><td>P=MC</td><td>P&gt;MC</td><td></td></tr><tr><td>有生产者福利最大化的产量水平吗?</td><td>有</td><td>没有</td><td></td></tr><tr><td>长期中能进入吗？</td><td>能</td><td>不能</td><td></td></tr><tr><td>长期中能赚到经济利润吗？</td><td>不能</td><td>能</td><td></td></tr><tr><td>有价格歧视的可能吗？</td><td>没有</td><td>有</td></tr></tbody></table></div><ul><li>价格歧视：以不同价格向不同顾客出售同一种物品的经营做法。</li><li>价格歧视能增加垄断者的利润，可能减少无谓损失。通过使一些本来不想购买的消费者得到物品而增加经济福利。</li></ul><h4 id="垄断竞争"><a href="#垄断竞争" class="headerlink" title="垄断竞争"></a>垄断竞争</h4><ul><li>寡头：只有几个提供相似或相同产品的卖者的市场结构。</li><li>垄断竞争：存在许多出售相似但不相同产品的企业的市场结构。</li><li>垄断竞争描述了具有以下特征的市场：<ol><li>许多卖者：有许多企业争夺相同的顾客群体</li><li>产品差别：每个企业生产的一种产品至少与其他企业生产的这种产品略有不同。因此每个企业不是价格接受者，而是面临一条向右下方倾斜的需求曲线</li><li>自由进入和退出：企业可以无限制地进入或退出一个市场。因此，市场上企业的数量要一直调整到经济利润为零时为止</li></ol></li></ul><div class="table-container"><table><thead><tr><th>垄断竞争：在完全竞争与垄断之间</th><th>市场结构</th><th></th><th></th></tr></thead><tbody><tr><td>完全竞争</td><td>垄断竞争</td><td>垄断</td><td></td></tr><tr><td><strong>所有这三种结构的特征</strong></td><td></td><td></td><td></td></tr><tr><td>企业目标</td><td>利润最大化</td><td></td><td></td></tr><tr><td>最大化规则</td><td>MR=MC</td><td></td><td></td></tr><tr><td>短期中能赚到经济利润吗？</td><td>能</td><td></td><td></td></tr><tr><td><strong>垄断和垄断竞争共同的特征</strong></td><td></td><td></td><td></td></tr><tr><td>是价格接受者吗？</td><td>是</td><td>不是</td><td>不是</td></tr><tr><td>价格</td><td>P=MC</td><td>P&gt;MC</td><td>P&gt;MC</td></tr><tr><td>能生产福利最大化的产量水平吗？</td><td>能</td><td>不能</td><td>不能</td></tr><tr><td><strong>完全竞争与垄断竞争共同的特征</strong></td><td></td><td></td><td></td></tr><tr><td>企业数量</td><td>许多</td><td>许多</td><td>一家</td></tr><tr><td>长期中能进入吗？</td><td>能</td><td>能</td><td>不能</td></tr><tr><td>长期中能赚到经济利润吗？</td><td>不能</td><td>不能</td><td>能</td></tr></tbody></table></div><ul><li>市场结构的四种类型</li></ul><div class="table-container"><table><thead><tr><th><strong>垄断</strong></th><th><strong>寡头</strong></th><th><strong>垄断竞争</strong></th><th><strong>完全竞争</strong></th></tr></thead><tbody><tr><td>·自来水 ·有线电视</td><td>·网球 ·烟草</td><td>·小说 ·电影</td><td>·小麦 ·牛奶</td></tr></tbody></table></div><h4 id="寡头"><a href="#寡头" class="headerlink" title="寡头"></a>寡头</h4><ul><li>寡头：只有少数几个卖者提供相似或相同产品的市场结构。</li><li>博弈论：研究在策略状况下人们如何行为。</li><li>勾结：一个市场上的企业之间就生产的产量或收取的价格达成的协议。</li><li>卡特尔：联合起来行事的企业集团。</li><li>纳什均衡：相互作用的经济主体在假定所有其他主体所选策略为既定的情况下选择自己最优策略的状态。</li><li>当寡头企业单独地选择利润最大化的产量时，它们生产的产量大于垄断但小于竞争的产量水平。寡头价格低于垄断价格，但高于竞争价格（竞争价格等于边际成本）</li><li>随着寡头市场上卖者数量增加，寡头市场就越来越像竞争市场，其价格接近于边际成本，生产量接近于对社会有效率的水平。</li><li>囚徒困境：两个被捕的囚徒之间的一种特殊“博弈”，说明为什么甚至在合作对双方都有利时，保持合作也是困难的。</li><li>占优策略：无论其他参与者选择什么策略，对一个参与者都为最优的策略。</li></ul><h3 id="宏观经济学"><a href="#宏观经济学" class="headerlink" title="宏观经济学"></a>宏观经济学</h3><h4 id="GDP-和-CPI"><a href="#GDP-和-CPI" class="headerlink" title="GDP 和 CPI"></a>GDP 和 CPI</h4><ul><li>掌握消费物价指数（CPI）与生产物价指数（PPI）的计算方法；<ul><li>通货膨胀：指经济中物价总水平的上升</li><li>消费物价指数（CPI）：普通消费者购买的物品与劳务总费用的衡量指标。每年一篮子物品与劳务的价格要除以基年一篮子物品与劳务的价格，然后把这个比率乘以 100，所得出的数字就是消费物价指数。</li><li>通货膨胀率：从前一个时期以来物价总水平变动的百分比</li><li>第二年通胀率 = （第二年 CPI - 第一年 CPI）/ 第一年 CPI</li><li>生产物价指数（PPI）：企业购买的一篮子物品与劳务的费用的衡量指标。由于企业最终要把它们的费用以更高消费价格的形式转移给消费者，所以生产物价指数变动将领先于消费物价指数，因此可以预测消费物价指数的变动。</li></ul></li><li>理解 CPI 是高估还是低估生活费用？为什么？<ul><li>替代倾向。一篮子的数量权重不变，但实际上便宜物品一直在替代昂贵物品，CPI 高估了从某一年到下一年生活费用的增加。</li><li>新产品的引进。新产品的出现并不能在一篮子物品中反映出来，所以物价指数不能反映公众享受到的福利。</li><li>无法衡量的质量变动。物品质量变动不能在货币价值中反映出来，物价指数不能反映生活质量的变动。</li><li>因此，CPI 高估了真实的通货膨胀。</li></ul></li><li>了解 CPI 与 GDP 平减指数的差异<ul><li>消费物价指数与 GDP 平减指数的变动并不完全一致，因为前者只指消费者的支出，后者指所有的商品和劳务，进口影响消费物价指数而不影响 GDP 平减指数；且两者的权重不同，GDP 平减指数一直随 GDP 构成的变动而自动地改变物品与劳务的组合，而消费物价指数用固定的一篮子物品。</li><li>指数化：当一美元购买力根据法律或合约自动按照通货膨胀校正时被称为通货膨胀的指数化。</li></ul></li><li>掌握生产率的含义以及决定生产率的各种要素<ul><li>生产率：一个工人每小时工作时间所生产的物品与劳务的数量。</li><li>生产率的决定因素：物质资本、人力资本、自然资源和技术知识</li><li>物质资本：用于生产物品与劳务的设备与建筑物存量</li><li>人力资本：工人通过教育、培训和经验而获得的知识与技能</li><li>自然资源：由自然界提供的用于生产物品与劳务的投入，如土地、河流和矿藏。</li><li>技术知识：社会对生产物品与劳务的最好方法的了解。</li></ul></li><li>理解“一个国家的生活水平取决于生产物品和劳务的能力”的原理<ul><li>一个经济的国内生产总值（GDP）同时衡量经济中所有人赚到的总收入和经济中物品与劳务产量的总支出。一个经济的收入是该经济的产出。一个国家只有生产出大量物品与劳务，它才能享有更高的生活水平。</li></ul></li></ul><h4 id="金融体系和金融工具"><a href="#金融体系和金融工具" class="headerlink" title="金融体系和金融工具"></a>金融体系和金融工具</h4><ul><li>了解金融市场的类型与主要参与者<ul><li>金融体系：经济中促使一个人的储蓄与另一个人的投资相匹配的一组机构</li><li>金融机构分为两种类型——金融市场和金融中介机构</li><li>金融市场：储蓄者可以通过它直接向借款人提供资金的金融机构。两种最重要的金融市场是债券市场和股票市场。</li><li>债券市场：专门交易企业债券和政府债券的市场</li><li>债券：一种债务证明书，规定借款人对债券持有人负有债务责任的证明。</li><li>债券的三个特点：<ol><li>期限——债券到期之前的时间长度。债券的利率部分取决于它的期限，长期债券风险高、利率高。</li><li>信用风险——借款人不能支付某些利息或本金的可能性，这种不能支付成为拖欠。</li><li>税收待遇——税法对待债券所赚到的利息的方式</li></ol></li><li>股票市场：专门买卖股票的市场</li><li>股票：代表企业的所有权，也代表对企业所获得利润的索取权。与债券相比，股票既提供高风险，又提供潜在的高收益。股票市场上股票交易的价格是由其供求状况决定的。由于股票代表公司所有权，所以，股票的需求（以及其价格）反映了人们对公司未来盈利性的预期。</li><li>股票指数：计算一组股票价格的平均数，可用于监视整个股票价格水平。</li><li>企业筹资出售股票为股本筹资；出售债券为债务筹资。</li><li>金融中介机构：储蓄者可以间接地向借款者提供资金的金融机构，它们是借贷双方的中介和桥梁。两种最重要的金融中介机构——银行和共同基金。</li><li>银行：吸收储蓄者的存款贷放给借款人，赚取存贷款利差。银行可以给存款人提供支票，作为交换媒介进行交易。</li><li>共同基金：是一个向公众出售股份，并用收入来购买各种股票、债券、或者它们的某种组合的机构。共同基金持有人接受这种资产组合相关的所有风险与收益。如果资产组合价值上升，持股人受益；反之则损失。</li><li>共同基金的优点：可以使钱不多的人也能进行多元化投资，降低风险；可以使普通人享有专业资金管理者的服务。</li></ul></li><li>理解国民收入帐户恒等式以及储蓄和投资的含义（它适用于每个家庭和企业吗？）；<ul><li>重要的恒等式 Y=C+I+G+NX</li><li>封闭经济（不与其他经济交易的经济）的净出口等于零，所以 Y=C+I+G</li><li>对此等式移项，得 Y-C-G=I</li><li>等式左端是在消费和政府购买之后留下的总收入，称为国民储蓄（简称储蓄），</li><li>所以该式又可以表达为 S=I 储蓄等于投资</li><li>也可以是 S=Y-C-G</li><li>或者 S=（Y-T-C）+（T-G）储蓄因此等于私人储蓄与公共储蓄之和</li><li>私人储蓄（Y-T-C）是家庭在支付了税收和消费之后剩下的收入量</li><li>公共储蓄（T-G）是政府在支付其花费后剩下来的税收收入量，政府税收大于支出为预算盈余，反之则为预算赤字。</li><li>该等式表明通过金融市场可以在整体上实现社会的储蓄等于投资。</li><li>储蓄等于投资的机制：个人存款银行或买股票的储蓄未必等于另一个人购买厂房设备的投资，但是，投资者可以通过金融机构借到不足的资金，这就能在总量上实现投资等于储蓄。</li></ul></li><li>理解可贷资金市场的供给（储蓄）和需求（投资）及其均衡；<ul><li>可贷资金市场：假定存在这样一个市场，所有的储蓄都进入这个市场，所有的投资都借自这个市场。这个市场的利率既是储蓄的收益，又是借款的成本。</li><li>可贷资金：人们选择储蓄并贷出不用于自己消费的所有收入。</li><li>可贷资金市场的供给与需求：供给来自那些有额外收入，并想储蓄和贷出的人。其方式可以是直接的买债券，也可以是间接的存款。需求来自希望借款进行投资的家庭和企业，包括抵押贷款购置住房或购买设备建立工厂。 可贷资金的供求取决于实际利率。·</li><li>挤出：由于政府借款所引起的投资减少</li></ul></li><li>能够利用供求曲线分析各类政策（譬如，存款利息政策）对可贷资金市场均衡的影响</li><li>掌握用现值来衡量货币的时间价值，掌握风险的概念并区分特有风险、总风险<ul><li>金融学：研究在一定时期内，如何配置资源和应对风险，作出决策的学科。</li><li>现值：用现行利率带来一定量未来货币所需要的现在货币量。</li><li>现值的概念说明：接受现在一定量货币比接受未来等量货币更为可取；不同时点上的货币价值的比较要转换成现值进行。如果一个项目的现值超过成本，企业就应该投资这个项目。</li><li>货币的时间价值是按照复利计算的，其公式为 FV=PV（1+r）t</li><li>如果将未来的货币转换成现在的货币，其公式为 PV=FV/（1+r）t</li><li>风险厌恶：对坏事的厌恶大于对可比的好事的喜欢，边际效用递减</li><li>多元化：通过用大量不相关的小风险代替一种风险来减少风险。</li><li>特有风险：只影响一个经济主体的风险</li><li>总风险：同时影响所有经济主体的风险</li><li>股票有价证券的风险随股票数量的增加而大大降低，但完全消除风险是不可能的。多元化可以消除特有风险——与某公司相关的不确定性，但是不能消除总风险——与影响所有公司的整个经济相关的不确定性。</li><li>投入股票越多，风险和收益就越大。</li></ul></li></ul><h4 id="失业"><a href="#失业" class="headerlink" title="失业"></a>失业</h4><ul><li>理解政府是如何统计劳动力与失业指标的；<ul><li>劳动力（成年人）= 就业人数 + 失业人数</li><li>失业率=失业人数 /（就业人数 + 失业人数）</li><li>劳动力参工率=劳动力 / 成年人口</li><li>失业指标并没有反映所有的失业者，特别是那些没有工作，找不到工作失去信心的工人，没有反映在失业统计中。失业大多是短期的，而在任何一个时间所观察到的大多数失业是长期的。经济中大部分失业问题是由少数长期没有工作的工人造成的。</li></ul></li><li>注意区分自然失业、周期性失业以及摩擦性失业、结构性失业等概念；<ul><li>正常失业率就是自然失业，它为劳动力市场的不完善所造成，可以分成摩擦性失业、求职性失业、结构性失业、技术性失业、季节性失业和古典性失业。</li><li>周期性失业：与自然失业率背离的失业，它为总需求不足所造成。</li><li>摩擦性失业：由于工人找到最适于自己嗜好和技能的工作需要时间而引起的失业。解释较短的失业持续时间。摩擦性失业不可避免，因为经济在发展，产业结构在调整，劳动力也要随之在不同产业之间转移，这个转移的过程就是摩擦性失业。</li><li>失业保障：当工人失业时为他们提供部分收入保护的政府计划。这在一定程度上提高了摩擦性失业，因为工人缺乏足够的就业刺激。</li><li>结构性失业：由于某些劳动市场上可得到的工作岗位数量不足以为每个想工作的人提供工作而引起的失业。解释较长的失业持续时间。当工资由于某些原因高于使供求均衡的水平时，就产生了这种失业。高于均衡工资的三个可能原因：最低工资法、工会和效率工资。</li><li>工会：与雇主就工资和工作条件进行谈判的工人协会。工会通过集体谈判和罢工，将工资提高得超过均衡水平，从而使就业的局内人得到好处，没有就业的局外人承受损失。工会的存在既有提高工资，造成资源配置低效率的一面；也有保护工人利益，形成乐观有效的工人队伍的一面。</li></ul></li><li>了解最低工资法是如何造成古典性失业的；</li><li>了解效率工资理论。<ul><li>效率工资：企业为了提高工人生产率而支付的高于均衡水平的工资。效率工资高于均衡水平，它在增加企业成本的同时，也提高了效率；而且高效率的收益大于工资成本的上升。效率工资有利于工人的健康，降低工人的流动性，提高工人的努力程度，可以选择高素质的工人。</li></ul></li></ul><h4 id="货币制度"><a href="#货币制度" class="headerlink" title="货币制度"></a>货币制度</h4><ul><li>理解货币的含义和货币的三项职能；<ul><li>货币：经济中人们经常用于向其他人购买物品与劳务的一组资产。</li><li>货币的三种职能：交换媒介、计价单位和价值储藏。</li><li>交换媒介：当买者在购买物品与劳务时给予卖者的东西</li><li>计价单位：人们用来表示价格和记录债务的标准</li><li>价值储藏：人们可以用来把现在的购买力转变为未来的购买力的东西</li><li>流动性：一种资产可以兑换为经济中交换媒介的容易程度。货币是最具流动性的资产。</li><li>商品货币：以有内在价值的商品为形式的货币。（黄金、香烟）</li><li>法定货币：没有内在价值、由政府法令而作为通货使用的货币。（纸币美元）</li><li>美国经济中的货币主要有现金和支票。信用卡不包括在货币量的所有衡量中，结算卡上的账户余额包括在货币量的衡量中。</li><li>现金：公众手中持有的纸币钞票和铸币</li><li>活期存款：储户可以随时开支票的银行账户余额</li></ul></li><li>理解货币的创造过程与乘数效应，并能计算货币乘数与货币供给量；<ul><li>准备金：银行得到但没有贷出去的存款。</li><li>准备率：银行作为准备金持有的存款比例。美联储规定银行持有的准备金量的最低水平，称为法定准备金率。银行可以持有高于法定最低量的准备金，称为超额准备金。</li><li>货币乘数：银行体系用 1 美元准备金所产生的货币量。是准备率的倒数 M = 1/R，所以银行创造多少货币量取决于准备率。</li></ul></li><li>了解美联储管理货币供给的三个主要工具：公开市场活动、准备金率、贴现率 。<ul><li>中央银行：为了监督银行体系和调节经济中货币量而设计的机构。</li><li>公开市场活动：美联储买卖美国政府债券。是最常用的货币政策工具。中央银行高价买进国债，收益率下降，货币供给量增加，利率下降；反之中央银行低价卖出国债，利率上升，货币供给量减少。</li><li>法定准备金：关于银行必须根据其存款持有的最低准备金量的规定。在繁荣时期，提高准备金率，货币乘数缩小，货币供给减少，可以防止经济的过热；在萧条时期，降低准备率，货币乘数扩大，货币供给增加，可以促使经济回暖。其长处是作用速度快，影响所有有关金融机构，有明确的告示效应。其短处则是作用效果太强烈，无法经常灵活地逆向调控。</li><li>贴现率：美联储向银行发放贷款的利率。中央银行提高贴现率，减少基础货币供给，提高利率，抽紧银根；反之，增加基础货币供给，降低利率，放松银根。所以，再贴现也有明显的告示效应，公众可以从再贴率的变化判断中央银行政策意图倾向，但有被误导的可能。</li></ul></li></ul><h4 id="货币增长与通货膨胀"><a href="#货币增长与通货膨胀" class="headerlink" title="货币增长与通货膨胀"></a>货币增长与通货膨胀</h4><ul><li>掌握货币流通速度、货币数量论、货币中性、费雪效应、通货膨胀税、皮鞋成本、菜单成本等概念；<ul><li>名义变量：按货币单位衡量的变量（物价水平、美元工资、名义 GDP）</li><li>实际变量：按实物单位衡量的变量（生产、就业、实际工资、实际利率、实际 GDP）</li><li>古典二分法：名义和实际变量的理论区分</li><li>货币中性：认为货币供给变动并不影响实际变量的观点。（适用于长期经济。在短期中，货币变动对实际变量有重要影响。）</li><li>货币流通速度：货币易手的速度，指货币在一定时期内完成交易的次数 V =（P × Y）/M</li><li>货币数量论：一种理论，认为可得到的货币量决定物价水平，可得到的货币量增长率决定通货膨胀率。</li><li>货币数量方程式：货币数量（M）乘货币流通速度（V）等于产品价格（P）（GDP 平减指数）乘产量（Y）（实际 GFP）M × V = P × Y</li><li>货币数量论的本质：<ol><li>货币流通速度比较稳定；</li><li>由于货币流通速度稳定，货币数量变动引起名义产值（P×Y）同比例变动；</li><li>货币是中性的，货币不影响实际产量（Y）；</li><li>货币变动将反映在价格水平（P）上；</li><li>货币供给过多将引起通货膨胀。</li></ol></li><li>通货膨胀税：政府多印货币造成通货膨胀，实际上是以减少货币价值的方式增加政府收入，也就是向所有的货币持有人征收额外的税。</li></ul></li><li>注意名义利率和实际利率的区别；<ul><li>因为 实际利率 = 名义利率 - 通货膨胀率</li><li>所以 名义利率 = 实际利率 + 通货膨胀率</li><li>货币在长期中为中性的，货币增长的变动不会影响实际利率，这就决定了通货膨胀将导致名义利率上升，这就是费雪效应。费雪效应的分析具有长期正确性。而在通货膨胀不可预料的短期中，费雪效应是不成立的。确切地说，费雪效应表明名义利率根据预期的通货膨胀调整。长期中预期通货膨胀随实际通货膨胀而变动，但短期中不一定。</li></ul></li><li>理解古典通货膨胀理论和数量方程式；<ul><li>古典通货膨胀理论：物价水平与货币价值反方向变动，物价越高就是货币价值越低。在长期中，物价水平要调节到货币供给与货币需求相等的均衡位置，如果物价高于（货币价值低于）均衡水平，人们将减少商品购买，他们期望持有的货币大于央行发行的货币，物价将会回落；如果物价低于（货币价值高于）均衡水平，人们将增加商品购买，他们期望持有的货币将小于央行发行的货币，物价相应回升。</li></ul></li><li>理解通货膨胀的代价<ol><li>造成工人的损失：通货膨胀未必降低实际购买力，因为在货币购买力下降的同时，人们的工资也增加了。但如果工资的调整滞后于通货膨胀，它还是会造成工人的损失。</li><li>皮鞋成本：当通货膨胀鼓励人们减少货币持有量时所浪费的资源。</li><li>菜单成本：改变价格的成本</li><li>价格扭曲误导资源配置：通胀造成商品的价格不完全反映商品的效用，而为产品对通胀的灵敏度为转移。从而使得资源从效用高，但对通胀灵敏度低的产业进入效用低，但对通胀灵敏度高的产业，造成资源配置实现的社会满足低于没有通胀时的同等情况。</li><li>税收扭曲提高税负：政府按照名义收入征税，而不管通胀造成实际收入减少，这就加重按实际收入计算的税赋。高税收降低利息受益，遏制储蓄。指数化是解决问题的方法，却未必总是有效。</li><li>造成价值尺度的紊乱：货币是价值尺度，尺度不准将导致对经济活动评价的紊乱。通货膨胀造成不同时期的货币具有不同的价值，所以难比较企业不同时期的真实收益、成本和利润。</li><li>没有预期到的通胀扭曲财富再分配：没有预期到的通胀有利于借款人，不利于贷款人；有利于债务人，不利于债权人；有利于老板，不利于员工；有利于政府，不利于公众。</li></ol></li><li>轻微的通胀可以推动经济增长，严重的通胀则会扭曲价格信号，甚至使货币失去应有的功能。</li></ul><h4 id="开放经济学"><a href="#开放经济学" class="headerlink" title="开放经济学"></a>开放经济学</h4><ul><li>掌握资本净流出、净出口、名义汇率和实际汇率、购买力平价等基本概念<ul><li>封闭经济：不与世界其他经济进行交易的经济。</li><li>开放经济：自由地与世界其他经济进行交易的经济。</li><li>净出口：一国的出口值减进口值，又称贸易余额。</li><li>贸易盈余：出口大于进口；贸易赤字：进口大于出口；平衡的贸易：出口等于进口。</li><li>影响进出口的因素：消费者的嗜好，国内外产品的比价、汇率的高低及其变动，消费者的收入，产品的运送成本，政府的政策等。</li><li>资本净流出：本国居民购买到的外国资产（股票债券）减外国人购买的国内资产。</li><li>影响资本净流出的因素：国内外资产得到的实际利率的差别，持有国外资产的经济与政治风险，影响外国拥有本国资产的政府政策。</li></ul></li><li><p>理解资本净流出与净出口之间的恒等关系；</p><ul><li>净出口衡量一国出口与其进口之间的不平衡；资本净流出衡量本国居民购买的外国资产量与外国人购买的国内资产量之间的不平衡。对整个经济而言，这两种不平衡必然相互抵消，资本净流出（NCO）总等于净出口（NX）：NCO = NX</li><li>因为一国出口增加，收入外汇，只有买入外国资产，才能实现一国经济的均衡。这就表明净出口增加并非就是净资本流出，而是实现经济均衡要求净资本流出增加。</li><li>净出口形成对本国货币的需求，因为外国需要本国货币购买本国出口商品；资本净流出形成本币供给，因为本币需要换成外币，购买外国资产。此二者相等为本币在国际市场的均衡，如果不等，则通过汇率变动，实现这两者的相等。</li><li>当 NCO &lt; NX 资本净流出小于商品净出口表明本国货币的外流小于外国对本国货币的需求，本币汇率上升，遏制商品净出口，刺激资本外流，使得这两者相等。</li><li>Y = C + I + G + NX → Y - C - G = I + NX → S = I + NX</li><li>因为净出口 NX 等于国外净投资，所以 S = I + NCO 储蓄 = 国内投资 + 资本净流出</li><li><p>在封闭经济中，没有资本净流出，储蓄就等于国内投资。</p><p>| 贸易赤字       | 贸易平衡       | 贸易盈余       |<br>| :——————- | ——————— | ——————— |<br>| 出口 &lt; 进口    | 出口 = 进口    | 出口 &gt; 进口    |<br>| 净出口 &lt; 0     | 净出口 = 0     | 净出口 &gt; 0     |<br>| Y &lt; C + I + G  | Y = C + I + G  | Y &gt; C + I + G  |<br>| 储蓄 &lt; 投资    | 储蓄 = 投资    | 储蓄 &gt; 投资    |<br>| 资本净流出 &lt; 0 | 资本净流出 = 0 | 资本净流出 &gt; 0 |</p></li></ul></li><li><p>运用名义汇率和实际汇率的联系分析货币供给、价格变动对汇率的影响。</p><ul><li>名义汇率：两种货币的交换比率</li><li>升值：该国货币可以买到更多的外国货币；反之则是贬值。</li><li>实际汇率：两国货币在两个国家可以购买到的商品和劳务的比例。</li><li>实际汇率 =（名义汇率 × 国内价格）÷ 国外价格</li><li>用美国国一篮子物品和劳务的物价指数（P）,国外一篮子物品和劳务物价指数（P-）以及美元和外国通货之间的名义汇率（e），可以得出美国与其他国家之间的总体实际汇率：实际汇率=（ e × P ）/ P-</li><li>这个实际汇率衡量国内得到的一篮子物品与劳务相对于国外得到的一篮子物品与劳务的价格。一国的实际汇率是其物品与劳务净出口的关键决定因素。实际汇率贬值（下降）意味着相对于外国物品而言，美国物品变得便宜了，因此，净出口增加。</li><li>购买力平价：认为任何一单位通货应该能在所有国家买到等量物品，即有相同的实际价值。根据单一价格规律得出。</li><li>单一价格规律：一种物品在所有地方都应该按同样的价格出售，否则就有未被利用的利润机会。</li><li>假设 P 是美国一篮子物品的价格，用美元计价，P + 是日本一篮子物品的价格，用日元衡量，而 e 是名义汇率，1 美元可以购买日元的数量。考虑 1 美元可以在国内与国外购买的物品数量。在国内，物价水平是 P，因此 1 美元的国内购买力为 1 / P。在国外，1 美元可以换到 e 单位外国货币，外国货币的购买力为 e / P + 。由于两国 1 美元的购买力相同，所以情况应该是 1 / P= e / + → 1= eP / P + （右边是实际汇率）</li><li>如果美元购买力在国内外相同，那么实际汇率——国内外物品的相对价格——就保持不变。</li><li>名义汇率 e = P +/ P 等于外国物价水平与国内物价水平的比率，根据购买力平价理论，两国通货之间的名义汇率必然反映两国物价水平的差别。这就是说，如果一国增发货币导致通货膨胀，它对全世界货币的购买力也相对下降了。</li><li>可贷资金市场 S = I + NCO 储蓄 = 国内投资 + 资本净流出</li><li>供给来自国民储蓄，需求来自国内投资和资本净流出。可贷资金的供给量和需求量取决于实际利率。在均衡利率时，人们储蓄的量正好与合意的国内投资与资本净流出量平衡。实际利率还决定资本净流出。</li><li>外汇市场 NCO = N <code>x</code> 资本净流出 = 净出口</li><li>供给来自资本净流出，需求来自净出口。使外汇市场供求平衡的价格是实际汇率。实际汇率是国内与国外物品的相对价格，是净出口的关键决定因素。当美元实际汇率升值，美国净出口减少，减少了外汇市场上美元的需求量。</li></ul></li><li>在均衡的实际汇率时，外国人由美国物品与劳务净出口所引起的美元需求正好与美国人由美国资本净流出所引起的美元供给相平衡。</li></ul><h4 id="总供给和总需求"><a href="#总供给和总需求" class="headerlink" title="总供给和总需求"></a>总供给和总需求</h4><ul><li>理解造成总需求曲线向下倾斜的三个效应：财富效应、利率效应和汇率效应；<ul><li>衰退：实际收入下降和失业增加的时期。</li><li>萧条：严重的衰退。</li><li>古典理论描述长期世界，并不描述短期世界。</li><li>长期：根据古典二分法和货币中性，货币供给的变动影响物价和其他名义变量，但并不影响实际 GDP、失业以及其他实际变量。</li><li>短期：实际与名义变量高度相关，货币供给的变动可以暂时地使产量背离其长期趋势。</li><li>总需求曲线向右下方倾斜的原因：Y = C + I + G + NX<ol><li>财富效应：物价水平下降使货币更值钱，消费者更富裕，这又鼓励他们更多地支出。消费支出增加意味着物品与劳务需求量更大。</li><li>利率效应：物价水平下降，需要持有的货币量减少，家庭努力把自己的一些货币换为有利息的资产，所以利率下降，鼓励了更多地支出于投资物品，从而增加了物品与劳务的需求量。</li><li>汇率效应：当美国物价水平下降引起美国利率下降时，实际汇率贬值；这种贬值刺激了美国的净出口，从而增加了物品与劳务的需求量。</li></ol></li></ul></li><li>理解短期总供给曲线向上倾斜的三种理论：粘性工资、粘性价格、错觉理论。<ul><li>供给曲线：长期中是垂线；短期中向右上方倾斜。</li><li>在长期中，一个经济的物品与劳务供给取决于它的资本、劳动和自然资源的供给，以及生产技术。由于物价水平不影响这些实际 GDP 的长期决定因素，所以长期供给曲线是一条垂线。意味着产量（实际变量）不取决于物价水平（名义变量）。它所决定的产量水平称为自然产量率，因为它表明当失业为其自然率或正常率时经济的产量。自然产量率是长期中经济所趋向的生产水平。</li><li>短期总供给曲线向右上方倾斜的原因：<ol><li>粘性工资理论：如果物价水平 P 降到低于预期的水平而名义工资仍然滞留在 W 上，那么，实际工资 W/P 就会上升到企业计划支付的水平之上，企业的实际成本增加了，则企业减少物品与劳务的供给量。</li><li>粘性价格理论：由于并不是所有价格都根据变动的状况而迅速调整，未预料到的物价水平下降使一些企业的价格高于合意水平，而这些高于合意水平的价格压低了销售，并引起企业减少他们生产的物品与劳务的量。</li><li>错觉理论：低物价水平引起相对价格下降的错觉，而且这种错觉引起供给者对较低物价水平的反应是减少物品与劳务的供给量。</li></ol></li><li>所有这三个理论都表明，当物价水平背离了人们预期的物价水平时，供给量就背离了其长期水平或“自然”水平。当物价水平高于预期水平时，产量就高于其自然率；当物价水平低于其预期水平时，产量就低于其自然率。</li><li>产量的供给量 = 自然产量率 + a (实际物价水平 - 预期的物价水平)</li><li>a 是决定产量对物价水平未预期到的变动作出多大反应的数字。</li></ul></li></ul><h4 id="货币政策和财政政策对总需求的影响"><a href="#货币政策和财政政策对总需求的影响" class="headerlink" title="货币政策和财政政策对总需求的影响"></a>货币政策和财政政策对总需求的影响</h4><ul><li>运用流动偏好理论分析短期内价格上升对利率的影响<ul><li>流动偏好理论：凯恩斯的理论，认为利率的调整使货币供给与货币需求平衡。</li><li>货币供给：美联储通过公开市场买卖国债，变动准备金率和再贴现率影响货币供给，但是，这种变动不受利率影响，所以货币供给曲线是条垂线。</li><li>货币需求：货币需求曲线向右下方倾斜，表明利率下降，持币的机会成本也下降，所以货币需求增加。</li><li>货币市场均衡：货币供给大于货币需求，公众买入国债，国债价格上升，利率下降；货币供给小于货币需求，公众卖出国债，国债价格下跌，利率上升。在货币供给等于货币需求时，利率实现均衡。</li></ul></li><li>运用流动偏好理论理解美联储运用三个主要工具时对货币供给和市场利率的影响；<ul><li>当美联储增加了货币供给时，它降低了利率，增加了物价水平为既定时的物品与劳务需求量，使总需求曲线向右移动。流动偏好理论说明：既可以根据货币供给，也可以根据利率来描述货币政策。</li></ul></li><li>理解政府购买增加引起的乘数效应与边际消费倾向（MPC）的关联性；</li><li>理解财政政策和货币政策对总需求的影响，例如，扩张性的财政政策引起总需求趋向如何移动？<ul><li>财政政策：指政府对政府购买或税收总水平的选择。在长期中影响储蓄、投资和增长；在长期中，影响物品与劳务的总需求。</li><li>乘数效应：当扩张性财政政策增加了收入，从而增加了消费支出时引起的总需求的额外移动。</li><li>边际消费倾向（MPC）：家庭额外收入中用于消费而不用于储蓄的比例。</li><li>乘数 = 1/（1 - MPC）表示每 1 美元政府购买所引起的物品与劳务的需求。</li><li>乘数普遍存在所有的政府购买、消费、投资和进出口收支中，也就是支出增加，国民收入乘数增加，支出减少，国民收入乘数减少。</li><li>挤出效应：当扩张性财政政策引起利率上升，从而减少了投资支出时所引起的总需求减少。挤出效应部分抵消了政府购买对总需求的影响。根据乘数效应与挤出效应的大小，总需求曲线的移动可以大于或小于引起它的政府购买的变动。</li></ul></li><li>掌握乘数效应、挤出效应、自动稳定器、转移支付等概念；<ul><li>自动稳定器：当经济进入衰退时，决策者不用采取任何有意的行动也会刺激总需求的财政政策变动。主要是累进所得税和转移支付，它表现为在经济繁荣的时候，自动增加财政税收，减少支出，遏制社会总需求；反之，在经济萧条的时候，自动减少税收，增加支出，刺激社会总需求，从而使过热的经济降温，过冷的经济升温，国民经济因此而处于相对稳定的状态，这就是财政收支的“自动稳定器”。但是,“自动稳定器”的作用是有限的，所以政府还是要实行积极的财政政策。</li></ul></li></ul><h4 id="通货膨胀与失业之间的短期权衡取舍"><a href="#通货膨胀与失业之间的短期权衡取舍" class="headerlink" title="通货膨胀与失业之间的短期权衡取舍"></a>通货膨胀与失业之间的短期权衡取舍</h4><ul><li>掌握菲利普斯曲线、理性预期等概念<ul><li>菲利普斯曲线：一条表示通货膨胀与失业之间短期交替关系的曲线。</li><li>长期的菲利普斯曲线是条垂线，因为长期中总供给曲线为实际经济变量所决定，产出不能增加，就业也就增加不了，总需求的增加只能表现在价格的上升上。</li><li>预期的通货膨胀：衡量人们预期物价总水平的变动幅度。是决定短期总供给曲线位置的一个因素。</li></ul></li><li>失业和通货膨胀的关系：<ul><li>凯恩斯学派认为，失业与通货膨胀之间存在着替代关系，菲里普斯曲线向右下方倾斜，因为货币供给增加，利率下降，企业的边际成本下降，企业家扩大生产规模，就业增加，所以政府可以以增加货币供给的方式降低失业率。</li><li>货币主义者认为，公众只有在短期中存在“货币幻觉”，长期中，他们会意识到自己的实际收入随物价的上涨而下跌，所以要求增加工资，企业家就会缩小生产规模，实际失业还要回到“自然失业率” 水平上，菲里普斯曲线在短期中是条斜线，而在长期中则是条垂线，货币供给增加只会造成物价的上涨。</li><li>失业率 = 自然失业率 - a（实际通胀率 - 预期通胀率）</li></ul></li><li>自然率假说：弗里德曼认为无论通胀如何，失业率都要回到自然率水平上。也就是说，在长期中，失业和通胀之间没有替代关系。</li><li>理解预期变化、供给冲击和紧缩性货币政策影响菲利普斯曲线移动的机理；</li><li>理解短期菲利普斯曲线与长期菲利普斯曲线的关系；</li><li>理解理性预期理论下的菲利普斯曲线变化。<ul><li>供给冲击：直接改变企业的成本和价格，使经济的总供给曲线移动，进而使菲利普斯曲线移动的事件。例如，石油涨价等造成生产成本上升，总供给曲线向左移动，菲利普斯曲线相应向向右移动，表明在同样通胀的水平上，失业增加了，或者在同样失业水平上，通胀严重了。</li><li>牺牲率：在通货膨胀减少 1%的过程中每年产量损失的百分比。</li><li>如果一个经济要降低通货膨胀，它就必然忍受一个高失业和低产量的时期。</li><li>理性预期：当人们预期未来时，可以最好地利用他们拥有的所有信息，包括有关政府政策的信息。</li><li>预期通货膨胀是解释为什么短期中存在通货膨胀与失业之间的权衡取舍而长期中不存在的一个重要变量。短期权衡取舍消失的速度取决于预期调整的速度。如果政府做出来降低通货膨胀政策的可信承诺，人们的理性就足以立即降低通货膨胀预期。短期菲利普斯曲线向下移动，而且经济将很快达到低通货膨胀，并没有暂时高失业和低产量的代价。</li></ul></li></ul><h4 id="宏观经济政策的五个争论问题"><a href="#宏观经济政策的五个争论问题" class="headerlink" title="宏观经济政策的五个争论问题"></a>宏观经济政策的五个争论问题</h4><ul><li><p>熟悉宏观经济有关五个争论问题的支持与反对观点的主要内容。</p><ol><li>决策目标是否应该稳定经济<ul><li>主张稳定经济的认为失业和通胀都会造成资源浪费，各类经济指标下降，增加人们的苦难，所以政府应该努力稳定经济；反对者认为政策的实施有时滞，从而可能使正确的政策在错误的时间发生作用，不是稳定经济，而是加剧经济的波动。</li></ul></li><li><p>应该实行规则还是权变的货币政策</p><ul><li>主张实行权变货币政策认为经济运行时不稳定的，所以政策的实施影响及形势。</li><li>反对者认为要约束政策的制定者，以免受政治周期的干扰；政策的宣布与执行的时间的不一致性，提高通胀预期，加剧物价的不稳。所以不管经济如何，货币供给量都应是经济增长率和物价上涨率之和。</li></ul></li><li><p>央行是否应该以零通胀为目标</p><ul><li>主张央行以零通胀为目标的认为在温和通胀的时期，通胀的成本比较低；只要采取取信于公众的零通胀政策，人们的通胀预期也会下降，降低通胀的所增加的失业也会减少；零通胀可以提供比任何其他数字更为合理，且不会因为操作困难而上升的基点。</li><li>反对者认为，零通胀的代价太大，越接近零，失业的增长越快，所以应选择温和的通胀。</li></ul></li><li><p>财政是否应该平衡预算</p><ul><li>主张财政应减少债务的人认为，债务最终会增加后代的负担；负储蓄会提高利率，对经济产生不良影响。只有在战争和衰退时期，才可以有较多的赤字。</li><li>反对者认为，相对人一生的收入，上代人的债务毕竟是有限的；债务要与支出结合起来考虑，有足够回报的债务不会有负面影响，不敢承担有足够回报的债务反而有负面影响。</li></ul></li><li><p>是否应该为鼓励储蓄而修改税法</p><ul><li><p>主张为鼓励储蓄而修改税法的人认为降低税率可以提高储蓄，从而不利于投资和未来的繁荣。</p></li><li><p>反对者认为，降低税率会加剧社会的贫富不均，因为储蓄缺乏利率弹性，降低资本收入税可能使富人更富。减税增加政府赤字的负面影响还可能大于增加储蓄的正面影响。</p></li></ul></li></ol></li><li>五大争论小结：<ul><li>经济具有不稳定性，需要政府进行干预，但是管理层对未来预期的能力是有限的，所以干预的结果可能造成经济更大的波动。</li><li>规则的货币政策可以避免相机抉择带来的判断失误、滥用权力等问题，但是，它也使调控失去灵活性。</li><li>零通胀可以免除通胀的成本，但是它的成本也很高。且温和的通胀的成本是有限的，还能推动经济增长。</li><li>平衡预算可以实现代际间的公平，避免下一代承受过高的税负。但是，却不能享有财政赤字对经济的积极作用。</li><li>修改税法，刺激储蓄可以推动经济发展，但是却可能有利于富人，且对私人储蓄的影响不如直接增加公共储蓄。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 慕课MOOC </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
